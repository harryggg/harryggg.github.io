var resultJson = [{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"blaqkrow"},"content":"        String defaultConfigAsString \u003d \"App title : ConnectUs\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":31,"blaqkrow":1}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_PREFIX;"},{"lineNumber":9,"author":{"gitID":"blaqkrow"},"content":"//import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_SUFFIX;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":29,"author":{"gitID":"blaqkrow"},"content":"        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0), 0);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void display() throws Exception {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // associated web page of a person"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        URL expectedPersonUrl \u003d new URL(GOOGLE_SEARCH_URL_PREFIX"},{"lineNumber":46,"author":{"gitID":"blaqkrow"},"content":"                + ALICE.getAddress().toString().replaceAll(\" \", \"+\"));"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":49,"author":{"gitID":"blaqkrow"},"content":"        assertEquals(expectedPersonUrl.toString().substring(0, 43),"},{"lineNumber":50,"author":{"gitID":"blaqkrow"},"content":"                browserPanelHandle.getLoadedUrl().toString().substring(0, 43));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":47,"blaqkrow":5}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"blaqkrow"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"blaqkrow"},"content":"    //@@author blaqkrow"},{"lineNumber":37,"author":{"gitID":"blaqkrow"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"blaqkrow"},"content":"    public void execute_deleteCommandExecutionError_throwsCommandException() {"},{"lineNumber":39,"author":{"gitID":"blaqkrow"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":40,"author":{"gitID":"blaqkrow"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":41,"author":{"gitID":"blaqkrow"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":42,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"blaqkrow"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"blaqkrow"},"content":"    public void execute_emailCommandExecutionError_throwsCommandException() {"},{"lineNumber":45,"author":{"gitID":"blaqkrow"},"content":"        String emailCommand \u003d \"email 9\";"},{"lineNumber":46,"author":{"gitID":"blaqkrow"},"content":"        assertCommandException(emailCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":47,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"blaqkrow"},"content":"    //@@author"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        logic.getFilteredPersonList().remove(0);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     *      - {@code expectedModel}\u0027s address book was saved to the storage file."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":109,"author":{"gitID":"blaqkrow"},"content":"        } catch (CommandException | ParseException | IOException e) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":125,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":127,"author":{"gitID":"blaqkrow"},"content":"        } catch (ParseException | CommandException | IOException e) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":114,"blaqkrow":17}},{"path":"src/test/java/seedu/address/logic/parser/TagCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.logic.commands.TagCommand;"},{"lineNumber":12,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":14,"author":{"gitID":"JasmineSee"},"content":"//@@author JasmineSee"},{"lineNumber":15,"author":{"gitID":"JasmineSee"},"content":"public class TagCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"JasmineSee"},"content":"    private TagCommandParser parser \u003d new TagCommandParser();"},{"lineNumber":17,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":18,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"JasmineSee"},"content":"    public void parse_validArgs_returnsTagCommand() {"},{"lineNumber":20,"author":{"gitID":"JasmineSee"},"content":"        TagCommand expectedTagCommand \u003d"},{"lineNumber":21,"author":{"gitID":"JasmineSee"},"content":"                new TagCommand(new TagContainsKeywordsPredicate(Arrays.asList(\"friends\", \"colleagues\")));"},{"lineNumber":22,"author":{"gitID":"JasmineSee"},"content":"        assertParseSuccess(parser, \"friends colleagues\", expectedTagCommand);"},{"lineNumber":23,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":25,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"JasmineSee"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"JasmineSee"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"JasmineSee"},"content":"}"}],"authorContributionMap":{"JasmineSee":19,"-":10}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"JasmineSee"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":30,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.logic.commands.RemoveTagCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":32,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.logic.commands.TagCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":37,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":38,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":65,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":74,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":88,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"JasmineSee"},"content":"    public void parseCommand_tag() throws Exception {"},{"lineNumber":94,"author":{"gitID":"JasmineSee"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"friends\", \"colleagues\", \"family\");"},{"lineNumber":95,"author":{"gitID":"JasmineSee"},"content":"        TagCommand command \u003d (TagCommand) parser.parseCommand("},{"lineNumber":96,"author":{"gitID":"JasmineSee"},"content":"                TagCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":97,"author":{"gitID":"JasmineSee"},"content":"        assertEquals(new TagCommand(new TagContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":98,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":100,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"JasmineSee"},"content":"    public void parseCommand_removeTag() throws Exception {"},{"lineNumber":102,"author":{"gitID":"JasmineSee"},"content":"        ArrayList\u003cTag\u003e tagToRemove \u003d new ArrayList\u003c\u003e();"},{"lineNumber":103,"author":{"gitID":"JasmineSee"},"content":"        Tag tag1 \u003d new Tag(\"friends\");"},{"lineNumber":104,"author":{"gitID":"JasmineSee"},"content":"        Tag tag2 \u003d new Tag(\"colleagues\");"},{"lineNumber":105,"author":{"gitID":"JasmineSee"},"content":"        Tag tag3 \u003d new Tag(\"family\");"},{"lineNumber":106,"author":{"gitID":"JasmineSee"},"content":"        tagToRemove.add(tag1);"},{"lineNumber":107,"author":{"gitID":"JasmineSee"},"content":"        tagToRemove.add(tag2);"},{"lineNumber":108,"author":{"gitID":"JasmineSee"},"content":"        tagToRemove.add(tag3);"},{"lineNumber":109,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":110,"author":{"gitID":"JasmineSee"},"content":"        RemoveTagCommand command \u003d (RemoveTagCommand) parser.parseCommand("},{"lineNumber":111,"author":{"gitID":"JasmineSee"},"content":"                RemoveTagCommand.COMMAND_WORD + \" \" + \"friends colleagues family\");"},{"lineNumber":112,"author":{"gitID":"JasmineSee"},"content":"        assertEquals(new RemoveTagCommand(tagToRemove), command);"},{"lineNumber":113,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":143,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"JasmineSee":28,"-":144}},{"path":"src/test/java/seedu/address/logic/parser/ChangeThemeCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":7,"author":{"gitID":"JasmineSee"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":9,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":10,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":11,"author":{"gitID":"JasmineSee"},"content":"//@@author JasmineSee"},{"lineNumber":12,"author":{"gitID":"JasmineSee"},"content":"public class ChangeThemeCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"JasmineSee"},"content":"    private ChangeThemeCommandParser parser \u003d new ChangeThemeCommandParser();"},{"lineNumber":14,"author":{"gitID":"JasmineSee"},"content":"    private String validTheme \u003d \"white\";"},{"lineNumber":15,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":16,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"JasmineSee"},"content":"    public void parse_validArgs_returnsChangeThemeCommand() {"},{"lineNumber":18,"author":{"gitID":"JasmineSee"},"content":"        ChangeThemeCommand expectedThemeCommand \u003d"},{"lineNumber":19,"author":{"gitID":"JasmineSee"},"content":"                new ChangeThemeCommand(validTheme);"},{"lineNumber":20,"author":{"gitID":"JasmineSee"},"content":"        assertParseSuccess(parser, \"white\", expectedThemeCommand);"},{"lineNumber":21,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":23,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"JasmineSee"},"content":"    public void parse_invalidArgs_throwsParseException() { //checks for unavailable colour themes"},{"lineNumber":25,"author":{"gitID":"JasmineSee"},"content":"        assertParseFailure(parser, \"blue\","},{"lineNumber":26,"author":{"gitID":"JasmineSee"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeThemeCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":29,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"JasmineSee"},"content":"    public void parse_emptyString_throwsParseException() {"},{"lineNumber":31,"author":{"gitID":"JasmineSee"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeThemeCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"JasmineSee"},"content":"}"}],"authorContributionMap":{"JasmineSee":28,"-":5}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_PREFIX;"},{"lineNumber":8,"author":{"gitID":"blaqkrow"},"content":"//import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_SUFFIX;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":43,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":44,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":45,"author":{"gitID":"-"},"content":" */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initializeStage();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":111,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d getModel().getFilteredPersonList().size();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assert getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assert getPersonListPanel().getSelectedCardIndex() \u003d\u003d index.getZeroBased();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":185,"author":{"gitID":"blaqkrow"},"content":"        String selectedCardAddress \u003d getPersonListPanel().getHandleToSelectedCard().getAddress().toString();"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":188,"author":{"gitID":"blaqkrow"},"content":"            expectedUrl \u003d new URL(GOOGLE_SEARCH_URL_PREFIX + selectedCardAddress.replaceAll(\" \", \"+\"));"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"blaqkrow"},"content":"        assertEquals(expectedUrl.toString().substring(0, 42),"},{"lineNumber":193,"author":{"gitID":"blaqkrow"},"content":"                getBrowserPanel().getLoadedUrl().toString().substring(0, 42));"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":217,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":224,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":234,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":245,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":249,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":251,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":252,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":253,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":261,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":260,"blaqkrow":5}},{"path":"src/test/java/seedu/address/logic/parser/QrSmsCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"danielweide"},"content":"import seedu.address.logic.commands.QrSmsCommand;"},{"lineNumber":11,"author":{"gitID":"danielweide"},"content":"//@@author danielweide"},{"lineNumber":12,"author":{"gitID":"danielweide"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"danielweide"},"content":" * Test scope: similar to {@code QrCallCommandParserTest}."},{"lineNumber":14,"author":{"gitID":"danielweide"},"content":" * @see QrCallCommandParserTest"},{"lineNumber":15,"author":{"gitID":"danielweide"},"content":" */"},{"lineNumber":16,"author":{"gitID":"danielweide"},"content":"public class QrSmsCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":18,"author":{"gitID":"danielweide"},"content":"    private QrSmsCommandParser parser \u003d new QrSmsCommandParser();"},{"lineNumber":19,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":20,"author":{"gitID":"danielweide"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"danielweide"},"content":"    public void parse_validArgs_returnsQrSmsCommand() {"},{"lineNumber":22,"author":{"gitID":"danielweide"},"content":"        assertParseSuccess(parser, \"1\", new QrSmsCommand(INDEX_FIRST_PERSON));"},{"lineNumber":23,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":25,"author":{"gitID":"danielweide"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"danielweide"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"danielweide"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, QrSmsCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"danielweide"},"content":"}"}],"authorContributionMap":{"danielweide":20,"-":9}},{"path":"src/test/java/seedu/address/logic/parser/QrCallCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"danielweide"},"content":"import seedu.address.logic.commands.QrCallCommand;"},{"lineNumber":11,"author":{"gitID":"danielweide"},"content":"//@@author danielweide"},{"lineNumber":12,"author":{"gitID":"danielweide"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"danielweide"},"content":" * Test scope: similar to {@code SelectCommandParserTest}."},{"lineNumber":14,"author":{"gitID":"danielweide"},"content":" * @see SelectCommandParserTest"},{"lineNumber":15,"author":{"gitID":"danielweide"},"content":" */"},{"lineNumber":16,"author":{"gitID":"danielweide"},"content":"public class QrCallCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":18,"author":{"gitID":"danielweide"},"content":"    private QrCallCommandParser parser \u003d new QrCallCommandParser();"},{"lineNumber":19,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":20,"author":{"gitID":"danielweide"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"danielweide"},"content":"    public void parse_validArgs_returnsQrCallCommand() {"},{"lineNumber":22,"author":{"gitID":"danielweide"},"content":"        assertParseSuccess(parser, \"1\", new QrCallCommand(INDEX_FIRST_PERSON));"},{"lineNumber":23,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":25,"author":{"gitID":"danielweide"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"danielweide"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"danielweide"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, QrCallCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"danielweide"},"content":"}"}],"authorContributionMap":{"danielweide":20,"-":9}},{"path":"src/test/java/seedu/address/logic/parser/UploadPhotoCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"blaqkrow"},"content":"import seedu.address.logic.commands.UploadPhotoCommand;"},{"lineNumber":11,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":12,"author":{"gitID":"JasmineSee"},"content":"//@@author JasmineSee"},{"lineNumber":13,"author":{"gitID":"JasmineSee"},"content":"public class UploadPhotoCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"JasmineSee"},"content":"    private UploadPhotoCommandParser parser \u003d new UploadPhotoCommandParser();"},{"lineNumber":15,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":16,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"JasmineSee"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":18,"author":{"gitID":"JasmineSee"},"content":"        assertParseFailure(parser, \"asasd\","},{"lineNumber":19,"author":{"gitID":"JasmineSee"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, UploadPhotoCommand.MESSAGE_USAGE));"},{"lineNumber":20,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":22,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"JasmineSee"},"content":"    public void parse_validArgs_returnsUploadPhotoCommand() {"},{"lineNumber":24,"author":{"gitID":"JasmineSee"},"content":"        // valid index,no file path specified"},{"lineNumber":25,"author":{"gitID":"JasmineSee"},"content":"        UploadPhotoCommand expectedCommand \u003d new UploadPhotoCommand(INDEX_FIRST_PERSON, \"\");"},{"lineNumber":26,"author":{"gitID":"JasmineSee"},"content":"        assertParseSuccess(parser, \"1\", expectedCommand);"},{"lineNumber":27,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":28,"author":{"gitID":"JasmineSee"},"content":"        // valid index and file path"},{"lineNumber":29,"author":{"gitID":"JasmineSee"},"content":"        expectedCommand \u003d new UploadPhotoCommand(INDEX_FIRST_PERSON,"},{"lineNumber":30,"author":{"gitID":"JasmineSee"},"content":"                \".\\\\src\\\\test\\\\resources\\\\photos\\\\connectus_icon.png\");"},{"lineNumber":31,"author":{"gitID":"JasmineSee"},"content":"        assertParseSuccess(parser, \"1 .\\\\src\\\\test\\\\resources\\\\photos\\\\connectus_icon.png\", expectedCommand);"},{"lineNumber":32,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"JasmineSee"},"content":"}"}],"authorContributionMap":{"JasmineSee":23,"-":9,"blaqkrow":1}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":63,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":64,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        ReadOnlyPerson toAdd \u003d AMY;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":67,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // This test will fail is a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(ReadOnlyPerson)"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"JasmineSee"},"content":"        /* Case: add a person with all fields same as another person in the address book"},{"lineNumber":95,"author":{"gitID":"JasmineSee"},"content":"        except name and email -\u003e added */"},{"lineNumber":96,"author":{"gitID":"JasmineSee"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY)"},{"lineNumber":97,"author":{"gitID":"JasmineSee"},"content":"                .withEmail(\"amy1@example.com\").withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":98,"author":{"gitID":"JasmineSee"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY"},{"lineNumber":99,"author":{"gitID":"JasmineSee"},"content":"                + \" \" + PREFIX_EMAIL + \"amy1@example.com\" + ADDRESS_DESC_AMY"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"JasmineSee"},"content":"        /* Case: add a person with all fields same as another person in the address book"},{"lineNumber":104,"author":{"gitID":"JasmineSee"},"content":"        except phone and email -\u003e added */"},{"lineNumber":105,"author":{"gitID":"JasmineSee"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(\"amy2@example.com\")"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":107,"author":{"gitID":"JasmineSee"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB"},{"lineNumber":108,"author":{"gitID":"JasmineSee"},"content":"                + \" \" + PREFIX_EMAIL + \"amy2@example.com\" + ADDRESS_DESC_AMY"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"JasmineSee"},"content":"        /* Case: add a person with all fields same as another person in the address book"},{"lineNumber":120,"author":{"gitID":"JasmineSee"},"content":"        except address and email -\u003e added */"},{"lineNumber":121,"author":{"gitID":"JasmineSee"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(\"amy3@example.com\")"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":123,"author":{"gitID":"JasmineSee"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":124,"author":{"gitID":"JasmineSee"},"content":"                + \" \" + PREFIX_EMAIL + \"amy3@example.com\" + ADDRESS_DESC_BOB"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assert getModel().getFilteredPersonList().size()"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                \u003c getModel().getAddressBook().getPersonList().size();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":142,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assert getPersonListPanel().isAnyCardSelected();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":191,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and verifies that the command box displays"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * an empty string, the result display box displays the success message of executing {@code AddCommand} with the"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * details of {@code toAdd}, and the model related components equal to the current model added with {@code toAdd}."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class, the status bar\u0027s sync status changes,"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * the browser url and selected card remains unchanged."},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(ReadOnlyPerson toAdd) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(ReadOnlyPerson)}. Executes {@code command}"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(ReadOnlyPerson)"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, ReadOnlyPerson toAdd) {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, ReadOnlyPerson)} except that the result"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * display box displays {@code expectedResultMessage} and the model related components equal to"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * {@code expectedModel}."},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, ReadOnlyPerson)"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"JasmineSee":16,"-":242}},{"path":"src/test/java/seedu/address/logic/parser/RemoveTagCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":7,"author":{"gitID":"JasmineSee"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":9,"author":{"gitID":"JasmineSee"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":11,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.logic.commands.RemoveTagCommand;"},{"lineNumber":12,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":14,"author":{"gitID":"JasmineSee"},"content":"//@@author JasmineSee"},{"lineNumber":15,"author":{"gitID":"JasmineSee"},"content":"public class RemoveTagCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"JasmineSee"},"content":"    private RemoveTagCommandParser parser \u003d new RemoveTagCommandParser();"},{"lineNumber":17,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":18,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"JasmineSee"},"content":"    public void parse_validArgs_returnsRemoveTagCommand() throws Exception {"},{"lineNumber":20,"author":{"gitID":"JasmineSee"},"content":"        ArrayList\u003cTag\u003e tagToRemove \u003d new ArrayList\u003c\u003e();"},{"lineNumber":21,"author":{"gitID":"JasmineSee"},"content":"        tagToRemove.add(new Tag(\"friends\"));"},{"lineNumber":22,"author":{"gitID":"JasmineSee"},"content":"        tagToRemove.add(new Tag(\"colleagues\"));"},{"lineNumber":23,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":24,"author":{"gitID":"JasmineSee"},"content":"        RemoveTagCommand expectedRemoveTagCommand \u003d new RemoveTagCommand(tagToRemove);"},{"lineNumber":25,"author":{"gitID":"JasmineSee"},"content":"        assertParseSuccess(parser, \"friends colleagues\", expectedRemoveTagCommand);"},{"lineNumber":26,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":28,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"JasmineSee"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"JasmineSee"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveTagCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"JasmineSee"},"content":"}"}],"authorContributionMap":{"JasmineSee":27,"-":5}},{"path":"src/test/java/seedu/address/logic/commands/SortCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"limshunyong"},"content":"//@@author limshunyong"},{"lineNumber":17,"author":{"gitID":"limshunyong"},"content":"public class SortCommandTest {"},{"lineNumber":18,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":19,"author":{"gitID":"limshunyong"},"content":"    private LogicManager logic;"},{"lineNumber":20,"author":{"gitID":"limshunyong"},"content":"    private Model model;"},{"lineNumber":21,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":22,"author":{"gitID":"limshunyong"},"content":"    private Person alice \u003d new PersonBuilder().withName(\"Alice\").withEmail(\"alice@example.com\").build();"},{"lineNumber":23,"author":{"gitID":"limshunyong"},"content":"    private Person bob \u003d new PersonBuilder().withName(\"Bob\").withEmail(\"bob@example.com\").build();"},{"lineNumber":24,"author":{"gitID":"limshunyong"},"content":"    private Person charlie \u003d new PersonBuilder().withName(\"Charlie\").withEmail(\"charlie@example.com\").build();"},{"lineNumber":25,"author":{"gitID":"limshunyong"},"content":"    private Person zack \u003d new PersonBuilder().withName(\"Zack\").withEmail(\"zack@example.com\").build();"},{"lineNumber":26,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":27,"author":{"gitID":"limshunyong"},"content":"    @Before"},{"lineNumber":28,"author":{"gitID":"limshunyong"},"content":"    public void setup() throws Exception {"},{"lineNumber":29,"author":{"gitID":"limshunyong"},"content":"        AddressBook unsorted \u003d new AddressBook();"},{"lineNumber":30,"author":{"gitID":"limshunyong"},"content":"        unsorted.addPerson(charlie);"},{"lineNumber":31,"author":{"gitID":"limshunyong"},"content":"        unsorted.addPerson(bob);"},{"lineNumber":32,"author":{"gitID":"limshunyong"},"content":"        unsorted.addPerson(zack);"},{"lineNumber":33,"author":{"gitID":"limshunyong"},"content":"        unsorted.addPerson(alice);"},{"lineNumber":34,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":35,"author":{"gitID":"limshunyong"},"content":"        model \u003d new ModelManager(unsorted, new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"limshunyong"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":37,"author":{"gitID":"limshunyong"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":39,"author":{"gitID":"limshunyong"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"limshunyong"},"content":"    public void execute_sort_successful() throws Exception {"},{"lineNumber":41,"author":{"gitID":"limshunyong"},"content":"        AddressBook sorted \u003d new AddressBook();"},{"lineNumber":42,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":43,"author":{"gitID":"limshunyong"},"content":"        sorted.addPerson(alice);"},{"lineNumber":44,"author":{"gitID":"limshunyong"},"content":"        sorted.addPerson(bob);"},{"lineNumber":45,"author":{"gitID":"limshunyong"},"content":"        sorted.addPerson(charlie);"},{"lineNumber":46,"author":{"gitID":"limshunyong"},"content":"        sorted.addPerson(zack);"},{"lineNumber":47,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":48,"author":{"gitID":"limshunyong"},"content":"        CommandResult r \u003d logic.execute(\"sort\");"},{"lineNumber":49,"author":{"gitID":"limshunyong"},"content":"        assertEquals(SortCommand.MESSAGE_SUCCESS, r.feedbackToUser);"},{"lineNumber":50,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":51,"author":{"gitID":"limshunyong"},"content":"        assertEquals(sorted, model.getAddressBook());"},{"lineNumber":52,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":53,"author":{"gitID":"limshunyong"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"limshunyong"},"content":"}"}],"authorContributionMap":{"limshunyong":39,"-":15}},{"path":"src/test/java/systemtests/EmailCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"blaqkrow"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":6,"author":{"gitID":"blaqkrow"},"content":"//import static seedu.address.logic.commands.EmailCommand.MESSAGE_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"blaqkrow"},"content":"//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"blaqkrow"},"content":"import seedu.address.logic.commands.EmailCommand;"},{"lineNumber":14,"author":{"gitID":"blaqkrow"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"blaqkrow"},"content":"//@@author blaqkrow"},{"lineNumber":16,"author":{"gitID":"blaqkrow"},"content":"public class EmailCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":17,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":18,"author":{"gitID":"blaqkrow"},"content":"    private static final String MESSAGE_INVALID_EMAIL_COMMAND_FORMAT \u003d"},{"lineNumber":19,"author":{"gitID":"blaqkrow"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE);"},{"lineNumber":20,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":21,"author":{"gitID":"blaqkrow"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"blaqkrow"},"content":"    public void email() {"},{"lineNumber":23,"author":{"gitID":"blaqkrow"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":24,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":25,"author":{"gitID":"blaqkrow"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":26,"author":{"gitID":"blaqkrow"},"content":"        //        Model expectedModel \u003d getModel();"},{"lineNumber":27,"author":{"gitID":"blaqkrow"},"content":"        //        String command \u003d \"     \" + EmailCommand.COMMAND_WORD + \""},{"lineNumber":28,"author":{"gitID":"blaqkrow"},"content":"        // \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"},{"lineNumber":29,"author":{"gitID":"blaqkrow"},"content":"        //        String expectedResultMessage \u003d MESSAGE_SUCCESS;"},{"lineNumber":30,"author":{"gitID":"blaqkrow"},"content":"        //assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":31,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":32,"author":{"gitID":"blaqkrow"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":33,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":34,"author":{"gitID":"blaqkrow"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":35,"author":{"gitID":"blaqkrow"},"content":"        String command \u003d command \u003d EmailCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":36,"author":{"gitID":"blaqkrow"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_EMAIL_COMMAND_FORMAT);"},{"lineNumber":37,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":38,"author":{"gitID":"blaqkrow"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":39,"author":{"gitID":"blaqkrow"},"content":"        command \u003d EmailCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":40,"author":{"gitID":"blaqkrow"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_EMAIL_COMMAND_FORMAT);"},{"lineNumber":41,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":42,"author":{"gitID":"blaqkrow"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":43,"author":{"gitID":"blaqkrow"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":44,"author":{"gitID":"blaqkrow"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":45,"author":{"gitID":"blaqkrow"},"content":"        command \u003d EmailCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":46,"author":{"gitID":"blaqkrow"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":47,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":48,"author":{"gitID":"blaqkrow"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":49,"author":{"gitID":"blaqkrow"},"content":"        assertCommandFailure(EmailCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_EMAIL_COMMAND_FORMAT);"},{"lineNumber":50,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":51,"author":{"gitID":"blaqkrow"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":52,"author":{"gitID":"blaqkrow"},"content":"        assertCommandFailure(EmailCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_EMAIL_COMMAND_FORMAT);"},{"lineNumber":53,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":54,"author":{"gitID":"blaqkrow"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":55,"author":{"gitID":"blaqkrow"},"content":"        assertCommandFailure(\"EMaiL 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":56,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":58,"author":{"gitID":"blaqkrow"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"blaqkrow"},"content":"     * Removes the {@code ReadOnlyPerson} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":60,"author":{"gitID":"blaqkrow"},"content":"     * @return the removed person"},{"lineNumber":61,"author":{"gitID":"blaqkrow"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":63,"author":{"gitID":"blaqkrow"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"blaqkrow"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":65,"author":{"gitID":"blaqkrow"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":66,"author":{"gitID":"blaqkrow"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":67,"author":{"gitID":"blaqkrow"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":68,"author":{"gitID":"blaqkrow"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":69,"author":{"gitID":"blaqkrow"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":70,"author":{"gitID":"blaqkrow"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":71,"author":{"gitID":"blaqkrow"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":72,"author":{"gitID":"blaqkrow"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":73,"author":{"gitID":"blaqkrow"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":74,"author":{"gitID":"blaqkrow"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"blaqkrow"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":76,"author":{"gitID":"blaqkrow"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":77,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":79,"author":{"gitID":"blaqkrow"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"blaqkrow"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":81,"author":{"gitID":"blaqkrow"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":82,"author":{"gitID":"blaqkrow"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":83,"author":{"gitID":"blaqkrow"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":84,"author":{"gitID":"blaqkrow"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"blaqkrow"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":86,"author":{"gitID":"blaqkrow"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":87,"author":{"gitID":"blaqkrow"},"content":"        executeCommand(command);"},{"lineNumber":88,"author":{"gitID":"blaqkrow"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":89,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":90,"author":{"gitID":"blaqkrow"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":91,"author":{"gitID":"blaqkrow"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":92,"author":{"gitID":"blaqkrow"},"content":"        } else {"},{"lineNumber":93,"author":{"gitID":"blaqkrow"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":94,"author":{"gitID":"blaqkrow"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":96,"author":{"gitID":"blaqkrow"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":97,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":99,"author":{"gitID":"blaqkrow"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"blaqkrow"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":101,"author":{"gitID":"blaqkrow"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"blaqkrow"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"blaqkrow"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"blaqkrow"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"blaqkrow"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"blaqkrow"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":107,"author":{"gitID":"blaqkrow"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"blaqkrow"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":109,"author":{"gitID":"blaqkrow"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"blaqkrow"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":111,"author":{"gitID":"blaqkrow"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":112,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":113,"author":{"gitID":"blaqkrow"},"content":"        executeCommand(command);"},{"lineNumber":114,"author":{"gitID":"blaqkrow"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":115,"author":{"gitID":"blaqkrow"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":116,"author":{"gitID":"blaqkrow"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":117,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"blaqkrow"},"content":"}"}],"authorContributionMap":{"blaqkrow":111,"-":7}},{"path":"src/test/java/seedu/address/logic/commands/QrCallCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"JasmineSee"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":3,"author":{"gitID":"JasmineSee"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"JasmineSee"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":8,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":9,"author":{"gitID":"danielweide"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":11,"author":{"gitID":"danielweide"},"content":"//@@author danielweide"},{"lineNumber":12,"author":{"gitID":"danielweide"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"danielweide"},"content":" * Test For QrCallCommand for Equal Cases"},{"lineNumber":14,"author":{"gitID":"danielweide"},"content":" */"},{"lineNumber":15,"author":{"gitID":"danielweide"},"content":"public class QrCallCommandTest {"},{"lineNumber":16,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":17,"author":{"gitID":"danielweide"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"danielweide"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitID":"danielweide"},"content":"        QrCallCommand firstQrCallCommand \u003d new QrCallCommand(INDEX_FIRST_PERSON);"},{"lineNumber":20,"author":{"gitID":"danielweide"},"content":"        QrCallCommand secondQrCallCommand \u003d new QrCallCommand(INDEX_SECOND_PERSON);"},{"lineNumber":21,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":22,"author":{"gitID":"danielweide"},"content":"        // same object -\u003e returns true"},{"lineNumber":23,"author":{"gitID":"danielweide"},"content":"        assertTrue(firstQrCallCommand.equals(firstQrCallCommand));"},{"lineNumber":24,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":25,"author":{"gitID":"danielweide"},"content":"        // same values -\u003e returns true"},{"lineNumber":26,"author":{"gitID":"danielweide"},"content":"        QrCallCommand firstQrCallCommandCopy \u003d new QrCallCommand(INDEX_FIRST_PERSON);"},{"lineNumber":27,"author":{"gitID":"danielweide"},"content":"        assertTrue(firstQrCallCommand.equals(firstQrCallCommandCopy));"},{"lineNumber":28,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":29,"author":{"gitID":"danielweide"},"content":"        // different types -\u003e returns false"},{"lineNumber":30,"author":{"gitID":"danielweide"},"content":"        assertFalse(firstQrCallCommand.equals(1));"},{"lineNumber":31,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":32,"author":{"gitID":"danielweide"},"content":"        // null -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"danielweide"},"content":"        assertFalse(firstQrCallCommand.equals(null));"},{"lineNumber":34,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":35,"author":{"gitID":"danielweide"},"content":"        // different person -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"danielweide"},"content":"        assertFalse(firstQrCallCommand.equals(secondQrCallCommand));"},{"lineNumber":37,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"danielweide"},"content":"}"}],"authorContributionMap":{"danielweide":32,"JasmineSee":4,"-":2}},{"path":"src/test/java/seedu/address/logic/commands/QrSaveContactCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"JasmineSee"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":3,"author":{"gitID":"JasmineSee"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"JasmineSee"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":8,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":9,"author":{"gitID":"danielweide"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":11,"author":{"gitID":"danielweide"},"content":"//@@author danielweide"},{"lineNumber":12,"author":{"gitID":"danielweide"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"danielweide"},"content":" * Test For QrSaveContactCommand for Equal Cases"},{"lineNumber":14,"author":{"gitID":"danielweide"},"content":" */"},{"lineNumber":15,"author":{"gitID":"danielweide"},"content":"public class QrSaveContactCommandTest {"},{"lineNumber":16,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":17,"author":{"gitID":"danielweide"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"danielweide"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitID":"danielweide"},"content":"        QrSaveContactCommand firstQrSaveCommand \u003d new QrSaveContactCommand(INDEX_FIRST_PERSON);"},{"lineNumber":20,"author":{"gitID":"danielweide"},"content":"        QrSaveContactCommand secondQrSaveCommand \u003d new QrSaveContactCommand(INDEX_SECOND_PERSON);"},{"lineNumber":21,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":22,"author":{"gitID":"danielweide"},"content":"        // same object -\u003e returns true"},{"lineNumber":23,"author":{"gitID":"danielweide"},"content":"        assertTrue(firstQrSaveCommand.equals(firstQrSaveCommand));"},{"lineNumber":24,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":25,"author":{"gitID":"danielweide"},"content":"        // same values -\u003e returns true"},{"lineNumber":26,"author":{"gitID":"danielweide"},"content":"        QrSaveContactCommand firstQrSaveCommandCopy \u003d new QrSaveContactCommand(INDEX_FIRST_PERSON);"},{"lineNumber":27,"author":{"gitID":"danielweide"},"content":"        assertTrue(firstQrSaveCommand.equals(firstQrSaveCommandCopy));"},{"lineNumber":28,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":29,"author":{"gitID":"danielweide"},"content":"        // different types -\u003e returns false"},{"lineNumber":30,"author":{"gitID":"danielweide"},"content":"        assertFalse(firstQrSaveCommand.equals(1));"},{"lineNumber":31,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":32,"author":{"gitID":"danielweide"},"content":"        // null -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"danielweide"},"content":"        assertFalse(firstQrSaveCommand.equals(null));"},{"lineNumber":34,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":35,"author":{"gitID":"danielweide"},"content":"        // different person -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"danielweide"},"content":"        assertFalse(firstQrSaveCommand.equals(secondQrSaveCommand));"},{"lineNumber":37,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"danielweide"},"content":"}"}],"authorContributionMap":{"danielweide":32,"JasmineSee":4,"-":2}},{"path":"src/test/java/seedu/address/logic/parser/QrSaveContactCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"danielweide"},"content":"import seedu.address.logic.commands.QrSaveContactCommand;"},{"lineNumber":11,"author":{"gitID":"danielweide"},"content":"//@@author danielweide"},{"lineNumber":12,"author":{"gitID":"danielweide"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"danielweide"},"content":" * Test scope: similar to {@code QrSmsCommandParserTest}."},{"lineNumber":14,"author":{"gitID":"danielweide"},"content":" * @see QrSmsCommandParserTest"},{"lineNumber":15,"author":{"gitID":"danielweide"},"content":" */"},{"lineNumber":16,"author":{"gitID":"danielweide"},"content":"public class QrSaveContactCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":18,"author":{"gitID":"danielweide"},"content":"    private QrSaveContactCommandParser parser \u003d new QrSaveContactCommandParser();"},{"lineNumber":19,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":20,"author":{"gitID":"danielweide"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"danielweide"},"content":"    public void parse_validArgs_returnsQrSmsCommand() {"},{"lineNumber":22,"author":{"gitID":"danielweide"},"content":"        assertParseSuccess(parser, \"1\", new QrSaveContactCommand(INDEX_FIRST_PERSON));"},{"lineNumber":23,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":25,"author":{"gitID":"danielweide"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"danielweide"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"danielweide"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":28,"author":{"gitID":"danielweide"},"content":"                QrSaveContactCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"danielweide"},"content":"}"}],"authorContributionMap":{"danielweide":21,"-":9}},{"path":"src/test/java/seedu/address/logic/commands/QrGenSmsCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"JasmineSee"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":3,"author":{"gitID":"JasmineSee"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"JasmineSee"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":6,"author":{"gitID":"danielweide"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"danielweide"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":9,"author":{"gitID":"danielweide"},"content":"//@@author danielweide"},{"lineNumber":10,"author":{"gitID":"danielweide"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"danielweide"},"content":" * Test For QrCallCommand for Equal Cases"},{"lineNumber":12,"author":{"gitID":"danielweide"},"content":" */"},{"lineNumber":13,"author":{"gitID":"danielweide"},"content":"public class QrGenSmsCommandTest {"},{"lineNumber":14,"author":{"gitID":"danielweide"},"content":"    private String phoneNumberOne;"},{"lineNumber":15,"author":{"gitID":"danielweide"},"content":"    private String phoneNumberTwo;"},{"lineNumber":16,"author":{"gitID":"danielweide"},"content":"    private String nameOne;"},{"lineNumber":17,"author":{"gitID":"danielweide"},"content":"    private String nameTwo;"},{"lineNumber":18,"author":{"gitID":"danielweide"},"content":"    @Before"},{"lineNumber":19,"author":{"gitID":"danielweide"},"content":"    public void prepareCommand() {"},{"lineNumber":20,"author":{"gitID":"danielweide"},"content":"        phoneNumberOne \u003d \"91234567\";"},{"lineNumber":21,"author":{"gitID":"danielweide"},"content":"        phoneNumberTwo \u003d \"81234567\";"},{"lineNumber":22,"author":{"gitID":"danielweide"},"content":"        nameOne \u003d \"Daniel\";"},{"lineNumber":23,"author":{"gitID":"danielweide"},"content":"        nameTwo \u003d \"John\";"},{"lineNumber":24,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"danielweide"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"danielweide"},"content":"    public void linkCheck() {"},{"lineNumber":27,"author":{"gitID":"danielweide"},"content":"        QrGenSmsCommand genSmsCommand \u003d new QrGenSmsCommand();"},{"lineNumber":28,"author":{"gitID":"danielweide"},"content":"        String firstQrLink \u003d genSmsCommand.qrSms(phoneNumberOne, nameOne);"},{"lineNumber":29,"author":{"gitID":"danielweide"},"content":"        String secondQrLink \u003d genSmsCommand.qrSms(phoneNumberTwo, nameTwo);"},{"lineNumber":30,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":31,"author":{"gitID":"danielweide"},"content":"        // same object -\u003e returns true"},{"lineNumber":32,"author":{"gitID":"danielweide"},"content":"        assertTrue(firstQrLink.equals(firstQrLink));"},{"lineNumber":33,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":34,"author":{"gitID":"danielweide"},"content":"        // same values -\u003e returns true"},{"lineNumber":35,"author":{"gitID":"danielweide"},"content":"        String firstQrLinkCopy \u003d genSmsCommand.qrSms(phoneNumberOne, nameOne);"},{"lineNumber":36,"author":{"gitID":"danielweide"},"content":"        assertTrue(firstQrLink.equals(firstQrLinkCopy));"},{"lineNumber":37,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":38,"author":{"gitID":"danielweide"},"content":"        // different types -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"danielweide"},"content":"        assertFalse(firstQrLink.equals(1));"},{"lineNumber":40,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":41,"author":{"gitID":"danielweide"},"content":"        // null -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"danielweide"},"content":"        assertFalse(firstQrLink.equals(null));"},{"lineNumber":43,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":44,"author":{"gitID":"danielweide"},"content":"        // different link -\u003e returns false"},{"lineNumber":45,"author":{"gitID":"danielweide"},"content":"        assertFalse(firstQrLink.equals(secondQrLink));"},{"lineNumber":46,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"danielweide"},"content":"}"}],"authorContributionMap":{"danielweide":43,"JasmineSee":4}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":32,"author":{"gitID":"blaqkrow"},"content":"import seedu.address.ui.EditButton;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"blaqkrow"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"blaqkrow"},"content":"    public void testFormValidation() {"},{"lineNumber":43,"author":{"gitID":"blaqkrow"},"content":"        //Inputs all correct"},{"lineNumber":44,"author":{"gitID":"blaqkrow"},"content":"        assertTrue(EditButton.checkInput(\"Joshua\", \"90267500\","},{"lineNumber":45,"author":{"gitID":"blaqkrow"},"content":"                \"joshnfsmw@hotmail.com\", \"459, Pasir ris drive 4, #04-251\","},{"lineNumber":46,"author":{"gitID":"blaqkrow"},"content":"                \"friends,family,cool\").equals(EditButton.VALIDATION_SUCCESS));"},{"lineNumber":47,"author":{"gitID":"blaqkrow"},"content":"        //\",\" missing inbetween one of the tags"},{"lineNumber":48,"author":{"gitID":"blaqkrow"},"content":"        assertTrue(EditButton.checkInput(\"Ben Lim\", \"93234500\","},{"lineNumber":49,"author":{"gitID":"blaqkrow"},"content":"                \"benny1234@hotmail.com\", \"7772, Tampines Street 21, #03-551\", \"friends,colleagues\""},{"lineNumber":50,"author":{"gitID":"blaqkrow"},"content":"                        + \"best friend,\").equals(EditButton.TAG_ERROR));"},{"lineNumber":51,"author":{"gitID":"blaqkrow"},"content":"        //long phone number, wrong input"},{"lineNumber":52,"author":{"gitID":"blaqkrow"},"content":"        assertFalse(EditButton.checkInput(\"Ben Lim\", \"932393934500\","},{"lineNumber":53,"author":{"gitID":"blaqkrow"},"content":"                \"benny1234@hotmail.com\", \"7772, Tampines Street 21, #03-551\", \"friends,colleagues\""},{"lineNumber":54,"author":{"gitID":"blaqkrow"},"content":"                        + \",best friend,\").equals(EditButton.VALIDATION_SUCCESS));"},{"lineNumber":55,"author":{"gitID":"blaqkrow"},"content":"        //gibberish phone number"},{"lineNumber":56,"author":{"gitID":"blaqkrow"},"content":"        assertFalse(EditButton.checkInput(\"Ben Lim\", \"9cdmkcf934500\","},{"lineNumber":57,"author":{"gitID":"blaqkrow"},"content":"                \"benny1234@hotmail.com\", \"7772, Tampines Street 21, #03-551\", \"friends,colleagues\""},{"lineNumber":58,"author":{"gitID":"blaqkrow"},"content":"                        + \",best friend,\").equals(EditButton.VALIDATION_SUCCESS));"},{"lineNumber":59,"author":{"gitID":"blaqkrow"},"content":"        //invalid email, without \".com\""},{"lineNumber":60,"author":{"gitID":"blaqkrow"},"content":"        assertTrue(EditButton.checkInput(\"Ben Lim\", \"90267500\","},{"lineNumber":61,"author":{"gitID":"blaqkrow"},"content":"                \"benny1234@hotmail\", \"7772, Tampines Street 21, #03-551\", \"friends,colleagues\""},{"lineNumber":62,"author":{"gitID":"blaqkrow"},"content":"                        + \",best friend,\").equals(EditButton.EMAIL_ERROR));"},{"lineNumber":63,"author":{"gitID":"blaqkrow"},"content":"        //invalid input, empty name"},{"lineNumber":64,"author":{"gitID":"blaqkrow"},"content":"        assertTrue(EditButton.checkInput(\"\", \"90267500\","},{"lineNumber":65,"author":{"gitID":"blaqkrow"},"content":"                \"benny1234@hotmail.com\", \"7772, Tampines Street 21, #03-551\", \"friends,colleagues\""},{"lineNumber":66,"author":{"gitID":"blaqkrow"},"content":"                        + \",best friend,\").equals(EditButton.NAME_ERROR));"},{"lineNumber":67,"author":{"gitID":"blaqkrow"},"content":"        //valid input, however comparison to wrong case."},{"lineNumber":68,"author":{"gitID":"blaqkrow"},"content":"        assertFalse(EditButton.checkInput(\"Joshua Lim\", \"90267500\","},{"lineNumber":69,"author":{"gitID":"blaqkrow"},"content":"                \"benny1234@hotmail.com\", \"7772, Tampines Street 21, #03-551\", \"friends,colleagues\""},{"lineNumber":70,"author":{"gitID":"blaqkrow"},"content":"                        + \",best friend,\").equals(EditButton.EMAIL_ERROR));"},{"lineNumber":71,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        ReadOnlyPerson lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        ReadOnlyPerson editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        ReadOnlyPerson personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d new Person(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        ReadOnlyPerson personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    private EditCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        return editCommand;"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":184,"blaqkrow":32}},{"path":"src/test/java/seedu/address/logic/commands/QrGenCallCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"JasmineSee"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":3,"author":{"gitID":"JasmineSee"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"JasmineSee"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":6,"author":{"gitID":"danielweide"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"danielweide"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":9,"author":{"gitID":"danielweide"},"content":"//@@author danielweide"},{"lineNumber":10,"author":{"gitID":"danielweide"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"danielweide"},"content":" * Test For QrCallCommand for Equal Cases"},{"lineNumber":12,"author":{"gitID":"danielweide"},"content":" */"},{"lineNumber":13,"author":{"gitID":"danielweide"},"content":"public class QrGenCallCommandTest {"},{"lineNumber":14,"author":{"gitID":"danielweide"},"content":"    private String phoneNumberOne;"},{"lineNumber":15,"author":{"gitID":"danielweide"},"content":"    private String phoneNumberTwo;"},{"lineNumber":16,"author":{"gitID":"danielweide"},"content":"    @Before"},{"lineNumber":17,"author":{"gitID":"danielweide"},"content":"    public void prepareCommand() {"},{"lineNumber":18,"author":{"gitID":"danielweide"},"content":"        phoneNumberOne \u003d \"91234567\";"},{"lineNumber":19,"author":{"gitID":"danielweide"},"content":"        phoneNumberTwo \u003d \"81234567\";"},{"lineNumber":20,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"danielweide"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"danielweide"},"content":"    public void linkCheck() {"},{"lineNumber":23,"author":{"gitID":"danielweide"},"content":"        QrGenCallCommand genCallCommand \u003d new QrGenCallCommand();"},{"lineNumber":24,"author":{"gitID":"danielweide"},"content":"        String firstQrLink \u003d genCallCommand.qrCall(phoneNumberOne);"},{"lineNumber":25,"author":{"gitID":"danielweide"},"content":"        String secondQrLink \u003d genCallCommand.qrCall(phoneNumberTwo);"},{"lineNumber":26,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":27,"author":{"gitID":"danielweide"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"danielweide"},"content":"        assertTrue(firstQrLink.equals(firstQrLink));"},{"lineNumber":29,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":30,"author":{"gitID":"danielweide"},"content":"        // same values -\u003e returns true"},{"lineNumber":31,"author":{"gitID":"danielweide"},"content":"        String firstQrLinkCopy \u003d genCallCommand.qrCall(phoneNumberOne);"},{"lineNumber":32,"author":{"gitID":"danielweide"},"content":"        assertTrue(firstQrLink.equals(firstQrLinkCopy));"},{"lineNumber":33,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":34,"author":{"gitID":"danielweide"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"danielweide"},"content":"        assertFalse(firstQrLink.equals(1));"},{"lineNumber":36,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":37,"author":{"gitID":"danielweide"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"danielweide"},"content":"        assertFalse(firstQrLink.equals(null));"},{"lineNumber":39,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":40,"author":{"gitID":"danielweide"},"content":"        // different link -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"danielweide"},"content":"        assertFalse(firstQrLink.equals(secondQrLink));"},{"lineNumber":42,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"danielweide"},"content":"}"}],"authorContributionMap":{"danielweide":39,"JasmineSee":4}},{"path":"src/test/java/seedu/address/logic/commands/ImportCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":5,"author":{"gitID":"limshunyong"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitID":"limshunyong"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":8,"author":{"gitID":"limshunyong"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"limshunyong"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"limshunyong"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":24,"author":{"gitID":"limshunyong"},"content":"//@@author limshunyong"},{"lineNumber":25,"author":{"gitID":"limshunyong"},"content":"public class ImportCommandTest {"},{"lineNumber":26,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":27,"author":{"gitID":"limshunyong"},"content":"    private LogicManager logic;"},{"lineNumber":28,"author":{"gitID":"limshunyong"},"content":"    private Model model;"},{"lineNumber":29,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":30,"author":{"gitID":"limshunyong"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"limshunyong"},"content":"    public void setup() throws Exception {"},{"lineNumber":32,"author":{"gitID":"limshunyong"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":33,"author":{"gitID":"limshunyong"},"content":"        model \u003d new ModelManager(ab, new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"limshunyong"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":35,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":36,"author":{"gitID":"limshunyong"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":38,"author":{"gitID":"limshunyong"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"limshunyong"},"content":"    public void execute_import_fail() throws Exception {"},{"lineNumber":40,"author":{"gitID":"limshunyong"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":41,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":42,"author":{"gitID":"limshunyong"},"content":"        CommandResult r \u003d logic.execute(\"import wrongfilename.vcf\");"},{"lineNumber":43,"author":{"gitID":"limshunyong"},"content":"        assertEquals(ImportCommand.MESSAGE_FAILURE, r.feedbackToUser);"},{"lineNumber":44,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":45,"author":{"gitID":"limshunyong"},"content":"        // addressbook should be empty"},{"lineNumber":46,"author":{"gitID":"limshunyong"},"content":"        assertEquals(ab, model.getAddressBook());"},{"lineNumber":47,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":48,"author":{"gitID":"limshunyong"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":50,"author":{"gitID":"limshunyong"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"limshunyong"},"content":"    public void execute_import_success() throws Exception {"},{"lineNumber":52,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":53,"author":{"gitID":"limshunyong"},"content":"        AddressBook expected \u003d new AddressBook();"},{"lineNumber":54,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":55,"author":{"gitID":"limshunyong"},"content":"        Name name \u003d new Name(\"TestData\");"},{"lineNumber":56,"author":{"gitID":"limshunyong"},"content":"        Phone phone \u003d new Phone(\"11111111\");"},{"lineNumber":57,"author":{"gitID":"limshunyong"},"content":"        Email email \u003d new Email(\"testData@example.com\");"},{"lineNumber":58,"author":{"gitID":"limshunyong"},"content":"        Address address \u003d new Address(\"111 Test Data Road, Singapore(111111)\");"},{"lineNumber":59,"author":{"gitID":"limshunyong"},"content":"        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":60,"author":{"gitID":"limshunyong"},"content":"        ReadOnlyPerson p \u003d new Person(name, phone, email, address, tags);"},{"lineNumber":61,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":62,"author":{"gitID":"limshunyong"},"content":"        expected.addPerson(p);"},{"lineNumber":63,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":64,"author":{"gitID":"limshunyong"},"content":"        CommandResult r \u003d logic.execute(\"import test.vcf\");"},{"lineNumber":65,"author":{"gitID":"limshunyong"},"content":"        assertEquals(ImportCommand.MESSAGE_SUCCESS, r.feedbackToUser);"},{"lineNumber":66,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":67,"author":{"gitID":"limshunyong"},"content":"        assertEquals(expected, model.getAddressBook());"},{"lineNumber":68,"author":{"gitID":"limshunyong"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":70,"author":{"gitID":"limshunyong"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"limshunyong"},"content":"    public void execute_importNameOnlySuccess() throws Exception {"},{"lineNumber":72,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":73,"author":{"gitID":"limshunyong"},"content":"        AddressBook expected \u003d new AddressBook();"},{"lineNumber":74,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":75,"author":{"gitID":"limshunyong"},"content":"        Name name \u003d new Name(\"Brendan Richard\");"},{"lineNumber":76,"author":{"gitID":"limshunyong"},"content":"        Phone phone \u003d new Phone(\"11111111\");"},{"lineNumber":77,"author":{"gitID":"limshunyong"},"content":"        Email email \u003d new Email(\"BrendanRichard@example.com\");"},{"lineNumber":78,"author":{"gitID":"limshunyong"},"content":"        Address address \u003d new Address(\"13 Computing Drive\");"},{"lineNumber":79,"author":{"gitID":"limshunyong"},"content":"        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":80,"author":{"gitID":"limshunyong"},"content":"        tags.add(new Tag(\"containsDummyemail\"));"},{"lineNumber":81,"author":{"gitID":"limshunyong"},"content":"        tags.add(new Tag(\"containsDummyaddress\"));"},{"lineNumber":82,"author":{"gitID":"limshunyong"},"content":"        tags.add(new Tag(\"containsDummyphone\"));"},{"lineNumber":83,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":84,"author":{"gitID":"limshunyong"},"content":"        ReadOnlyPerson p \u003d new Person(name, phone, email, address, tags);"},{"lineNumber":85,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":86,"author":{"gitID":"limshunyong"},"content":"        expected.addPerson(p);"},{"lineNumber":87,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":88,"author":{"gitID":"limshunyong"},"content":"        CommandResult r \u003d logic.execute(\"import nameOnly.vcf\");"},{"lineNumber":89,"author":{"gitID":"limshunyong"},"content":"        assertEquals(ImportCommand.MESSAGE_SUCCESS, r.feedbackToUser);"},{"lineNumber":90,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":91,"author":{"gitID":"limshunyong"},"content":"        assertEquals(expected, model.getAddressBook());"},{"lineNumber":92,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":93,"author":{"gitID":"limshunyong"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":95,"author":{"gitID":"limshunyong"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"limshunyong"},"content":"    public void execute_importNoEmailSuccess() throws Exception {"},{"lineNumber":97,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":98,"author":{"gitID":"limshunyong"},"content":"        AddressBook expected \u003d new AddressBook();"},{"lineNumber":99,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":100,"author":{"gitID":"limshunyong"},"content":"        Name name \u003d new Name(\"Brendan Richard\");"},{"lineNumber":101,"author":{"gitID":"limshunyong"},"content":"        Phone phone \u003d new Phone(\"91234566\");"},{"lineNumber":102,"author":{"gitID":"limshunyong"},"content":"        Email email \u003d new Email(\"BrendanRichard@example.com\");"},{"lineNumber":103,"author":{"gitID":"limshunyong"},"content":"        Address address \u003d new Address(\"Some Address\");"},{"lineNumber":104,"author":{"gitID":"limshunyong"},"content":"        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":105,"author":{"gitID":"limshunyong"},"content":"        tags.add(new Tag(\"containsDummyemail\"));"},{"lineNumber":106,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":107,"author":{"gitID":"limshunyong"},"content":"        ReadOnlyPerson p \u003d new Person(name, phone, email, address, tags);"},{"lineNumber":108,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":109,"author":{"gitID":"limshunyong"},"content":"        expected.addPerson(p);"},{"lineNumber":110,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":111,"author":{"gitID":"limshunyong"},"content":"        CommandResult r \u003d logic.execute(\"import noEmail.vcf\");"},{"lineNumber":112,"author":{"gitID":"limshunyong"},"content":"        assertEquals(ImportCommand.MESSAGE_SUCCESS, r.feedbackToUser);"},{"lineNumber":113,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":114,"author":{"gitID":"limshunyong"},"content":"        assertEquals(expected, model.getAddressBook());"},{"lineNumber":115,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":116,"author":{"gitID":"limshunyong"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":118,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":119,"author":{"gitID":"limshunyong"},"content":"}"}],"authorContributionMap":{"limshunyong":105,"-":14}},{"path":"src/test/java/seedu/address/logic/parser/DeletePhotoCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.logic.commands.DeletePhotoCommand;"},{"lineNumber":11,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":12,"author":{"gitID":"JasmineSee"},"content":"//@@author JasmineSee"},{"lineNumber":13,"author":{"gitID":"JasmineSee"},"content":"public class DeletePhotoCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"JasmineSee"},"content":"    private DeletePhotoCommandParser parser \u003d new DeletePhotoCommandParser();"},{"lineNumber":15,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":16,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"JasmineSee"},"content":"    public void parse_validArgs_returnsDeletePhotoCommand() {"},{"lineNumber":18,"author":{"gitID":"JasmineSee"},"content":"        assertParseSuccess(parser, \"1\", new DeletePhotoCommand(INDEX_FIRST_PERSON));"},{"lineNumber":19,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":21,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"JasmineSee"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":23,"author":{"gitID":"JasmineSee"},"content":"        assertParseFailure(parser, \"a\","},{"lineNumber":24,"author":{"gitID":"JasmineSee"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePhotoCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"JasmineSee"},"content":"}"}],"authorContributionMap":{"JasmineSee":17,"-":9}},{"path":"src/test/java/seedu/address/logic/commands/QrGenSaveContactCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"JasmineSee"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":3,"author":{"gitID":"JasmineSee"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"JasmineSee"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":6,"author":{"gitID":"danielweide"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"danielweide"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":9,"author":{"gitID":"danielweide"},"content":"//@@author danielweide"},{"lineNumber":10,"author":{"gitID":"danielweide"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"danielweide"},"content":" * Test For QrCallCommand for Equal Cases"},{"lineNumber":12,"author":{"gitID":"danielweide"},"content":" */"},{"lineNumber":13,"author":{"gitID":"danielweide"},"content":"public class QrGenSaveContactCommandTest {"},{"lineNumber":14,"author":{"gitID":"danielweide"},"content":"    private String phoneNumberOne;"},{"lineNumber":15,"author":{"gitID":"danielweide"},"content":"    private String phoneNumberTwo;"},{"lineNumber":16,"author":{"gitID":"danielweide"},"content":"    private String nameOne;"},{"lineNumber":17,"author":{"gitID":"danielweide"},"content":"    private String nameTwo;"},{"lineNumber":18,"author":{"gitID":"danielweide"},"content":"    private String emailOne;"},{"lineNumber":19,"author":{"gitID":"danielweide"},"content":"    private String emailTwo;"},{"lineNumber":20,"author":{"gitID":"danielweide"},"content":"    @Before"},{"lineNumber":21,"author":{"gitID":"danielweide"},"content":"    public void prepareCommand() {"},{"lineNumber":22,"author":{"gitID":"danielweide"},"content":"        phoneNumberOne \u003d \"91234567\";"},{"lineNumber":23,"author":{"gitID":"danielweide"},"content":"        phoneNumberTwo \u003d \"81234567\";"},{"lineNumber":24,"author":{"gitID":"danielweide"},"content":"        nameOne \u003d \"Daniel\";"},{"lineNumber":25,"author":{"gitID":"danielweide"},"content":"        nameTwo \u003d \"John\";"},{"lineNumber":26,"author":{"gitID":"danielweide"},"content":"        emailOne \u003d \"Daniel@gmail.com\";"},{"lineNumber":27,"author":{"gitID":"danielweide"},"content":"        emailTwo \u003d \"John@gmail.com\";"},{"lineNumber":28,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"danielweide"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"danielweide"},"content":"    public void linkCheck() {"},{"lineNumber":31,"author":{"gitID":"danielweide"},"content":"        QrGenSaveContactCommand genSaveContactCommand \u003d new QrGenSaveContactCommand();"},{"lineNumber":32,"author":{"gitID":"danielweide"},"content":"        String firstQrLink \u003d genSaveContactCommand.qrSaveContact(phoneNumberOne, nameOne, emailOne);"},{"lineNumber":33,"author":{"gitID":"danielweide"},"content":"        String secondQrLink \u003d genSaveContactCommand.qrSaveContact(phoneNumberTwo, nameTwo, emailTwo);"},{"lineNumber":34,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":35,"author":{"gitID":"danielweide"},"content":"        // same object -\u003e returns true"},{"lineNumber":36,"author":{"gitID":"danielweide"},"content":"        assertTrue(firstQrLink.equals(firstQrLink));"},{"lineNumber":37,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":38,"author":{"gitID":"danielweide"},"content":"        // same values -\u003e returns true"},{"lineNumber":39,"author":{"gitID":"danielweide"},"content":"        String firstQrLinkCopy \u003d genSaveContactCommand.qrSaveContact(phoneNumberOne, nameOne, emailOne);"},{"lineNumber":40,"author":{"gitID":"danielweide"},"content":"        assertTrue(firstQrLink.equals(firstQrLinkCopy));"},{"lineNumber":41,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":42,"author":{"gitID":"danielweide"},"content":"        // different types -\u003e returns false"},{"lineNumber":43,"author":{"gitID":"danielweide"},"content":"        assertFalse(firstQrLink.equals(1));"},{"lineNumber":44,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":45,"author":{"gitID":"danielweide"},"content":"        // null -\u003e returns false"},{"lineNumber":46,"author":{"gitID":"danielweide"},"content":"        assertFalse(firstQrLink.equals(null));"},{"lineNumber":47,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":48,"author":{"gitID":"danielweide"},"content":"        // different link -\u003e returns false"},{"lineNumber":49,"author":{"gitID":"danielweide"},"content":"        assertFalse(firstQrLink.equals(secondQrLink));"},{"lineNumber":50,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"danielweide"},"content":"}"}],"authorContributionMap":{"danielweide":47,"JasmineSee":4}},{"path":"src/test/java/seedu/address/logic/commands/QrSmsCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"JasmineSee"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":3,"author":{"gitID":"JasmineSee"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"JasmineSee"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":8,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":9,"author":{"gitID":"danielweide"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":11,"author":{"gitID":"danielweide"},"content":"//@@author danielweide"},{"lineNumber":12,"author":{"gitID":"danielweide"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"danielweide"},"content":" * Test For QrSmsCommand for Equal Cases"},{"lineNumber":14,"author":{"gitID":"danielweide"},"content":" */"},{"lineNumber":15,"author":{"gitID":"danielweide"},"content":"public class QrSmsCommandTest {"},{"lineNumber":16,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":17,"author":{"gitID":"danielweide"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"danielweide"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitID":"danielweide"},"content":"        QrSmsCommand firstQrSmsCommand \u003d new QrSmsCommand(INDEX_FIRST_PERSON);"},{"lineNumber":20,"author":{"gitID":"danielweide"},"content":"        QrSmsCommand secondQrSmsCommand \u003d new QrSmsCommand(INDEX_SECOND_PERSON);"},{"lineNumber":21,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":22,"author":{"gitID":"danielweide"},"content":"        // same object -\u003e returns true"},{"lineNumber":23,"author":{"gitID":"danielweide"},"content":"        assertTrue(firstQrSmsCommand.equals(firstQrSmsCommand));"},{"lineNumber":24,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":25,"author":{"gitID":"danielweide"},"content":"        // same values -\u003e returns true"},{"lineNumber":26,"author":{"gitID":"danielweide"},"content":"        QrSmsCommand firstQrSmsCommandCopy \u003d new QrSmsCommand(INDEX_FIRST_PERSON);"},{"lineNumber":27,"author":{"gitID":"danielweide"},"content":"        assertTrue(firstQrSmsCommand.equals(firstQrSmsCommandCopy));"},{"lineNumber":28,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":29,"author":{"gitID":"danielweide"},"content":"        // different types -\u003e returns false"},{"lineNumber":30,"author":{"gitID":"danielweide"},"content":"        assertFalse(firstQrSmsCommand.equals(1));"},{"lineNumber":31,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":32,"author":{"gitID":"danielweide"},"content":"        // null -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"danielweide"},"content":"        assertFalse(firstQrSmsCommand.equals(null));"},{"lineNumber":34,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":35,"author":{"gitID":"danielweide"},"content":"        // different person -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"danielweide"},"content":"        assertFalse(firstQrSmsCommand.equals(secondQrSmsCommand));"},{"lineNumber":37,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"danielweide"},"content":"}"}],"authorContributionMap":{"danielweide":32,"JasmineSee":4,"-":2}},{"path":"src/test/java/seedu/address/logic/commands/ClearLogCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"danielweide"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":3,"author":{"gitID":"danielweide"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":5,"author":{"gitID":"danielweide"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"danielweide"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":8,"author":{"gitID":"danielweide"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"danielweide"},"content":"//@@author danielweide"},{"lineNumber":13,"author":{"gitID":"danielweide"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"danielweide"},"content":" * Test for ClearLogCommand by deleting ConnectUsLog.txt file"},{"lineNumber":15,"author":{"gitID":"danielweide"},"content":" */"},{"lineNumber":16,"author":{"gitID":"danielweide"},"content":"public class ClearLogCommandTest {"},{"lineNumber":17,"author":{"gitID":"danielweide"},"content":"    @Before"},{"lineNumber":18,"author":{"gitID":"danielweide"},"content":"    public void prepareCommand() throws CommandException, IOException {"},{"lineNumber":19,"author":{"gitID":"danielweide"},"content":"        ClearLogCommand clearLogCommand \u003d new ClearLogCommand();"},{"lineNumber":20,"author":{"gitID":"danielweide"},"content":"        clearLogCommand.execute(); //There would be no more ConnectUs.txt file after this"},{"lineNumber":21,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"danielweide"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"danielweide"},"content":"    public void execute_clearConnectUsLogSuccess() {"},{"lineNumber":24,"author":{"gitID":"danielweide"},"content":"        assertFalse(new File(\"ConnectUsLog.txt\").isFile());"},{"lineNumber":25,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"danielweide"},"content":"}"}],"authorContributionMap":{"danielweide":23,"-":3}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"blaqkrow"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":80,"author":{"gitID":"blaqkrow"},"content":"        } catch (CommandException | IOException ce) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":94,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        List\u003cReadOnlyPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":100,"author":{"gitID":"blaqkrow"},"content":"        } catch (CommandException | IOException e) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the first person in the {@code model}\u0027s address book."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public static void showFirstPersonOnly(Model model) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        ReadOnlyPerson person \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assert model.getFilteredPersonList().size() \u003d\u003d 1;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        ReadOnlyPerson firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":126,"blaqkrow":3}},{"path":"src/test/java/seedu/address/logic/commands/LoggingCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"danielweide"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":6,"author":{"gitID":"danielweide"},"content":"import java.io.BufferedInputStream;"},{"lineNumber":7,"author":{"gitID":"danielweide"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitID":"danielweide"},"content":"import java.io.FileInputStream;"},{"lineNumber":9,"author":{"gitID":"danielweide"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"danielweide"},"content":"import java.io.InputStream;"},{"lineNumber":11,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":12,"author":{"gitID":"danielweide"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"danielweide"},"content":"//@@author danielweide"},{"lineNumber":17,"author":{"gitID":"danielweide"},"content":"public class LoggingCommandTest {"},{"lineNumber":18,"author":{"gitID":"danielweide"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"danielweide"},"content":"     * Calls Method that will log into ConnectUsLog.txt when application is running"},{"lineNumber":20,"author":{"gitID":"danielweide"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"danielweide"},"content":"    @Before"},{"lineNumber":22,"author":{"gitID":"danielweide"},"content":"    public void prepareStartUpCommand() throws CommandException, IOException {"},{"lineNumber":23,"author":{"gitID":"danielweide"},"content":"        LoggingCommand loggingCommand \u003d new LoggingCommand();"},{"lineNumber":24,"author":{"gitID":"danielweide"},"content":"        ClearLogCommand clearLogCommand \u003d new ClearLogCommand();"},{"lineNumber":25,"author":{"gitID":"danielweide"},"content":"        clearLogCommand.execute(); //remove ConnectUs.txt file"},{"lineNumber":26,"author":{"gitID":"danielweide"},"content":"        loggingCommand.startUpLog(); //create new ConnectUs.txt file"},{"lineNumber":27,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"danielweide"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"danielweide"},"content":"    public void execute_checkIfLoggingExist() {"},{"lineNumber":30,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":31,"author":{"gitID":"danielweide"},"content":"        assertTrue(new File(\"ConnectUsLog.txt\").isFile());"},{"lineNumber":32,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":33,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"danielweide"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"danielweide"},"content":"    public void execute_checkIfLoggingIsDone() {"},{"lineNumber":36,"author":{"gitID":"danielweide"},"content":"        int numOfLines \u003d 0;"},{"lineNumber":37,"author":{"gitID":"danielweide"},"content":"        int expectedLines \u003d 1;"},{"lineNumber":38,"author":{"gitID":"danielweide"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"danielweide"},"content":"            numOfLines \u003d countLines(\"ConnectUsLog.txt\");"},{"lineNumber":40,"author":{"gitID":"danielweide"},"content":"        } catch (Exception e) {"},{"lineNumber":41,"author":{"gitID":"danielweide"},"content":"            numOfLines \u003d -1;"},{"lineNumber":42,"author":{"gitID":"danielweide"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"danielweide"},"content":"        assertEquals(expectedLines, numOfLines);"},{"lineNumber":44,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"danielweide"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"danielweide"},"content":"     * Count Number of Lines in txt file"},{"lineNumber":47,"author":{"gitID":"danielweide"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"danielweide"},"content":"    private static int countLines(String filename) throws Exception {"},{"lineNumber":49,"author":{"gitID":"danielweide"},"content":"        InputStream inputStream \u003d new BufferedInputStream(new FileInputStream(filename));"},{"lineNumber":50,"author":{"gitID":"danielweide"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"danielweide"},"content":"            byte[] reading \u003d new byte[1024];"},{"lineNumber":52,"author":{"gitID":"danielweide"},"content":"            int count \u003d 0;"},{"lineNumber":53,"author":{"gitID":"danielweide"},"content":"            int readChars \u003d 0;"},{"lineNumber":54,"author":{"gitID":"danielweide"},"content":"            boolean empty \u003d true;"},{"lineNumber":55,"author":{"gitID":"danielweide"},"content":"            while ((readChars \u003d inputStream.read(reading)) !\u003d -1) {"},{"lineNumber":56,"author":{"gitID":"danielweide"},"content":"                empty \u003d false;"},{"lineNumber":57,"author":{"gitID":"danielweide"},"content":"                for (int i \u003d 0; i \u003c readChars; i++) {"},{"lineNumber":58,"author":{"gitID":"danielweide"},"content":"                    if (reading[i] \u003d\u003d \u0027\\n\u0027) {"},{"lineNumber":59,"author":{"gitID":"danielweide"},"content":"                        ++count;"},{"lineNumber":60,"author":{"gitID":"danielweide"},"content":"                    }"},{"lineNumber":61,"author":{"gitID":"danielweide"},"content":"                }"},{"lineNumber":62,"author":{"gitID":"danielweide"},"content":"            }"},{"lineNumber":63,"author":{"gitID":"danielweide"},"content":"            return (count \u003d\u003d 0 \u0026\u0026 !empty) ? 1 : count;"},{"lineNumber":64,"author":{"gitID":"danielweide"},"content":"        } finally {"},{"lineNumber":65,"author":{"gitID":"danielweide"},"content":"            inputStream.close();"},{"lineNumber":66,"author":{"gitID":"danielweide"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"danielweide"},"content":"}"}],"authorContributionMap":{"danielweide":62,"-":6}},{"path":"src/test/java/seedu/address/logic/commands/RemoveTagCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"JasmineSee"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":3,"author":{"gitID":"JasmineSee"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"JasmineSee"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":12,"author":{"gitID":"JasmineSee"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":22,"author":{"gitID":"JasmineSee"},"content":"//@@author JasmineSee"},{"lineNumber":23,"author":{"gitID":"JasmineSee"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"JasmineSee"},"content":" * Contains integration tests (interaction with the Model) and unit tests for RemoveTagCommand."},{"lineNumber":25,"author":{"gitID":"JasmineSee"},"content":" */"},{"lineNumber":26,"author":{"gitID":"JasmineSee"},"content":"public class RemoveTagCommandTest {"},{"lineNumber":27,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":28,"author":{"gitID":"JasmineSee"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":30,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"JasmineSee"},"content":"    public void execute_zeroKeywords_noTagsRemoved() throws Exception {"},{"lineNumber":32,"author":{"gitID":"JasmineSee"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"JasmineSee"},"content":"        String expectedMessage \u003d String.format(RemoveTagCommand.MESSAGE_TAG_NOT_REMOVED);"},{"lineNumber":34,"author":{"gitID":"JasmineSee"},"content":"        RemoveTagCommand command \u003d prepareCommand(prepareTagList(\" \"));"},{"lineNumber":35,"author":{"gitID":"JasmineSee"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":36,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":38,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"JasmineSee"},"content":"    public void execute_multipleKeywords_multipleTagsRemoved() throws Exception {"},{"lineNumber":40,"author":{"gitID":"JasmineSee"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"JasmineSee"},"content":"        String expectedMessage \u003d String.format(RemoveTagCommand.MESSAGE_REMOVE_TAG_SUCCESS);"},{"lineNumber":42,"author":{"gitID":"JasmineSee"},"content":"        RemoveTagCommand command \u003d prepareCommand(prepareTagList(\"colleagues criminal\"));"},{"lineNumber":43,"author":{"gitID":"JasmineSee"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":44,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":46,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"JasmineSee"},"content":"    public void execute_tagsNotExist_noTagsRemoved() throws Exception {"},{"lineNumber":48,"author":{"gitID":"JasmineSee"},"content":"        String expectedMessage \u003d String.format(RemoveTagCommand.MESSAGE_TAG_NOT_REMOVED);"},{"lineNumber":49,"author":{"gitID":"JasmineSee"},"content":"        RemoveTagCommand command \u003d prepareCommand(prepareTagList(\"nothing\"));"},{"lineNumber":50,"author":{"gitID":"JasmineSee"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":51,"author":{"gitID":"JasmineSee"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":52,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":54,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"JasmineSee"},"content":"    public void equals() throws Exception {"},{"lineNumber":56,"author":{"gitID":"JasmineSee"},"content":"        RemoveTagCommand firstCommand \u003d new RemoveTagCommand(prepareTagList(VALID_TAG_FRIEND));"},{"lineNumber":57,"author":{"gitID":"JasmineSee"},"content":"        RemoveTagCommand secondCommand \u003d new RemoveTagCommand(prepareTagList(VALID_TAG_HUSBAND));"},{"lineNumber":58,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":59,"author":{"gitID":"JasmineSee"},"content":"        // same object -\u003e returns true"},{"lineNumber":60,"author":{"gitID":"JasmineSee"},"content":"        assertTrue(firstCommand.equals(firstCommand));"},{"lineNumber":61,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":62,"author":{"gitID":"JasmineSee"},"content":"        // same values -\u003e returns true"},{"lineNumber":63,"author":{"gitID":"JasmineSee"},"content":"        RemoveTagCommand firstCommandCopy \u003d new RemoveTagCommand(prepareTagList(VALID_TAG_FRIEND));"},{"lineNumber":64,"author":{"gitID":"JasmineSee"},"content":"        assertTrue(firstCommand.equals(firstCommandCopy));"},{"lineNumber":65,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":66,"author":{"gitID":"JasmineSee"},"content":"        // different types -\u003e returns false"},{"lineNumber":67,"author":{"gitID":"JasmineSee"},"content":"        assertFalse(firstCommand.equals(1));"},{"lineNumber":68,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":69,"author":{"gitID":"JasmineSee"},"content":"        // null -\u003e returns false"},{"lineNumber":70,"author":{"gitID":"JasmineSee"},"content":"        assertFalse(firstCommand.equals(null));"},{"lineNumber":71,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":72,"author":{"gitID":"JasmineSee"},"content":"        // different person -\u003e returns false"},{"lineNumber":73,"author":{"gitID":"JasmineSee"},"content":"        assertFalse(firstCommand.equals(secondCommand));"},{"lineNumber":74,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":76,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"JasmineSee"},"content":"     * Returns an {@code ArrayList\u003cTag\u003e}"},{"lineNumber":78,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"JasmineSee"},"content":"    private ArrayList\u003cTag\u003e prepareTagList(String userInput) throws Exception {"},{"lineNumber":80,"author":{"gitID":"JasmineSee"},"content":"        ArrayList\u003cTag\u003e tagToRemove \u003d new ArrayList\u003c\u003e();"},{"lineNumber":81,"author":{"gitID":"JasmineSee"},"content":"        String[] tagKeywords \u003d userInput.split(\"\\\\s+\");"},{"lineNumber":82,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":83,"author":{"gitID":"JasmineSee"},"content":"        for (int i \u003d 0; i \u003c tagKeywords.length; i++) {"},{"lineNumber":84,"author":{"gitID":"JasmineSee"},"content":"            tagToRemove.add(new Tag(tagKeywords[i]));"},{"lineNumber":85,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":87,"author":{"gitID":"JasmineSee"},"content":"        return tagToRemove;"},{"lineNumber":88,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":90,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"JasmineSee"},"content":"     * Returns an {@code RemoveTagCommand} with parameters {@code arraylist of tags}"},{"lineNumber":92,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"JasmineSee"},"content":"    private RemoveTagCommand prepareCommand(ArrayList\u003cTag\u003e tagToRemove) {"},{"lineNumber":94,"author":{"gitID":"JasmineSee"},"content":"        RemoveTagCommand removeTagCommand \u003d new RemoveTagCommand(tagToRemove);"},{"lineNumber":95,"author":{"gitID":"JasmineSee"},"content":"        removeTagCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":96,"author":{"gitID":"JasmineSee"},"content":"        return removeTagCommand;"},{"lineNumber":97,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":99,"author":{"gitID":"JasmineSee"},"content":"}"}],"authorContributionMap":{"JasmineSee":87,"-":12}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":106,"author":{"gitID":"JasmineSee"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        public void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"JasmineSee"},"content":"        @Override"},{"lineNumber":128,"author":{"gitID":"JasmineSee"},"content":"        public void removeTag(Tag tag) throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":141,"author":{"gitID":"limshunyong"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":143,"author":{"gitID":"limshunyong"},"content":"        @Override"},{"lineNumber":144,"author":{"gitID":"limshunyong"},"content":"        public void sortContact() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            personsAdded.add(new Person(person));"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"JasmineSee":6,"limshunyong":4,"-":171}},{"path":"src/test/java/guitests/GuiRobot.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.BooleanSupplier;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.testfx.api.FxRobot;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.exceptions.StageNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Robot used to simulate user actions on the GUI."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Extends {@link FxRobot} by adding some customized functionality and workarounds."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class GuiRobot extends FxRobot {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 250;"},{"lineNumber":18,"author":{"gitID":"blaqkrow"},"content":"    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 10000;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final boolean isHeadlessMode;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public GuiRobot() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        isHeadlessMode \u003d headlessPropertyValue !\u003d null \u0026\u0026 headlessPropertyValue.equals(\"true\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode to avoid"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * unnecessary delays."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void pauseForHuman() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        if (isHeadlessMode) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws EventTimeoutException if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * milliseconds."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void waitForEvent(BooleanSupplier event) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Waits for {@code event} to be true."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @param timeOut in milliseconds"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @throws EventTimeoutException if the time taken exceeds {@code timeOut}."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void waitForEvent(BooleanSupplier event, int timeOut) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        int timePassed \u003d 0;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        final int retryInterval \u003d 50;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        while (!event.getAsBoolean()) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            sleep(retryInterval);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            timePassed +\u003d retryInterval;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"            if (timePassed \u003e\u003d timeOut) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                throw new EventTimeoutException();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        pauseForHuman();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Returns true if the window with {@code stageTitle} is currently open."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public boolean isWindowShown(String stageTitle) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return listTargetWindows().stream()"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                .count() \u003e\u003d 1;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns the first stage, ordered by proximity to the current target window, with the stage title."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * The order that the windows are searched are as follows (proximity): current target window,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * children of the target window, rest of the windows."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @throws StageNotFoundException if the stage is not found."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public Stage getStage(String stageTitle) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                .filter(Stage.class::isInstance)    // checks that the window is of type Stage"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .map(Stage.class::cast)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                .filter(stage -\u003e stage.getTitle().equals(stageTitle))"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                .findFirst();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return targetStage.orElseThrow(StageNotFoundException::new);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Represents an error which occurs when a timeout occurs when waiting for an event."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private class EventTimeoutException extends RuntimeException {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":104,"blaqkrow":1}},{"path":"src/test/java/guitests/HelpWindowTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class HelpWindowTest extends AddressBookGuiTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":13,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":14,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        getPersonListPanel().click();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        getBrowserPanel().click();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertHelpWindowNotOpen();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        runCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"blaqkrow"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"blaqkrow"},"content":"    public void openFileMenu() {"},{"lineNumber":46,"author":{"gitID":"blaqkrow"},"content":"        getMainMenu().openFileWindowUsingMenu();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":48,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        mainWindowHandle.focus();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":63,"blaqkrow":5}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":36,"author":{"gitID":"JasmineSee"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withTags(\"colleagues\").build();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":38,"author":{"gitID":"JasmineSee"},"content":"            .withEmail(\"cornelia@example.com\").withTags(\"owesMoney\").withAddress(\"10th street\").build();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":40,"author":{"gitID":"JasmineSee"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withTags(\"criminal\").build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":60,"author":{"gitID":"JasmineSee"},"content":"    public static final String KEYWORD_MATCHING_OWESMONEY \u003d \"owesMoney\"; // A keyword that matches owesMoney"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"JasmineSee"},"content":"    private TypicalPersons() {"},{"lineNumber":63,"author":{"gitID":"JasmineSee"},"content":"    } // prevents instantiation"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        for (ReadOnlyPerson person : getTypicalPersons()) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                assert false : \"not possible\";"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static List\u003cReadOnlyPerson\u003e getTypicalPersons() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"JasmineSee":6,"-":77}},{"path":"src/test/java/guitests/guihandles/MainMenuHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Provides a handle to the main menu of the app."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class MainMenuHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MENU_BAR_ID \u003d \"#menuBar\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public MainMenuHandle(Node mainMenuNode) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        super(mainMenuNode);"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Opens the {@code HelpWindow} using the menu bar in {@code MainWindow}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void openHelpWindowUsingMenu() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        clickOnMenuItemsSequentially(\"Help\", \"F1\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"blaqkrow"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"blaqkrow"},"content":"     * Opens the {@code FileWindow} using the menu bar in {@code MainWindow}."},{"lineNumber":27,"author":{"gitID":"blaqkrow"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"blaqkrow"},"content":"    public void openFileWindowUsingMenu() {"},{"lineNumber":29,"author":{"gitID":"blaqkrow"},"content":"        clickOnMenuItemsSequentially(\"File\", \"White Theme\");"},{"lineNumber":30,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Opens the {@code HelpWindow} by pressing the shortcut key associated"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * with the menu bar in {@code MainWindow}."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void openHelpWindowUsingAccelerator() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.F1);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Clicks on {@code menuItems} in order."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private void clickOnMenuItemsSequentially(String... menuItems) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Arrays.stream(menuItems).forEach(guiRobot::clickOn);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":39,"blaqkrow":7}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"blaqkrow"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":38,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":103,"author":{"gitID":"blaqkrow"},"content":"    private void handleCommandInputChanged() throws IOException {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":129,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":150,"blaqkrow":2}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":16,"author":{"gitID":"danielweide"},"content":"import seedu.address.logic.commands.QrGenCallCommand;"},{"lineNumber":17,"author":{"gitID":"blaqkrow"},"content":"import seedu.address.logic.commands.QrGenSaveContactCommand;"},{"lineNumber":18,"author":{"gitID":"blaqkrow"},"content":"import seedu.address.logic.commands.QrGenSmsCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"blaqkrow"},"content":"    //@@author blaqkrow"},{"lineNumber":26,"author":{"gitID":"blaqkrow"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":27,"author":{"gitID":"blaqkrow"},"content":"    public static final String GOOGLE_SEARCH_URL_PREFIX \u003d \"https://www.google.com.sg/maps/place/\";"},{"lineNumber":28,"author":{"gitID":"blaqkrow"},"content":"    //@@author"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":30,"author":{"gitID":"blaqkrow"},"content":"    private static BrowserPanel instance;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":38,"author":{"gitID":"blaqkrow"},"content":"        browser.getEngine().setUserAgent(DEFAULT_PAGE.replace(\"Macintosh‌​; \", \"\"));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":40,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":46,"author":{"gitID":"blaqkrow"},"content":"    public WebView getBrowser() {"},{"lineNumber":47,"author":{"gitID":"blaqkrow"},"content":"        return browser;"},{"lineNumber":48,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"blaqkrow"},"content":"    //@@author blaqkrow"},{"lineNumber":50,"author":{"gitID":"blaqkrow"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"blaqkrow"},"content":"     * loads webpage"},{"lineNumber":52,"author":{"gitID":"blaqkrow"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"blaqkrow"},"content":"    public void loadPersonPage(ReadOnlyPerson person) {"},{"lineNumber":54,"author":{"gitID":"blaqkrow"},"content":"        browser.getEngine().setUserAgent(\"Mozilla/5.0 \""},{"lineNumber":55,"author":{"gitID":"blaqkrow"},"content":"                + \"(Windows NT x.y; Win64; x64; rv:10.0) Gecko/20100101 Firefox/10.0\");"},{"lineNumber":56,"author":{"gitID":"blaqkrow"},"content":"        loadPage(GOOGLE_SEARCH_URL_PREFIX + person.getAddress().toString().replaceAll(\" \", \"+\"));"},{"lineNumber":57,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"blaqkrow"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"blaqkrow"},"content":"     * Loads generated Call QR code"},{"lineNumber":60,"author":{"gitID":"blaqkrow"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"blaqkrow"},"content":"    public void loadQrCode(ReadOnlyPerson person) {"},{"lineNumber":62,"author":{"gitID":"blaqkrow"},"content":"        QrGenCallCommand qrGenCallCommand \u003d new QrGenCallCommand();"},{"lineNumber":63,"author":{"gitID":"blaqkrow"},"content":"        browser.getEngine().setUserAgent(\"Mozilla/5.0 \""},{"lineNumber":64,"author":{"gitID":"blaqkrow"},"content":"                + \"(Windows NT x.y; Win64; x64; rv:10.0) Gecko/20100101 Firefox/10.0\");"},{"lineNumber":65,"author":{"gitID":"blaqkrow"},"content":"        loadPage(qrGenCallCommand.qrCall(person.getPhone().toString()));"},{"lineNumber":66,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"blaqkrow"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"blaqkrow"},"content":"     * Loads generated SMS QR Code"},{"lineNumber":69,"author":{"gitID":"blaqkrow"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"blaqkrow"},"content":"    public void loadSmsQrCode(ReadOnlyPerson person) {"},{"lineNumber":71,"author":{"gitID":"blaqkrow"},"content":"        QrGenSmsCommand qrGenSmsCommand \u003d new QrGenSmsCommand();"},{"lineNumber":72,"author":{"gitID":"blaqkrow"},"content":"        browser.getEngine().setUserAgent(\"Mozilla/5.0 \""},{"lineNumber":73,"author":{"gitID":"blaqkrow"},"content":"                + \"(Windows NT x.y; Win64; x64; rv:10.0) Gecko/20100101 Firefox/10.0\");"},{"lineNumber":74,"author":{"gitID":"blaqkrow"},"content":"        loadPage(qrGenSmsCommand.qrSms(person.getPhone().toString(), person.getName().fullName));"},{"lineNumber":75,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"blaqkrow"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"blaqkrow"},"content":"     * Loads generated share QR code"},{"lineNumber":78,"author":{"gitID":"blaqkrow"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"blaqkrow"},"content":"    public void loadSaveQrCode(ReadOnlyPerson person) {"},{"lineNumber":80,"author":{"gitID":"blaqkrow"},"content":"        QrGenSaveContactCommand qrGenSaveContactCommand \u003d new QrGenSaveContactCommand();"},{"lineNumber":81,"author":{"gitID":"blaqkrow"},"content":"        browser.getEngine().setUserAgent(\"Mozilla/5.0 \""},{"lineNumber":82,"author":{"gitID":"blaqkrow"},"content":"                + \"(Windows NT x.y; Win64; x64; rv:10.0) Gecko/20100101 Firefox/10.0\");"},{"lineNumber":83,"author":{"gitID":"blaqkrow"},"content":"        loadPage(qrGenSaveContactCommand.qrSaveContact(person.getPhone().toString(), person.getName().fullName,"},{"lineNumber":84,"author":{"gitID":"blaqkrow"},"content":"                person.getEmail().toString()));"},{"lineNumber":85,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"blaqkrow"},"content":"    public void loadPage(String url) {"},{"lineNumber":87,"author":{"gitID":"blaqkrow"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":88,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":90,"author":{"gitID":"blaqkrow"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"blaqkrow"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":92,"author":{"gitID":"blaqkrow"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"blaqkrow"},"content":"    private void loadDefaultPage() {"},{"lineNumber":94,"author":{"gitID":"blaqkrow"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":95,"author":{"gitID":"blaqkrow"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":96,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":98,"author":{"gitID":"blaqkrow"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"blaqkrow"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":100,"author":{"gitID":"blaqkrow"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"blaqkrow"},"content":"    public void freeResources() {"},{"lineNumber":102,"author":{"gitID":"blaqkrow"},"content":"        browser \u003d null;"},{"lineNumber":103,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":105,"author":{"gitID":"blaqkrow"},"content":"    @Subscribe"},{"lineNumber":106,"author":{"gitID":"blaqkrow"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":107,"author":{"gitID":"blaqkrow"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":108,"author":{"gitID":"blaqkrow"},"content":"        loadPersonPage(event.getNewSelection().person);"},{"lineNumber":109,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"blaqkrow"},"content":"}"}],"authorContributionMap":{"danielweide":1,"-":35,"blaqkrow":74}},{"path":"src/main/java/seedu/address/ui/OpenEmailClient.java","lines":[{"lineNumber":1,"author":{"gitID":"blaqkrow"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":3,"author":{"gitID":"blaqkrow"},"content":"import java.awt.Desktop;"},{"lineNumber":4,"author":{"gitID":"blaqkrow"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"blaqkrow"},"content":"import java.net.URI;"},{"lineNumber":6,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":7,"author":{"gitID":"blaqkrow"},"content":"//@@author blaqkrow"},{"lineNumber":8,"author":{"gitID":"blaqkrow"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"blaqkrow"},"content":" * Handles the opening of email client"},{"lineNumber":10,"author":{"gitID":"blaqkrow"},"content":" */"},{"lineNumber":11,"author":{"gitID":"blaqkrow"},"content":"public class OpenEmailClient {"},{"lineNumber":12,"author":{"gitID":"blaqkrow"},"content":"    private Desktop desktop \u003d Desktop.getDesktop();"},{"lineNumber":13,"author":{"gitID":"blaqkrow"},"content":"    private String mailTo;"},{"lineNumber":14,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":15,"author":{"gitID":"blaqkrow"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"blaqkrow"},"content":"     * Handles the opening of email client"},{"lineNumber":17,"author":{"gitID":"blaqkrow"},"content":"     * @param mailTo the receiver\u0027s email address"},{"lineNumber":18,"author":{"gitID":"blaqkrow"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"blaqkrow"},"content":"    public OpenEmailClient(String mailTo) {"},{"lineNumber":20,"author":{"gitID":"blaqkrow"},"content":"        this.mailTo \u003d mailTo.trim();"},{"lineNumber":21,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":23,"author":{"gitID":"blaqkrow"},"content":"    public void setMail (String m) {"},{"lineNumber":24,"author":{"gitID":"blaqkrow"},"content":"        mailTo \u003d m;"},{"lineNumber":25,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"blaqkrow"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"blaqkrow"},"content":"     * Handles the sending mail"},{"lineNumber":28,"author":{"gitID":"blaqkrow"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"blaqkrow"},"content":"    public void sendMail () throws IOException {"},{"lineNumber":30,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":31,"author":{"gitID":"blaqkrow"},"content":"        URI uri \u003d URI.create(\"mailto:\" + this.mailTo);"},{"lineNumber":32,"author":{"gitID":"blaqkrow"},"content":"        desktop.mail(uri);"},{"lineNumber":33,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":34,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"blaqkrow"},"content":"}"}],"authorContributionMap":{"blaqkrow":35}},{"path":"src/main/java/seedu/address/ui/ResultDisplay.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.beans.property.StringProperty;"},{"lineNumber":10,"author":{"gitID":"blaqkrow"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the header of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"blaqkrow"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private TextArea resultDisplay;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public ResultDisplay() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        resultDisplay.textProperty().bind(displayed);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":40,"author":{"gitID":"blaqkrow"},"content":"        if (event.isUnknownCommandEntered()) { //unknown command entered"},{"lineNumber":41,"author":{"gitID":"blaqkrow"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":42,"author":{"gitID":"JasmineSee"},"content":"        } else {"},{"lineNumber":43,"author":{"gitID":"blaqkrow"},"content":"            setStyleToDefault();"},{"lineNumber":44,"author":{"gitID":"blaqkrow"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e displayed.setValue(event.message));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"blaqkrow"},"content":"    private void setStyleToDefault() {"},{"lineNumber":49,"author":{"gitID":"blaqkrow"},"content":"        resultDisplay.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":50,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":52,"author":{"gitID":"blaqkrow"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"blaqkrow"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":54,"author":{"gitID":"blaqkrow"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"blaqkrow"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":56,"author":{"gitID":"blaqkrow"},"content":"        ObservableList\u003cString\u003e styleClass \u003d resultDisplay.getStyleClass();"},{"lineNumber":57,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":58,"author":{"gitID":"blaqkrow"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":59,"author":{"gitID":"blaqkrow"},"content":"            return;"},{"lineNumber":60,"author":{"gitID":"blaqkrow"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":62,"author":{"gitID":"blaqkrow"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":63,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"JasmineSee":1,"-":41,"blaqkrow":23}},{"path":"src/test/java/seedu/address/logic/commands/ExportCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"limshunyong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":3,"author":{"gitID":"limshunyong"},"content":"import static org.junit.Assert.assertArrayEquals;"},{"lineNumber":4,"author":{"gitID":"limshunyong"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":6,"author":{"gitID":"limshunyong"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"JasmineSee"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitID":"JasmineSee"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitID":"JasmineSee"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":11,"author":{"gitID":"limshunyong"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitID":"limshunyong"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"limshunyong"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":19,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":20,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":21,"author":{"gitID":"limshunyong"},"content":"//@@author limshunyong"},{"lineNumber":22,"author":{"gitID":"limshunyong"},"content":"public class ExportCommandTest {"},{"lineNumber":23,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":24,"author":{"gitID":"limshunyong"},"content":"    private LogicManager logic;"},{"lineNumber":25,"author":{"gitID":"limshunyong"},"content":"    private ModelManager model;"},{"lineNumber":26,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":27,"author":{"gitID":"limshunyong"},"content":"    @Before"},{"lineNumber":28,"author":{"gitID":"limshunyong"},"content":"    public void setup() throws Exception {"},{"lineNumber":29,"author":{"gitID":"limshunyong"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":30,"author":{"gitID":"limshunyong"},"content":"        model \u003d new ModelManager(ab, new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"limshunyong"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":32,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":33,"author":{"gitID":"limshunyong"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":35,"author":{"gitID":"limshunyong"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"limshunyong"},"content":"    public void execute_export_emptyList() throws Exception {"},{"lineNumber":37,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":38,"author":{"gitID":"limshunyong"},"content":"        CommandResult r \u003d logic.execute(\"export\");"},{"lineNumber":39,"author":{"gitID":"limshunyong"},"content":"        assertEquals(ExportCommand.MESSAGE_EMPTY_AB, r.feedbackToUser);"},{"lineNumber":40,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":41,"author":{"gitID":"limshunyong"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":43,"author":{"gitID":"limshunyong"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"limshunyong"},"content":"    public void execute_export_fail() throws Exception {"},{"lineNumber":45,"author":{"gitID":"limshunyong"},"content":"        PersonBuilder testPerson \u003d new PersonBuilder();"},{"lineNumber":46,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":47,"author":{"gitID":"limshunyong"},"content":"        model.addPerson(testPerson.build());"},{"lineNumber":48,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":49,"author":{"gitID":"limshunyong"},"content":"        // to throw IOException"},{"lineNumber":50,"author":{"gitID":"limshunyong"},"content":"        File f \u003d new File(\"output.vcf\");"},{"lineNumber":51,"author":{"gitID":"limshunyong"},"content":"        Boolean cannotWrite \u003d f.setWritable(false);"},{"lineNumber":52,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":53,"author":{"gitID":"limshunyong"},"content":"        CommandResult r \u003d logic.execute(\"export\");"},{"lineNumber":54,"author":{"gitID":"limshunyong"},"content":"        assertEquals(ExportCommand.MESSAGE_FAIL, r.feedbackToUser);"},{"lineNumber":55,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":56,"author":{"gitID":"limshunyong"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":58,"author":{"gitID":"limshunyong"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"limshunyong"},"content":"    public void execute_export_success() throws Exception {"},{"lineNumber":60,"author":{"gitID":"limshunyong"},"content":"        PersonBuilder testPerson \u003d new PersonBuilder();"},{"lineNumber":61,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":62,"author":{"gitID":"limshunyong"},"content":"        model.addPerson(testPerson.build());"},{"lineNumber":63,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":64,"author":{"gitID":"limshunyong"},"content":"        // reset file permission from execute_export_fail()"},{"lineNumber":65,"author":{"gitID":"limshunyong"},"content":"        File f \u003d new File(\"output.vcf\");"},{"lineNumber":66,"author":{"gitID":"limshunyong"},"content":"        Boolean canWrite \u003d f.setWritable(true);"},{"lineNumber":67,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":68,"author":{"gitID":"limshunyong"},"content":"        CommandResult r \u003d logic.execute(\"export\");"},{"lineNumber":69,"author":{"gitID":"limshunyong"},"content":"        assertEquals(ExportCommand.MESSAGE_SUCCESS, r.feedbackToUser);"},{"lineNumber":70,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":71,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":72,"author":{"gitID":"limshunyong"},"content":"        Path f1 \u003d Paths.get(\"output.vcf\");"},{"lineNumber":73,"author":{"gitID":"limshunyong"},"content":"        Path f2 \u003d Paths.get(\"testExport.vcf\");"},{"lineNumber":74,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":75,"author":{"gitID":"limshunyong"},"content":"        byte[] file1 \u003d Files.readAllBytes(f1);"},{"lineNumber":76,"author":{"gitID":"limshunyong"},"content":"        byte[] file2 \u003d Files.readAllBytes(f2);"},{"lineNumber":77,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":78,"author":{"gitID":"limshunyong"},"content":"        assertArrayEquals(file1, file2);"},{"lineNumber":79,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":80,"author":{"gitID":"limshunyong"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":82,"author":{"gitID":"limshunyong"},"content":"}"}],"authorContributionMap":{"JasmineSee":3,"limshunyong":75,"-":4}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FxViewUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Controller for a help page"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class HelpWindow extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/UserGuide.html\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String ICON \u003d \"/images/help_icon.png\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String TITLE \u003d \"Help\";"},{"lineNumber":24,"author":{"gitID":"limshunyong"},"content":"    private static final String USER_AGENT \u003d \"Mozilla/5.0 (Windows NT 5.1; rv:7.0.1) Gecko/20100101 Firefox/7.0.1\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Stage dialogStage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public HelpWindow() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Scene scene \u003d new Scene(getRoot());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        //Null passed as the parent stage to make it non-modal."},{"lineNumber":35,"author":{"gitID":"-"},"content":"        dialogStage \u003d createDialogStage(TITLE, null, scene);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        dialogStage.setMaximized(true); //TODO: set a more appropriate initial size"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        FxViewUtil.setStageIcon(dialogStage, ICON);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"},{"lineNumber":40,"author":{"gitID":"limshunyong"},"content":"        browser.getEngine().setUserAgent(USER_AGENT);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        browser.getEngine().load(userGuideUrl);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Shows the help window."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @throws IllegalStateException"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * \u003cul\u003e"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void show() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        logger.fine(\"Showing help page about the application.\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        dialogStage.showAndWait();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"limshunyong":2,"-":64}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"blaqkrow"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"limshunyong"},"content":"import java.net.URL;"},{"lineNumber":5,"author":{"gitID":"JasmineSee"},"content":"import java.nio.file.Files;"},{"lineNumber":6,"author":{"gitID":"JasmineSee"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitID":"JasmineSee"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":9,"author":{"gitID":"JasmineSee"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.beans.binding.Bindings;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":14,"author":{"gitID":"blaqkrow"},"content":"import javafx.scene.image.Image;"},{"lineNumber":15,"author":{"gitID":"blaqkrow"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":19,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.commons.events.ui.PhotoChangeEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":28,"author":{"gitID":"limshunyong"},"content":"    private static final String FILE_PATH \u003d \"photos\";"},{"lineNumber":29,"author":{"gitID":"limshunyong"},"content":"    private static final String DEFAULT_FILE_PATH \u003d \"/images/default.jpeg\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public final ReadOnlyPerson person;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":54,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitID":"blaqkrow"},"content":"    private ImageView photo;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"JasmineSee"},"content":"    //@@author JasmineSee"},{"lineNumber":58,"author":{"gitID":"JasmineSee"},"content":"    public PersonCard(ReadOnlyPerson person, int displayedIndex) {"},{"lineNumber":59,"author":{"gitID":"JasmineSee"},"content":"        super(FXML);"},{"lineNumber":60,"author":{"gitID":"JasmineSee"},"content":"        this.person \u003d person;"},{"lineNumber":61,"author":{"gitID":"JasmineSee"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":62,"author":{"gitID":"JasmineSee"},"content":"        initTags(person);"},{"lineNumber":63,"author":{"gitID":"JasmineSee"},"content":"        bindListeners(person);"},{"lineNumber":64,"author":{"gitID":"JasmineSee"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":65,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":67,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"JasmineSee"},"content":"     * Binds the individual UI elements to observe their respective {@code Person} properties"},{"lineNumber":69,"author":{"gitID":"JasmineSee"},"content":"     * so that they will be notified of any changes."},{"lineNumber":70,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"JasmineSee"},"content":"    private void bindListeners(ReadOnlyPerson person) {"},{"lineNumber":72,"author":{"gitID":"JasmineSee"},"content":"        name.textProperty().bind(Bindings.convert(person.nameProperty()));"},{"lineNumber":73,"author":{"gitID":"JasmineSee"},"content":"        phone.textProperty().bind(Bindings.convert(person.phoneProperty()));"},{"lineNumber":74,"author":{"gitID":"JasmineSee"},"content":"        address.textProperty().bind(Bindings.convert(person.addressProperty()));"},{"lineNumber":75,"author":{"gitID":"JasmineSee"},"content":"        email.textProperty().bind(Bindings.convert(person.emailProperty()));"},{"lineNumber":76,"author":{"gitID":"JasmineSee"},"content":"        setImage();"},{"lineNumber":77,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":78,"author":{"gitID":"JasmineSee"},"content":"        person.tagProperty().addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":79,"author":{"gitID":"JasmineSee"},"content":"            tags.getChildren().clear();"},{"lineNumber":80,"author":{"gitID":"JasmineSee"},"content":"            person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":81,"author":{"gitID":"JasmineSee"},"content":"        });"},{"lineNumber":82,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":84,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"JasmineSee"},"content":"     * Handles photo change"},{"lineNumber":86,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"JasmineSee"},"content":"    @Subscribe"},{"lineNumber":88,"author":{"gitID":"JasmineSee"},"content":"    private void handlePhotoChange(PhotoChangeEvent event) {"},{"lineNumber":89,"author":{"gitID":"JasmineSee"},"content":"        setImage();"},{"lineNumber":90,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":92,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"JasmineSee"},"content":"     * Handles logic and set images"},{"lineNumber":94,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"JasmineSee"},"content":"    private void setImage() {"},{"lineNumber":96,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":97,"author":{"gitID":"JasmineSee"},"content":"        try {"},{"lineNumber":98,"author":{"gitID":"JasmineSee"},"content":"            Path p \u003d Files.createDirectories(Paths.get(FILE_PATH));"},{"lineNumber":99,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":100,"author":{"gitID":"JasmineSee"},"content":"            String fp \u003d p.toString();"},{"lineNumber":101,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":102,"author":{"gitID":"JasmineSee"},"content":"            File file \u003d new File(fp + File.separator + person.getEmail().toString() + \".png\");"},{"lineNumber":103,"author":{"gitID":"JasmineSee"},"content":"            Path path \u003d Paths.get(fp + File.separator + person.getEmail().toString() + \".png\");"},{"lineNumber":104,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":105,"author":{"gitID":"JasmineSee"},"content":"            if (Files.exists(path)) {"},{"lineNumber":106,"author":{"gitID":"JasmineSee"},"content":"                Image image \u003d new Image(file.toURI().toString(), 150, 150, false, false);"},{"lineNumber":107,"author":{"gitID":"JasmineSee"},"content":"                photo.setImage(image);"},{"lineNumber":108,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":109,"author":{"gitID":"JasmineSee"},"content":"            } else {"},{"lineNumber":110,"author":{"gitID":"JasmineSee"},"content":"                URL url \u003d getClass().getResource(DEFAULT_FILE_PATH);"},{"lineNumber":111,"author":{"gitID":"JasmineSee"},"content":"                try {"},{"lineNumber":112,"author":{"gitID":"JasmineSee"},"content":"                    Image img \u003d new Image(url.openStream(), 150, 150, false, false);"},{"lineNumber":113,"author":{"gitID":"JasmineSee"},"content":"                    photo.setImage(img);"},{"lineNumber":114,"author":{"gitID":"JasmineSee"},"content":"                } catch (Exception e) {"},{"lineNumber":115,"author":{"gitID":"JasmineSee"},"content":"                    e.printStackTrace();"},{"lineNumber":116,"author":{"gitID":"JasmineSee"},"content":"                }"},{"lineNumber":117,"author":{"gitID":"JasmineSee"},"content":"            }"},{"lineNumber":118,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":119,"author":{"gitID":"JasmineSee"},"content":"        } catch (Exception ie) {"},{"lineNumber":120,"author":{"gitID":"JasmineSee"},"content":"            ie.printStackTrace();"},{"lineNumber":121,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":123,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"JasmineSee"},"content":"    //@@author"},{"lineNumber":125,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":126,"author":{"gitID":"blaqkrow"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"blaqkrow"},"content":"     * Init person tags with colour"},{"lineNumber":128,"author":{"gitID":"blaqkrow"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"blaqkrow"},"content":"    //@@author blaqkrow"},{"lineNumber":130,"author":{"gitID":"blaqkrow"},"content":"    private void initTags(ReadOnlyPerson person) {"},{"lineNumber":131,"author":{"gitID":"blaqkrow"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":132,"author":{"gitID":"blaqkrow"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":133,"author":{"gitID":"blaqkrow"},"content":"            if (tag.tagName.equals(\"colleagues\")) {"},{"lineNumber":134,"author":{"gitID":"blaqkrow"},"content":"                tagLabel.setStyle(\"-fx-background-color: red;\");"},{"lineNumber":135,"author":{"gitID":"blaqkrow"},"content":"            } else if (tag.tagName.equals(\"friends\")) {"},{"lineNumber":136,"author":{"gitID":"blaqkrow"},"content":"                tagLabel.setStyle(\"-fx-background-color: greenyellow;\");"},{"lineNumber":137,"author":{"gitID":"blaqkrow"},"content":"            } else {"},{"lineNumber":138,"author":{"gitID":"blaqkrow"},"content":"                tagLabel.setStyle(\"-fx-background-color: grey;\");"},{"lineNumber":139,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":140,"author":{"gitID":"blaqkrow"},"content":"            }"},{"lineNumber":141,"author":{"gitID":"blaqkrow"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":142,"author":{"gitID":"blaqkrow"},"content":"        });"},{"lineNumber":143,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":145,"author":{"gitID":"blaqkrow"},"content":"    //@@author"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"JasmineSee":75,"limshunyong":3,"-":59,"blaqkrow":26}},{"path":"src/main/java/seedu/address/ui/PersonListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Panel containing the list of persons."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private ListView\u003cPersonCard\u003e personListView;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public PersonListPanel(ObservableList\u003cReadOnlyPerson\u003e personList) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        setConnections(personList);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private void setConnections(ObservableList\u003cReadOnlyPerson\u003e personList) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ObservableList\u003cPersonCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":38,"author":{"gitID":"-"},"content":"                personList, (person) -\u003e new PersonCard(person, personList.indexOf(person) + 1));"},{"lineNumber":39,"author":{"gitID":"blaqkrow"},"content":"        //create a new personcard for each person added to the list"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        personListView.setItems(mappedList);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"blaqkrow"},"content":"    //@@author blaqkrow"},{"lineNumber":45,"author":{"gitID":"blaqkrow"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":46,"author":{"gitID":"blaqkrow"},"content":"        ObservableList\u003cInteger\u003e index \u003d personListView.getSelectionModel().getSelectedIndices();"},{"lineNumber":47,"author":{"gitID":"blaqkrow"},"content":"        personListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":48,"author":{"gitID":"blaqkrow"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":49,"author":{"gitID":"blaqkrow"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":50,"author":{"gitID":"blaqkrow"},"content":"                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":51,"author":{"gitID":"blaqkrow"},"content":"                        raise(new PersonPanelSelectionChangedEvent(newValue, index.get(0)));"},{"lineNumber":52,"author":{"gitID":"blaqkrow"},"content":"                    }"},{"lineNumber":53,"author":{"gitID":"blaqkrow"},"content":"                });"},{"lineNumber":54,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"blaqkrow"},"content":"    //@@author"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            personListView.scrollTo(index);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            personListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PersonCard}."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPersonCard\u003e {"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        protected void updateItem(PersonCard person, boolean empty) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            super.updateItem(person, empty);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"            if (empty || person \u003d\u003d null) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                setGraphic(null);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                setText(null);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                setGraphic(person.getRoot());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":78,"blaqkrow":13}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":16,"author":{"gitID":"blaqkrow"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":23,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.commons.events.ui.ThemeChangeEvent;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FxViewUtil;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cRegion\u003e {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"blaqkrow"},"content":"    private static final String ICON \u003d \"/images/connectus_icon.png\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final int MIN_HEIGHT \u003d 600;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final int MIN_WIDTH \u003d 450;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":43,"author":{"gitID":"JasmineSee"},"content":"    private Scene scene;"},{"lineNumber":44,"author":{"gitID":"blaqkrow"},"content":"    //@@author blaqkrow"},{"lineNumber":45,"author":{"gitID":"blaqkrow"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":46,"author":{"gitID":"blaqkrow"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":47,"author":{"gitID":"blaqkrow"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":48,"author":{"gitID":"blaqkrow"},"content":"    private Config config;"},{"lineNumber":49,"author":{"gitID":"blaqkrow"},"content":"    private UserPrefs prefs;"},{"lineNumber":50,"author":{"gitID":"blaqkrow"},"content":"    private DeleteButton deleteButton;"},{"lineNumber":51,"author":{"gitID":"blaqkrow"},"content":"    private EmailButton emailButton;"},{"lineNumber":52,"author":{"gitID":"blaqkrow"},"content":"    private EditButton editButton;"},{"lineNumber":53,"author":{"gitID":"blaqkrow"},"content":"    private NameTextField nameTextField;"},{"lineNumber":54,"author":{"gitID":"blaqkrow"},"content":"    private PhoneTextField phoneTextField;"},{"lineNumber":55,"author":{"gitID":"blaqkrow"},"content":"    private EmailTextField emailTextField;"},{"lineNumber":56,"author":{"gitID":"blaqkrow"},"content":"    private AddressTextField addressTextField;"},{"lineNumber":57,"author":{"gitID":"blaqkrow"},"content":"    private TagTextField tagTextField;"},{"lineNumber":58,"author":{"gitID":"blaqkrow"},"content":"    private ClearLogButton clearLogButton;"},{"lineNumber":59,"author":{"gitID":"blaqkrow"},"content":"    private QrButton qrButton;"},{"lineNumber":60,"author":{"gitID":"blaqkrow"},"content":"    private QrSaveButton qrSaveButton;"},{"lineNumber":61,"author":{"gitID":"blaqkrow"},"content":"    private QrSmsButton qrSmsButton;"},{"lineNumber":62,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitID":"blaqkrow"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":64,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":65,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":66,"author":{"gitID":"blaqkrow"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":67,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":68,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":69,"author":{"gitID":"blaqkrow"},"content":"    private MenuItem blackMenuItem;"},{"lineNumber":70,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":71,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":72,"author":{"gitID":"blaqkrow"},"content":"    private MenuItem whiteMenuItem;"},{"lineNumber":73,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":74,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":75,"author":{"gitID":"blaqkrow"},"content":"    private MenuItem greenMenuItem;"},{"lineNumber":76,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":77,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":78,"author":{"gitID":"blaqkrow"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":79,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":80,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":81,"author":{"gitID":"blaqkrow"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":82,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":83,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":84,"author":{"gitID":"blaqkrow"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":85,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":86,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":87,"author":{"gitID":"blaqkrow"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":88,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":89,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":90,"author":{"gitID":"blaqkrow"},"content":"    private StackPane deleteButtonPlaceholder;"},{"lineNumber":91,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":92,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":93,"author":{"gitID":"blaqkrow"},"content":"    private StackPane emailButtonPlaceholder;"},{"lineNumber":94,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":95,"author":{"gitID":"blaqkrow"},"content":"    private StackPane editButtonPlaceholder;"},{"lineNumber":96,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":97,"author":{"gitID":"blaqkrow"},"content":"    private StackPane editNameTextfieldPlaceholder;"},{"lineNumber":98,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":99,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":100,"author":{"gitID":"blaqkrow"},"content":"    private StackPane editPhoneTextfieldPlaceholder;"},{"lineNumber":101,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":102,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":103,"author":{"gitID":"blaqkrow"},"content":"    private StackPane editEmailTextfieldPlaceholder;"},{"lineNumber":104,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":105,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":106,"author":{"gitID":"blaqkrow"},"content":"    private StackPane editAddressTextfieldPlaceholder;"},{"lineNumber":107,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":108,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":109,"author":{"gitID":"blaqkrow"},"content":"    private StackPane editTagTextfieldPlaceholder;"},{"lineNumber":110,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":111,"author":{"gitID":"blaqkrow"},"content":"    private StackPane clearLogButtonPlaceholder;"},{"lineNumber":112,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":113,"author":{"gitID":"blaqkrow"},"content":"    private StackPane qrButtonPlaceholder;"},{"lineNumber":114,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":115,"author":{"gitID":"blaqkrow"},"content":"    private StackPane qrSmsButtonPlaceholder;"},{"lineNumber":116,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":117,"author":{"gitID":"blaqkrow"},"content":"    private StackPane qrSaveButtonPlaceholder;"},{"lineNumber":118,"author":{"gitID":"blaqkrow"},"content":"    //@@author"},{"lineNumber":119,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":120,"author":{"gitID":"blaqkrow"},"content":"    private VBox vBox;"},{"lineNumber":121,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        setIcon(ICON);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        setWindowMinSize();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Scene scene \u003d new Scene(getRoot());"},{"lineNumber":137,"author":{"gitID":"JasmineSee"},"content":"        this.scene \u003d scene;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        primaryStage.setScene(scene);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":154,"author":{"gitID":"JasmineSee"},"content":"     *"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":161,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":162,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":163,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":164,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":165,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":166,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":167,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":168,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":169,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":170,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":171,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":172,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":173,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":174,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"blaqkrow"},"content":"    //@@author blaqkrow"},{"lineNumber":183,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":184,"author":{"gitID":"blaqkrow"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"blaqkrow"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":186,"author":{"gitID":"blaqkrow"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"blaqkrow"},"content":"    void fillInnerParts() {"},{"lineNumber":188,"author":{"gitID":"blaqkrow"},"content":"        clearLogButton \u003d new ClearLogButton();"},{"lineNumber":189,"author":{"gitID":"blaqkrow"},"content":"        clearLogButtonPlaceholder.getChildren().add(clearLogButton.getRoot());"},{"lineNumber":190,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":191,"author":{"gitID":"blaqkrow"},"content":"        nameTextField \u003d new NameTextField();"},{"lineNumber":192,"author":{"gitID":"blaqkrow"},"content":"        editNameTextfieldPlaceholder.getChildren().add(nameTextField.getRoot());"},{"lineNumber":193,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":194,"author":{"gitID":"blaqkrow"},"content":"        phoneTextField \u003d new PhoneTextField();"},{"lineNumber":195,"author":{"gitID":"blaqkrow"},"content":"        editPhoneTextfieldPlaceholder.getChildren().add(phoneTextField.getRoot());"},{"lineNumber":196,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":197,"author":{"gitID":"blaqkrow"},"content":"        emailTextField \u003d new EmailTextField();"},{"lineNumber":198,"author":{"gitID":"blaqkrow"},"content":"        editEmailTextfieldPlaceholder.getChildren().add(emailTextField.getRoot());"},{"lineNumber":199,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":200,"author":{"gitID":"blaqkrow"},"content":"        addressTextField \u003d new AddressTextField();"},{"lineNumber":201,"author":{"gitID":"blaqkrow"},"content":"        editAddressTextfieldPlaceholder.getChildren().add(addressTextField.getRoot());"},{"lineNumber":202,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":203,"author":{"gitID":"blaqkrow"},"content":"        tagTextField \u003d new TagTextField();"},{"lineNumber":204,"author":{"gitID":"blaqkrow"},"content":"        editTagTextfieldPlaceholder.getChildren().add(tagTextField.getRoot());"},{"lineNumber":205,"author":{"gitID":"blaqkrow"},"content":"        editButton \u003d new EditButton(logic, nameTextField, phoneTextField,"},{"lineNumber":206,"author":{"gitID":"blaqkrow"},"content":"                emailTextField, addressTextField, tagTextField);"},{"lineNumber":207,"author":{"gitID":"blaqkrow"},"content":"        editButtonPlaceholder.getChildren().add(editButton.getRoot());"},{"lineNumber":208,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":209,"author":{"gitID":"blaqkrow"},"content":"        deleteButton \u003d new DeleteButton(logic, 0);"},{"lineNumber":210,"author":{"gitID":"blaqkrow"},"content":"        deleteButtonPlaceholder.getChildren().add(deleteButton.getRoot());"},{"lineNumber":211,"author":{"gitID":"blaqkrow"},"content":"        emailButton \u003d new EmailButton();"},{"lineNumber":212,"author":{"gitID":"blaqkrow"},"content":"        emailButtonPlaceholder.getChildren().add(emailButton.getRoot());"},{"lineNumber":213,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":214,"author":{"gitID":"blaqkrow"},"content":"        browserPanel \u003d new BrowserPanel();"},{"lineNumber":215,"author":{"gitID":"blaqkrow"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":216,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":217,"author":{"gitID":"blaqkrow"},"content":"        qrButton \u003d new QrButton(browserPanel);"},{"lineNumber":218,"author":{"gitID":"blaqkrow"},"content":"        qrButtonPlaceholder.getChildren().add(qrButton.getRoot());"},{"lineNumber":219,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":220,"author":{"gitID":"blaqkrow"},"content":"        qrSaveButton \u003d new QrSaveButton(browserPanel);"},{"lineNumber":221,"author":{"gitID":"blaqkrow"},"content":"        qrSaveButtonPlaceholder.getChildren().add(qrSaveButton.getRoot());"},{"lineNumber":222,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":223,"author":{"gitID":"blaqkrow"},"content":"        qrSmsButton \u003d new QrSmsButton(browserPanel);"},{"lineNumber":224,"author":{"gitID":"blaqkrow"},"content":"        qrSmsButtonPlaceholder.getChildren().add(qrSmsButton.getRoot());"},{"lineNumber":225,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":226,"author":{"gitID":"blaqkrow"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":227,"author":{"gitID":"blaqkrow"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":228,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":229,"author":{"gitID":"blaqkrow"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":230,"author":{"gitID":"blaqkrow"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":231,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":232,"author":{"gitID":"blaqkrow"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":233,"author":{"gitID":"blaqkrow"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":234,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":235,"author":{"gitID":"blaqkrow"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":236,"author":{"gitID":"blaqkrow"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":237,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"blaqkrow"},"content":"    //@@author"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * Sets the given image as the icon of the main window."},{"lineNumber":250,"author":{"gitID":"JasmineSee"},"content":"     *"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * @param iconSource e.g. {@code \"/images/help_icon.png\"}"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    private void setIcon(String iconSource) {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        FxViewUtil.setStageIcon(primaryStage, iconSource);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":259,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":265,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"    private void setWindowMinSize() {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        primaryStage.setMinHeight(MIN_HEIGHT);"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        primaryStage.setMinWidth(MIN_WIDTH);"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":276,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":279,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":280,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":284,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":293,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":296,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":297,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":298,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":299,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":300,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":301,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"JasmineSee"},"content":"    //@@author JasmineSee"},{"lineNumber":304,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":305,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":306,"author":{"gitID":"JasmineSee"},"content":"     * Changes to default dark theme."},{"lineNumber":307,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":308,"author":{"gitID":"JasmineSee"},"content":"    @FXML"},{"lineNumber":309,"author":{"gitID":"JasmineSee"},"content":"    public void handleBlackTheme() {"},{"lineNumber":310,"author":{"gitID":"JasmineSee"},"content":"        if (vBox.getStylesheets().contains(\"view/DarkTheme.css\")) {"},{"lineNumber":311,"author":{"gitID":"JasmineSee"},"content":"            vBox.getStylesheets().remove(\"view/DarkTheme.css\");"},{"lineNumber":312,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":313,"author":{"gitID":"JasmineSee"},"content":"        vBox.getStylesheets().remove(\"view/WhiteTheme.css\");"},{"lineNumber":314,"author":{"gitID":"JasmineSee"},"content":"        vBox.getStylesheets().remove(\"view/GreenTheme.css\");"},{"lineNumber":315,"author":{"gitID":"JasmineSee"},"content":"        vBox.getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":316,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":317,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":318,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":319,"author":{"gitID":"JasmineSee"},"content":"     * Changes to white theme."},{"lineNumber":320,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":321,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":322,"author":{"gitID":"JasmineSee"},"content":"    @FXML"},{"lineNumber":323,"author":{"gitID":"JasmineSee"},"content":"    public void handleWhiteTheme() {"},{"lineNumber":324,"author":{"gitID":"JasmineSee"},"content":"        if (vBox.getStylesheets().contains(\"view/WhiteTheme.css\")) {"},{"lineNumber":325,"author":{"gitID":"JasmineSee"},"content":"            vBox.getStylesheets().remove(\"view/WhiteTheme.css\");"},{"lineNumber":326,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":327,"author":{"gitID":"JasmineSee"},"content":"        vBox.getStylesheets().remove(\"view/DarkTheme.css\");"},{"lineNumber":328,"author":{"gitID":"JasmineSee"},"content":"        vBox.getStylesheets().remove(\"view/GreenTheme.css\");"},{"lineNumber":329,"author":{"gitID":"JasmineSee"},"content":"        vBox.getStylesheets().add(\"view/WhiteTheme.css\");"},{"lineNumber":330,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":331,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":332,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":333,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":334,"author":{"gitID":"JasmineSee"},"content":"     * Changes to green theme."},{"lineNumber":335,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":336,"author":{"gitID":"JasmineSee"},"content":"    @FXML"},{"lineNumber":337,"author":{"gitID":"JasmineSee"},"content":"    public void handleGreenTheme() {"},{"lineNumber":338,"author":{"gitID":"JasmineSee"},"content":"        if (vBox.getStylesheets().contains(\"view/GreenTheme.css\")) {"},{"lineNumber":339,"author":{"gitID":"JasmineSee"},"content":"            vBox.getStylesheets().remove(\"view/GreenTheme.css\");"},{"lineNumber":340,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":341,"author":{"gitID":"JasmineSee"},"content":"        vBox.getStylesheets().remove(\"view/WhiteTheme.css\");"},{"lineNumber":342,"author":{"gitID":"JasmineSee"},"content":"        vBox.getStylesheets().remove(\"view/DarkTheme.css\");"},{"lineNumber":343,"author":{"gitID":"JasmineSee"},"content":"        vBox.getStylesheets().add(\"view/GreenTheme.css\");"},{"lineNumber":344,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":345,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":346,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":347,"author":{"gitID":"JasmineSee"},"content":"     * Handles event for change theme command."},{"lineNumber":348,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":349,"author":{"gitID":"JasmineSee"},"content":"    @Subscribe"},{"lineNumber":350,"author":{"gitID":"JasmineSee"},"content":"    public void handleThemeCommand(ThemeChangeEvent event) {"},{"lineNumber":351,"author":{"gitID":"JasmineSee"},"content":"        String theme \u003d event.getTheme();"},{"lineNumber":352,"author":{"gitID":"JasmineSee"},"content":"        if (theme.equals(\"dark\")) {"},{"lineNumber":353,"author":{"gitID":"JasmineSee"},"content":"            handleBlackTheme();"},{"lineNumber":354,"author":{"gitID":"JasmineSee"},"content":"        } else if (theme.equals(\"white\")) {"},{"lineNumber":355,"author":{"gitID":"JasmineSee"},"content":"            handleWhiteTheme();"},{"lineNumber":356,"author":{"gitID":"JasmineSee"},"content":"        } else if (theme.equals(\"green\")) {"},{"lineNumber":357,"author":{"gitID":"JasmineSee"},"content":"            handleGreenTheme();"},{"lineNumber":358,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":359,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":360,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":361,"author":{"gitID":"JasmineSee"},"content":"    //@@author"},{"lineNumber":362,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":363,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":364,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":367,"author":{"gitID":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":368,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":369,"author":{"gitID":"-"},"content":""},{"lineNumber":370,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":371,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":372,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":373,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":374,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":375,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"JasmineSee":66,"-":173,"blaqkrow":136}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"blaqkrow"},"content":"    private String appTitle \u003d \"ConnectUs\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":71,"blaqkrow":1}},{"path":"src/test/java/seedu/address/logic/commands/UploadPhotoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"JasmineSee"},"content":"import java.io.File;"},{"lineNumber":12,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"JasmineSee"},"content":"//@@author JasmineSee"},{"lineNumber":25,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":26,"author":{"gitID":"JasmineSee"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"JasmineSee"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code UploadPhotoCommand}."},{"lineNumber":28,"author":{"gitID":"JasmineSee"},"content":" */"},{"lineNumber":29,"author":{"gitID":"JasmineSee"},"content":"public class UploadPhotoCommandTest {"},{"lineNumber":30,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":31,"author":{"gitID":"JasmineSee"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"JasmineSee"},"content":"    private String validFilePath \u003d \"./src/test/resources/photos/connectus_icon.png\";"},{"lineNumber":33,"author":{"gitID":"JasmineSee"},"content":"    private String invalidFilePath \u003d \"./src/test/resources/photos/default.jpeg\";"},{"lineNumber":34,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":35,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"JasmineSee"},"content":"    public void execute_validIndexValidFile_success() throws Exception {"},{"lineNumber":37,"author":{"gitID":"JasmineSee"},"content":"        ReadOnlyPerson personToUploadPhoto \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":38,"author":{"gitID":"JasmineSee"},"content":"        UploadPhotoCommand uploadPhotoCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":39,"author":{"gitID":"JasmineSee"},"content":"                validFilePath);"},{"lineNumber":40,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":41,"author":{"gitID":"JasmineSee"},"content":"        String expectedMessage \u003d String.format(UploadPhotoCommand.MESSAGE_UPLOAD_IMAGE_SUCCESS, personToUploadPhoto);"},{"lineNumber":42,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":43,"author":{"gitID":"JasmineSee"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":44,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":45,"author":{"gitID":"JasmineSee"},"content":"        assertCommandSuccess(uploadPhotoCommand, model, expectedMessage, expectedModel);"},{"lineNumber":46,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":47,"author":{"gitID":"JasmineSee"},"content":"        deletePhoto(personToUploadPhoto); //delete uploaded test case photo after success"},{"lineNumber":48,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":50,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"JasmineSee"},"content":"    public void execute_invalidIndexValidFile_throwsCommandException() throws Exception {"},{"lineNumber":52,"author":{"gitID":"JasmineSee"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":53,"author":{"gitID":"JasmineSee"},"content":"        UploadPhotoCommand uploadPhotoCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":54,"author":{"gitID":"JasmineSee"},"content":"                validFilePath);"},{"lineNumber":55,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":56,"author":{"gitID":"JasmineSee"},"content":"        assertCommandFailure(uploadPhotoCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":57,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":59,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"JasmineSee"},"content":"    public void execute_validIndexInvalidFile_throwsCommandException() throws Exception {"},{"lineNumber":61,"author":{"gitID":"JasmineSee"},"content":"        UploadPhotoCommand uploadPhotoCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":62,"author":{"gitID":"JasmineSee"},"content":"                invalidFilePath);"},{"lineNumber":63,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":64,"author":{"gitID":"JasmineSee"},"content":"        assertCommandFailure(uploadPhotoCommand, model, UploadPhotoCommand.MESSAGE_UPLOAD_IMAGE_FALURE);"},{"lineNumber":65,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":67,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"JasmineSee"},"content":"    public void equals() {"},{"lineNumber":69,"author":{"gitID":"JasmineSee"},"content":"        UploadPhotoCommand firstCommand \u003d new UploadPhotoCommand(INDEX_FIRST_PERSON, \"\");"},{"lineNumber":70,"author":{"gitID":"JasmineSee"},"content":"        UploadPhotoCommand secondCommand \u003d new UploadPhotoCommand(INDEX_SECOND_PERSON, \"\");"},{"lineNumber":71,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":72,"author":{"gitID":"JasmineSee"},"content":"        // same object -\u003e returns true"},{"lineNumber":73,"author":{"gitID":"JasmineSee"},"content":"        assertTrue(firstCommand.equals(firstCommand));"},{"lineNumber":74,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":75,"author":{"gitID":"JasmineSee"},"content":"        // same values -\u003e returns true"},{"lineNumber":76,"author":{"gitID":"JasmineSee"},"content":"        UploadPhotoCommand firstCommandCopy \u003d new UploadPhotoCommand(INDEX_FIRST_PERSON, \"\");"},{"lineNumber":77,"author":{"gitID":"JasmineSee"},"content":"        assertTrue(firstCommand.equals(firstCommandCopy));"},{"lineNumber":78,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":79,"author":{"gitID":"JasmineSee"},"content":"        // different types -\u003e returns false"},{"lineNumber":80,"author":{"gitID":"JasmineSee"},"content":"        assertFalse(firstCommand.equals(1));"},{"lineNumber":81,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":82,"author":{"gitID":"JasmineSee"},"content":"        // null -\u003e returns false"},{"lineNumber":83,"author":{"gitID":"JasmineSee"},"content":"        assertFalse(firstCommand.equals(null));"},{"lineNumber":84,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":85,"author":{"gitID":"JasmineSee"},"content":"        // different person -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"JasmineSee"},"content":"        assertFalse(firstCommand.equals(secondCommand));"},{"lineNumber":87,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":89,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"JasmineSee"},"content":"     * Returns a {@code UploadPhotoCommand} with the parameter {@code index}."},{"lineNumber":91,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"JasmineSee"},"content":"    private UploadPhotoCommand prepareCommand(Index index, String filePath) {"},{"lineNumber":93,"author":{"gitID":"JasmineSee"},"content":"        UploadPhotoCommand uploadPhotoCommand \u003d new UploadPhotoCommand(index, filePath);"},{"lineNumber":94,"author":{"gitID":"JasmineSee"},"content":"        uploadPhotoCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":95,"author":{"gitID":"JasmineSee"},"content":"        return uploadPhotoCommand;"},{"lineNumber":96,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":98,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"JasmineSee"},"content":"     * Deletes uploaded test photo after successful check."},{"lineNumber":100,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"JasmineSee"},"content":"    private void deletePhoto(ReadOnlyPerson personToUploadPhoto) {"},{"lineNumber":102,"author":{"gitID":"JasmineSee"},"content":"        File file \u003d new File(\"photos/\" + personToUploadPhoto.getEmail().toString() + \".png\");"},{"lineNumber":103,"author":{"gitID":"JasmineSee"},"content":"        file.delete();"},{"lineNumber":104,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":105,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":107,"author":{"gitID":"JasmineSee"},"content":"}"}],"authorContributionMap":{"JasmineSee":86,"-":21}},{"path":"src/test/java/seedu/address/logic/commands/TagCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":9,"author":{"gitID":"JasmineSee"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":26,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":28,"author":{"gitID":"JasmineSee"},"content":"//@@author JasmineSee"},{"lineNumber":29,"author":{"gitID":"JasmineSee"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"JasmineSee"},"content":" * Contains integration tests (interaction with the Model) for {@code TagCommand}."},{"lineNumber":31,"author":{"gitID":"JasmineSee"},"content":" */"},{"lineNumber":32,"author":{"gitID":"JasmineSee"},"content":"public class TagCommandTest {"},{"lineNumber":33,"author":{"gitID":"JasmineSee"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":35,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"JasmineSee"},"content":"    public void equals() {"},{"lineNumber":37,"author":{"gitID":"JasmineSee"},"content":"        TagContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":38,"author":{"gitID":"JasmineSee"},"content":"                new TagContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":39,"author":{"gitID":"JasmineSee"},"content":"        TagContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":40,"author":{"gitID":"JasmineSee"},"content":"                new TagContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":41,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":42,"author":{"gitID":"JasmineSee"},"content":"        TagCommand tagFirstCommand \u003d new TagCommand(firstPredicate);"},{"lineNumber":43,"author":{"gitID":"JasmineSee"},"content":"        TagCommand tagSecondCommand \u003d new TagCommand(secondPredicate);"},{"lineNumber":44,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":45,"author":{"gitID":"JasmineSee"},"content":"        // same object -\u003e returns true"},{"lineNumber":46,"author":{"gitID":"JasmineSee"},"content":"        assertTrue(tagFirstCommand.equals(tagFirstCommand));"},{"lineNumber":47,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":48,"author":{"gitID":"JasmineSee"},"content":"        // same values -\u003e returns true"},{"lineNumber":49,"author":{"gitID":"JasmineSee"},"content":"        TagCommand tagFirstCommandCopy \u003d new TagCommand(firstPredicate);"},{"lineNumber":50,"author":{"gitID":"JasmineSee"},"content":"        assertTrue(tagFirstCommand.equals(tagFirstCommandCopy));"},{"lineNumber":51,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":52,"author":{"gitID":"JasmineSee"},"content":"        // different types -\u003e returns false"},{"lineNumber":53,"author":{"gitID":"JasmineSee"},"content":"        assertFalse(tagFirstCommand.equals(1));"},{"lineNumber":54,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":55,"author":{"gitID":"JasmineSee"},"content":"        // null -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"JasmineSee"},"content":"        assertFalse(tagFirstCommand.equals(null));"},{"lineNumber":57,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":58,"author":{"gitID":"JasmineSee"},"content":"        // different person -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"JasmineSee"},"content":"        assertFalse(tagFirstCommand.equals(tagSecondCommand));"},{"lineNumber":60,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":62,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"JasmineSee"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":64,"author":{"gitID":"JasmineSee"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":65,"author":{"gitID":"JasmineSee"},"content":"        TagCommand command \u003d prepareCommand(\" \");"},{"lineNumber":66,"author":{"gitID":"JasmineSee"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":67,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":69,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"JasmineSee"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":71,"author":{"gitID":"JasmineSee"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 4);"},{"lineNumber":72,"author":{"gitID":"JasmineSee"},"content":"        TagCommand command \u003d prepareCommand(\"owesMoney colleagues criminal\");"},{"lineNumber":73,"author":{"gitID":"JasmineSee"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BENSON, CARL, DANIEL, ELLE));"},{"lineNumber":74,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":76,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"JasmineSee"},"content":"     * Parses {@code userInput} into a {@code TagCommand}."},{"lineNumber":78,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"JasmineSee"},"content":"    private TagCommand prepareCommand(String userInput) {"},{"lineNumber":80,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":81,"author":{"gitID":"JasmineSee"},"content":"        TagCommand command \u003d"},{"lineNumber":82,"author":{"gitID":"JasmineSee"},"content":"                new TagCommand(new TagContainsKeywordsPredicate(Arrays.asList(userInput.toLowerCase().split(\"\\\\s+\"))));"},{"lineNumber":83,"author":{"gitID":"JasmineSee"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":84,"author":{"gitID":"JasmineSee"},"content":"        return command;"},{"lineNumber":85,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":87,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"JasmineSee"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"JasmineSee"},"content":"     * - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"JasmineSee"},"content":"     * - the {@code FilteredList\u003cReadOnlyPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":91,"author":{"gitID":"JasmineSee"},"content":"     * - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":92,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"JasmineSee"},"content":"    private void assertCommandSuccess(TagCommand command, String expectedMessage, List\u003cReadOnlyPerson\u003e expectedList) {"},{"lineNumber":94,"author":{"gitID":"JasmineSee"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":95,"author":{"gitID":"JasmineSee"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":96,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":97,"author":{"gitID":"JasmineSee"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":98,"author":{"gitID":"JasmineSee"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":99,"author":{"gitID":"JasmineSee"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":100,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"JasmineSee"},"content":"}"}],"authorContributionMap":{"JasmineSee":77,"-":24}},{"path":"src/main/java/seedu/address/commons/events/ui/PersonPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.ui.PersonCard;"},{"lineNumber":5,"author":{"gitID":"blaqkrow"},"content":"//@@author blaqkrow"},{"lineNumber":6,"author":{"gitID":"blaqkrow"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"blaqkrow"},"content":" * Represents a selection change in the Person List Panel"},{"lineNumber":8,"author":{"gitID":"blaqkrow"},"content":" */"},{"lineNumber":9,"author":{"gitID":"blaqkrow"},"content":"public class PersonPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":11,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":12,"author":{"gitID":"blaqkrow"},"content":"    private final PersonCard newSelection;"},{"lineNumber":13,"author":{"gitID":"blaqkrow"},"content":"    private final int selectionIndex;"},{"lineNumber":14,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":15,"author":{"gitID":"blaqkrow"},"content":"    public PersonPanelSelectionChangedEvent(PersonCard newSelection, int selectionIndex) {"},{"lineNumber":16,"author":{"gitID":"blaqkrow"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":17,"author":{"gitID":"blaqkrow"},"content":"        this.selectionIndex \u003d selectionIndex;"},{"lineNumber":18,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":20,"author":{"gitID":"blaqkrow"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"blaqkrow"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitID":"blaqkrow"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":23,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":25,"author":{"gitID":"blaqkrow"},"content":"    public PersonCard getNewSelection() {"},{"lineNumber":26,"author":{"gitID":"blaqkrow"},"content":"        return newSelection;"},{"lineNumber":27,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"blaqkrow"},"content":"    public int getSelectionIndex() {"},{"lineNumber":29,"author":{"gitID":"blaqkrow"},"content":"        return  selectionIndex; }"},{"lineNumber":30,"author":{"gitID":"blaqkrow"},"content":"}"}],"authorContributionMap":{"-":4,"blaqkrow":26}},{"path":"src/main/java/seedu/address/ui/DeleteButton.java","lines":[{"lineNumber":1,"author":{"gitID":"blaqkrow"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":3,"author":{"gitID":"blaqkrow"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"blaqkrow"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":6,"author":{"gitID":"blaqkrow"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":8,"author":{"gitID":"blaqkrow"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"blaqkrow"},"content":"import javafx.scene.control.Button;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"blaqkrow"},"content":"//@@author blaqkrow"},{"lineNumber":18,"author":{"gitID":"blaqkrow"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"blaqkrow"},"content":" * The UI component that is responsible for deleting selected contacts in the PersonListPanel."},{"lineNumber":20,"author":{"gitID":"blaqkrow"},"content":" */"},{"lineNumber":21,"author":{"gitID":"blaqkrow"},"content":"public class DeleteButton extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":23,"author":{"gitID":"blaqkrow"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":24,"author":{"gitID":"blaqkrow"},"content":"    private static final String FXML \u003d \"DeleteButton.fxml\";"},{"lineNumber":25,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":26,"author":{"gitID":"blaqkrow"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":27,"author":{"gitID":"blaqkrow"},"content":"    private final Logic logic;"},{"lineNumber":28,"author":{"gitID":"blaqkrow"},"content":"    private int selectedIndex;"},{"lineNumber":29,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":30,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"blaqkrow"},"content":"    private Button deleteButton;"},{"lineNumber":32,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":33,"author":{"gitID":"blaqkrow"},"content":"    public DeleteButton(Logic logic, int selectedIn) {"},{"lineNumber":34,"author":{"gitID":"blaqkrow"},"content":"        super(FXML);"},{"lineNumber":35,"author":{"gitID":"blaqkrow"},"content":"        this.logic \u003d logic;"},{"lineNumber":36,"author":{"gitID":"blaqkrow"},"content":"        this.selectedIndex \u003d selectedIn;"},{"lineNumber":37,"author":{"gitID":"blaqkrow"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":38,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":40,"author":{"gitID":"blaqkrow"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"blaqkrow"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":42,"author":{"gitID":"blaqkrow"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"blaqkrow"},"content":"    private void handleDeleteButtonPressed() throws CommandException, ParseException, IOException {"},{"lineNumber":45,"author":{"gitID":"blaqkrow"},"content":"        CommandResult commandResult \u003d logic.execute(\"delete \" + getSelectedIndex());"},{"lineNumber":46,"author":{"gitID":"blaqkrow"},"content":"        logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":47,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":49,"author":{"gitID":"blaqkrow"},"content":"    private void setSelectedIndex(int i) {"},{"lineNumber":50,"author":{"gitID":"blaqkrow"},"content":"        selectedIndex \u003d i;"},{"lineNumber":51,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":53,"author":{"gitID":"blaqkrow"},"content":"    private int getSelectedIndex() {"},{"lineNumber":54,"author":{"gitID":"blaqkrow"},"content":"        return selectedIndex;"},{"lineNumber":55,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":57,"author":{"gitID":"blaqkrow"},"content":"    @Subscribe"},{"lineNumber":58,"author":{"gitID":"blaqkrow"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":59,"author":{"gitID":"blaqkrow"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":60,"author":{"gitID":"blaqkrow"},"content":"        int baseOneIndex \u003d event.getSelectionIndex() + 1;"},{"lineNumber":61,"author":{"gitID":"blaqkrow"},"content":"        setSelectedIndex(baseOneIndex);"},{"lineNumber":62,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"blaqkrow"},"content":"}"}],"authorContributionMap":{"blaqkrow":56,"-":7}},{"path":"src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Indicates that a new result is available."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class NewResultAvailableEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public final String message;"},{"lineNumber":11,"author":{"gitID":"blaqkrow"},"content":"    public final boolean unknownCommandEntered;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public NewResultAvailableEvent(String message) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.message \u003d message;"},{"lineNumber":15,"author":{"gitID":"blaqkrow"},"content":"        if (message.equals(\"Unknown command\")) {"},{"lineNumber":16,"author":{"gitID":"blaqkrow"},"content":"            unknownCommandEntered \u003d true;"},{"lineNumber":17,"author":{"gitID":"JasmineSee"},"content":"        } else {"},{"lineNumber":18,"author":{"gitID":"blaqkrow"},"content":"            unknownCommandEntered \u003d false;"},{"lineNumber":19,"author":{"gitID":"blaqkrow"},"content":"        }"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"blaqkrow"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"blaqkrow"},"content":"     * returns if command entered is valid"},{"lineNumber":29,"author":{"gitID":"blaqkrow"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"blaqkrow"},"content":"    public boolean isUnknownCommandEntered() {"},{"lineNumber":31,"author":{"gitID":"blaqkrow"},"content":"        return unknownCommandEntered;"},{"lineNumber":32,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"JasmineSee":1,"-":21,"blaqkrow":11}},{"path":"src/main/java/seedu/address/commons/events/ui/PhotoChangeEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"JasmineSee"},"content":"//@@author JasmineSee"},{"lineNumber":6,"author":{"gitID":"JasmineSee"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"JasmineSee"},"content":" * Indicates that a photo change is occurring."},{"lineNumber":8,"author":{"gitID":"JasmineSee"},"content":" */"},{"lineNumber":9,"author":{"gitID":"JasmineSee"},"content":"public class PhotoChangeEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":11,"author":{"gitID":"JasmineSee"},"content":"    public PhotoChangeEvent() {"},{"lineNumber":12,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":14,"author":{"gitID":"JasmineSee"},"content":"    @Override"},{"lineNumber":15,"author":{"gitID":"JasmineSee"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitID":"JasmineSee"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":17,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"JasmineSee"},"content":"}"}],"authorContributionMap":{"JasmineSee":14,"-":4}},{"path":"src/main/java/seedu/address/ui/PhoneTextField.java","lines":[{"lineNumber":1,"author":{"gitID":"blaqkrow"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":3,"author":{"gitID":"blaqkrow"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":5,"author":{"gitID":"blaqkrow"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":7,"author":{"gitID":"blaqkrow"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"blaqkrow"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":12,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":13,"author":{"gitID":"blaqkrow"},"content":"//@@author blaqkrow"},{"lineNumber":14,"author":{"gitID":"blaqkrow"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"blaqkrow"},"content":" * The UI component that is responsible for saving and displaying the currently selected contact\u0027s phone number."},{"lineNumber":16,"author":{"gitID":"blaqkrow"},"content":" */"},{"lineNumber":17,"author":{"gitID":"blaqkrow"},"content":"public class PhoneTextField extends UiPart\u003cRegion\u003e {"},{"lineNumber":18,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":19,"author":{"gitID":"blaqkrow"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":20,"author":{"gitID":"blaqkrow"},"content":"    private static final String FXML \u003d \"PhoneTextField.fxml\";"},{"lineNumber":21,"author":{"gitID":"blaqkrow"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":22,"author":{"gitID":"blaqkrow"},"content":"    private int selectedIndex;"},{"lineNumber":23,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":24,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitID":"blaqkrow"},"content":"    private TextField phoneTextField;"},{"lineNumber":26,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":27,"author":{"gitID":"blaqkrow"},"content":"    public PhoneTextField() {"},{"lineNumber":28,"author":{"gitID":"blaqkrow"},"content":"        super(FXML);"},{"lineNumber":29,"author":{"gitID":"blaqkrow"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":30,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":32,"author":{"gitID":"blaqkrow"},"content":"    public String getPhoneTextField() {"},{"lineNumber":33,"author":{"gitID":"blaqkrow"},"content":"        return phoneTextField.getText();"},{"lineNumber":34,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":36,"author":{"gitID":"blaqkrow"},"content":"    public void setPhoneTextField(String text) {"},{"lineNumber":37,"author":{"gitID":"blaqkrow"},"content":"        phoneTextField.setText(text);"},{"lineNumber":38,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"blaqkrow"},"content":"    public TextField getObject() {"},{"lineNumber":40,"author":{"gitID":"blaqkrow"},"content":"        return phoneTextField;"},{"lineNumber":41,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":43,"author":{"gitID":"blaqkrow"},"content":"    @Subscribe"},{"lineNumber":44,"author":{"gitID":"blaqkrow"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":45,"author":{"gitID":"blaqkrow"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":46,"author":{"gitID":"blaqkrow"},"content":"        setPhoneTextField(event.getNewSelection().person.getPhone().toString());"},{"lineNumber":47,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":49,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":50,"author":{"gitID":"blaqkrow"},"content":"}"}],"authorContributionMap":{"blaqkrow":47,"-":3}},{"path":"src/main/java/seedu/address/ui/AddressTextField.java","lines":[{"lineNumber":1,"author":{"gitID":"blaqkrow"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":3,"author":{"gitID":"blaqkrow"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":5,"author":{"gitID":"blaqkrow"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":7,"author":{"gitID":"blaqkrow"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"blaqkrow"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":12,"author":{"gitID":"blaqkrow"},"content":"//@@author blaqkrow"},{"lineNumber":13,"author":{"gitID":"blaqkrow"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"blaqkrow"},"content":" * The UI component that is responsible for saving and displaying the currently selected contact\u0027s address."},{"lineNumber":15,"author":{"gitID":"blaqkrow"},"content":" */"},{"lineNumber":16,"author":{"gitID":"blaqkrow"},"content":"public class AddressTextField extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":18,"author":{"gitID":"blaqkrow"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":19,"author":{"gitID":"blaqkrow"},"content":"    private static final String FXML \u003d \"AddressTextField.fxml\";"},{"lineNumber":20,"author":{"gitID":"blaqkrow"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":21,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":22,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitID":"blaqkrow"},"content":"    private TextField addressTextField;"},{"lineNumber":24,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":25,"author":{"gitID":"blaqkrow"},"content":"    public AddressTextField() {"},{"lineNumber":26,"author":{"gitID":"blaqkrow"},"content":"        super(FXML);"},{"lineNumber":27,"author":{"gitID":"blaqkrow"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":28,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":30,"author":{"gitID":"blaqkrow"},"content":"    public String getAddressTextField() {"},{"lineNumber":31,"author":{"gitID":"blaqkrow"},"content":"        return addressTextField.getText();"},{"lineNumber":32,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":34,"author":{"gitID":"blaqkrow"},"content":"    public void setAddressTextField(String text) {"},{"lineNumber":35,"author":{"gitID":"blaqkrow"},"content":"        addressTextField.setText(text);"},{"lineNumber":36,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":38,"author":{"gitID":"blaqkrow"},"content":"    @Subscribe"},{"lineNumber":39,"author":{"gitID":"blaqkrow"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":40,"author":{"gitID":"blaqkrow"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":41,"author":{"gitID":"blaqkrow"},"content":"        setAddressTextField(event.getNewSelection().person.getAddress().toString());"},{"lineNumber":42,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":44,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":45,"author":{"gitID":"blaqkrow"},"content":"}"},{"lineNumber":46,"author":{"gitID":"blaqkrow"},"content":""}],"authorContributionMap":{"blaqkrow":43,"-":3}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"blaqkrow"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"blaqkrow"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException, IOException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":26,"blaqkrow":5}},{"path":"src/main/java/seedu/address/ui/NameTextField.java","lines":[{"lineNumber":1,"author":{"gitID":"blaqkrow"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":3,"author":{"gitID":"blaqkrow"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":5,"author":{"gitID":"blaqkrow"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":7,"author":{"gitID":"blaqkrow"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"blaqkrow"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":12,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":13,"author":{"gitID":"blaqkrow"},"content":"//@@author blaqkrow"},{"lineNumber":14,"author":{"gitID":"blaqkrow"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"blaqkrow"},"content":" * The UI component that is responsible for saving and displaying the currently selected contact\u0027s name."},{"lineNumber":16,"author":{"gitID":"blaqkrow"},"content":" */"},{"lineNumber":17,"author":{"gitID":"blaqkrow"},"content":"public class NameTextField extends UiPart\u003cRegion\u003e {"},{"lineNumber":18,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":19,"author":{"gitID":"blaqkrow"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":20,"author":{"gitID":"blaqkrow"},"content":"    private static final String FXML \u003d \"NameTextField.fxml\";"},{"lineNumber":21,"author":{"gitID":"blaqkrow"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":22,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":23,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"blaqkrow"},"content":"    private TextField nameTextField;"},{"lineNumber":25,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":26,"author":{"gitID":"blaqkrow"},"content":"    public NameTextField() {"},{"lineNumber":27,"author":{"gitID":"blaqkrow"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitID":"blaqkrow"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":29,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"blaqkrow"},"content":"    public String getNameTextField() {"},{"lineNumber":31,"author":{"gitID":"blaqkrow"},"content":"        return nameTextField.getText();"},{"lineNumber":32,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":34,"author":{"gitID":"blaqkrow"},"content":"    public void setNameTextField(String text) {"},{"lineNumber":35,"author":{"gitID":"blaqkrow"},"content":"        nameTextField.setText(text);"},{"lineNumber":36,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"blaqkrow"},"content":"    public TextField getObject() {"},{"lineNumber":38,"author":{"gitID":"blaqkrow"},"content":"        return nameTextField;"},{"lineNumber":39,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"blaqkrow"},"content":"    @Subscribe"},{"lineNumber":41,"author":{"gitID":"blaqkrow"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":42,"author":{"gitID":"blaqkrow"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":43,"author":{"gitID":"blaqkrow"},"content":"        setNameTextField(event.getNewSelection().person.getName().toString());"},{"lineNumber":44,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"blaqkrow"},"content":"}"}],"authorContributionMap":{"blaqkrow":42,"-":3}},{"path":"src/main/java/seedu/address/ui/EmailTextField.java","lines":[{"lineNumber":1,"author":{"gitID":"blaqkrow"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":3,"author":{"gitID":"blaqkrow"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":5,"author":{"gitID":"blaqkrow"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":7,"author":{"gitID":"blaqkrow"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"blaqkrow"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":12,"author":{"gitID":"blaqkrow"},"content":"//@@author blaqkrow"},{"lineNumber":13,"author":{"gitID":"blaqkrow"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"blaqkrow"},"content":" * The UI component that is responsible for saving and displaying the currently selected contact\u0027s email."},{"lineNumber":15,"author":{"gitID":"blaqkrow"},"content":" */"},{"lineNumber":16,"author":{"gitID":"blaqkrow"},"content":"public class EmailTextField extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":18,"author":{"gitID":"blaqkrow"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":19,"author":{"gitID":"blaqkrow"},"content":"    private static final String FXML \u003d \"EmailTextField.fxml\";"},{"lineNumber":20,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":21,"author":{"gitID":"blaqkrow"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":22,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":23,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"blaqkrow"},"content":"    private TextField emailTextField;"},{"lineNumber":25,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":26,"author":{"gitID":"blaqkrow"},"content":"    public EmailTextField() {"},{"lineNumber":27,"author":{"gitID":"blaqkrow"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitID":"blaqkrow"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":29,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":31,"author":{"gitID":"blaqkrow"},"content":"    public String getEmailTextField() {"},{"lineNumber":32,"author":{"gitID":"blaqkrow"},"content":"        return emailTextField.getText();"},{"lineNumber":33,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":35,"author":{"gitID":"blaqkrow"},"content":"    public void setEmailTextField(String text) {"},{"lineNumber":36,"author":{"gitID":"blaqkrow"},"content":"        emailTextField.setText(text);"},{"lineNumber":37,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":39,"author":{"gitID":"blaqkrow"},"content":"    public TextField getObject() {"},{"lineNumber":40,"author":{"gitID":"blaqkrow"},"content":"        return emailTextField;"},{"lineNumber":41,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":43,"author":{"gitID":"blaqkrow"},"content":"    @Subscribe"},{"lineNumber":44,"author":{"gitID":"blaqkrow"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":45,"author":{"gitID":"blaqkrow"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":46,"author":{"gitID":"blaqkrow"},"content":"        setEmailTextField(event.getNewSelection().person.getEmail().toString());"},{"lineNumber":47,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":49,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":50,"author":{"gitID":"blaqkrow"},"content":"}"},{"lineNumber":51,"author":{"gitID":"blaqkrow"},"content":""}],"authorContributionMap":{"blaqkrow":48,"-":3}},{"path":"src/main/java/seedu/address/ui/TagTextField.java","lines":[{"lineNumber":1,"author":{"gitID":"blaqkrow"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":3,"author":{"gitID":"blaqkrow"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"blaqkrow"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":6,"author":{"gitID":"blaqkrow"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":8,"author":{"gitID":"blaqkrow"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"blaqkrow"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":13,"author":{"gitID":"blaqkrow"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":15,"author":{"gitID":"blaqkrow"},"content":"//@@author blaqkrow"},{"lineNumber":16,"author":{"gitID":"blaqkrow"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"blaqkrow"},"content":" * The UI component that is responsible for saving and displaying the currently selected contact\u0027s tags."},{"lineNumber":18,"author":{"gitID":"blaqkrow"},"content":" */"},{"lineNumber":19,"author":{"gitID":"blaqkrow"},"content":"public class TagTextField extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":21,"author":{"gitID":"blaqkrow"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":22,"author":{"gitID":"blaqkrow"},"content":"    private static final String FXML \u003d \"TagTextField.fxml\";"},{"lineNumber":23,"author":{"gitID":"blaqkrow"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":24,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":25,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"blaqkrow"},"content":"    private TextArea tagTextArea;"},{"lineNumber":27,"author":{"gitID":"blaqkrow"},"content":"    private Set\u003cTag\u003e tagSet;"},{"lineNumber":28,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":29,"author":{"gitID":"blaqkrow"},"content":"    public TagTextField() {"},{"lineNumber":30,"author":{"gitID":"blaqkrow"},"content":"        super(FXML);"},{"lineNumber":31,"author":{"gitID":"blaqkrow"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":32,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":34,"author":{"gitID":"blaqkrow"},"content":"    public String getTagTextArea() {"},{"lineNumber":35,"author":{"gitID":"blaqkrow"},"content":"        return tagTextArea.getText();"},{"lineNumber":36,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":38,"author":{"gitID":"blaqkrow"},"content":"    public void setTagTextArea(String text) {"},{"lineNumber":39,"author":{"gitID":"blaqkrow"},"content":"        tagTextArea.setText(text);"},{"lineNumber":40,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":42,"author":{"gitID":"blaqkrow"},"content":"    public void setTagSet(Set\u003cTag\u003e t) {"},{"lineNumber":43,"author":{"gitID":"blaqkrow"},"content":"        tagSet \u003d t;"},{"lineNumber":44,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":46,"author":{"gitID":"blaqkrow"},"content":"    public Set\u003cTag\u003e getTagSet() {"},{"lineNumber":47,"author":{"gitID":"blaqkrow"},"content":"        return tagSet;"},{"lineNumber":48,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":50,"author":{"gitID":"blaqkrow"},"content":"    @Subscribe"},{"lineNumber":51,"author":{"gitID":"blaqkrow"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":52,"author":{"gitID":"blaqkrow"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":53,"author":{"gitID":"blaqkrow"},"content":"        StringBuilder currTags \u003d new StringBuilder();"},{"lineNumber":54,"author":{"gitID":"blaqkrow"},"content":"        tagSet \u003d event.getNewSelection().person.getTags();"},{"lineNumber":55,"author":{"gitID":"blaqkrow"},"content":"        setTagSet(event.getNewSelection().person.getTags());"},{"lineNumber":56,"author":{"gitID":"blaqkrow"},"content":"        for (Tag t : tagSet) {"},{"lineNumber":57,"author":{"gitID":"blaqkrow"},"content":"            if (currTags.length() !\u003d 0) {"},{"lineNumber":58,"author":{"gitID":"blaqkrow"},"content":"                currTags.append(\",\");"},{"lineNumber":59,"author":{"gitID":"blaqkrow"},"content":"            }"},{"lineNumber":60,"author":{"gitID":"blaqkrow"},"content":"            currTags.append(t.tagName);"},{"lineNumber":61,"author":{"gitID":"blaqkrow"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"blaqkrow"},"content":"        setTagTextArea(currTags.toString());"},{"lineNumber":63,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"blaqkrow"},"content":"    public TextArea getObject() {"},{"lineNumber":65,"author":{"gitID":"blaqkrow"},"content":"        return tagTextArea;"},{"lineNumber":66,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":68,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":69,"author":{"gitID":"blaqkrow"},"content":"}"},{"lineNumber":70,"author":{"gitID":"blaqkrow"},"content":""}],"authorContributionMap":{"blaqkrow":67,"-":3}},{"path":"src/test/java/seedu/address/logic/commands/DeletesAllPhotosCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"JasmineSee"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"JasmineSee"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":17,"author":{"gitID":"JasmineSee"},"content":"//@@author JasmineSee"},{"lineNumber":18,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":19,"author":{"gitID":"JasmineSee"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"JasmineSee"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code DeletesAllPhotosCommand}."},{"lineNumber":21,"author":{"gitID":"JasmineSee"},"content":" */"},{"lineNumber":22,"author":{"gitID":"JasmineSee"},"content":"public class DeletesAllPhotosCommandTest {"},{"lineNumber":23,"author":{"gitID":"JasmineSee"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":24,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":25,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"JasmineSee"},"content":"    public void execute_success() throws Exception {"},{"lineNumber":27,"author":{"gitID":"JasmineSee"},"content":"        prepareUploadPhotos();"},{"lineNumber":28,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":29,"author":{"gitID":"JasmineSee"},"content":"        DeletesAllPhotosCommand deletesPhotoCommand \u003d prepareCommand();"},{"lineNumber":30,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":31,"author":{"gitID":"JasmineSee"},"content":"        String expectedMessage \u003d String.format(DeletesAllPhotosCommand.MESSAGE_DELETES_ALL_IMAGES_SUCCESS);"},{"lineNumber":32,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":33,"author":{"gitID":"JasmineSee"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":35,"author":{"gitID":"JasmineSee"},"content":"        assertCommandSuccess(deletesPhotoCommand, model, expectedMessage, expectedModel);"},{"lineNumber":36,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":38,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"JasmineSee"},"content":"    public void execute_success_noPhotosToDelete() throws Exception {"},{"lineNumber":40,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":41,"author":{"gitID":"JasmineSee"},"content":"        DeletesAllPhotosCommand deletesPhotoCommand \u003d prepareCommand();"},{"lineNumber":42,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":43,"author":{"gitID":"JasmineSee"},"content":"        String expectedMessage \u003d String.format(DeletesAllPhotosCommand.MESSAGE_DELETES_ALL_IMAGES_FAILURE);"},{"lineNumber":44,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":45,"author":{"gitID":"JasmineSee"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":47,"author":{"gitID":"JasmineSee"},"content":"        assertCommandSuccess(deletesPhotoCommand, model, expectedMessage, expectedModel);"},{"lineNumber":48,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":50,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"JasmineSee"},"content":"     * Returns a {@code DeletesAllPhotosCommand}."},{"lineNumber":52,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"JasmineSee"},"content":"    private DeletesAllPhotosCommand prepareCommand() {"},{"lineNumber":54,"author":{"gitID":"JasmineSee"},"content":"        DeletesAllPhotosCommand deletesAllPhotosCommand \u003d new DeletesAllPhotosCommand();"},{"lineNumber":55,"author":{"gitID":"JasmineSee"},"content":"        deletesAllPhotosCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":56,"author":{"gitID":"JasmineSee"},"content":"        return deletesAllPhotosCommand;"},{"lineNumber":57,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":59,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"JasmineSee"},"content":"     * Preload photos to test data."},{"lineNumber":61,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"JasmineSee"},"content":"    private void prepareUploadPhotos() throws CommandException {"},{"lineNumber":63,"author":{"gitID":"JasmineSee"},"content":"        UploadPhotoCommand uploadPhotoCommand1 \u003d new UploadPhotoCommand(INDEX_FIRST_PERSON,"},{"lineNumber":64,"author":{"gitID":"JasmineSee"},"content":"                \"./src/test/resources/photos/connectus_icon.png\");"},{"lineNumber":65,"author":{"gitID":"JasmineSee"},"content":"        UploadPhotoCommand uploadPhotoCommand2 \u003d new UploadPhotoCommand(INDEX_SECOND_PERSON,"},{"lineNumber":66,"author":{"gitID":"JasmineSee"},"content":"                \"./src/test/resources/photos/connectus_icon.png\");"},{"lineNumber":67,"author":{"gitID":"JasmineSee"},"content":"        uploadPhotoCommand1.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":68,"author":{"gitID":"JasmineSee"},"content":"        uploadPhotoCommand2.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":69,"author":{"gitID":"JasmineSee"},"content":"        uploadPhotoCommand1.execute();"},{"lineNumber":70,"author":{"gitID":"JasmineSee"},"content":"        uploadPhotoCommand2.execute();"},{"lineNumber":71,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":73,"author":{"gitID":"JasmineSee"},"content":"}"}],"authorContributionMap":{"JasmineSee":62,"-":11}},{"path":"src/main/java/seedu/address/commons/events/ui/ThemeChangeEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"JasmineSee"},"content":"//@@author JasmineSee"},{"lineNumber":6,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":7,"author":{"gitID":"JasmineSee"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"JasmineSee"},"content":" * Indicates that a theme change is occurring."},{"lineNumber":9,"author":{"gitID":"JasmineSee"},"content":" */"},{"lineNumber":10,"author":{"gitID":"JasmineSee"},"content":"public class ThemeChangeEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":12,"author":{"gitID":"JasmineSee"},"content":"    private String theme;"},{"lineNumber":13,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":14,"author":{"gitID":"JasmineSee"},"content":"    public ThemeChangeEvent(String theme) {"},{"lineNumber":15,"author":{"gitID":"JasmineSee"},"content":"        this.theme \u003d theme;"},{"lineNumber":16,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":18,"author":{"gitID":"JasmineSee"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"JasmineSee"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"JasmineSee"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":23,"author":{"gitID":"JasmineSee"},"content":"    public String getTheme() {"},{"lineNumber":24,"author":{"gitID":"JasmineSee"},"content":"        return theme;"},{"lineNumber":25,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"JasmineSee"},"content":"}"}],"authorContributionMap":{"JasmineSee":22,"-":4}},{"path":"src/main/java/seedu/address/ui/ClearLogButton.java","lines":[{"lineNumber":1,"author":{"gitID":"blaqkrow"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":3,"author":{"gitID":"blaqkrow"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"blaqkrow"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":6,"author":{"gitID":"blaqkrow"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"blaqkrow"},"content":"import javafx.scene.control.Button;"},{"lineNumber":11,"author":{"gitID":"blaqkrow"},"content":"import javafx.scene.control.ButtonType;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"danielweide"},"content":"import seedu.address.logic.commands.ClearLogCommand;"},{"lineNumber":15,"author":{"gitID":"danielweide"},"content":"import seedu.address.logic.commands.LoggingCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitID":"blaqkrow"},"content":"//@@author blaqkrow"},{"lineNumber":19,"author":{"gitID":"blaqkrow"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"blaqkrow"},"content":" * The UI component that is responsible for clearing the log."},{"lineNumber":21,"author":{"gitID":"blaqkrow"},"content":" */"},{"lineNumber":22,"author":{"gitID":"blaqkrow"},"content":"public class ClearLogButton extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":24,"author":{"gitID":"blaqkrow"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":25,"author":{"gitID":"blaqkrow"},"content":"    private static final String FXML \u003d \"ClearLogButton.fxml\";"},{"lineNumber":26,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":27,"author":{"gitID":"blaqkrow"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":28,"author":{"gitID":"blaqkrow"},"content":"    private LoggingCommand loggingCommand;"},{"lineNumber":29,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":30,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"blaqkrow"},"content":"    private Button deleteButton;"},{"lineNumber":32,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":33,"author":{"gitID":"blaqkrow"},"content":"    public ClearLogButton() {"},{"lineNumber":34,"author":{"gitID":"blaqkrow"},"content":"        super(FXML);"},{"lineNumber":35,"author":{"gitID":"blaqkrow"},"content":"        loggingCommand \u003d new LoggingCommand();"},{"lineNumber":36,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":38,"author":{"gitID":"blaqkrow"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"blaqkrow"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":40,"author":{"gitID":"blaqkrow"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"blaqkrow"},"content":"    private void handleClearLogButtonPressed() throws CommandException, ParseException, IOException {"},{"lineNumber":43,"author":{"gitID":"blaqkrow"},"content":"        Alert alert \u003d new Alert(AlertType.CONFIRMATION, \"Are you sure you want clear the log?\","},{"lineNumber":44,"author":{"gitID":"blaqkrow"},"content":"                ButtonType.YES, ButtonType.NO);"},{"lineNumber":45,"author":{"gitID":"blaqkrow"},"content":"        alert.showAndWait();"},{"lineNumber":46,"author":{"gitID":"blaqkrow"},"content":"        if (alert.getResult() \u003d\u003d ButtonType.YES) {"},{"lineNumber":47,"author":{"gitID":"blaqkrow"},"content":"            ClearLogCommand clearLogCommand \u003d new ClearLogCommand();"},{"lineNumber":48,"author":{"gitID":"blaqkrow"},"content":"            clearLogCommand.execute();"},{"lineNumber":49,"author":{"gitID":"blaqkrow"},"content":"            logger.info(\"Log has been cleared.\");"},{"lineNumber":50,"author":{"gitID":"blaqkrow"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"blaqkrow"},"content":"}"}],"authorContributionMap":{"danielweide":2,"blaqkrow":44,"-":6}},{"path":"src/main/java/seedu/address/ui/EmailButton.java","lines":[{"lineNumber":1,"author":{"gitID":"blaqkrow"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":3,"author":{"gitID":"blaqkrow"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"blaqkrow"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":6,"author":{"gitID":"blaqkrow"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":8,"author":{"gitID":"blaqkrow"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"blaqkrow"},"content":"import javafx.scene.control.Button;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":13,"author":{"gitID":"blaqkrow"},"content":"import seedu.address.logic.commands.LoggingCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"blaqkrow"},"content":"//@@author blaqkrow"},{"lineNumber":17,"author":{"gitID":"blaqkrow"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"blaqkrow"},"content":" * The UI component that is responsible for emailing the selected person."},{"lineNumber":19,"author":{"gitID":"blaqkrow"},"content":" */"},{"lineNumber":20,"author":{"gitID":"blaqkrow"},"content":"public class EmailButton extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":22,"author":{"gitID":"blaqkrow"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":23,"author":{"gitID":"blaqkrow"},"content":"    private static final String FXML \u003d \"EmailButton.fxml\";"},{"lineNumber":24,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":25,"author":{"gitID":"blaqkrow"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":26,"author":{"gitID":"blaqkrow"},"content":"    private String selectedEmail  \u003d \"\";"},{"lineNumber":27,"author":{"gitID":"blaqkrow"},"content":"    private LoggingCommand lg \u003d new LoggingCommand();"},{"lineNumber":28,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":29,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"blaqkrow"},"content":"    private Button emailButton;"},{"lineNumber":31,"author":{"gitID":"blaqkrow"},"content":"    public EmailButton() {"},{"lineNumber":32,"author":{"gitID":"blaqkrow"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"blaqkrow"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":34,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":36,"author":{"gitID":"blaqkrow"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"blaqkrow"},"content":"     * Handles the Email button pressed event."},{"lineNumber":38,"author":{"gitID":"blaqkrow"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"blaqkrow"},"content":"    private void handleEmailButtonPressed() throws CommandException, ParseException, IOException {"},{"lineNumber":41,"author":{"gitID":"blaqkrow"},"content":"        OpenEmailClient emailClient \u003d new OpenEmailClient(this.selectedEmail);"},{"lineNumber":42,"author":{"gitID":"blaqkrow"},"content":"        emailClient.sendMail();"},{"lineNumber":43,"author":{"gitID":"blaqkrow"},"content":"        lg.keepLog(\"Email client opened!\", \"Email\");"},{"lineNumber":44,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":46,"author":{"gitID":"blaqkrow"},"content":"    @Subscribe"},{"lineNumber":47,"author":{"gitID":"blaqkrow"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":48,"author":{"gitID":"blaqkrow"},"content":"        this.selectedEmail \u003d event.getNewSelection().person.emailProperty().getValue().toString();"},{"lineNumber":49,"author":{"gitID":"blaqkrow"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":50,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":52,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":53,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":54,"author":{"gitID":"blaqkrow"},"content":"}"}],"authorContributionMap":{"blaqkrow":49,"-":5}},{"path":"src/main/java/seedu/address/ui/EditButton.java","lines":[{"lineNumber":1,"author":{"gitID":"blaqkrow"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":3,"author":{"gitID":"blaqkrow"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"blaqkrow"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":6,"author":{"gitID":"blaqkrow"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":8,"author":{"gitID":"blaqkrow"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"blaqkrow"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":10,"author":{"gitID":"blaqkrow"},"content":"import javafx.scene.control.Button;"},{"lineNumber":11,"author":{"gitID":"blaqkrow"},"content":"import javafx.scene.control.ButtonType;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":15,"author":{"gitID":"blaqkrow"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":18,"author":{"gitID":"blaqkrow"},"content":"import seedu.address.logic.commands.LoggingCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"blaqkrow"},"content":"//@@author blaqkrow"},{"lineNumber":21,"author":{"gitID":"blaqkrow"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"blaqkrow"},"content":" * The UI component that is responsible for editing selected contacts in the PersonListPanel."},{"lineNumber":23,"author":{"gitID":"blaqkrow"},"content":" */"},{"lineNumber":24,"author":{"gitID":"blaqkrow"},"content":"public class EditButton extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"blaqkrow"},"content":"    public static final String NAME_ERROR \u003d \"NAME_ERROR\";"},{"lineNumber":26,"author":{"gitID":"blaqkrow"},"content":"    public static final String EMAIL_ERROR \u003d \"EMAIL_ERROR\";"},{"lineNumber":27,"author":{"gitID":"blaqkrow"},"content":"    public static final String PHONE_ERROR \u003d \"PHONE_ERROR\";"},{"lineNumber":28,"author":{"gitID":"blaqkrow"},"content":"    public static final String TAG_ERROR \u003d \"TAG_ERROR\";"},{"lineNumber":29,"author":{"gitID":"blaqkrow"},"content":"    public static final String VALIDATION_SUCCESS \u003d \"VALIDATION_SUCCESS\";"},{"lineNumber":30,"author":{"gitID":"blaqkrow"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":31,"author":{"gitID":"blaqkrow"},"content":"    private static final String FXML \u003d \"EditButton.fxml\";"},{"lineNumber":32,"author":{"gitID":"blaqkrow"},"content":"    private static NameTextField nameTextField;"},{"lineNumber":33,"author":{"gitID":"blaqkrow"},"content":"    private static PhoneTextField phoneTextField;"},{"lineNumber":34,"author":{"gitID":"blaqkrow"},"content":"    private static EmailTextField emailTextField;"},{"lineNumber":35,"author":{"gitID":"blaqkrow"},"content":"    private static AddressTextField addressTextFieldTextField;"},{"lineNumber":36,"author":{"gitID":"blaqkrow"},"content":"    private static TagTextField tagTextField;"},{"lineNumber":37,"author":{"gitID":"blaqkrow"},"content":"    private static int selectedIndex;"},{"lineNumber":38,"author":{"gitID":"blaqkrow"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":39,"author":{"gitID":"blaqkrow"},"content":"    private final Logic logic;"},{"lineNumber":40,"author":{"gitID":"blaqkrow"},"content":"    private LoggingCommand lg \u003d new LoggingCommand();"},{"lineNumber":41,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":42,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"blaqkrow"},"content":"    private Button editButton;"},{"lineNumber":44,"author":{"gitID":"blaqkrow"},"content":"    public EditButton(Logic logic, NameTextField ntf, PhoneTextField ptf,"},{"lineNumber":45,"author":{"gitID":"blaqkrow"},"content":"                      EmailTextField etf, AddressTextField atf, TagTextField ttf) {"},{"lineNumber":46,"author":{"gitID":"blaqkrow"},"content":"        super(FXML);"},{"lineNumber":47,"author":{"gitID":"blaqkrow"},"content":"        this.logic \u003d logic;"},{"lineNumber":48,"author":{"gitID":"blaqkrow"},"content":"        this.nameTextField \u003d ntf;"},{"lineNumber":49,"author":{"gitID":"blaqkrow"},"content":"        this.phoneTextField \u003d ptf;"},{"lineNumber":50,"author":{"gitID":"blaqkrow"},"content":"        this.emailTextField \u003d etf;"},{"lineNumber":51,"author":{"gitID":"blaqkrow"},"content":"        this.addressTextFieldTextField \u003d atf;"},{"lineNumber":52,"author":{"gitID":"blaqkrow"},"content":"        this.tagTextField \u003d ttf;"},{"lineNumber":53,"author":{"gitID":"blaqkrow"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":54,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":56,"author":{"gitID":"blaqkrow"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"blaqkrow"},"content":"     * Handles the edit button pressed event."},{"lineNumber":58,"author":{"gitID":"blaqkrow"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitID":"blaqkrow"},"content":"    private void handleEditButtonPressed() throws CommandException, IllegalValueException, IOException {"},{"lineNumber":61,"author":{"gitID":"blaqkrow"},"content":"        StringBuilder command \u003d new StringBuilder();"},{"lineNumber":62,"author":{"gitID":"blaqkrow"},"content":"        CommandResult commandResult;"},{"lineNumber":63,"author":{"gitID":"blaqkrow"},"content":"        Alert alert;"},{"lineNumber":64,"author":{"gitID":"blaqkrow"},"content":"        String checkInputResult \u003d checkInput(nameTextField.getNameTextField(), phoneTextField.getPhoneTextField(),"},{"lineNumber":65,"author":{"gitID":"blaqkrow"},"content":"                emailTextField.getEmailTextField(), addressTextFieldTextField.getAddressTextField(),"},{"lineNumber":66,"author":{"gitID":"blaqkrow"},"content":"                tagTextField.getTagTextArea());"},{"lineNumber":67,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":68,"author":{"gitID":"blaqkrow"},"content":"        if (checkInputResult.equals(NAME_ERROR)) {"},{"lineNumber":69,"author":{"gitID":"blaqkrow"},"content":"            nameTextField.getObject().setStyle(\"-fx-text-inner-color: red;\");"},{"lineNumber":70,"author":{"gitID":"blaqkrow"},"content":"            alert \u003d new Alert(Alert.AlertType.ERROR, \"Please enter a valid name!\","},{"lineNumber":71,"author":{"gitID":"blaqkrow"},"content":"                    ButtonType.OK);"},{"lineNumber":72,"author":{"gitID":"blaqkrow"},"content":"            alert.showAndWait();"},{"lineNumber":73,"author":{"gitID":"blaqkrow"},"content":"            throw new IllegalValueException(\"Name contains illegal characters!\");"},{"lineNumber":74,"author":{"gitID":"blaqkrow"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"blaqkrow"},"content":"        if (checkInputResult.equals(PHONE_ERROR)) {"},{"lineNumber":76,"author":{"gitID":"blaqkrow"},"content":"            phoneTextField.getObject().setStyle(\"-fx-text-inner-color: red;\");"},{"lineNumber":77,"author":{"gitID":"blaqkrow"},"content":"            alert \u003d new Alert(Alert.AlertType.ERROR, \"Please enter phone no. without character values!\","},{"lineNumber":78,"author":{"gitID":"blaqkrow"},"content":"                    ButtonType.OK);"},{"lineNumber":79,"author":{"gitID":"blaqkrow"},"content":"            alert.showAndWait();"},{"lineNumber":80,"author":{"gitID":"blaqkrow"},"content":"            throw new IllegalValueException(\"Phone number contains illegal characters!\");"},{"lineNumber":81,"author":{"gitID":"blaqkrow"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"blaqkrow"},"content":"        if (checkInputResult.equals(EMAIL_ERROR)) {"},{"lineNumber":83,"author":{"gitID":"blaqkrow"},"content":"            emailTextField.getObject().setStyle(\"-fx-text-inner-color: red;\");"},{"lineNumber":84,"author":{"gitID":"blaqkrow"},"content":"            alert \u003d new Alert(Alert.AlertType.ERROR, \"Please enter a valid email address!\","},{"lineNumber":85,"author":{"gitID":"blaqkrow"},"content":"                    ButtonType.OK);"},{"lineNumber":86,"author":{"gitID":"blaqkrow"},"content":"            alert.showAndWait();"},{"lineNumber":87,"author":{"gitID":"blaqkrow"},"content":"            throw new IllegalValueException(\"Email contains illegal characters!\");"},{"lineNumber":88,"author":{"gitID":"blaqkrow"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"blaqkrow"},"content":"        if (checkInputResult.equals(TAG_ERROR)) {"},{"lineNumber":90,"author":{"gitID":"blaqkrow"},"content":"            tagTextField.getObject().setStyle(\"-fx-text-inner-color: red;\");"},{"lineNumber":91,"author":{"gitID":"blaqkrow"},"content":"            alert \u003d new Alert(Alert.AlertType.ERROR, \"Please enter a tag in the\""},{"lineNumber":92,"author":{"gitID":"blaqkrow"},"content":"                    + \" form: \u0027tag1\u0027,\u0027tag2\u0027,\u0027tag3\u0027,... Tags should contain Alphanumeric characters only!\","},{"lineNumber":93,"author":{"gitID":"blaqkrow"},"content":"                    ButtonType.OK);"},{"lineNumber":94,"author":{"gitID":"blaqkrow"},"content":"            alert.showAndWait();"},{"lineNumber":95,"author":{"gitID":"blaqkrow"},"content":"            throw new IllegalValueException(\"Tags contains illegal characters!\");"},{"lineNumber":96,"author":{"gitID":"blaqkrow"},"content":"        } else {"},{"lineNumber":97,"author":{"gitID":"blaqkrow"},"content":"            nameTextField.getObject().setStyle(\"-fx-text-inner-color: black;\");"},{"lineNumber":98,"author":{"gitID":"blaqkrow"},"content":"            phoneTextField.getObject().setStyle(\"-fx-text-inner-color: black;\");"},{"lineNumber":99,"author":{"gitID":"blaqkrow"},"content":"            emailTextField.getObject().setStyle(\"-fx-text-inner-color: black;\");"},{"lineNumber":100,"author":{"gitID":"blaqkrow"},"content":"            tagTextField.getObject().setStyle(\"-fx-text-inner-color: black;\");"},{"lineNumber":101,"author":{"gitID":"blaqkrow"},"content":"            command.append(\"edit \" + getSelectedIndex() + \" n/\""},{"lineNumber":102,"author":{"gitID":"blaqkrow"},"content":"                    + nameTextField.getNameTextField() + \" p/\" + phoneTextField.getPhoneTextField() + \" e/\""},{"lineNumber":103,"author":{"gitID":"blaqkrow"},"content":"                    + emailTextField.getEmailTextField()"},{"lineNumber":104,"author":{"gitID":"blaqkrow"},"content":"                    + \" a/\" + addressTextFieldTextField.getAddressTextField());"},{"lineNumber":105,"author":{"gitID":"blaqkrow"},"content":"            String tagTextArea \u003d tagTextField.getTagTextArea();"},{"lineNumber":106,"author":{"gitID":"blaqkrow"},"content":"            String[] tagSplit \u003d tagTextArea.split(\",\");"},{"lineNumber":107,"author":{"gitID":"blaqkrow"},"content":"            for (String s : tagSplit) {"},{"lineNumber":108,"author":{"gitID":"blaqkrow"},"content":"                command.append(\" t/\" + s.trim());"},{"lineNumber":109,"author":{"gitID":"blaqkrow"},"content":"            }"},{"lineNumber":110,"author":{"gitID":"blaqkrow"},"content":"            commandResult \u003d logic.execute(command.toString());"},{"lineNumber":111,"author":{"gitID":"blaqkrow"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":112,"author":{"gitID":"blaqkrow"},"content":"            lg.keepLog(commandResult.feedbackToUser, \"Edited\");"},{"lineNumber":113,"author":{"gitID":"blaqkrow"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"blaqkrow"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"blaqkrow"},"content":"     * Handles checking of content passed into the form"},{"lineNumber":117,"author":{"gitID":"blaqkrow"},"content":"     * @param name the name entered in nameTextField"},{"lineNumber":118,"author":{"gitID":"blaqkrow"},"content":"     * @param phone the name entered in phoneTextField"},{"lineNumber":119,"author":{"gitID":"blaqkrow"},"content":"     * @param email the name entered in emailTextField"},{"lineNumber":120,"author":{"gitID":"blaqkrow"},"content":"     * @param address the name entered in addressTextField"},{"lineNumber":121,"author":{"gitID":"blaqkrow"},"content":"     * @param tag the name entered in tagTextArea"},{"lineNumber":122,"author":{"gitID":"blaqkrow"},"content":"     * @return the corresponding format error, else if no error, return success"},{"lineNumber":123,"author":{"gitID":"blaqkrow"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"blaqkrow"},"content":"    public static String checkInput(String name, String phone, String email, String address, String tag) {"},{"lineNumber":125,"author":{"gitID":"blaqkrow"},"content":"        if (name.matches(\".*\\\\d+.*\") || name.isEmpty()) {"},{"lineNumber":126,"author":{"gitID":"blaqkrow"},"content":"            return NAME_ERROR;"},{"lineNumber":127,"author":{"gitID":"blaqkrow"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"blaqkrow"},"content":"        if (!phone.matches(\"[0-9]+\")) {"},{"lineNumber":129,"author":{"gitID":"blaqkrow"},"content":"            return PHONE_ERROR;"},{"lineNumber":130,"author":{"gitID":"blaqkrow"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"blaqkrow"},"content":"        if (!email.contains(\"@\") || !email.contains(\".\")) {"},{"lineNumber":132,"author":{"gitID":"blaqkrow"},"content":"            return EMAIL_ERROR;"},{"lineNumber":133,"author":{"gitID":"blaqkrow"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"blaqkrow"},"content":"        //check tag doesnt end with a special character"},{"lineNumber":135,"author":{"gitID":"blaqkrow"},"content":"        String[] tagSplit \u003d tag.split(\",\");"},{"lineNumber":136,"author":{"gitID":"blaqkrow"},"content":"        for (int i \u003d 0; i \u003c tagSplit.length; i++) {"},{"lineNumber":137,"author":{"gitID":"blaqkrow"},"content":"            if (!tagSplit[i].matches(\"[a-zA-Z0-9]*\")) {"},{"lineNumber":138,"author":{"gitID":"blaqkrow"},"content":"                return TAG_ERROR;"},{"lineNumber":139,"author":{"gitID":"blaqkrow"},"content":"            }"},{"lineNumber":140,"author":{"gitID":"blaqkrow"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"blaqkrow"},"content":"        return VALIDATION_SUCCESS;"},{"lineNumber":142,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"blaqkrow"},"content":"    private void setSelectedIndex(int i) {"},{"lineNumber":144,"author":{"gitID":"blaqkrow"},"content":"        selectedIndex \u003d i;"},{"lineNumber":145,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":147,"author":{"gitID":"blaqkrow"},"content":"    private int getSelectedIndex() {"},{"lineNumber":148,"author":{"gitID":"blaqkrow"},"content":"        return selectedIndex;"},{"lineNumber":149,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":151,"author":{"gitID":"blaqkrow"},"content":"    @Subscribe"},{"lineNumber":152,"author":{"gitID":"blaqkrow"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":153,"author":{"gitID":"blaqkrow"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":154,"author":{"gitID":"blaqkrow"},"content":"        int baseOneIndex \u003d event.getSelectionIndex() + 1;"},{"lineNumber":155,"author":{"gitID":"blaqkrow"},"content":"        setSelectedIndex(baseOneIndex);"},{"lineNumber":156,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"blaqkrow"},"content":"}"}],"authorContributionMap":{"blaqkrow":151,"-":6}},{"path":"src/test/java/systemtests/TagCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":9,"author":{"gitID":"JasmineSee"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_OWESMONEY;"},{"lineNumber":10,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":17,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.logic.commands.TagCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":19,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":21,"author":{"gitID":"JasmineSee"},"content":"//@@author JasmineSee"},{"lineNumber":22,"author":{"gitID":"JasmineSee"},"content":"public class TagCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":23,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":24,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"JasmineSee"},"content":"    public void tag() {"},{"lineNumber":26,"author":{"gitID":"JasmineSee"},"content":"        /* Case: find multiple tags in address book, command with leading spaces and trailing spaces"},{"lineNumber":27,"author":{"gitID":"JasmineSee"},"content":"         * -\u003e 2 persons found"},{"lineNumber":28,"author":{"gitID":"JasmineSee"},"content":"         */"},{"lineNumber":29,"author":{"gitID":"JasmineSee"},"content":"        String command \u003d \"   \" + TagCommand.COMMAND_WORD + \" \" + \"owesMoney\" + \"   \";"},{"lineNumber":30,"author":{"gitID":"JasmineSee"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":31,"author":{"gitID":"JasmineSee"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // Benson and Daniel has tags \"owesMoney\""},{"lineNumber":32,"author":{"gitID":"JasmineSee"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":33,"author":{"gitID":"JasmineSee"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":34,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":35,"author":{"gitID":"JasmineSee"},"content":"        /* Case: repeat previous tag command where person list is displaying the persons we are finding"},{"lineNumber":36,"author":{"gitID":"JasmineSee"},"content":"         * -\u003e 2 persons found"},{"lineNumber":37,"author":{"gitID":"JasmineSee"},"content":"         */"},{"lineNumber":38,"author":{"gitID":"JasmineSee"},"content":"        command \u003d TagCommand.COMMAND_WORD + \" \" + \"owesMoney\";"},{"lineNumber":39,"author":{"gitID":"JasmineSee"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":40,"author":{"gitID":"JasmineSee"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":41,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":42,"author":{"gitID":"JasmineSee"},"content":"        /* Case: undo previous tag command -\u003e rejected */"},{"lineNumber":43,"author":{"gitID":"JasmineSee"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":44,"author":{"gitID":"JasmineSee"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":45,"author":{"gitID":"JasmineSee"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":46,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":47,"author":{"gitID":"JasmineSee"},"content":"        /* Case: redo previous tag command -\u003e rejected */"},{"lineNumber":48,"author":{"gitID":"JasmineSee"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":49,"author":{"gitID":"JasmineSee"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":50,"author":{"gitID":"JasmineSee"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":51,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":52,"author":{"gitID":"JasmineSee"},"content":"        /* Case: find persons with same tags in address book after deleting 1 of the person -\u003e 1 person found */"},{"lineNumber":53,"author":{"gitID":"JasmineSee"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":54,"author":{"gitID":"JasmineSee"},"content":"        assert !getModel().getAddressBook().getPersonList().contains(BENSON);"},{"lineNumber":55,"author":{"gitID":"JasmineSee"},"content":"        command \u003d TagCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_OWESMONEY;"},{"lineNumber":56,"author":{"gitID":"JasmineSee"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":57,"author":{"gitID":"JasmineSee"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":58,"author":{"gitID":"JasmineSee"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":59,"author":{"gitID":"JasmineSee"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":60,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":61,"author":{"gitID":"JasmineSee"},"content":"        /* Case: find tag where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":62,"author":{"gitID":"JasmineSee"},"content":"        command \u003d TagCommand.COMMAND_WORD + \" colleagues\";"},{"lineNumber":63,"author":{"gitID":"JasmineSee"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":64,"author":{"gitID":"JasmineSee"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":65,"author":{"gitID":"JasmineSee"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":66,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":67,"author":{"gitID":"JasmineSee"},"content":"        /* Case: find multiple tags in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":68,"author":{"gitID":"JasmineSee"},"content":"        command \u003d TagCommand.COMMAND_WORD + \" colleagues criminal\";"},{"lineNumber":69,"author":{"gitID":"JasmineSee"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL, ELLE);"},{"lineNumber":70,"author":{"gitID":"JasmineSee"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":71,"author":{"gitID":"JasmineSee"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":72,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":73,"author":{"gitID":"JasmineSee"},"content":"        /* Case: find multiple tags in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":74,"author":{"gitID":"JasmineSee"},"content":"        command \u003d TagCommand.COMMAND_WORD + \" criminal colleagues\";"},{"lineNumber":75,"author":{"gitID":"JasmineSee"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":76,"author":{"gitID":"JasmineSee"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":77,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":78,"author":{"gitID":"JasmineSee"},"content":"        /* Case: find multiple tags in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":79,"author":{"gitID":"JasmineSee"},"content":"        command \u003d TagCommand.COMMAND_WORD + \" criminal colleagues criminal\";"},{"lineNumber":80,"author":{"gitID":"JasmineSee"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":81,"author":{"gitID":"JasmineSee"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":82,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":83,"author":{"gitID":"JasmineSee"},"content":"        /* Case: find multiple tags in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":84,"author":{"gitID":"JasmineSee"},"content":"         * -\u003e 2 persons found"},{"lineNumber":85,"author":{"gitID":"JasmineSee"},"content":"         */"},{"lineNumber":86,"author":{"gitID":"JasmineSee"},"content":"        command \u003d TagCommand.COMMAND_WORD + \" criminal colleagues NonMatchingKeyWord\";"},{"lineNumber":87,"author":{"gitID":"JasmineSee"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":88,"author":{"gitID":"JasmineSee"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":89,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":90,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":91,"author":{"gitID":"JasmineSee"},"content":"        /* Case: find tag in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":92,"author":{"gitID":"JasmineSee"},"content":"        command \u003d TagCommand.COMMAND_WORD + \" coLlEAguES\";"},{"lineNumber":93,"author":{"gitID":"JasmineSee"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":94,"author":{"gitID":"JasmineSee"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":95,"author":{"gitID":"JasmineSee"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":96,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":97,"author":{"gitID":"JasmineSee"},"content":"        /* Case: find tag in address book, keyword is substring of tag name -\u003e 1 persons found */"},{"lineNumber":98,"author":{"gitID":"JasmineSee"},"content":"        command \u003d TagCommand.COMMAND_WORD + \" leagues\";"},{"lineNumber":99,"author":{"gitID":"JasmineSee"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":100,"author":{"gitID":"JasmineSee"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":101,"author":{"gitID":"JasmineSee"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":102,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":103,"author":{"gitID":"JasmineSee"},"content":"        /* Case: find tag in address book, tag name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":104,"author":{"gitID":"JasmineSee"},"content":"        command \u003d TagCommand.COMMAND_WORD + \" colleaguesla\";"},{"lineNumber":105,"author":{"gitID":"JasmineSee"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":106,"author":{"gitID":"JasmineSee"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":107,"author":{"gitID":"JasmineSee"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":108,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":109,"author":{"gitID":"JasmineSee"},"content":"        /* Case: find tag not in address book -\u003e 0 persons found */"},{"lineNumber":110,"author":{"gitID":"JasmineSee"},"content":"        command \u003d TagCommand.COMMAND_WORD + \" student\";"},{"lineNumber":111,"author":{"gitID":"JasmineSee"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":112,"author":{"gitID":"JasmineSee"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":113,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":114,"author":{"gitID":"JasmineSee"},"content":"        /* Case: find name of person in address book -\u003e 0 persons found */"},{"lineNumber":115,"author":{"gitID":"JasmineSee"},"content":"        command \u003d TagCommand.COMMAND_WORD + \" \" + DANIEL.getName();"},{"lineNumber":116,"author":{"gitID":"JasmineSee"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":117,"author":{"gitID":"JasmineSee"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":118,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":119,"author":{"gitID":"JasmineSee"},"content":"        /* Case: find phone number of person in address book -\u003e 0 persons found */"},{"lineNumber":120,"author":{"gitID":"JasmineSee"},"content":"        command \u003d TagCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"},{"lineNumber":121,"author":{"gitID":"JasmineSee"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":122,"author":{"gitID":"JasmineSee"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":123,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":124,"author":{"gitID":"JasmineSee"},"content":"        /* Case: find address of person in address book -\u003e 0 persons found */"},{"lineNumber":125,"author":{"gitID":"JasmineSee"},"content":"        command \u003d TagCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"},{"lineNumber":126,"author":{"gitID":"JasmineSee"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":127,"author":{"gitID":"JasmineSee"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":128,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":129,"author":{"gitID":"JasmineSee"},"content":"        /* Case: find email of person in address book -\u003e 0 persons found */"},{"lineNumber":130,"author":{"gitID":"JasmineSee"},"content":"        command \u003d TagCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":131,"author":{"gitID":"JasmineSee"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":132,"author":{"gitID":"JasmineSee"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":133,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":134,"author":{"gitID":"JasmineSee"},"content":"        /* Case: find tag while a person is selected -\u003e selected card still selected */"},{"lineNumber":135,"author":{"gitID":"JasmineSee"},"content":"        showAllPersons();"},{"lineNumber":136,"author":{"gitID":"JasmineSee"},"content":"        selectPerson(Index.fromOneBased(4));"},{"lineNumber":137,"author":{"gitID":"JasmineSee"},"content":"        assert !getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName);"},{"lineNumber":138,"author":{"gitID":"JasmineSee"},"content":"        command \u003d TagCommand.COMMAND_WORD + \" criminal\";"},{"lineNumber":139,"author":{"gitID":"JasmineSee"},"content":"        ModelHelper.setFilteredList(expectedModel, ELLE);"},{"lineNumber":140,"author":{"gitID":"JasmineSee"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":141,"author":{"gitID":"JasmineSee"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":142,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":143,"author":{"gitID":"JasmineSee"},"content":"        /* Case: find tag in empty address book -\u003e 0 persons found */"},{"lineNumber":144,"author":{"gitID":"JasmineSee"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":145,"author":{"gitID":"JasmineSee"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"},{"lineNumber":146,"author":{"gitID":"JasmineSee"},"content":"        command \u003d TagCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_OWESMONEY;"},{"lineNumber":147,"author":{"gitID":"JasmineSee"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":148,"author":{"gitID":"JasmineSee"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":149,"author":{"gitID":"JasmineSee"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":150,"author":{"gitID":"JasmineSee"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":151,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":152,"author":{"gitID":"JasmineSee"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"JasmineSee"},"content":"        command \u003d \"TaG fRiEnDS\";"},{"lineNumber":154,"author":{"gitID":"JasmineSee"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":155,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":157,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"JasmineSee"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":159,"author":{"gitID":"JasmineSee"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":160,"author":{"gitID":"JasmineSee"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":161,"author":{"gitID":"JasmineSee"},"content":"     * These verifications are done by"},{"lineNumber":162,"author":{"gitID":"JasmineSee"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":163,"author":{"gitID":"JasmineSee"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":164,"author":{"gitID":"JasmineSee"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":165,"author":{"gitID":"JasmineSee"},"content":"     *"},{"lineNumber":166,"author":{"gitID":"JasmineSee"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":167,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"JasmineSee"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":169,"author":{"gitID":"JasmineSee"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":170,"author":{"gitID":"JasmineSee"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":171,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":172,"author":{"gitID":"JasmineSee"},"content":"        executeCommand(command);"},{"lineNumber":173,"author":{"gitID":"JasmineSee"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":174,"author":{"gitID":"JasmineSee"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":175,"author":{"gitID":"JasmineSee"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":176,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":178,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"JasmineSee"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":180,"author":{"gitID":"JasmineSee"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":181,"author":{"gitID":"JasmineSee"},"content":"     * These verifications are done by"},{"lineNumber":182,"author":{"gitID":"JasmineSee"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":183,"author":{"gitID":"JasmineSee"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":184,"author":{"gitID":"JasmineSee"},"content":"     * error style."},{"lineNumber":185,"author":{"gitID":"JasmineSee"},"content":"     *"},{"lineNumber":186,"author":{"gitID":"JasmineSee"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":187,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"JasmineSee"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":189,"author":{"gitID":"JasmineSee"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":190,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":191,"author":{"gitID":"JasmineSee"},"content":"        executeCommand(command);"},{"lineNumber":192,"author":{"gitID":"JasmineSee"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":193,"author":{"gitID":"JasmineSee"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":194,"author":{"gitID":"JasmineSee"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":195,"author":{"gitID":"JasmineSee"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":196,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"JasmineSee"},"content":"}"}],"authorContributionMap":{"JasmineSee":182,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":12,"author":{"gitID":"danielweide"},"content":"import seedu.address.logic.commands.ClearLogCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.logic.commands.DeletePhotoCommand;"},{"lineNumber":16,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.logic.commands.DeletesAllPhotosCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":18,"author":{"gitID":"blaqkrow"},"content":"import seedu.address.logic.commands.EmailCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":20,"author":{"gitID":"limshunyong"},"content":"import seedu.address.logic.commands.ExportCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":24,"author":{"gitID":"limshunyong"},"content":"import seedu.address.logic.commands.ImportCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":26,"author":{"gitID":"danielweide"},"content":"import seedu.address.logic.commands.QrCallCommand;"},{"lineNumber":27,"author":{"gitID":"danielweide"},"content":"import seedu.address.logic.commands.QrSaveContactCommand;"},{"lineNumber":28,"author":{"gitID":"danielweide"},"content":"import seedu.address.logic.commands.QrSmsCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":30,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.logic.commands.RemoveTagCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":32,"author":{"gitID":"limshunyong"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":33,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.logic.commands.TagCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":35,"author":{"gitID":"blaqkrow"},"content":"import seedu.address.logic.commands.UploadPhotoCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":66,"author":{"gitID":"danielweide"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitID":"danielweide"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":74,"author":{"gitID":"danielweide"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":78,"author":{"gitID":"danielweide"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":82,"author":{"gitID":"danielweide"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":86,"author":{"gitID":"danielweide"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":90,"author":{"gitID":"danielweide"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":94,"author":{"gitID":"danielweide"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":104,"author":{"gitID":"danielweide"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":108,"author":{"gitID":"danielweide"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"JasmineSee"},"content":"        case TagCommand.COMMAND_WORD:"},{"lineNumber":112,"author":{"gitID":"JasmineSee"},"content":"        case TagCommand.COMMAND_ALIAS:"},{"lineNumber":113,"author":{"gitID":"JasmineSee"},"content":"            return new TagCommandParser().parse(arguments);"},{"lineNumber":114,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":115,"author":{"gitID":"limshunyong"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":116,"author":{"gitID":"limshunyong"},"content":"        case SortCommand.COMMAND_ALIAS:"},{"lineNumber":117,"author":{"gitID":"limshunyong"},"content":"            return new SortCommand();"},{"lineNumber":118,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":119,"author":{"gitID":"JasmineSee"},"content":"        case RemoveTagCommand.COMMAND_WORD:"},{"lineNumber":120,"author":{"gitID":"JasmineSee"},"content":"        case RemoveTagCommand.COMMAND_ALIAS:"},{"lineNumber":121,"author":{"gitID":"JasmineSee"},"content":"            return new RemoveTagCommandParser().parse(arguments);"},{"lineNumber":122,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":123,"author":{"gitID":"limshunyong"},"content":"        case ImportCommand.COMMAND_WORD:"},{"lineNumber":124,"author":{"gitID":"limshunyong"},"content":"        case ImportCommand.COMMAND_ALIAS:"},{"lineNumber":125,"author":{"gitID":"limshunyong"},"content":"            return new ImportCommandParser().parse(arguments);"},{"lineNumber":126,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":127,"author":{"gitID":"limshunyong"},"content":"        case ExportCommand.COMMAND_WORD:"},{"lineNumber":128,"author":{"gitID":"limshunyong"},"content":"        case ExportCommand.COMMAND_ALIAS:"},{"lineNumber":129,"author":{"gitID":"limshunyong"},"content":"            return new ExportCommand();"},{"lineNumber":130,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":131,"author":{"gitID":"blaqkrow"},"content":"        case EmailCommand.COMMAND_WORD:"},{"lineNumber":132,"author":{"gitID":"blaqkrow"},"content":"        case EmailCommand.COMMAND_ALIAS:"},{"lineNumber":133,"author":{"gitID":"blaqkrow"},"content":"            return new EmailCommandParser().parse(arguments);"},{"lineNumber":134,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":135,"author":{"gitID":"JasmineSee"},"content":"        case UploadPhotoCommand.COMMAND_WORD:"},{"lineNumber":136,"author":{"gitID":"JasmineSee"},"content":"        case UploadPhotoCommand.COMMAND_ALIAS:"},{"lineNumber":137,"author":{"gitID":"JasmineSee"},"content":"            return new UploadPhotoCommandParser().parse(arguments);"},{"lineNumber":138,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":139,"author":{"gitID":"danielweide"},"content":"        case ClearLogCommand.COMMAND_WORD:"},{"lineNumber":140,"author":{"gitID":"danielweide"},"content":"        case ClearLogCommand.COMMAND_ALIAS:"},{"lineNumber":141,"author":{"gitID":"danielweide"},"content":"            return new ClearLogCommand();"},{"lineNumber":142,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":143,"author":{"gitID":"danielweide"},"content":"        case QrCallCommand.COMMAND_WORD:"},{"lineNumber":144,"author":{"gitID":"danielweide"},"content":"        case QrCallCommand.COMMAND_ALIAS:"},{"lineNumber":145,"author":{"gitID":"danielweide"},"content":"            return new QrCallCommandParser().parse(arguments);"},{"lineNumber":146,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":147,"author":{"gitID":"danielweide"},"content":"        case QrSmsCommand.COMMAND_WORD:"},{"lineNumber":148,"author":{"gitID":"danielweide"},"content":"        case QrSmsCommand.COMMAND_ALIAS:"},{"lineNumber":149,"author":{"gitID":"blaqkrow"},"content":"            return new QrSmsCommandParser().parse(arguments);"},{"lineNumber":150,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":151,"author":{"gitID":"danielweide"},"content":"        case QrSaveContactCommand.COMMAND_WORD:"},{"lineNumber":152,"author":{"gitID":"danielweide"},"content":"        case QrSaveContactCommand.COMMAND_ALIAS:"},{"lineNumber":153,"author":{"gitID":"danielweide"},"content":"            return new QrSaveContactCommandParser().parse(arguments);"},{"lineNumber":154,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":155,"author":{"gitID":"JasmineSee"},"content":"        case ChangeThemeCommand.COMMAND_WORD:"},{"lineNumber":156,"author":{"gitID":"JasmineSee"},"content":"        case ChangeThemeCommand.COMMAND_ALIAS:"},{"lineNumber":157,"author":{"gitID":"JasmineSee"},"content":"            return new ChangeThemeCommandParser().parse(arguments);"},{"lineNumber":158,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":159,"author":{"gitID":"JasmineSee"},"content":"        case DeletePhotoCommand.COMMAND_WORD:"},{"lineNumber":160,"author":{"gitID":"JasmineSee"},"content":"        case DeletePhotoCommand.COMMAND_ALIAS:"},{"lineNumber":161,"author":{"gitID":"JasmineSee"},"content":"            return new DeletePhotoCommandParser().parse(arguments);"},{"lineNumber":162,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":163,"author":{"gitID":"JasmineSee"},"content":"        case DeletesAllPhotosCommand.COMMAND_WORD:"},{"lineNumber":164,"author":{"gitID":"JasmineSee"},"content":"        case DeletesAllPhotosCommand.COMMAND_ALIAS:"},{"lineNumber":165,"author":{"gitID":"JasmineSee"},"content":"            return new DeletesAllPhotosCommand();"},{"lineNumber":166,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"danielweide":29,"JasmineSee":29,"limshunyong":15,"-":92,"blaqkrow":7}},{"path":"src/main/java/seedu/address/commons/events/ui/QrSmsEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"blaqkrow"},"content":"//@@author blaqkrow"},{"lineNumber":7,"author":{"gitID":"blaqkrow"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"blaqkrow"},"content":" * Represents a selection change in the Qr Event"},{"lineNumber":9,"author":{"gitID":"blaqkrow"},"content":" */"},{"lineNumber":10,"author":{"gitID":"blaqkrow"},"content":"public class QrSmsEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"blaqkrow"},"content":"    private ReadOnlyPerson person;"},{"lineNumber":12,"author":{"gitID":"blaqkrow"},"content":"    public QrSmsEvent(ReadOnlyPerson person) {"},{"lineNumber":13,"author":{"gitID":"blaqkrow"},"content":"        this.person \u003d person;"},{"lineNumber":14,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":16,"author":{"gitID":"blaqkrow"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"blaqkrow"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"blaqkrow"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":19,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"blaqkrow"},"content":"    public ReadOnlyPerson getPerson() {"},{"lineNumber":21,"author":{"gitID":"blaqkrow"},"content":"        return person;"},{"lineNumber":22,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"blaqkrow"},"content":"}"}],"authorContributionMap":{"-":5,"blaqkrow":18}},{"path":"src/main/java/seedu/address/commons/events/ui/QrEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"danielweide"},"content":"//@@author danielweide"},{"lineNumber":7,"author":{"gitID":"danielweide"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"danielweide"},"content":" * Represents a selection change in the Qr Event"},{"lineNumber":9,"author":{"gitID":"danielweide"},"content":" */"},{"lineNumber":10,"author":{"gitID":"danielweide"},"content":"public class QrEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"danielweide"},"content":"    private ReadOnlyPerson person;"},{"lineNumber":12,"author":{"gitID":"danielweide"},"content":"    public QrEvent(ReadOnlyPerson person) {"},{"lineNumber":13,"author":{"gitID":"danielweide"},"content":"        this.person \u003d person;"},{"lineNumber":14,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":16,"author":{"gitID":"danielweide"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"danielweide"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"danielweide"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":19,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"danielweide"},"content":"    public ReadOnlyPerson getPerson() {"},{"lineNumber":21,"author":{"gitID":"danielweide"},"content":"        return person;"},{"lineNumber":22,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"danielweide"},"content":"}"}],"authorContributionMap":{"danielweide":18,"-":5}},{"path":"src/main/java/seedu/address/commons/events/ui/QrSaveEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"blaqkrow"},"content":"//@@author blaqkrow"},{"lineNumber":7,"author":{"gitID":"blaqkrow"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"blaqkrow"},"content":" * Represents a selection change in the Qr Event"},{"lineNumber":9,"author":{"gitID":"blaqkrow"},"content":" */"},{"lineNumber":10,"author":{"gitID":"blaqkrow"},"content":"public class QrSaveEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"blaqkrow"},"content":"    private ReadOnlyPerson person;"},{"lineNumber":12,"author":{"gitID":"blaqkrow"},"content":"    public QrSaveEvent(ReadOnlyPerson person) {"},{"lineNumber":13,"author":{"gitID":"blaqkrow"},"content":"        this.person \u003d person;"},{"lineNumber":14,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":16,"author":{"gitID":"blaqkrow"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"blaqkrow"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"blaqkrow"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":19,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"blaqkrow"},"content":"    public ReadOnlyPerson getPerson() {"},{"lineNumber":21,"author":{"gitID":"blaqkrow"},"content":"        return person;"},{"lineNumber":22,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"blaqkrow"},"content":"}"}],"authorContributionMap":{"-":5,"blaqkrow":18}},{"path":"src/main/java/seedu/address/logic/parser/TagCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.logic.commands.TagCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":11,"author":{"gitID":"JasmineSee"},"content":"//@@author JasmineSee"},{"lineNumber":12,"author":{"gitID":"JasmineSee"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"JasmineSee"},"content":" * Parses input arguments and creates a new TagCommand object"},{"lineNumber":14,"author":{"gitID":"JasmineSee"},"content":" */"},{"lineNumber":15,"author":{"gitID":"JasmineSee"},"content":"public class TagCommandParser implements Parser\u003cTagCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":17,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"JasmineSee"},"content":"     * Parses the given {@code String} of arguments in the context of the TagCommand"},{"lineNumber":19,"author":{"gitID":"JasmineSee"},"content":"     * and returns an TagCommand object for execution."},{"lineNumber":20,"author":{"gitID":"JasmineSee"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"JasmineSee"},"content":"    public TagCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"JasmineSee"},"content":"        String trimmedArgs \u003d args.trim().toLowerCase();"},{"lineNumber":24,"author":{"gitID":"JasmineSee"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"JasmineSee"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"JasmineSee"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":29,"author":{"gitID":"JasmineSee"},"content":"        String[] tagKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":30,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":31,"author":{"gitID":"JasmineSee"},"content":"        return new TagCommand(new TagContainsKeywordsPredicate(Arrays.asList(tagKeywords)));"},{"lineNumber":32,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":34,"author":{"gitID":"JasmineSee"},"content":"}"}],"authorContributionMap":{"JasmineSee":27,"-":7}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":11,"author":{"gitID":"danielweide"},"content":"    public static final String COMMAND_ALIAS \u003d \"l\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":19,"author":{"gitID":"danielweide"},"content":"        LoggingCommand loggingCommand \u003d new LoggingCommand();"},{"lineNumber":20,"author":{"gitID":"danielweide"},"content":"        loggingCommand.keepLog(\"\", \"List\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"danielweide":3,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":17,"author":{"gitID":"danielweide"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        ReadOnlyPerson personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":46,"author":{"gitID":"danielweide"},"content":"            LoggingCommand loggingCommand \u003d new LoggingCommand();"},{"lineNumber":47,"author":{"gitID":"danielweide"},"content":"            loggingCommand.keepLog(personToDelete.toString(), \"Delete\");"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            assert false : \"The target person cannot be missing\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"danielweide":3,"-":57}},{"path":"src/main/java/seedu/address/logic/parser/ImportCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"limshunyong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":3,"author":{"gitID":"limshunyong"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitID":"limshunyong"},"content":"import java.io.FileReader;"},{"lineNumber":5,"author":{"gitID":"limshunyong"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":7,"author":{"gitID":"limshunyong"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"limshunyong"},"content":"import seedu.address.logic.commands.ImportCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"limshunyong"},"content":"//@@author limshunyong"},{"lineNumber":23,"author":{"gitID":"limshunyong"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"limshunyong"},"content":" * Parses input arguments as file and adds the contact into the address book"},{"lineNumber":25,"author":{"gitID":"limshunyong"},"content":" */"},{"lineNumber":26,"author":{"gitID":"limshunyong"},"content":"public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"},{"lineNumber":27,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":28,"author":{"gitID":"limshunyong"},"content":"    public static final String DEFAULT_NAME \u003d \"Example name\";"},{"lineNumber":29,"author":{"gitID":"limshunyong"},"content":"    public static final String DEFAULT_ADD \u003d \"13 Computing Drive\";"},{"lineNumber":30,"author":{"gitID":"limshunyong"},"content":"    public static final String DEFAULT_PHONE \u003d \"11111111\";"},{"lineNumber":31,"author":{"gitID":"limshunyong"},"content":"    public static final String DEFAULT_EMAIL \u003d \"@example.com\";"},{"lineNumber":32,"author":{"gitID":"limshunyong"},"content":"    public static final String DEFAULT_TAG \u003d \"containsDummy\";"},{"lineNumber":33,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":34,"author":{"gitID":"limshunyong"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"limshunyong"},"content":"     * Parses the given {@code String} of arguments in the context of the Import command"},{"lineNumber":36,"author":{"gitID":"limshunyong"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":37,"author":{"gitID":"limshunyong"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":38,"author":{"gitID":"limshunyong"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"limshunyong"},"content":"    public ImportCommand parse(String args) {"},{"lineNumber":40,"author":{"gitID":"limshunyong"},"content":"        String filename \u003d args.trim();"},{"lineNumber":41,"author":{"gitID":"limshunyong"},"content":"        ArrayList\u003cReadOnlyPerson\u003e p \u003d new ArrayList\u003cReadOnlyPerson\u003e();"},{"lineNumber":42,"author":{"gitID":"limshunyong"},"content":"        BufferedReader br \u003d null;"},{"lineNumber":43,"author":{"gitID":"limshunyong"},"content":"        FileReader fr \u003d null;"},{"lineNumber":44,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":45,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":46,"author":{"gitID":"limshunyong"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"limshunyong"},"content":"            fr \u003d new FileReader(filename);"},{"lineNumber":48,"author":{"gitID":"limshunyong"},"content":"            br \u003d new BufferedReader(fr);"},{"lineNumber":49,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":50,"author":{"gitID":"limshunyong"},"content":"            // Create Default values"},{"lineNumber":51,"author":{"gitID":"limshunyong"},"content":"            String currLine;"},{"lineNumber":52,"author":{"gitID":"limshunyong"},"content":"            String name \u003d null;"},{"lineNumber":53,"author":{"gitID":"limshunyong"},"content":"            String email \u003d null;"},{"lineNumber":54,"author":{"gitID":"limshunyong"},"content":"            String address \u003d null;"},{"lineNumber":55,"author":{"gitID":"limshunyong"},"content":"            String phone \u003d null;"},{"lineNumber":56,"author":{"gitID":"limshunyong"},"content":"            Set\u003cTag\u003e tagList \u003d new HashSet\u003cTag\u003e();"},{"lineNumber":57,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":58,"author":{"gitID":"limshunyong"},"content":"            while ((currLine \u003d br.readLine()) !\u003d null) {"},{"lineNumber":59,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":60,"author":{"gitID":"limshunyong"},"content":"                if (currLine.contains(\"FN\")) {"},{"lineNumber":61,"author":{"gitID":"limshunyong"},"content":"                    name \u003d currLine.split(\":\")[1];"},{"lineNumber":62,"author":{"gitID":"limshunyong"},"content":"                }"},{"lineNumber":63,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":64,"author":{"gitID":"limshunyong"},"content":"                if (currLine.contains(\"TEL\")) {"},{"lineNumber":65,"author":{"gitID":"limshunyong"},"content":"                    phone \u003d currLine.split(\":\")[1];"},{"lineNumber":66,"author":{"gitID":"limshunyong"},"content":"                }"},{"lineNumber":67,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":68,"author":{"gitID":"limshunyong"},"content":"                if (currLine.contains(\"ADR\")) {"},{"lineNumber":69,"author":{"gitID":"limshunyong"},"content":"                    address \u003d currLine.split(\";\")[2];"},{"lineNumber":70,"author":{"gitID":"limshunyong"},"content":"                }"},{"lineNumber":71,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":72,"author":{"gitID":"limshunyong"},"content":"                if (currLine.contains(\"EMAIL\")) {"},{"lineNumber":73,"author":{"gitID":"limshunyong"},"content":"                    email \u003d currLine.split(\":\")[1];"},{"lineNumber":74,"author":{"gitID":"limshunyong"},"content":"                }"},{"lineNumber":75,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":76,"author":{"gitID":"limshunyong"},"content":"                if (currLine.contains(\"END\")) {"},{"lineNumber":77,"author":{"gitID":"limshunyong"},"content":"                    try {"},{"lineNumber":78,"author":{"gitID":"limshunyong"},"content":"                        if (email \u003d\u003d null) {"},{"lineNumber":79,"author":{"gitID":"limshunyong"},"content":"                            email \u003d name.replaceAll(\"\\\\s+\", \"\") + \"@example.com\";"},{"lineNumber":80,"author":{"gitID":"limshunyong"},"content":"                            tagList.add(new Tag(DEFAULT_TAG + \"email\"));"},{"lineNumber":81,"author":{"gitID":"limshunyong"},"content":"                        }"},{"lineNumber":82,"author":{"gitID":"limshunyong"},"content":"                        if (name \u003d\u003d null) {"},{"lineNumber":83,"author":{"gitID":"limshunyong"},"content":"                            name \u003d DEFAULT_NAME;"},{"lineNumber":84,"author":{"gitID":"limshunyong"},"content":"                            tagList.add(new Tag(DEFAULT_TAG + \"name\"));"},{"lineNumber":85,"author":{"gitID":"limshunyong"},"content":"                        }"},{"lineNumber":86,"author":{"gitID":"limshunyong"},"content":"                        if (phone \u003d\u003d null) {"},{"lineNumber":87,"author":{"gitID":"limshunyong"},"content":"                            phone \u003d DEFAULT_PHONE;"},{"lineNumber":88,"author":{"gitID":"limshunyong"},"content":"                            tagList.add(new Tag(DEFAULT_TAG + \"phone\"));"},{"lineNumber":89,"author":{"gitID":"limshunyong"},"content":"                        }"},{"lineNumber":90,"author":{"gitID":"limshunyong"},"content":"                        if (address \u003d\u003d null) {"},{"lineNumber":91,"author":{"gitID":"limshunyong"},"content":"                            address \u003d DEFAULT_ADD;"},{"lineNumber":92,"author":{"gitID":"limshunyong"},"content":"                            tagList.add(new Tag(DEFAULT_TAG + \"address\"));"},{"lineNumber":93,"author":{"gitID":"limshunyong"},"content":"                        }"},{"lineNumber":94,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":95,"author":{"gitID":"limshunyong"},"content":"                        Name n \u003d new Name(name);"},{"lineNumber":96,"author":{"gitID":"limshunyong"},"content":"                        Phone pe \u003d new Phone(phone);"},{"lineNumber":97,"author":{"gitID":"limshunyong"},"content":"                        Email e \u003d new Email(email);"},{"lineNumber":98,"author":{"gitID":"limshunyong"},"content":"                        Address a \u003d new Address(address);"},{"lineNumber":99,"author":{"gitID":"limshunyong"},"content":"                        ReadOnlyPerson person \u003d new Person(n, pe, e, a, tagList);"},{"lineNumber":100,"author":{"gitID":"limshunyong"},"content":"                        p.add(person);"},{"lineNumber":101,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":102,"author":{"gitID":"limshunyong"},"content":"                    } catch (IllegalValueException ie) {"},{"lineNumber":103,"author":{"gitID":"limshunyong"},"content":"                        ie.getMessage();"},{"lineNumber":104,"author":{"gitID":"limshunyong"},"content":"                    }"},{"lineNumber":105,"author":{"gitID":"limshunyong"},"content":"                }"},{"lineNumber":106,"author":{"gitID":"limshunyong"},"content":"            }"},{"lineNumber":107,"author":{"gitID":"limshunyong"},"content":"        } catch (IOException e) {"},{"lineNumber":108,"author":{"gitID":"limshunyong"},"content":"            e.getMessage();"},{"lineNumber":109,"author":{"gitID":"limshunyong"},"content":"        } finally {"},{"lineNumber":110,"author":{"gitID":"limshunyong"},"content":"            try {"},{"lineNumber":111,"author":{"gitID":"limshunyong"},"content":"                if (br !\u003d null) {"},{"lineNumber":112,"author":{"gitID":"limshunyong"},"content":"                    br.close();"},{"lineNumber":113,"author":{"gitID":"limshunyong"},"content":"                }"},{"lineNumber":114,"author":{"gitID":"limshunyong"},"content":"                if (fr !\u003d null) {"},{"lineNumber":115,"author":{"gitID":"limshunyong"},"content":"                    fr.close();"},{"lineNumber":116,"author":{"gitID":"limshunyong"},"content":"                }"},{"lineNumber":117,"author":{"gitID":"limshunyong"},"content":"            } catch (IOException e) {"},{"lineNumber":118,"author":{"gitID":"limshunyong"},"content":"                e.getMessage();"},{"lineNumber":119,"author":{"gitID":"limshunyong"},"content":"            }"},{"lineNumber":120,"author":{"gitID":"limshunyong"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"limshunyong"},"content":"        return new ImportCommand(p);"},{"lineNumber":122,"author":{"gitID":"limshunyong"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":124,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":125,"author":{"gitID":"limshunyong"},"content":"}"}],"authorContributionMap":{"limshunyong":112,"-":13}},{"path":"src/main/java/seedu/address/logic/parser/QrSmsCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"danielweide"},"content":"import seedu.address.logic.commands.QrSmsCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"danielweide"},"content":" * Parses input arguments and creates a new QrSmsCommand object"},{"lineNumber":12,"author":{"gitID":"danielweide"},"content":" */"},{"lineNumber":13,"author":{"gitID":"danielweide"},"content":"//@@author danielweide"},{"lineNumber":14,"author":{"gitID":"danielweide"},"content":"public class QrSmsCommandParser implements Parser\u003cQrSmsCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"danielweide"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"danielweide"},"content":"     * Parses input arguments and creates a new QrSmsCommand object"},{"lineNumber":17,"author":{"gitID":"danielweide"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"danielweide"},"content":"    public QrSmsCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitID":"danielweide"},"content":"        try {"},{"lineNumber":20,"author":{"gitID":"danielweide"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":21,"author":{"gitID":"danielweide"},"content":"            return new QrSmsCommand(index);"},{"lineNumber":22,"author":{"gitID":"danielweide"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":23,"author":{"gitID":"danielweide"},"content":"            throw new ParseException("},{"lineNumber":24,"author":{"gitID":"danielweide"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, QrSmsCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"danielweide"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"danielweide"},"content":"}"}],"authorContributionMap":{"danielweide":18,"-":9}},{"path":"src/main/java/seedu/address/logic/commands/LoggingCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"danielweide"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"danielweide"},"content":"import java.io.BufferedWriter;"},{"lineNumber":3,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":4,"author":{"gitID":"danielweide"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitID":"danielweide"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"danielweide"},"content":"import java.io.PrintWriter;"},{"lineNumber":7,"author":{"gitID":"danielweide"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":9,"author":{"gitID":"danielweide"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"danielweide"},"content":" * Keeps track of user activity with ConnectUsLog.txt"},{"lineNumber":11,"author":{"gitID":"danielweide"},"content":" */"},{"lineNumber":12,"author":{"gitID":"danielweide"},"content":"//@@author danielweide"},{"lineNumber":13,"author":{"gitID":"danielweide"},"content":"public class LoggingCommand {"},{"lineNumber":14,"author":{"gitID":"danielweide"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"danielweide"},"content":"     * Writes onto ConnectUsLog.txt field when new action is executed"},{"lineNumber":16,"author":{"gitID":"danielweide"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"danielweide"},"content":"    public void keepLog(String logText, String functionType) {"},{"lineNumber":18,"author":{"gitID":"danielweide"},"content":"        try (FileWriter fileWrite \u003d new FileWriter(\"ConnectUsLog.txt\", true);"},{"lineNumber":19,"author":{"gitID":"danielweide"},"content":"             BufferedWriter buffWriter \u003d new BufferedWriter(fileWrite);"},{"lineNumber":20,"author":{"gitID":"danielweide"},"content":"             PrintWriter out \u003d new PrintWriter(buffWriter)) {"},{"lineNumber":21,"author":{"gitID":"danielweide"},"content":"            out.println(functionType + \"\\t\" + logText + \"\\t\" + LocalDateTime.now() + \"\\n\");"},{"lineNumber":22,"author":{"gitID":"danielweide"},"content":"        } catch (IOException e) {"},{"lineNumber":23,"author":{"gitID":"danielweide"},"content":"            System.out.println(\"Error With ConnectUs.txt Logging\");"},{"lineNumber":24,"author":{"gitID":"danielweide"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"danielweide"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"danielweide"},"content":"     * Starts recording activity the moment application starts up"},{"lineNumber":28,"author":{"gitID":"danielweide"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"danielweide"},"content":"    public void startUpLog() {"},{"lineNumber":30,"author":{"gitID":"danielweide"},"content":"        try (FileWriter fileWrite \u003d new FileWriter(\"ConnectUsLog.txt\", true);"},{"lineNumber":31,"author":{"gitID":"danielweide"},"content":"             BufferedWriter buffWriter \u003d new BufferedWriter(fileWrite);"},{"lineNumber":32,"author":{"gitID":"danielweide"},"content":"             PrintWriter out \u003d new PrintWriter(buffWriter)) {"},{"lineNumber":33,"author":{"gitID":"danielweide"},"content":"            out.println(\"Application Started on \" + LocalDateTime.now());"},{"lineNumber":34,"author":{"gitID":"danielweide"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitID":"danielweide"},"content":"            System.out.println(\"Error With ConnectUs.txt Logging\");"},{"lineNumber":36,"author":{"gitID":"danielweide"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"danielweide"},"content":"}"}],"authorContributionMap":{"danielweide":37,"blaqkrow":1}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"danielweide"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitID":"JasmineSee"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":21,"author":{"gitID":"danielweide"},"content":"        LoggingCommand loggingCommand \u003d new LoggingCommand();"},{"lineNumber":22,"author":{"gitID":"danielweide"},"content":"        loggingCommand.keepLog(\"\", \"Clear\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"danielweide":3,"JasmineSee":1,"-":21}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":16,"author":{"gitID":"danielweide"},"content":"    public static final String COMMAND_ALIAS \u003d \"r\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":29,"author":{"gitID":"danielweide"},"content":"        LoggingCommand loggingCommand \u003d new LoggingCommand();"},{"lineNumber":30,"author":{"gitID":"danielweide"},"content":"        loggingCommand.keepLog(\"\", \"Redo\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"danielweide":3,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"blaqkrow"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public abstract class Command {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    protected UndoRedoStack undoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of persons."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @return summary message for persons displayed"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static String getMessageForPersonListShownSummary(int displaySize) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"blaqkrow"},"content":"    public abstract CommandResult execute() throws CommandException, IOException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * access to the dependencies."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":42,"blaqkrow":3}},{"path":"src/main/java/seedu/address/logic/parser/UploadPhotoCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"blaqkrow"},"content":"import seedu.address.logic.commands.UploadPhotoCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"JasmineSee"},"content":"//@@author JasmineSee"},{"lineNumber":11,"author":{"gitID":"JasmineSee"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"JasmineSee"},"content":" * Parses input arguments and creates a new UploadPhotoCommand object"},{"lineNumber":13,"author":{"gitID":"JasmineSee"},"content":" */"},{"lineNumber":14,"author":{"gitID":"JasmineSee"},"content":"public class UploadPhotoCommandParser implements Parser\u003cUploadPhotoCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":16,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"JasmineSee"},"content":"     * Parses the given {@code String} of arguments in the context of the UploadPhotoCommand"},{"lineNumber":18,"author":{"gitID":"JasmineSee"},"content":"     * and returns an UploadPhotoCommand object for execution."},{"lineNumber":19,"author":{"gitID":"JasmineSee"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"JasmineSee"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"JasmineSee"},"content":"    public UploadPhotoCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"JasmineSee"},"content":"        try {"},{"lineNumber":24,"author":{"gitID":"JasmineSee"},"content":"            String[] argsArr \u003d args.trim().split(\" \");"},{"lineNumber":25,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":26,"author":{"gitID":"JasmineSee"},"content":"            String indexString \u003d argsArr[0];"},{"lineNumber":27,"author":{"gitID":"JasmineSee"},"content":"            String filePath \u003d \"\";"},{"lineNumber":28,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":29,"author":{"gitID":"JasmineSee"},"content":"            if (argsArr.length \u003e 1) {"},{"lineNumber":30,"author":{"gitID":"JasmineSee"},"content":"                filePath \u003d argsArr[1];"},{"lineNumber":31,"author":{"gitID":"JasmineSee"},"content":"            }"},{"lineNumber":32,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":33,"author":{"gitID":"JasmineSee"},"content":"            Index index \u003d ParserUtil.parseIndex(indexString);"},{"lineNumber":34,"author":{"gitID":"JasmineSee"},"content":"            return new UploadPhotoCommand(index, filePath);"},{"lineNumber":35,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":36,"author":{"gitID":"JasmineSee"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":37,"author":{"gitID":"JasmineSee"},"content":"            throw new ParseException("},{"lineNumber":38,"author":{"gitID":"JasmineSee"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UploadPhotoCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"JasmineSee"},"content":"}"},{"lineNumber":42,"author":{"gitID":"JasmineSee"},"content":""}],"authorContributionMap":{"JasmineSee":33,"-":8,"blaqkrow":1}},{"path":"src/main/java/seedu/address/logic/commands/QrGenCallCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"danielweide"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":3,"author":{"gitID":"danielweide"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"danielweide"},"content":" * Generates PhoneCall QR Link in forms of String"},{"lineNumber":5,"author":{"gitID":"danielweide"},"content":" */"},{"lineNumber":6,"author":{"gitID":"danielweide"},"content":"//@@author danielweide"},{"lineNumber":7,"author":{"gitID":"danielweide"},"content":"public class QrGenCallCommand {"},{"lineNumber":8,"author":{"gitID":"danielweide"},"content":"    /**"},{"lineNumber":9,"author":{"gitID":"danielweide"},"content":"     * Generate PhoneCall QRCode"},{"lineNumber":10,"author":{"gitID":"danielweide"},"content":"     */"},{"lineNumber":11,"author":{"gitID":"danielweide"},"content":"    public String qrCall(String phoneNum) {"},{"lineNumber":12,"author":{"gitID":"danielweide"},"content":"        String qrCodeA \u003d \"http://\";"},{"lineNumber":13,"author":{"gitID":"danielweide"},"content":"        String qrCodeB \u003d \"api.qrserver.com/\";"},{"lineNumber":14,"author":{"gitID":"danielweide"},"content":"        String qrCodeC \u003d \"v1/\";"},{"lineNumber":15,"author":{"gitID":"danielweide"},"content":"        String qrCodeD \u003d \"create-qr-code/\";"},{"lineNumber":16,"author":{"gitID":"danielweide"},"content":"        String qrCodeE \u003d \"?color\u003d000000\";"},{"lineNumber":17,"author":{"gitID":"danielweide"},"content":"        String qrCodeF \u003d \"\u0026bgcolor\u003dFFFFFF\";"},{"lineNumber":18,"author":{"gitID":"danielweide"},"content":"        String qrCodeG \u003d \"\u0026data\";"},{"lineNumber":19,"author":{"gitID":"danielweide"},"content":"        String qrCodeH \u003d \"\u003dtel\";"},{"lineNumber":20,"author":{"gitID":"danielweide"},"content":"        String qrCodeI \u003d \"%3A\";"},{"lineNumber":21,"author":{"gitID":"danielweide"},"content":"        String qrCodeJ \u003d \"\u0026qzone\";"},{"lineNumber":22,"author":{"gitID":"danielweide"},"content":"        String qrCodeK \u003d \"\u003d1\";"},{"lineNumber":23,"author":{"gitID":"danielweide"},"content":"        String qrCodeL \u003d \"\u0026margin\";"},{"lineNumber":24,"author":{"gitID":"danielweide"},"content":"        String qrCodeM \u003d \"\u003d0\";"},{"lineNumber":25,"author":{"gitID":"danielweide"},"content":"        String qrCodeN \u003d \"\u0026size\";"},{"lineNumber":26,"author":{"gitID":"danielweide"},"content":"        String qrCodeO \u003d \"\u003d500x500\";"},{"lineNumber":27,"author":{"gitID":"danielweide"},"content":"        String qrCodeP \u003d \"\u0026ecc\";"},{"lineNumber":28,"author":{"gitID":"danielweide"},"content":"        String qrCodeQ \u003d \"\u003dL\";"},{"lineNumber":29,"author":{"gitID":"danielweide"},"content":"        String qrLineA \u003d qrCodeA + qrCodeB + qrCodeC + qrCodeD + qrCodeE + qrCodeF"},{"lineNumber":30,"author":{"gitID":"danielweide"},"content":"                + qrCodeG + qrCodeH + qrCodeI;"},{"lineNumber":31,"author":{"gitID":"danielweide"},"content":"        String qrLineB \u003d qrCodeJ + qrCodeK + qrCodeL + qrCodeM + qrCodeN + qrCodeO"},{"lineNumber":32,"author":{"gitID":"danielweide"},"content":"                + qrCodeP + qrCodeQ;"},{"lineNumber":33,"author":{"gitID":"danielweide"},"content":"        String fullQr \u003d qrLineA + phoneNum + qrLineB;"},{"lineNumber":34,"author":{"gitID":"danielweide"},"content":"        return fullQr;"},{"lineNumber":35,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"danielweide"},"content":"}"}],"authorContributionMap":{"danielweide":36}},{"path":"src/main/java/seedu/address/logic/parser/RemoveTagCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":5,"author":{"gitID":"JasmineSee"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.logic.commands.RemoveTagCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"JasmineSee"},"content":"//@@author JasmineSee"},{"lineNumber":13,"author":{"gitID":"JasmineSee"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"JasmineSee"},"content":" * Parses input arguments and creates a new RemoveTagCommand object"},{"lineNumber":15,"author":{"gitID":"JasmineSee"},"content":" */"},{"lineNumber":16,"author":{"gitID":"JasmineSee"},"content":"public class RemoveTagCommandParser implements Parser\u003cRemoveTagCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"JasmineSee"},"content":"    private final ArrayList\u003cTag\u003e tagToRemove \u003d new ArrayList\u003c\u003e();"},{"lineNumber":18,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":19,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"JasmineSee"},"content":"     * Parses the given {@code String} of arguments in the context of the RemoveTagCommand"},{"lineNumber":21,"author":{"gitID":"JasmineSee"},"content":"     * and returns an RemoveTagCommand object for execution."},{"lineNumber":22,"author":{"gitID":"JasmineSee"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"JasmineSee"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"JasmineSee"},"content":"    public RemoveTagCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"JasmineSee"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":27,"author":{"gitID":"JasmineSee"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":28,"author":{"gitID":"JasmineSee"},"content":"            throw new ParseException("},{"lineNumber":29,"author":{"gitID":"JasmineSee"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveTagCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":32,"author":{"gitID":"JasmineSee"},"content":"        String[] tagKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":33,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":34,"author":{"gitID":"JasmineSee"},"content":"        for (int i \u003d 0; i \u003c tagKeywords.length; i++) {"},{"lineNumber":35,"author":{"gitID":"JasmineSee"},"content":"            try {"},{"lineNumber":36,"author":{"gitID":"JasmineSee"},"content":"                tagToRemove.add(new Tag(tagKeywords[i]));"},{"lineNumber":37,"author":{"gitID":"JasmineSee"},"content":"            } catch (IllegalValueException ive) {"},{"lineNumber":38,"author":{"gitID":"JasmineSee"},"content":"                throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":39,"author":{"gitID":"JasmineSee"},"content":"            }"},{"lineNumber":40,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"JasmineSee"},"content":"        return new RemoveTagCommand(tagToRemove);"},{"lineNumber":42,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":44,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":45,"author":{"gitID":"JasmineSee"},"content":"}"}],"authorContributionMap":{"JasmineSee":37,"-":8}},{"path":"src/main/java/seedu/address/ui/QrButton.java","lines":[{"lineNumber":1,"author":{"gitID":"blaqkrow"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":3,"author":{"gitID":"blaqkrow"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"blaqkrow"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":6,"author":{"gitID":"blaqkrow"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":8,"author":{"gitID":"blaqkrow"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":12,"author":{"gitID":"blaqkrow"},"content":"import seedu.address.commons.events.ui.QrEvent;"},{"lineNumber":13,"author":{"gitID":"danielweide"},"content":"import seedu.address.logic.commands.LoggingCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"blaqkrow"},"content":"//@@author blaqkrow"},{"lineNumber":19,"author":{"gitID":"blaqkrow"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"blaqkrow"},"content":" * The UI component that is for generating a QR code which calls a contact on a smartphone."},{"lineNumber":21,"author":{"gitID":"blaqkrow"},"content":" */"},{"lineNumber":22,"author":{"gitID":"blaqkrow"},"content":"public class QrButton extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"blaqkrow"},"content":"    public static final String MESSAGE_FAIL \u003d \"Please select someone\";"},{"lineNumber":24,"author":{"gitID":"blaqkrow"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":25,"author":{"gitID":"blaqkrow"},"content":"    private static final String FXML \u003d \"QrButton.fxml\";"},{"lineNumber":26,"author":{"gitID":"blaqkrow"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":27,"author":{"gitID":"blaqkrow"},"content":"    private LoggingCommand loggingCommand;"},{"lineNumber":28,"author":{"gitID":"blaqkrow"},"content":"    private BrowserPanel bp;"},{"lineNumber":29,"author":{"gitID":"blaqkrow"},"content":"    private ReadOnlyPerson person;"},{"lineNumber":30,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":31,"author":{"gitID":"blaqkrow"},"content":"    public QrButton(BrowserPanel bp) {"},{"lineNumber":32,"author":{"gitID":"blaqkrow"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"blaqkrow"},"content":"        loggingCommand \u003d new LoggingCommand();"},{"lineNumber":34,"author":{"gitID":"blaqkrow"},"content":"        this.bp \u003d bp;"},{"lineNumber":35,"author":{"gitID":"blaqkrow"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":36,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"blaqkrow"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"blaqkrow"},"content":"     * Handles the QR button pressed event."},{"lineNumber":39,"author":{"gitID":"blaqkrow"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"blaqkrow"},"content":"    private void handleQrButtonPressed() throws CommandException, ParseException, IOException {"},{"lineNumber":42,"author":{"gitID":"blaqkrow"},"content":"        if (person !\u003d null) {"},{"lineNumber":43,"author":{"gitID":"blaqkrow"},"content":"            bp.loadQrCode(person);"},{"lineNumber":44,"author":{"gitID":"blaqkrow"},"content":"            logger.info(\"QR Code displayed\");"},{"lineNumber":45,"author":{"gitID":"blaqkrow"},"content":"        } else {"},{"lineNumber":46,"author":{"gitID":"blaqkrow"},"content":"            logger.info(MESSAGE_FAIL);"},{"lineNumber":47,"author":{"gitID":"blaqkrow"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"blaqkrow"},"content":"    @Subscribe"},{"lineNumber":50,"author":{"gitID":"blaqkrow"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":51,"author":{"gitID":"blaqkrow"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":52,"author":{"gitID":"blaqkrow"},"content":"        this.person \u003d event.getNewSelection().person;"},{"lineNumber":53,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"blaqkrow"},"content":"    @Subscribe"},{"lineNumber":55,"author":{"gitID":"blaqkrow"},"content":"    private void clickButton(QrEvent event) {"},{"lineNumber":56,"author":{"gitID":"blaqkrow"},"content":"        bp.loadQrCode((ReadOnlyPerson) event.getPerson());"},{"lineNumber":57,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"blaqkrow"},"content":"}"}],"authorContributionMap":{"danielweide":1,"blaqkrow":50,"-":7}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":21,"author":{"gitID":"danielweide"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code ReadOnlyPerson}"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public AddCommand(ReadOnlyPerson person) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        toAdd \u003d new Person(person);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":55,"author":{"gitID":"danielweide"},"content":"            LoggingCommand loggingCommand \u003d new LoggingCommand();"},{"lineNumber":56,"author":{"gitID":"danielweide"},"content":"            loggingCommand.keepLog(toAdd.toString(), \"Add\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"danielweide":3,"-":67}},{"path":"src/main/java/seedu/address/logic/commands/QrGenSaveContactCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"danielweide"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":3,"author":{"gitID":"danielweide"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"danielweide"},"content":" * Generates SaveContact QR Link in forms of String"},{"lineNumber":5,"author":{"gitID":"danielweide"},"content":" */"},{"lineNumber":6,"author":{"gitID":"danielweide"},"content":"//@@author danielweide"},{"lineNumber":7,"author":{"gitID":"danielweide"},"content":"public class QrGenSaveContactCommand {"},{"lineNumber":8,"author":{"gitID":"danielweide"},"content":"    /**"},{"lineNumber":9,"author":{"gitID":"danielweide"},"content":"     * Generates SaveContact QR Link in forms of String"},{"lineNumber":10,"author":{"gitID":"danielweide"},"content":"     */"},{"lineNumber":11,"author":{"gitID":"danielweide"},"content":"    public String qrSaveContact(String phoneNum, String contactName, String contactEmail) {"},{"lineNumber":12,"author":{"gitID":"danielweide"},"content":"        String qrA \u003d \"http://\";"},{"lineNumber":13,"author":{"gitID":"danielweide"},"content":"        String qrB \u003d \"api.qrserver.com/\";"},{"lineNumber":14,"author":{"gitID":"danielweide"},"content":"        String qrC \u003d \"v1/\";"},{"lineNumber":15,"author":{"gitID":"danielweide"},"content":"        String qrD \u003d \"create-qr-code/\";"},{"lineNumber":16,"author":{"gitID":"danielweide"},"content":"        String qrE \u003d \"?color\u003d000000\";"},{"lineNumber":17,"author":{"gitID":"danielweide"},"content":"        String qrF \u003d \"\u0026bgcolor\u003dFFFFFF\";"},{"lineNumber":18,"author":{"gitID":"danielweide"},"content":"        String qrG \u003d \"\u0026data\u003dBEGIN\";"},{"lineNumber":19,"author":{"gitID":"danielweide"},"content":"        String qrH \u003d \"%3AVCARD\";"},{"lineNumber":20,"author":{"gitID":"danielweide"},"content":"        String qrI \u003d \"%0AVERSION\";"},{"lineNumber":21,"author":{"gitID":"danielweide"},"content":"        String qrJ \u003d \"%3A2.1%0\";"},{"lineNumber":22,"author":{"gitID":"danielweide"},"content":"        String qrK \u003d \"AFN%3A\";"},{"lineNumber":23,"author":{"gitID":"danielweide"},"content":"        String lineA \u003d qrA + qrB + qrC + qrD + qrE + qrF + qrG + qrH + qrI"},{"lineNumber":24,"author":{"gitID":"danielweide"},"content":"                + qrJ + qrK;"},{"lineNumber":25,"author":{"gitID":"danielweide"},"content":"        String newName \u003d contactName.replace(\u0027 \u0027, \u0027+\u0027);"},{"lineNumber":26,"author":{"gitID":"danielweide"},"content":"        String lineB \u003d \"%0AN%3A%3B\";"},{"lineNumber":27,"author":{"gitID":"danielweide"},"content":"        String qrL \u003d \"%0ATEL\";"},{"lineNumber":28,"author":{"gitID":"danielweide"},"content":"        String qrM \u003d \"%3BWORK\";"},{"lineNumber":29,"author":{"gitID":"danielweide"},"content":"        String qrN \u003d \"%3BVOICE%3A\";"},{"lineNumber":30,"author":{"gitID":"danielweide"},"content":"        String lineC \u003d qrL + qrM + qrN;"},{"lineNumber":31,"author":{"gitID":"danielweide"},"content":"        String qrO \u003d \"%0AEMAIL\";"},{"lineNumber":32,"author":{"gitID":"danielweide"},"content":"        String qrP \u003d \"%3BWORK\";"},{"lineNumber":33,"author":{"gitID":"danielweide"},"content":"        String qrQ \u003d \"%3BINTERNET%3A\";"},{"lineNumber":34,"author":{"gitID":"danielweide"},"content":"        String lineD \u003d qrO + qrP + qrQ;"},{"lineNumber":35,"author":{"gitID":"danielweide"},"content":"        String qrCodeA \u003d \"%0AEND\";"},{"lineNumber":36,"author":{"gitID":"danielweide"},"content":"        String qrCodeB \u003d \"%3AVCARD\";"},{"lineNumber":37,"author":{"gitID":"danielweide"},"content":"        String qrCodeC \u003d \"%0A\u0026qzone\u003d1\";"},{"lineNumber":38,"author":{"gitID":"danielweide"},"content":"        String qrCodeD \u003d \"\u0026margin\u003d0\";"},{"lineNumber":39,"author":{"gitID":"danielweide"},"content":"        String qrCodeE \u003d \"\u0026size\u003d500x500\";"},{"lineNumber":40,"author":{"gitID":"danielweide"},"content":"        String qrCodeF \u003d \"\u0026ecc\u003dL\";"},{"lineNumber":41,"author":{"gitID":"danielweide"},"content":"        String lineE \u003d qrCodeA + qrCodeB + qrCodeC + qrCodeD + qrCodeE + qrCodeF;"},{"lineNumber":42,"author":{"gitID":"danielweide"},"content":"        String fullQr \u003d lineA + newName + lineB + newName + lineC + phoneNum + lineD + contactEmail + lineE;"},{"lineNumber":43,"author":{"gitID":"danielweide"},"content":"        return fullQr;"},{"lineNumber":44,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"danielweide"},"content":"}"}],"authorContributionMap":{"danielweide":45}},{"path":"src/main/java/seedu/address/logic/commands/SortCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"limshunyong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":3,"author":{"gitID":"limshunyong"},"content":"//@@author limshunyong"},{"lineNumber":4,"author":{"gitID":"limshunyong"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"limshunyong"},"content":" * Sorts the contacts in the address book based on name."},{"lineNumber":6,"author":{"gitID":"limshunyong"},"content":" */"},{"lineNumber":7,"author":{"gitID":"limshunyong"},"content":"public class SortCommand extends UndoableCommand {"},{"lineNumber":8,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":9,"author":{"gitID":"limshunyong"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";"},{"lineNumber":10,"author":{"gitID":"limshunyong"},"content":"    public static final String COMMAND_ALIAS \u003d \"ss\";"},{"lineNumber":11,"author":{"gitID":"limshunyong"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book successfully sorted!\";"},{"lineNumber":12,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":13,"author":{"gitID":"limshunyong"},"content":"    @Override"},{"lineNumber":14,"author":{"gitID":"limshunyong"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":15,"author":{"gitID":"limshunyong"},"content":"        model.sortContact();"},{"lineNumber":16,"author":{"gitID":"limshunyong"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":17,"author":{"gitID":"limshunyong"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"limshunyong"},"content":"}"}],"authorContributionMap":{"limshunyong":18}},{"path":"src/main/java/seedu/address/logic/parser/QrSaveContactCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"danielweide"},"content":"import seedu.address.logic.commands.QrSaveContactCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"danielweide"},"content":" * Parses input arguments and creates a new QrSaveContactCommand object"},{"lineNumber":12,"author":{"gitID":"danielweide"},"content":" */"},{"lineNumber":13,"author":{"gitID":"danielweide"},"content":"//@@author danielweide"},{"lineNumber":14,"author":{"gitID":"danielweide"},"content":"public class QrSaveContactCommandParser implements Parser\u003cQrSaveContactCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"danielweide"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"danielweide"},"content":"     * Parses input arguments and creates a new QrSaveContactCommand object"},{"lineNumber":17,"author":{"gitID":"danielweide"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"danielweide"},"content":"    public QrSaveContactCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitID":"danielweide"},"content":"        try {"},{"lineNumber":20,"author":{"gitID":"danielweide"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":21,"author":{"gitID":"danielweide"},"content":"            return new QrSaveContactCommand(index);"},{"lineNumber":22,"author":{"gitID":"danielweide"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":23,"author":{"gitID":"danielweide"},"content":"            throw new ParseException("},{"lineNumber":24,"author":{"gitID":"danielweide"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, QrSaveContactCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"danielweide"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"danielweide"},"content":"}"}],"authorContributionMap":{"danielweide":18,"-":9}},{"path":"src/test/java/seedu/address/logic/commands/DeletePhotoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"JasmineSee"},"content":"//@@author JasmineSee"},{"lineNumber":24,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":25,"author":{"gitID":"JasmineSee"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"JasmineSee"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code DeletePhotoCommand}."},{"lineNumber":27,"author":{"gitID":"JasmineSee"},"content":" */"},{"lineNumber":28,"author":{"gitID":"JasmineSee"},"content":"public class DeletePhotoCommandTest {"},{"lineNumber":29,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":30,"author":{"gitID":"JasmineSee"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"JasmineSee"},"content":"    private String validFilePath \u003d \"./src/test/resources/photos/connectus_icon.png\";"},{"lineNumber":32,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":33,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"JasmineSee"},"content":"    public void execute_validIndexPhotoExist_success() throws Exception {"},{"lineNumber":35,"author":{"gitID":"JasmineSee"},"content":"        prepareUploadPhoto(INDEX_FIRST_PERSON, validFilePath);"},{"lineNumber":36,"author":{"gitID":"JasmineSee"},"content":"        ReadOnlyPerson personToDeletePhoto \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":37,"author":{"gitID":"JasmineSee"},"content":"        DeletePhotoCommand deletePhotoCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":38,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":39,"author":{"gitID":"JasmineSee"},"content":"        String expectedMessage \u003d String.format(DeletePhotoCommand.MESSAGE_DELETE_IMAGE_SUCCESS, personToDeletePhoto);"},{"lineNumber":40,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":41,"author":{"gitID":"JasmineSee"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":43,"author":{"gitID":"JasmineSee"},"content":"        assertCommandSuccess(deletePhotoCommand, model, expectedMessage, expectedModel);"},{"lineNumber":44,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":46,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"JasmineSee"},"content":"    public void execute_invalidIndexPhotoExist_throwsCommandException() throws Exception {"},{"lineNumber":48,"author":{"gitID":"JasmineSee"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":49,"author":{"gitID":"JasmineSee"},"content":"        DeletePhotoCommand deletePhotoCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":50,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":51,"author":{"gitID":"JasmineSee"},"content":"        assertCommandFailure(deletePhotoCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":52,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":54,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"JasmineSee"},"content":"    public void execute_validIndexPhotoNotExist_throwsCommandException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"JasmineSee"},"content":"        DeletePhotoCommand deletePhotoCommand \u003d prepareCommand(INDEX_SECOND_PERSON);"},{"lineNumber":57,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":58,"author":{"gitID":"JasmineSee"},"content":"        assertCommandFailure(deletePhotoCommand, model, DeletePhotoCommand.MESSAGE_DELETE_IMAGE_FAILURE);"},{"lineNumber":59,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":61,"author":{"gitID":"JasmineSee"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"JasmineSee"},"content":"    public void equals() {"},{"lineNumber":63,"author":{"gitID":"JasmineSee"},"content":"        DeletePhotoCommand firstCommand \u003d new DeletePhotoCommand(INDEX_FIRST_PERSON);"},{"lineNumber":64,"author":{"gitID":"JasmineSee"},"content":"        DeletePhotoCommand secondCommand \u003d new DeletePhotoCommand(INDEX_SECOND_PERSON);"},{"lineNumber":65,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":66,"author":{"gitID":"JasmineSee"},"content":"        // same object -\u003e returns true"},{"lineNumber":67,"author":{"gitID":"JasmineSee"},"content":"        assertTrue(firstCommand.equals(firstCommand));"},{"lineNumber":68,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":69,"author":{"gitID":"JasmineSee"},"content":"        // same values -\u003e returns true"},{"lineNumber":70,"author":{"gitID":"JasmineSee"},"content":"        DeletePhotoCommand firstCommandCopy \u003d new DeletePhotoCommand(INDEX_FIRST_PERSON);"},{"lineNumber":71,"author":{"gitID":"JasmineSee"},"content":"        assertTrue(firstCommand.equals(firstCommandCopy));"},{"lineNumber":72,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":73,"author":{"gitID":"JasmineSee"},"content":"        // different types -\u003e returns false"},{"lineNumber":74,"author":{"gitID":"JasmineSee"},"content":"        assertFalse(firstCommand.equals(1));"},{"lineNumber":75,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":76,"author":{"gitID":"JasmineSee"},"content":"        // null -\u003e returns false"},{"lineNumber":77,"author":{"gitID":"JasmineSee"},"content":"        assertFalse(firstCommand.equals(null));"},{"lineNumber":78,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":79,"author":{"gitID":"JasmineSee"},"content":"        // different person -\u003e returns false"},{"lineNumber":80,"author":{"gitID":"JasmineSee"},"content":"        assertFalse(firstCommand.equals(secondCommand));"},{"lineNumber":81,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":83,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"JasmineSee"},"content":"     * Returns a {@code DeletePhotoCommand} with the parameter {@code index}."},{"lineNumber":85,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"JasmineSee"},"content":"    private DeletePhotoCommand prepareCommand(Index index) {"},{"lineNumber":87,"author":{"gitID":"JasmineSee"},"content":"        DeletePhotoCommand deletePhotoCommand \u003d new DeletePhotoCommand(index);"},{"lineNumber":88,"author":{"gitID":"JasmineSee"},"content":"        deletePhotoCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":89,"author":{"gitID":"JasmineSee"},"content":"        return deletePhotoCommand;"},{"lineNumber":90,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":92,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"JasmineSee"},"content":"     * Preload photos to test data."},{"lineNumber":94,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"JasmineSee"},"content":"    private void prepareUploadPhoto(Index index, String filePath) throws CommandException {"},{"lineNumber":96,"author":{"gitID":"JasmineSee"},"content":"        UploadPhotoCommand uploadPhotoCommand \u003d new UploadPhotoCommand(index,"},{"lineNumber":97,"author":{"gitID":"JasmineSee"},"content":"                filePath);"},{"lineNumber":98,"author":{"gitID":"JasmineSee"},"content":"        uploadPhotoCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":99,"author":{"gitID":"JasmineSee"},"content":"        uploadPhotoCommand.execute();"},{"lineNumber":100,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":102,"author":{"gitID":"JasmineSee"},"content":"}"}],"authorContributionMap":{"JasmineSee":80,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/HistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":18,"author":{"gitID":"danielweide"},"content":"    public static final String COMMAND_ALIAS \u003d \"h\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireNonNull(history);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.history \u003d history;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"danielweide":1,"-":38}},{"path":"src/main/java/seedu/address/logic/parser/EmailCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"blaqkrow"},"content":"import seedu.address.logic.commands.EmailCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"blaqkrow"},"content":"//@@author blaqkrow"},{"lineNumber":11,"author":{"gitID":"blaqkrow"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"blaqkrow"},"content":" * Parses input arguments and creates a new EmailCommand object"},{"lineNumber":13,"author":{"gitID":"blaqkrow"},"content":" */"},{"lineNumber":14,"author":{"gitID":"blaqkrow"},"content":"public class EmailCommandParser implements Parser\u003cEmailCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":16,"author":{"gitID":"blaqkrow"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"blaqkrow"},"content":"     * Parses the given {@code String} of arguments in the context of the EmailCommand"},{"lineNumber":18,"author":{"gitID":"blaqkrow"},"content":"     * and returns an EmailCommand object for execution."},{"lineNumber":19,"author":{"gitID":"blaqkrow"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"blaqkrow"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"blaqkrow"},"content":"    public EmailCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"blaqkrow"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"blaqkrow"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"blaqkrow"},"content":"            return new EmailCommand(index);"},{"lineNumber":25,"author":{"gitID":"blaqkrow"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"blaqkrow"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"blaqkrow"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"blaqkrow"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":31,"author":{"gitID":"blaqkrow"},"content":"}"}],"authorContributionMap":{"-":8,"blaqkrow":23}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"danielweide"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"danielweide":1,"-":52}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":12,"author":{"gitID":"danielweide"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"danielweide":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/QrSmsCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"danielweide"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"blaqkrow"},"content":"import seedu.address.commons.events.ui.QrSmsEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"danielweide"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"danielweide"},"content":" * Selects a person to Generate QRCode identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"danielweide"},"content":" */"},{"lineNumber":15,"author":{"gitID":"danielweide"},"content":"//@@author danielweide"},{"lineNumber":16,"author":{"gitID":"danielweide"},"content":"public class QrSmsCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":18,"author":{"gitID":"danielweide"},"content":"    public static final String COMMAND_WORD \u003d \"qrsms\";"},{"lineNumber":19,"author":{"gitID":"danielweide"},"content":"    public static final String COMMAND_ALIAS \u003d \"qs\";"},{"lineNumber":20,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":21,"author":{"gitID":"danielweide"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitID":"danielweide"},"content":"            + \": Select Person based on Index to generate QR Code for SMS\\n\""},{"lineNumber":23,"author":{"gitID":"danielweide"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":24,"author":{"gitID":"danielweide"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":25,"author":{"gitID":"danielweide"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Generated SMS Qr for Selected Person: %1$s\";"},{"lineNumber":26,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":27,"author":{"gitID":"danielweide"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":29,"author":{"gitID":"danielweide"},"content":"    public QrSmsCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"danielweide"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":33,"author":{"gitID":"danielweide"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"danielweide"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":36,"author":{"gitID":"danielweide"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitID":"danielweide"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":38,"author":{"gitID":"danielweide"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":39,"author":{"gitID":"danielweide"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"danielweide"},"content":"        int indexOfPersonInList;"},{"lineNumber":41,"author":{"gitID":"danielweide"},"content":"        indexOfPersonInList \u003d targetIndex.getOneBased() - 1;"},{"lineNumber":42,"author":{"gitID":"danielweide"},"content":"        EventsCenter.getInstance().post(new QrSmsEvent(lastShownList.get(indexOfPersonInList)));"},{"lineNumber":43,"author":{"gitID":"danielweide"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":44,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":45,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":47,"author":{"gitID":"danielweide"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"danielweide"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"danielweide"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"danielweide"},"content":"                || (other instanceof QrSmsCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"danielweide"},"content":"                \u0026\u0026 this.targetIndex.equals(((QrSmsCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":54,"author":{"gitID":"danielweide"},"content":"}"}],"authorContributionMap":{"danielweide":45,"-":8,"blaqkrow":1}},{"path":"src/main/java/seedu/address/logic/parser/QrCallCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"danielweide"},"content":"import seedu.address.logic.commands.QrCallCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"danielweide"},"content":" * Parses input arguments and creates a new QrCallCommand object"},{"lineNumber":12,"author":{"gitID":"danielweide"},"content":" */"},{"lineNumber":13,"author":{"gitID":"danielweide"},"content":"//@@author danielweide"},{"lineNumber":14,"author":{"gitID":"danielweide"},"content":"public class QrCallCommandParser implements Parser\u003cQrCallCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"danielweide"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"danielweide"},"content":"     * Parses input arguments and creates a new QrCallCommand object"},{"lineNumber":17,"author":{"gitID":"danielweide"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"danielweide"},"content":"    public QrCallCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitID":"danielweide"},"content":"        try {"},{"lineNumber":20,"author":{"gitID":"danielweide"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":21,"author":{"gitID":"danielweide"},"content":"            return new QrCallCommand(index);"},{"lineNumber":22,"author":{"gitID":"danielweide"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":23,"author":{"gitID":"danielweide"},"content":"            throw new ParseException("},{"lineNumber":24,"author":{"gitID":"danielweide"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, QrCallCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"danielweide"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"danielweide"},"content":"}"}],"authorContributionMap":{"danielweide":18,"-":9}},{"path":"src/main/java/seedu/address/logic/commands/ExportCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"limshunyong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":3,"author":{"gitID":"limshunyong"},"content":"import java.io.BufferedWriter;"},{"lineNumber":4,"author":{"gitID":"limshunyong"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitID":"limshunyong"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"limshunyong"},"content":"//@@author limshunyong"},{"lineNumber":10,"author":{"gitID":"limshunyong"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"limshunyong"},"content":" * Exports contact to external source (in .vcf format)"},{"lineNumber":12,"author":{"gitID":"limshunyong"},"content":" */"},{"lineNumber":13,"author":{"gitID":"limshunyong"},"content":"public class ExportCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":15,"author":{"gitID":"limshunyong"},"content":"    public static final String COMMAND_WORD \u003d \"export\";"},{"lineNumber":16,"author":{"gitID":"limshunyong"},"content":"    public static final String COMMAND_ALIAS \u003d \"ex\";"},{"lineNumber":17,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":18,"author":{"gitID":"limshunyong"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":19,"author":{"gitID":"limshunyong"},"content":"            + \": Export contact details to external source (in .vcf format).\\n\""},{"lineNumber":20,"author":{"gitID":"limshunyong"},"content":"            + \"Parameters: FILENAME \\n\""},{"lineNumber":21,"author":{"gitID":"limshunyong"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":22,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":23,"author":{"gitID":"limshunyong"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Contacts successfully exported as output.vcf !!\";"},{"lineNumber":24,"author":{"gitID":"limshunyong"},"content":"    public static final String MESSAGE_FAIL \u003d \"Contacts not exported!!\";"},{"lineNumber":25,"author":{"gitID":"limshunyong"},"content":"    public static final String MESSAGE_EMPTY_AB \u003d \"AddressBook is empty. Nothing to export !!\";"},{"lineNumber":26,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":27,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":28,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":29,"author":{"gitID":"limshunyong"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"limshunyong"},"content":"    public CommandResult execute() {"},{"lineNumber":31,"author":{"gitID":"limshunyong"},"content":"        if (model.getAddressBook().getPersonList().isEmpty()) {"},{"lineNumber":32,"author":{"gitID":"limshunyong"},"content":"            return new CommandResult(MESSAGE_EMPTY_AB);"},{"lineNumber":33,"author":{"gitID":"limshunyong"},"content":"        } else {"},{"lineNumber":34,"author":{"gitID":"limshunyong"},"content":"            try {"},{"lineNumber":35,"author":{"gitID":"limshunyong"},"content":"                writeToFile();"},{"lineNumber":36,"author":{"gitID":"limshunyong"},"content":"            } catch (IOException e) {"},{"lineNumber":37,"author":{"gitID":"limshunyong"},"content":"                return new CommandResult(MESSAGE_FAIL);"},{"lineNumber":38,"author":{"gitID":"limshunyong"},"content":"            }"},{"lineNumber":39,"author":{"gitID":"limshunyong"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":40,"author":{"gitID":"limshunyong"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"limshunyong"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":43,"author":{"gitID":"limshunyong"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"limshunyong"},"content":"     * This method handles the writing of contacts to a file"},{"lineNumber":45,"author":{"gitID":"limshunyong"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"limshunyong"},"content":"    private void writeToFile() throws IOException {"},{"lineNumber":47,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":48,"author":{"gitID":"limshunyong"},"content":"        final String filename \u003d \"output.vcf\";"},{"lineNumber":49,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":50,"author":{"gitID":"limshunyong"},"content":"        FileWriter fw \u003d new FileWriter(filename);"},{"lineNumber":51,"author":{"gitID":"limshunyong"},"content":"        BufferedWriter bw \u003d new BufferedWriter(fw);"},{"lineNumber":52,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":53,"author":{"gitID":"limshunyong"},"content":"        for (ReadOnlyPerson p : model.getAddressBook().getPersonList()) {"},{"lineNumber":54,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":55,"author":{"gitID":"limshunyong"},"content":"            String header \u003d \"BEGIN:VCARD\\n\";"},{"lineNumber":56,"author":{"gitID":"limshunyong"},"content":"            String version \u003d \"VERSION:3.0\\n\";"},{"lineNumber":57,"author":{"gitID":"limshunyong"},"content":"            String fullName \u003d \"FN:\" + p.getName().toString() + \"\\n\";"},{"lineNumber":58,"author":{"gitID":"limshunyong"},"content":"            String name \u003d \"N:;\" + p.getName().toString() + \";;;\\n\";"},{"lineNumber":59,"author":{"gitID":"limshunyong"},"content":"            String email \u003d \"EMAIL;TYPE\u003dINTERNET;TYPE\u003dHOME:\" + p.getEmail().toString() + \"\\n\";"},{"lineNumber":60,"author":{"gitID":"limshunyong"},"content":"            String tel \u003d \"TEL;TYPE\u003dCELL:\" + p.getPhone().toString() + \"\\n\";"},{"lineNumber":61,"author":{"gitID":"limshunyong"},"content":"            String address \u003d \"ADR:;;\" + p.getAddress().toString() + \";;;;\\n\";"},{"lineNumber":62,"author":{"gitID":"limshunyong"},"content":"            String footer \u003d \"END:VCARD\\n\";"},{"lineNumber":63,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":64,"author":{"gitID":"limshunyong"},"content":"            bw.write(header);"},{"lineNumber":65,"author":{"gitID":"limshunyong"},"content":"            bw.write(version);"},{"lineNumber":66,"author":{"gitID":"limshunyong"},"content":"            bw.write(fullName);"},{"lineNumber":67,"author":{"gitID":"limshunyong"},"content":"            bw.write(name);"},{"lineNumber":68,"author":{"gitID":"limshunyong"},"content":"            bw.write(email);"},{"lineNumber":69,"author":{"gitID":"limshunyong"},"content":"            bw.write(tel);"},{"lineNumber":70,"author":{"gitID":"limshunyong"},"content":"            bw.write(address);"},{"lineNumber":71,"author":{"gitID":"limshunyong"},"content":"            bw.write(footer);"},{"lineNumber":72,"author":{"gitID":"limshunyong"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":74,"author":{"gitID":"limshunyong"},"content":"        if (bw !\u003d null) {"},{"lineNumber":75,"author":{"gitID":"limshunyong"},"content":"            bw.close();"},{"lineNumber":76,"author":{"gitID":"limshunyong"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":78,"author":{"gitID":"limshunyong"},"content":"        if (fw !\u003d null) {"},{"lineNumber":79,"author":{"gitID":"limshunyong"},"content":"            fw.close();"},{"lineNumber":80,"author":{"gitID":"limshunyong"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":82,"author":{"gitID":"limshunyong"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"limshunyong"},"content":"}"}],"authorContributionMap":{"limshunyong":81,"-":2}},{"path":"src/main/java/seedu/address/logic/commands/UndoableCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Represents a command which can be undone and redone."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private ReadOnlyAddressBook previousAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    protected abstract CommandResult executeUndoableCommand() throws CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Stores the current state of {@code model#addressBook}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private void saveAddressBookSnapshot() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        this.previousAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Reverts the AddressBook to the state before this command"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * was executed and updates the filtered person list to"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * show all persons."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    protected final void undo() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, previousAddressBook);"},{"lineNumber":34,"author":{"gitID":"JasmineSee"},"content":"        model.resetData(previousAddressBook);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Executes the command and updates the filtered person"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * list to show all persons."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    protected final void redo() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            executeUndoableCommand();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The command has been successfully executed previously; \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"                    + \"it should not fail now\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public final CommandResult execute() throws CommandException {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        saveAddressBookSnapshot();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return executeUndoableCommand();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"JasmineSee":1,"-":57}},{"path":"src/main/java/seedu/address/logic/commands/EmailCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"blaqkrow"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":3,"author":{"gitID":"blaqkrow"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"blaqkrow"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":6,"author":{"gitID":"blaqkrow"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"blaqkrow"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":11,"author":{"gitID":"blaqkrow"},"content":"import seedu.address.ui.OpenEmailClient;"},{"lineNumber":12,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":13,"author":{"gitID":"blaqkrow"},"content":"//@@author blaqkrow"},{"lineNumber":14,"author":{"gitID":"blaqkrow"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"blaqkrow"},"content":" * Emails the selected person using the specified index in the list."},{"lineNumber":16,"author":{"gitID":"blaqkrow"},"content":" */"},{"lineNumber":17,"author":{"gitID":"blaqkrow"},"content":"public class EmailCommand extends Command {"},{"lineNumber":18,"author":{"gitID":"blaqkrow"},"content":"    public static final String COMMAND_WORD \u003d \"email\";"},{"lineNumber":19,"author":{"gitID":"blaqkrow"},"content":"    public static final String COMMAND_ALIAS \u003d \"em\";"},{"lineNumber":20,"author":{"gitID":"blaqkrow"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Email opened!\";"},{"lineNumber":21,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":22,"author":{"gitID":"blaqkrow"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"blaqkrow"},"content":"            + \": Emails the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":24,"author":{"gitID":"blaqkrow"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"blaqkrow"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitID":"blaqkrow"},"content":"    private LoggingCommand lg \u003d new LoggingCommand();"},{"lineNumber":27,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":28,"author":{"gitID":"blaqkrow"},"content":"    private final Index emailIndex;"},{"lineNumber":29,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":30,"author":{"gitID":"blaqkrow"},"content":"    public EmailCommand(Index emailIndex) {"},{"lineNumber":31,"author":{"gitID":"blaqkrow"},"content":"        this.emailIndex \u003d emailIndex;"},{"lineNumber":32,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":34,"author":{"gitID":"blaqkrow"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"blaqkrow"},"content":"    public CommandResult execute() throws CommandException, IOException {"},{"lineNumber":36,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":37,"author":{"gitID":"blaqkrow"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":38,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":39,"author":{"gitID":"blaqkrow"},"content":"        if (emailIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":40,"author":{"gitID":"blaqkrow"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":41,"author":{"gitID":"blaqkrow"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"blaqkrow"},"content":"        ReadOnlyPerson personToEmail \u003d lastShownList.get(emailIndex.getZeroBased());"},{"lineNumber":43,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":44,"author":{"gitID":"blaqkrow"},"content":"        OpenEmailClient emailClient \u003d new OpenEmailClient(personToEmail.getEmail().toString());"},{"lineNumber":45,"author":{"gitID":"blaqkrow"},"content":"        emailClient.sendMail();"},{"lineNumber":46,"author":{"gitID":"blaqkrow"},"content":"        lg.keepLog(\"Email client opened!\", \"Email\");"},{"lineNumber":47,"author":{"gitID":"blaqkrow"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":48,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"blaqkrow"},"content":"}"}],"authorContributionMap":{"blaqkrow":47,"-":2}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"blaqkrow"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.history \u003d new CommandHistory();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.addressBookParser \u003d new AddressBookParser();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"blaqkrow"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException, IOException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":56,"blaqkrow":2}},{"path":"src/main/java/seedu/address/logic/commands/QrGenSmsCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"danielweide"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":3,"author":{"gitID":"danielweide"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"danielweide"},"content":" * Generates SMS QR Link in forms of String"},{"lineNumber":5,"author":{"gitID":"danielweide"},"content":" */"},{"lineNumber":6,"author":{"gitID":"danielweide"},"content":"//@@author danielweide"},{"lineNumber":7,"author":{"gitID":"danielweide"},"content":"public class QrGenSmsCommand {"},{"lineNumber":8,"author":{"gitID":"danielweide"},"content":"    /**"},{"lineNumber":9,"author":{"gitID":"danielweide"},"content":"     * Generates SMS QR Link in forms of String"},{"lineNumber":10,"author":{"gitID":"danielweide"},"content":"     */"},{"lineNumber":11,"author":{"gitID":"danielweide"},"content":"    public String qrSms(String phoneNum, String contactName) {"},{"lineNumber":12,"author":{"gitID":"danielweide"},"content":"        String qrCodeA \u003d \"http://\";"},{"lineNumber":13,"author":{"gitID":"danielweide"},"content":"        String qrCodeB \u003d \"api.qrserver.com/\";"},{"lineNumber":14,"author":{"gitID":"danielweide"},"content":"        String qrCodeC \u003d \"v1/\";"},{"lineNumber":15,"author":{"gitID":"danielweide"},"content":"        String qrCodeD \u003d \"create-qr-code/\";"},{"lineNumber":16,"author":{"gitID":"danielweide"},"content":"        String qrCodeE \u003d \"?color\u003d000000\";"},{"lineNumber":17,"author":{"gitID":"danielweide"},"content":"        String qrCodeF \u003d \"\u0026bgcolor\u003dFFFFFF\";"},{"lineNumber":18,"author":{"gitID":"danielweide"},"content":"        String qrCodeG \u003d \"\u0026data\";"},{"lineNumber":19,"author":{"gitID":"danielweide"},"content":"        String qrCodeH \u003d \"\u003dSMSTO\";"},{"lineNumber":20,"author":{"gitID":"danielweide"},"content":"        String qrCodeI \u003d \"%3A\";"},{"lineNumber":21,"author":{"gitID":"danielweide"},"content":"        String qrCodeJ \u003d \"\u0026qzone\";"},{"lineNumber":22,"author":{"gitID":"danielweide"},"content":"        String qrCodeK \u003d \"\u003d1\";"},{"lineNumber":23,"author":{"gitID":"danielweide"},"content":"        String qrCodeL \u003d \"\u0026margin\";"},{"lineNumber":24,"author":{"gitID":"danielweide"},"content":"        String qrCodeM \u003d \"\u003d0\";"},{"lineNumber":25,"author":{"gitID":"danielweide"},"content":"        String qrCodeN \u003d \"\u0026size\";"},{"lineNumber":26,"author":{"gitID":"danielweide"},"content":"        String qrCodeO \u003d \"\u003d500x500\";"},{"lineNumber":27,"author":{"gitID":"danielweide"},"content":"        String qrCodeP \u003d \"\u0026ecc\";"},{"lineNumber":28,"author":{"gitID":"danielweide"},"content":"        String qrCodeQ \u003d \"\u003dL\";"},{"lineNumber":29,"author":{"gitID":"danielweide"},"content":"        String qrLineA \u003d qrCodeA + qrCodeB + qrCodeC + qrCodeD + qrCodeE + qrCodeF"},{"lineNumber":30,"author":{"gitID":"danielweide"},"content":"                + qrCodeG + qrCodeH + qrCodeI;"},{"lineNumber":31,"author":{"gitID":"danielweide"},"content":"        String qrLineB \u003d qrCodeI + \"Dear+\" + contactName + \"%2C\";"},{"lineNumber":32,"author":{"gitID":"danielweide"},"content":"        String qrLineC \u003d qrCodeJ + qrCodeK + qrCodeL + qrCodeM + qrCodeN + qrCodeO"},{"lineNumber":33,"author":{"gitID":"danielweide"},"content":"                + qrCodeP + qrCodeQ;"},{"lineNumber":34,"author":{"gitID":"danielweide"},"content":"        String fullQr \u003d qrLineA + phoneNum + qrLineB + qrLineC;"},{"lineNumber":35,"author":{"gitID":"danielweide"},"content":"        return fullQr;"},{"lineNumber":36,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"danielweide"},"content":"}"}],"authorContributionMap":{"danielweide":37}},{"path":"src/main/java/seedu/address/storage/AddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface AddressBookStorage {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @see #getAddressBookFilePath()"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"limshunyong"},"content":"    //@@author limshunyong"},{"lineNumber":45,"author":{"gitID":"limshunyong"},"content":"    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":46,"author":{"gitID":"limshunyong"},"content":"}"}],"authorContributionMap":{"limshunyong":3,"-":43}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":72,"author":{"gitID":"limshunyong"},"content":"        backupAddressBook(addressBook);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":81,"author":{"gitID":"limshunyong"},"content":"    //@@author limshunyong"},{"lineNumber":82,"author":{"gitID":"limshunyong"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":83,"author":{"gitID":"limshunyong"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath() + \"-copy.xml\");"},{"lineNumber":84,"author":{"gitID":"limshunyong"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":86,"author":{"gitID":"limshunyong"},"content":"    //@@author"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"limshunyong":8,"-":90}},{"path":"src/main/java/seedu/address/logic/parser/ChangeThemeCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":5,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"JasmineSee"},"content":"//@@author JasmineSee"},{"lineNumber":9,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":10,"author":{"gitID":"JasmineSee"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"JasmineSee"},"content":" * Parses input arguments and creates a new ChangeThemeCommand object"},{"lineNumber":12,"author":{"gitID":"JasmineSee"},"content":" */"},{"lineNumber":13,"author":{"gitID":"JasmineSee"},"content":"public class ChangeThemeCommandParser implements Parser\u003cChangeThemeCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":15,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"JasmineSee"},"content":"     * Parses the given {@code String} of arguments in the context of the ChangeThemeCommand"},{"lineNumber":17,"author":{"gitID":"JasmineSee"},"content":"     * and returns an ChangeThemeCommand object for execution."},{"lineNumber":18,"author":{"gitID":"JasmineSee"},"content":"     *"},{"lineNumber":19,"author":{"gitID":"JasmineSee"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"JasmineSee"},"content":"    public ChangeThemeCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"JasmineSee"},"content":"        String trimmedArgs \u003d args.trim().toLowerCase();"},{"lineNumber":23,"author":{"gitID":"JasmineSee"},"content":"        if (trimmedArgs.isEmpty() || !isThemeAvailable(trimmedArgs)) {"},{"lineNumber":24,"author":{"gitID":"JasmineSee"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"JasmineSee"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeThemeCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":28,"author":{"gitID":"JasmineSee"},"content":"        String theme \u003d trimmedArgs;"},{"lineNumber":29,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":30,"author":{"gitID":"JasmineSee"},"content":"        return new ChangeThemeCommand(theme);"},{"lineNumber":31,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":33,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"JasmineSee"},"content":"     * Checks if inputted theme is one of the available themes."},{"lineNumber":35,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"JasmineSee"},"content":"    public boolean isThemeAvailable(String args) {"},{"lineNumber":37,"author":{"gitID":"JasmineSee"},"content":"        if (args.equals(\"dark\") || args.equals(\"white\") || args.equals(\"green\")) {"},{"lineNumber":38,"author":{"gitID":"JasmineSee"},"content":"            return true;"},{"lineNumber":39,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"JasmineSee"},"content":"        return false;"},{"lineNumber":41,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":43,"author":{"gitID":"JasmineSee"},"content":"}"}],"authorContributionMap":{"JasmineSee":38,"-":5}},{"path":"src/main/java/seedu/address/logic/commands/ClearLogCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"danielweide"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":3,"author":{"gitID":"danielweide"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"danielweide"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":8,"author":{"gitID":"danielweide"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"danielweide"},"content":" * Method to Clear ConnectUsLog.txt Command"},{"lineNumber":10,"author":{"gitID":"danielweide"},"content":" */"},{"lineNumber":11,"author":{"gitID":"danielweide"},"content":"//@@author danielweide"},{"lineNumber":12,"author":{"gitID":"danielweide"},"content":"public class ClearLogCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"danielweide"},"content":"    public static final String COMMAND_WORD \u003d \"clearlog\";"},{"lineNumber":14,"author":{"gitID":"danielweide"},"content":"    public static final String COMMAND_ALIAS \u003d \"cl\";"},{"lineNumber":15,"author":{"gitID":"danielweide"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"ConnectUs.txt log has been cleared!\";"},{"lineNumber":16,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":17,"author":{"gitID":"danielweide"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"danielweide"},"content":"     * Output Results After \"Clearing\" ConnectUsLog.txt file"},{"lineNumber":19,"author":{"gitID":"danielweide"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"danielweide"},"content":"    public CommandResult execute() throws CommandException, IOException {"},{"lineNumber":21,"author":{"gitID":"danielweide"},"content":"        File file \u003d new File(\"ConnectUsLog.txt\");"},{"lineNumber":22,"author":{"gitID":"danielweide"},"content":"        file.delete();"},{"lineNumber":23,"author":{"gitID":"danielweide"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":24,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":26,"author":{"gitID":"danielweide"},"content":"}"}],"authorContributionMap":{"danielweide":24,"-":2}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":16,"author":{"gitID":"danielweide"},"content":"    public static final String COMMAND_ALIAS \u003d \"u\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":29,"author":{"gitID":"danielweide"},"content":"        LoggingCommand loggingCommand \u003d new LoggingCommand();"},{"lineNumber":30,"author":{"gitID":"danielweide"},"content":"        loggingCommand.keepLog(\"\", \"Undo\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"danielweide":3,"-":36}},{"path":"src/main/java/seedu/address/ui/QrSmsButton.java","lines":[{"lineNumber":1,"author":{"gitID":"blaqkrow"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":3,"author":{"gitID":"blaqkrow"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"blaqkrow"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":6,"author":{"gitID":"blaqkrow"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":8,"author":{"gitID":"blaqkrow"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":12,"author":{"gitID":"blaqkrow"},"content":"import seedu.address.commons.events.ui.QrSmsEvent;"},{"lineNumber":13,"author":{"gitID":"danielweide"},"content":"import seedu.address.logic.commands.LoggingCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"blaqkrow"},"content":"//@@author blaqkrow"},{"lineNumber":19,"author":{"gitID":"blaqkrow"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"blaqkrow"},"content":" * The UI component that is for generating a QR code which opens up an SMS client on a smartphone."},{"lineNumber":21,"author":{"gitID":"blaqkrow"},"content":" */"},{"lineNumber":22,"author":{"gitID":"blaqkrow"},"content":"public class QrSmsButton extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"blaqkrow"},"content":"    public static final String MESSAGE_FAIL \u003d \"Please select someone\";"},{"lineNumber":24,"author":{"gitID":"blaqkrow"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":25,"author":{"gitID":"blaqkrow"},"content":"    private static final String FXML \u003d \"QrSmsButton.fxml\";"},{"lineNumber":26,"author":{"gitID":"blaqkrow"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":27,"author":{"gitID":"blaqkrow"},"content":"    private LoggingCommand loggingCommand;"},{"lineNumber":28,"author":{"gitID":"blaqkrow"},"content":"    private BrowserPanel bp;"},{"lineNumber":29,"author":{"gitID":"blaqkrow"},"content":"    private ReadOnlyPerson person;"},{"lineNumber":30,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":31,"author":{"gitID":"blaqkrow"},"content":"    public QrSmsButton(BrowserPanel bp) {"},{"lineNumber":32,"author":{"gitID":"blaqkrow"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"blaqkrow"},"content":"        loggingCommand \u003d new LoggingCommand();"},{"lineNumber":34,"author":{"gitID":"blaqkrow"},"content":"        this.bp \u003d bp;"},{"lineNumber":35,"author":{"gitID":"blaqkrow"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":36,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"blaqkrow"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"blaqkrow"},"content":"     * Handles the QR button pressed event."},{"lineNumber":39,"author":{"gitID":"blaqkrow"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"blaqkrow"},"content":"    private void handleQrSmsButtonPressed() throws CommandException, ParseException, IOException {"},{"lineNumber":42,"author":{"gitID":"blaqkrow"},"content":"        if (person !\u003d null) {"},{"lineNumber":43,"author":{"gitID":"blaqkrow"},"content":"            bp.loadSmsQrCode(person);"},{"lineNumber":44,"author":{"gitID":"blaqkrow"},"content":"            logger.info(\"QR Code displayed\");"},{"lineNumber":45,"author":{"gitID":"blaqkrow"},"content":"        } else {"},{"lineNumber":46,"author":{"gitID":"blaqkrow"},"content":"            logger.info(MESSAGE_FAIL);"},{"lineNumber":47,"author":{"gitID":"blaqkrow"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"blaqkrow"},"content":"    @Subscribe"},{"lineNumber":50,"author":{"gitID":"blaqkrow"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":51,"author":{"gitID":"blaqkrow"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":52,"author":{"gitID":"blaqkrow"},"content":"        this.person \u003d event.getNewSelection().person;"},{"lineNumber":53,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":55,"author":{"gitID":"blaqkrow"},"content":"    @Subscribe"},{"lineNumber":56,"author":{"gitID":"blaqkrow"},"content":"    private void clickButton(QrSmsEvent event) {"},{"lineNumber":57,"author":{"gitID":"blaqkrow"},"content":"        bp.loadSmsQrCode((ReadOnlyPerson) event.getPerson());"},{"lineNumber":58,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":60,"author":{"gitID":"blaqkrow"},"content":"}"},{"lineNumber":61,"author":{"gitID":"blaqkrow"},"content":""}],"authorContributionMap":{"danielweide":1,"blaqkrow":53,"-":7}},{"path":"src/main/java/seedu/address/storage/XmlAddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorage implements AddressBookStorage {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public XmlAddressBookStorage(String filePath) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return readAddressBook(filePath);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Similar to {@link #readAddressBook()}"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook addressBookOptional \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return Optional.of(addressBookOptional);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"limshunyong"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"limshunyong"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":61,"author":{"gitID":"limshunyong"},"content":"        saveAddressBook(addressBook, filePath + \"-copy.xml\");"},{"lineNumber":62,"author":{"gitID":"limshunyong"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, filePath);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"limshunyong":4,"-":76}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"danielweide"},"content":"import seedu.address.logic.commands.LoggingCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":41,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":42,"author":{"gitID":"-"},"content":" */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":137,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":165,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":189,"author":{"gitID":"danielweide"},"content":"        LoggingCommand loggingCommand \u003d new LoggingCommand();"},{"lineNumber":190,"author":{"gitID":"danielweide"},"content":"        loggingCommand.startUpLog();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"danielweide":3,"limshunyong":1,"-":212}},{"path":"src/main/java/seedu/address/logic/commands/TagCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"JasmineSee"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":3,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":5,"author":{"gitID":"JasmineSee"},"content":"//@@author JasmineSee"},{"lineNumber":6,"author":{"gitID":"JasmineSee"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"JasmineSee"},"content":" * Lists all persons in the address book that has the specified tag(s) to the user."},{"lineNumber":8,"author":{"gitID":"JasmineSee"},"content":" */"},{"lineNumber":9,"author":{"gitID":"JasmineSee"},"content":"public class TagCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":11,"author":{"gitID":"JasmineSee"},"content":"    public static final String COMMAND_WORD \u003d \"tag\";"},{"lineNumber":12,"author":{"gitID":"JasmineSee"},"content":"    public static final String COMMAND_ALIAS \u003d \"t\";"},{"lineNumber":13,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":14,"author":{"gitID":"JasmineSee"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":15,"author":{"gitID":"JasmineSee"},"content":"            + \": Filters and shows list of persons with the specified tag.\\n\""},{"lineNumber":16,"author":{"gitID":"JasmineSee"},"content":"            + \"Parameters: Existing tag\\n\""},{"lineNumber":17,"author":{"gitID":"JasmineSee"},"content":"            + \"Example: \" + COMMAND_WORD + \" friends \";"},{"lineNumber":18,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":19,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":20,"author":{"gitID":"JasmineSee"},"content":"    private final TagContainsKeywordsPredicate predicate;"},{"lineNumber":21,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":22,"author":{"gitID":"JasmineSee"},"content":"    public TagCommand(TagContainsKeywordsPredicate predicate) {"},{"lineNumber":23,"author":{"gitID":"JasmineSee"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":24,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":26,"author":{"gitID":"JasmineSee"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"JasmineSee"},"content":"    public CommandResult execute() {"},{"lineNumber":28,"author":{"gitID":"JasmineSee"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":29,"author":{"gitID":"JasmineSee"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":30,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":32,"author":{"gitID":"JasmineSee"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"JasmineSee"},"content":"    public boolean equals(Object other) {"},{"lineNumber":34,"author":{"gitID":"JasmineSee"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":35,"author":{"gitID":"JasmineSee"},"content":"                || (other instanceof TagCommand // instanceof handles nulls"},{"lineNumber":36,"author":{"gitID":"JasmineSee"},"content":"                \u0026\u0026 this.predicate.equals(((TagCommand) other).predicate)); // state check"},{"lineNumber":37,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"JasmineSee"},"content":"}"}],"authorContributionMap":{"JasmineSee":38}},{"path":"src/main/java/seedu/address/ui/QrSaveButton.java","lines":[{"lineNumber":1,"author":{"gitID":"blaqkrow"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":3,"author":{"gitID":"blaqkrow"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"blaqkrow"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":6,"author":{"gitID":"blaqkrow"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":8,"author":{"gitID":"blaqkrow"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":12,"author":{"gitID":"blaqkrow"},"content":"import seedu.address.commons.events.ui.QrSaveEvent;"},{"lineNumber":13,"author":{"gitID":"danielweide"},"content":"import seedu.address.logic.commands.LoggingCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"blaqkrow"},"content":"//@@author blaqkrow"},{"lineNumber":19,"author":{"gitID":"blaqkrow"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"blaqkrow"},"content":" * The UI component that is for generating a QR code which exports contacts on a smartphone."},{"lineNumber":21,"author":{"gitID":"blaqkrow"},"content":" */"},{"lineNumber":22,"author":{"gitID":"blaqkrow"},"content":"public class QrSaveButton extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"blaqkrow"},"content":"    public static final String MESSAGE_FAIL \u003d \"Please select someone\";"},{"lineNumber":24,"author":{"gitID":"blaqkrow"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":25,"author":{"gitID":"blaqkrow"},"content":"    private static final String FXML \u003d \"QrSaveButton.fxml\";"},{"lineNumber":26,"author":{"gitID":"blaqkrow"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":27,"author":{"gitID":"blaqkrow"},"content":"    private LoggingCommand loggingCommand;"},{"lineNumber":28,"author":{"gitID":"blaqkrow"},"content":"    private BrowserPanel bp;"},{"lineNumber":29,"author":{"gitID":"blaqkrow"},"content":"    private ReadOnlyPerson person;"},{"lineNumber":30,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":31,"author":{"gitID":"blaqkrow"},"content":"    public QrSaveButton(BrowserPanel bp) {"},{"lineNumber":32,"author":{"gitID":"blaqkrow"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"blaqkrow"},"content":"        loggingCommand \u003d new LoggingCommand();"},{"lineNumber":34,"author":{"gitID":"blaqkrow"},"content":"        this.bp \u003d bp;"},{"lineNumber":35,"author":{"gitID":"blaqkrow"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":36,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"blaqkrow"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"blaqkrow"},"content":"     * Handles the QR button pressed event."},{"lineNumber":39,"author":{"gitID":"blaqkrow"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"blaqkrow"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"blaqkrow"},"content":"    private void handleQrSaveButtonPressed() throws CommandException, ParseException, IOException {"},{"lineNumber":42,"author":{"gitID":"blaqkrow"},"content":"        if (person !\u003d null) {"},{"lineNumber":43,"author":{"gitID":"blaqkrow"},"content":"            bp.loadSaveQrCode(person);"},{"lineNumber":44,"author":{"gitID":"blaqkrow"},"content":"            logger.info(\"QR Code displayed\");"},{"lineNumber":45,"author":{"gitID":"blaqkrow"},"content":"        } else {"},{"lineNumber":46,"author":{"gitID":"blaqkrow"},"content":"            logger.info(MESSAGE_FAIL);"},{"lineNumber":47,"author":{"gitID":"blaqkrow"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"blaqkrow"},"content":"    @Subscribe"},{"lineNumber":50,"author":{"gitID":"blaqkrow"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":51,"author":{"gitID":"blaqkrow"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":52,"author":{"gitID":"blaqkrow"},"content":"        this.person \u003d event.getNewSelection().person;"},{"lineNumber":53,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":55,"author":{"gitID":"blaqkrow"},"content":"    @Subscribe"},{"lineNumber":56,"author":{"gitID":"blaqkrow"},"content":"    private void clickButton(QrSaveEvent event) {"},{"lineNumber":57,"author":{"gitID":"blaqkrow"},"content":"        bp.loadSaveQrCode((ReadOnlyPerson) event.getPerson());"},{"lineNumber":58,"author":{"gitID":"blaqkrow"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":60,"author":{"gitID":"blaqkrow"},"content":"}"}],"authorContributionMap":{"danielweide":1,"blaqkrow":52,"-":7}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":18,"author":{"gitID":"JasmineSee"},"content":" * \u003cp\u003e"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":20,"author":{"gitID":"-"},"content":" *"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    // used by asObservableList()"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cReadOnlyPerson\u003e mappedList \u003d EasyBind.map(internalList, (person) -\u003e person);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public boolean contains(ReadOnlyPerson toCheck) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"JasmineSee"},"content":"    //@@author JasmineSee"},{"lineNumber":39,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"JasmineSee"},"content":"     * Returns true if the list contains a person with identical email in the given argument."},{"lineNumber":41,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"JasmineSee"},"content":"    public boolean containsSameEmail(ReadOnlyPerson toCheck) {"},{"lineNumber":43,"author":{"gitID":"JasmineSee"},"content":"        requireNonNull(toCheck);"},{"lineNumber":44,"author":{"gitID":"JasmineSee"},"content":"        for (ReadOnlyPerson person : internalList) {"},{"lineNumber":45,"author":{"gitID":"JasmineSee"},"content":"            if (person.getEmail().toString().equals(toCheck.getEmail().toString())) {"},{"lineNumber":46,"author":{"gitID":"JasmineSee"},"content":"                return true;"},{"lineNumber":47,"author":{"gitID":"JasmineSee"},"content":"            }"},{"lineNumber":48,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"JasmineSee"},"content":"        return false;"},{"lineNumber":50,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":52,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"JasmineSee"},"content":"     * Adds a person to the list."},{"lineNumber":54,"author":{"gitID":"JasmineSee"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"JasmineSee"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":56,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"JasmineSee"},"content":"    public void add(ReadOnlyPerson toAdd) throws DuplicatePersonException {"},{"lineNumber":58,"author":{"gitID":"JasmineSee"},"content":"        requireNonNull(toAdd);"},{"lineNumber":59,"author":{"gitID":"JasmineSee"},"content":"        if (contains(toAdd) || containsSameEmail(toAdd)) {"},{"lineNumber":60,"author":{"gitID":"JasmineSee"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":61,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"JasmineSee"},"content":"        internalList.add(new Person(toAdd));"},{"lineNumber":63,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"JasmineSee"},"content":"    //@@author"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void setPerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        internalList.set(index, new Person(editedPerson));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public boolean remove(ReadOnlyPerson toRemove) throws PersonNotFoundException {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003c? extends ReadOnlyPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        final UniquePersonList replacement \u003d new UniquePersonList();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        for (final ReadOnlyPerson person : persons) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            replacement.add(new Person(person));"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        setPersons(replacement);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e asObservableList() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(mappedList);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"limshunyong"},"content":"    //@@author limshunyong"},{"lineNumber":121,"author":{"gitID":"limshunyong"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"limshunyong"},"content":"     * Sorts the list"},{"lineNumber":123,"author":{"gitID":"limshunyong"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"limshunyong"},"content":"    public void sort() {"},{"lineNumber":125,"author":{"gitID":"limshunyong"},"content":"        internalList.sort((person1, person2) -\u003e ("},{"lineNumber":126,"author":{"gitID":"limshunyong"},"content":"                person1.getName().fullName"},{"lineNumber":127,"author":{"gitID":"limshunyong"},"content":"                        .compareToIgnoreCase(person2.getName().fullName)));"},{"lineNumber":128,"author":{"gitID":"limshunyong"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"limshunyong"},"content":"    //@@author"},{"lineNumber":130,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"JasmineSee":28,"limshunyong":12,"-":108}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"JasmineSee"},"content":"import java.awt.image.BufferedImage;"},{"lineNumber":12,"author":{"gitID":"JasmineSee"},"content":"import java.io.File;"},{"lineNumber":13,"author":{"gitID":"JasmineSee"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"blaqkrow"},"content":"import javax.imageio.ImageIO;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":42,"author":{"gitID":"danielweide"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @param index                of the person in the filtered person list to edit"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        ReadOnlyPerson personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":86,"author":{"gitID":"JasmineSee"},"content":"        if (editPersonDescriptor.isEmailFieldEdited()) {"},{"lineNumber":87,"author":{"gitID":"JasmineSee"},"content":"            String oldEmail \u003d personToEdit.getEmail().toString();"},{"lineNumber":88,"author":{"gitID":"JasmineSee"},"content":"            String newEmail \u003d editedPerson.getEmail().toString();"},{"lineNumber":89,"author":{"gitID":"JasmineSee"},"content":"            addPhoto(oldEmail, newEmail);"},{"lineNumber":90,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":94,"author":{"gitID":"danielweide"},"content":"            LoggingCommand loggingCommand \u003d new LoggingCommand();"},{"lineNumber":95,"author":{"gitID":"danielweide"},"content":"            loggingCommand.keepLog(personToEdit.toString(), \"Before Edit\");"},{"lineNumber":96,"author":{"gitID":"danielweide"},"content":"            loggingCommand.keepLog(editedPerson.toString(), \"After Edit\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(ReadOnlyPerson personToEdit,"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                                             EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":138,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"JasmineSee"},"content":"        public EditPersonDescriptor() {"},{"lineNumber":153,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            this.name \u003d toCopy.name;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            this.phone \u003d toCopy.phone;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            this.email \u003d toCopy.email;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            this.address \u003d toCopy.address;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            this.tags \u003d toCopy.tags;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":165,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.tags);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"JasmineSee"},"content":"        //@@author JasmineSee"},{"lineNumber":171,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":172,"author":{"gitID":"JasmineSee"},"content":"        /**"},{"lineNumber":173,"author":{"gitID":"JasmineSee"},"content":"         * Returns true if email field is edited."},{"lineNumber":174,"author":{"gitID":"JasmineSee"},"content":"         */"},{"lineNumber":175,"author":{"gitID":"JasmineSee"},"content":"        public boolean isEmailFieldEdited() {"},{"lineNumber":176,"author":{"gitID":"JasmineSee"},"content":"            return CollectionUtil.isAnyNonNull(this.email);"},{"lineNumber":177,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"JasmineSee"},"content":"        //@@author"},{"lineNumber":179,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            this.tags \u003d tags;"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(tags);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":223,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":228,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":236,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":237,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":238,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":239,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":243,"author":{"gitID":"JasmineSee"},"content":"    //@@author JasmineSee"},{"lineNumber":244,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":245,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":246,"author":{"gitID":"JasmineSee"},"content":"     * Adds image file of person to new email if image of person exists."},{"lineNumber":247,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":248,"author":{"gitID":"JasmineSee"},"content":"    private void addPhoto(String oldEmail, String newEmail) {"},{"lineNumber":249,"author":{"gitID":"JasmineSee"},"content":"        File oldFile \u003d new File(\"photos/\" + oldEmail + \".png\");"},{"lineNumber":250,"author":{"gitID":"JasmineSee"},"content":"        File newFile \u003d new File(\"photos/\" + newEmail + \".png\");"},{"lineNumber":251,"author":{"gitID":"JasmineSee"},"content":"        if (oldFile.exists()) {"},{"lineNumber":252,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":253,"author":{"gitID":"JasmineSee"},"content":"            try {"},{"lineNumber":254,"author":{"gitID":"JasmineSee"},"content":"                newFile.mkdirs();"},{"lineNumber":255,"author":{"gitID":"JasmineSee"},"content":"                newFile.createNewFile();"},{"lineNumber":256,"author":{"gitID":"JasmineSee"},"content":"                BufferedImage image;"},{"lineNumber":257,"author":{"gitID":"JasmineSee"},"content":"                image \u003d ImageIO.read(oldFile);"},{"lineNumber":258,"author":{"gitID":"JasmineSee"},"content":"                ImageIO.write(image, \"png\", newFile);"},{"lineNumber":259,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":260,"author":{"gitID":"JasmineSee"},"content":"            } catch (IOException e) {"},{"lineNumber":261,"author":{"gitID":"JasmineSee"},"content":"                e.printStackTrace();"},{"lineNumber":262,"author":{"gitID":"JasmineSee"},"content":"                Logger.getLogger(UploadPhotoCommand.class.getName()).log(Level.SEVERE, null, e);"},{"lineNumber":263,"author":{"gitID":"JasmineSee"},"content":"            }"},{"lineNumber":264,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":265,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"JasmineSee"},"content":"    //@@author"},{"lineNumber":267,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"danielweide":4,"JasmineSee":45,"-":217,"blaqkrow":1}},{"path":"src/main/java/seedu/address/logic/parser/DeletePhotoCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.logic.commands.DeletePhotoCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"JasmineSee"},"content":"//@@author JasmineSee"},{"lineNumber":11,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":12,"author":{"gitID":"JasmineSee"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"JasmineSee"},"content":" * Parses input arguments and creates a new DeletePhotoCommand object"},{"lineNumber":14,"author":{"gitID":"JasmineSee"},"content":" */"},{"lineNumber":15,"author":{"gitID":"JasmineSee"},"content":"public class DeletePhotoCommandParser implements Parser\u003cDeletePhotoCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":17,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"JasmineSee"},"content":"     * Parses the given {@code String} of arguments in the context of the DeletePhotoCommand"},{"lineNumber":19,"author":{"gitID":"JasmineSee"},"content":"     * and returns an DeletePhotoCommand object for execution."},{"lineNumber":20,"author":{"gitID":"JasmineSee"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"JasmineSee"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"JasmineSee"},"content":"    public DeletePhotoCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"JasmineSee"},"content":"        try {"},{"lineNumber":25,"author":{"gitID":"JasmineSee"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":26,"author":{"gitID":"JasmineSee"},"content":"            return new DeletePhotoCommand(index);"},{"lineNumber":27,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":28,"author":{"gitID":"JasmineSee"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":29,"author":{"gitID":"JasmineSee"},"content":"            throw new ParseException("},{"lineNumber":30,"author":{"gitID":"JasmineSee"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePhotoCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":34,"author":{"gitID":"JasmineSee"},"content":"}"},{"lineNumber":35,"author":{"gitID":"JasmineSee"},"content":""}],"authorContributionMap":{"JasmineSee":27,"-":8}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":9,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    Predicate\u003cReadOnlyPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":19,"author":{"gitID":"JasmineSee"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    void addPerson(ReadOnlyPerson person) throws DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"JasmineSee"},"content":"    //@@author JasmineSee"},{"lineNumber":41,"author":{"gitID":"JasmineSee"},"content":"    void removeTag(Tag tag) throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":42,"author":{"gitID":"JasmineSee"},"content":"    //@@author"},{"lineNumber":43,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"limshunyong"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"limshunyong"},"content":"     * Method to call sorting the address book"},{"lineNumber":55,"author":{"gitID":"limshunyong"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"limshunyong"},"content":"    void sortContact();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"JasmineSee":6,"limshunyong":4,"-":47}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003c? extends ReadOnlyPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            setPersons(newData.getPersonList());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            assert false : \"AddressBooks should not have duplicate persons\";"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        syncMasterTagListWith(persons);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void addPerson(ReadOnlyPerson p) throws DuplicatePersonException {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Person newPerson \u003d new Person(p);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        syncMasterTagListWith(newPerson);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":92,"author":{"gitID":"-"},"content":"        persons.add(newPerson);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedReadOnlyPerson}."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedReadOnlyPerson}."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * @see #syncMasterTagListWith(Person)"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedReadOnlyPerson)"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        requireNonNull(editedReadOnlyPerson);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new Person(editedReadOnlyPerson);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        syncMasterTagListWith(editedPerson);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":114,"author":{"gitID":"-"},"content":"        persons.setPerson(target, editedPerson);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Ensures that every tag in this person:"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     *  - exists in the master list {@link #tags}"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     *  - points to a Tag object in the master list"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    private void syncMasterTagListWith(Person person) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":132,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        person.setTags(correctTagReferences);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Ensures that every tag in these persons:"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     *  - exists in the master list {@link #tags}"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     *  - points to a Tag object in the master list"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     *  @see #syncMasterTagListWith(Person)"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    private void syncMasterTagListWith(UniquePersonList persons) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        persons.forEach(this::syncMasterTagListWith);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public boolean removePerson(ReadOnlyPerson key) throws PersonNotFoundException {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"limshunyong"},"content":"    //@@author limshunyong"},{"lineNumber":160,"author":{"gitID":"limshunyong"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"limshunyong"},"content":"     *  Sorts the address book"},{"lineNumber":162,"author":{"gitID":"limshunyong"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"limshunyong"},"content":"    public void sort() {"},{"lineNumber":164,"author":{"gitID":"limshunyong"},"content":"        persons.sort();"},{"lineNumber":165,"author":{"gitID":"limshunyong"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":167,"author":{"gitID":"limshunyong"},"content":"    //@@author"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getPersonList() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":195,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":196,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"limshunyong":9,"-":196}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"JasmineSee"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"JasmineSee"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":17,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":21,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":25,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cReadOnlyPerson\u003e filteredPersons;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"JasmineSee"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"limshunyong"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"limshunyong"},"content":"    public void sortContact() {"},{"lineNumber":63,"author":{"gitID":"limshunyong"},"content":"        addressBook.sort();"},{"lineNumber":64,"author":{"gitID":"limshunyong"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":66,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"JasmineSee"},"content":"     * Raises an event to indicate the model has changed"},{"lineNumber":68,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"JasmineSee"},"content":"    //@@author JasmineSee"},{"lineNumber":96,"author":{"gitID":"JasmineSee"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"JasmineSee"},"content":"    public void removeTag(Tag tag) throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":98,"author":{"gitID":"JasmineSee"},"content":"        for (int i \u003d 0; i \u003c addressBook.getPersonList().size(); i++) {"},{"lineNumber":99,"author":{"gitID":"JasmineSee"},"content":"            ReadOnlyPerson oldPerson \u003d addressBook.getPersonList().get(i);"},{"lineNumber":100,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":101,"author":{"gitID":"JasmineSee"},"content":"            Person newPerson \u003d new Person(oldPerson);"},{"lineNumber":102,"author":{"gitID":"JasmineSee"},"content":"            Set\u003cTag\u003e newTags \u003d new HashSet\u003cTag\u003e(newPerson.getTags());"},{"lineNumber":103,"author":{"gitID":"JasmineSee"},"content":"            newTags.remove(tag);"},{"lineNumber":104,"author":{"gitID":"JasmineSee"},"content":"            newPerson.setTags(newTags);"},{"lineNumber":105,"author":{"gitID":"JasmineSee"},"content":"            addressBook.updatePerson(oldPerson, newPerson);"},{"lineNumber":106,"author":{"gitID":"JasmineSee"},"content":"            indicateAddressBookChanged();"},{"lineNumber":107,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"JasmineSee"},"content":"    //@@author"},{"lineNumber":110,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code ReadOnlyPerson} backed by the internal list of"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":143,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"JasmineSee":25,"limshunyong":5,"-":116}},{"path":"src/main/java/seedu/address/logic/commands/QrSaveContactCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"blaqkrow"},"content":"import seedu.address.commons.events.ui.QrSaveEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"danielweide"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"danielweide"},"content":" * Selects a person to Generate QRCode identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"danielweide"},"content":" */"},{"lineNumber":15,"author":{"gitID":"danielweide"},"content":"//@@author danielweide"},{"lineNumber":16,"author":{"gitID":"danielweide"},"content":"public class QrSaveContactCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":18,"author":{"gitID":"danielweide"},"content":"    public static final String COMMAND_WORD \u003d \"qrsave\";"},{"lineNumber":19,"author":{"gitID":"danielweide"},"content":"    public static final String COMMAND_ALIAS \u003d \"qrs\";"},{"lineNumber":20,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":21,"author":{"gitID":"danielweide"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitID":"danielweide"},"content":"            + \": Select Person based on Index to generate QR Code for Contact Saving\\n\""},{"lineNumber":23,"author":{"gitID":"danielweide"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":24,"author":{"gitID":"danielweide"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":25,"author":{"gitID":"danielweide"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Generated Contact Saving Qr for Selected Person: %1$s\";"},{"lineNumber":26,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":27,"author":{"gitID":"danielweide"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":29,"author":{"gitID":"danielweide"},"content":"    public QrSaveContactCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"danielweide"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":33,"author":{"gitID":"danielweide"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"danielweide"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":36,"author":{"gitID":"danielweide"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitID":"danielweide"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":38,"author":{"gitID":"danielweide"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":39,"author":{"gitID":"danielweide"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"danielweide"},"content":"        int indexOfPersonInList \u003d 0;"},{"lineNumber":41,"author":{"gitID":"danielweide"},"content":"        indexOfPersonInList \u003d targetIndex.getOneBased() - 1;"},{"lineNumber":42,"author":{"gitID":"danielweide"},"content":"        EventsCenter.getInstance().post(new QrSaveEvent(lastShownList.get(indexOfPersonInList)));"},{"lineNumber":43,"author":{"gitID":"danielweide"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":44,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":45,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":47,"author":{"gitID":"danielweide"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"danielweide"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"danielweide"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"danielweide"},"content":"                || (other instanceof QrSaveContactCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"danielweide"},"content":"                \u0026\u0026 this.targetIndex.equals(((QrSaveContactCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":54,"author":{"gitID":"danielweide"},"content":"}"}],"authorContributionMap":{"danielweide":43,"-":10,"blaqkrow":1}},{"path":"src/main/java/seedu/address/logic/commands/QrCallCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"blaqkrow"},"content":"import seedu.address.commons.events.ui.QrEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"danielweide"},"content":" * Selects a person to Generate QRCode identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"danielweide"},"content":" */"},{"lineNumber":15,"author":{"gitID":"danielweide"},"content":"//@@author danielweide"},{"lineNumber":16,"author":{"gitID":"danielweide"},"content":"public class QrCallCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":18,"author":{"gitID":"danielweide"},"content":"    public static final String COMMAND_WORD \u003d \"qrcall\";"},{"lineNumber":19,"author":{"gitID":"danielweide"},"content":"    public static final String COMMAND_ALIAS \u003d \"qc\";"},{"lineNumber":20,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":21,"author":{"gitID":"danielweide"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitID":"danielweide"},"content":"            + \": Select Person based on Index to generate QR Code for calling\\n\""},{"lineNumber":23,"author":{"gitID":"danielweide"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":24,"author":{"gitID":"danielweide"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":25,"author":{"gitID":"danielweide"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Generated Qr for Selected Person: %1$s\";"},{"lineNumber":26,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":27,"author":{"gitID":"danielweide"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":29,"author":{"gitID":"danielweide"},"content":"    public QrCallCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"danielweide"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":33,"author":{"gitID":"danielweide"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"danielweide"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":36,"author":{"gitID":"danielweide"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":38,"author":{"gitID":"danielweide"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"danielweide"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"danielweide"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"danielweide"},"content":"        int indexOfPersonInList \u003d targetIndex.getOneBased() - 1;"},{"lineNumber":42,"author":{"gitID":"danielweide"},"content":"        EventsCenter.getInstance().post(new QrEvent(lastShownList.get(indexOfPersonInList)));"},{"lineNumber":43,"author":{"gitID":"danielweide"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":44,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":45,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":47,"author":{"gitID":"danielweide"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"danielweide"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"danielweide"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"danielweide"},"content":"                || (other instanceof QrCallCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"danielweide"},"content":"                \u0026\u0026 this.targetIndex.equals(((QrCallCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitID":"danielweide"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":54,"author":{"gitID":"danielweide"},"content":"}"}],"authorContributionMap":{"danielweide":42,"-":11,"blaqkrow":1}},{"path":"src/main/java/seedu/address/logic/commands/ChangeThemeCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.commons.events.ui.ThemeChangeEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":7,"author":{"gitID":"JasmineSee"},"content":"//@@author JasmineSee"},{"lineNumber":8,"author":{"gitID":"JasmineSee"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"JasmineSee"},"content":" * Changes colour theme of application."},{"lineNumber":10,"author":{"gitID":"JasmineSee"},"content":" */"},{"lineNumber":11,"author":{"gitID":"JasmineSee"},"content":"public class ChangeThemeCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":13,"author":{"gitID":"JasmineSee"},"content":"    public static final String COMMAND_WORD \u003d \"theme\";"},{"lineNumber":14,"author":{"gitID":"JasmineSee"},"content":"    public static final String COMMAND_ALIAS \u003d \"th\";"},{"lineNumber":15,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":16,"author":{"gitID":"JasmineSee"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":17,"author":{"gitID":"JasmineSee"},"content":"            + \": Changes colour theme. Current colour themes: Dark, White, Green\\n\""},{"lineNumber":18,"author":{"gitID":"JasmineSee"},"content":"            + \"Parameters: Colour theme\\n\""},{"lineNumber":19,"author":{"gitID":"JasmineSee"},"content":"            + \"Example: \" + COMMAND_WORD + \" white\";"},{"lineNumber":20,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":21,"author":{"gitID":"JasmineSee"},"content":"    public static final String MESSAGE_CHANGE_THEME_SUCCESS \u003d \"Theme changed\";"},{"lineNumber":22,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":23,"author":{"gitID":"JasmineSee"},"content":"    private final String theme;"},{"lineNumber":24,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":25,"author":{"gitID":"JasmineSee"},"content":"    public ChangeThemeCommand(String theme) {"},{"lineNumber":26,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":27,"author":{"gitID":"JasmineSee"},"content":"        this.theme \u003d theme;"},{"lineNumber":28,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":29,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":31,"author":{"gitID":"JasmineSee"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"JasmineSee"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":33,"author":{"gitID":"JasmineSee"},"content":"        EventsCenter.getInstance().post(new ThemeChangeEvent(theme));"},{"lineNumber":34,"author":{"gitID":"JasmineSee"},"content":"        return new CommandResult(String.format(MESSAGE_CHANGE_THEME_SUCCESS));"},{"lineNumber":35,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":37,"author":{"gitID":"JasmineSee"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"JasmineSee"},"content":"    public boolean equals(Object other) {"},{"lineNumber":39,"author":{"gitID":"JasmineSee"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":40,"author":{"gitID":"JasmineSee"},"content":"                || (other instanceof ChangeThemeCommand // instanceof handles nulls"},{"lineNumber":41,"author":{"gitID":"JasmineSee"},"content":"                \u0026\u0026 theme.equals(((ChangeThemeCommand) other).theme));"},{"lineNumber":42,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":44,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":45,"author":{"gitID":"JasmineSee"},"content":"}"}],"authorContributionMap":{"JasmineSee":41,"-":4}},{"path":"src/main/java/seedu/address/logic/commands/ImportCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"danielweide"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":3,"author":{"gitID":"danielweide"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":8,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":9,"author":{"gitID":"limshunyong"},"content":"//@@author limshunyong"},{"lineNumber":10,"author":{"gitID":"limshunyong"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"limshunyong"},"content":" * Imports contact from external source (in .vcf format)"},{"lineNumber":12,"author":{"gitID":"limshunyong"},"content":" */"},{"lineNumber":13,"author":{"gitID":"limshunyong"},"content":"public class ImportCommand extends UndoableCommand {"},{"lineNumber":14,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":15,"author":{"gitID":"limshunyong"},"content":"    public static final String COMMAND_WORD \u003d \"import\";"},{"lineNumber":16,"author":{"gitID":"limshunyong"},"content":"    public static final String COMMAND_ALIAS \u003d \"im\";"},{"lineNumber":17,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":18,"author":{"gitID":"limshunyong"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":19,"author":{"gitID":"limshunyong"},"content":"            + \": Import contact details from external source (must be in .vcf format).\\n\""},{"lineNumber":20,"author":{"gitID":"limshunyong"},"content":"            + \"Parameters: FILENAME \\n\""},{"lineNumber":21,"author":{"gitID":"limshunyong"},"content":"            + \"Example: \" + COMMAND_WORD + \" contacts.vcf\";"},{"lineNumber":22,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":23,"author":{"gitID":"limshunyong"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Contacts successfully imported\";"},{"lineNumber":24,"author":{"gitID":"limshunyong"},"content":"    public static final String MESSAGE_FAILURE \u003d \"Error importing contacts. File not found or Filename incorrect.\";"},{"lineNumber":25,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":26,"author":{"gitID":"limshunyong"},"content":"    private ArrayList\u003cReadOnlyPerson\u003e p;"},{"lineNumber":27,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":28,"author":{"gitID":"limshunyong"},"content":"    public ImportCommand(ArrayList\u003cReadOnlyPerson\u003e list) {"},{"lineNumber":29,"author":{"gitID":"limshunyong"},"content":"        this.p \u003d list;"},{"lineNumber":30,"author":{"gitID":"limshunyong"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"limshunyong"},"content":""},{"lineNumber":32,"author":{"gitID":"limshunyong"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"limshunyong"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":34,"author":{"gitID":"limshunyong"},"content":"        if (p.isEmpty()) {"},{"lineNumber":35,"author":{"gitID":"limshunyong"},"content":"            return new CommandResult(MESSAGE_FAILURE);"},{"lineNumber":36,"author":{"gitID":"limshunyong"},"content":"        } else {"},{"lineNumber":37,"author":{"gitID":"limshunyong"},"content":"            try {"},{"lineNumber":38,"author":{"gitID":"limshunyong"},"content":"                for (ReadOnlyPerson pp : p) {"},{"lineNumber":39,"author":{"gitID":"limshunyong"},"content":"                    model.addPerson(pp);"},{"lineNumber":40,"author":{"gitID":"limshunyong"},"content":"                }"},{"lineNumber":41,"author":{"gitID":"limshunyong"},"content":"            } catch (DuplicatePersonException de) {"},{"lineNumber":42,"author":{"gitID":"limshunyong"},"content":"                throw new CommandException(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":43,"author":{"gitID":"limshunyong"},"content":"            }"},{"lineNumber":44,"author":{"gitID":"limshunyong"},"content":"            LoggingCommand loggingCommand \u003d new LoggingCommand();"},{"lineNumber":45,"author":{"gitID":"limshunyong"},"content":"            loggingCommand.keepLog(\"\", \"Import Action\");"},{"lineNumber":46,"author":{"gitID":"limshunyong"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":47,"author":{"gitID":"limshunyong"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"limshunyong"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"limshunyong"},"content":"}"}],"authorContributionMap":{"danielweide":4,"limshunyong":41,"-":4}},{"path":"src/main/java/seedu/address/logic/commands/RemoveTagCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"danielweide"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":3,"author":{"gitID":"danielweide"},"content":"import static seedu.address.logic.commands.AddCommand.MESSAGE_DUPLICATE_PERSON;"},{"lineNumber":4,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":5,"author":{"gitID":"danielweide"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":13,"author":{"gitID":"JasmineSee"},"content":"//@@author JasmineSee"},{"lineNumber":14,"author":{"gitID":"JasmineSee"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"JasmineSee"},"content":" * Removes specified tag from all persons from the address book."},{"lineNumber":16,"author":{"gitID":"JasmineSee"},"content":" */"},{"lineNumber":17,"author":{"gitID":"JasmineSee"},"content":"public class RemoveTagCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":19,"author":{"gitID":"JasmineSee"},"content":"    public static final String COMMAND_WORD \u003d \"rtag\";"},{"lineNumber":20,"author":{"gitID":"JasmineSee"},"content":"    public static final String COMMAND_ALIAS \u003d \"rt\";"},{"lineNumber":21,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":22,"author":{"gitID":"JasmineSee"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"JasmineSee"},"content":"            + \": Removes specified tag from all persons.\\n\""},{"lineNumber":24,"author":{"gitID":"JasmineSee"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":25,"author":{"gitID":"JasmineSee"},"content":"            + \"Example: \" + COMMAND_WORD + \" friends classmates colleagues\";"},{"lineNumber":26,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":27,"author":{"gitID":"JasmineSee"},"content":"    public static final String MESSAGE_REMOVE_TAG_SUCCESS \u003d \"Removed tag(s)\";"},{"lineNumber":28,"author":{"gitID":"JasmineSee"},"content":"    public static final String MESSAGE_TAG_NOT_REMOVED \u003d \"Tag(s) not removed\";"},{"lineNumber":29,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":30,"author":{"gitID":"JasmineSee"},"content":"    private final ArrayList\u003cTag\u003e tagsToRemove;"},{"lineNumber":31,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":32,"author":{"gitID":"JasmineSee"},"content":"    public RemoveTagCommand(ArrayList\u003cTag\u003e tagsToRemove) {"},{"lineNumber":33,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":34,"author":{"gitID":"JasmineSee"},"content":"        this.tagsToRemove \u003d tagsToRemove;"},{"lineNumber":35,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":36,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":38,"author":{"gitID":"JasmineSee"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"JasmineSee"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":40,"author":{"gitID":"JasmineSee"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"JasmineSee"},"content":"            for (Tag tag : tagsToRemove) {"},{"lineNumber":42,"author":{"gitID":"JasmineSee"},"content":"                model.removeTag(tag);"},{"lineNumber":43,"author":{"gitID":"JasmineSee"},"content":"                LoggingCommand loggingCommand \u003d new LoggingCommand();"},{"lineNumber":44,"author":{"gitID":"JasmineSee"},"content":"                loggingCommand.keepLog(tag.toString(), \"Remove Tag\");"},{"lineNumber":45,"author":{"gitID":"JasmineSee"},"content":"            }"},{"lineNumber":46,"author":{"gitID":"JasmineSee"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":47,"author":{"gitID":"JasmineSee"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":48,"author":{"gitID":"JasmineSee"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":49,"author":{"gitID":"JasmineSee"},"content":"            assert false : \"The target person cannot be missing\";"},{"lineNumber":50,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":52,"author":{"gitID":"JasmineSee"},"content":"        if (!isTagsExist(tagsToRemove)) {"},{"lineNumber":53,"author":{"gitID":"JasmineSee"},"content":"            return new CommandResult(String.format(MESSAGE_TAG_NOT_REMOVED));"},{"lineNumber":54,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"JasmineSee"},"content":"        return new CommandResult(String.format(MESSAGE_REMOVE_TAG_SUCCESS));"},{"lineNumber":56,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":58,"author":{"gitID":"JasmineSee"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"JasmineSee"},"content":"    public boolean equals(Object other) {"},{"lineNumber":60,"author":{"gitID":"JasmineSee"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":61,"author":{"gitID":"JasmineSee"},"content":"                || (other instanceof RemoveTagCommand // instanceof handles nulls"},{"lineNumber":62,"author":{"gitID":"JasmineSee"},"content":"                \u0026\u0026 tagsToRemove.equals(((RemoveTagCommand) other).tagsToRemove));"},{"lineNumber":63,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":65,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"JasmineSee"},"content":"     * @param tagKeywords"},{"lineNumber":67,"author":{"gitID":"JasmineSee"},"content":"     * @return true if keywords exist in current tag list"},{"lineNumber":68,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"JasmineSee"},"content":"    public boolean isTagsExist(ArrayList\u003cTag\u003e tagKeywords) {"},{"lineNumber":70,"author":{"gitID":"JasmineSee"},"content":"        List\u003cTag\u003e tagList \u003d model.getAddressBook().getTagList();"},{"lineNumber":71,"author":{"gitID":"JasmineSee"},"content":"        return tagKeywords.stream()"},{"lineNumber":72,"author":{"gitID":"JasmineSee"},"content":"                .anyMatch(keyword -\u003e tagList.contains(keyword));"},{"lineNumber":73,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"JasmineSee"},"content":"}"}],"authorContributionMap":{"danielweide":6,"JasmineSee":62,"-":6}},{"path":"src/main/java/seedu/address/model/tag/TagContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"JasmineSee"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"JasmineSee"},"content":"//@@author JasmineSee"},{"lineNumber":9,"author":{"gitID":"JasmineSee"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"JasmineSee"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s {@code Tag} matches any of the keywords given."},{"lineNumber":11,"author":{"gitID":"JasmineSee"},"content":" */"},{"lineNumber":12,"author":{"gitID":"JasmineSee"},"content":"public class TagContainsKeywordsPredicate implements Predicate\u003cReadOnlyPerson\u003e {"},{"lineNumber":13,"author":{"gitID":"JasmineSee"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":15,"author":{"gitID":"JasmineSee"},"content":"    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitID":"JasmineSee"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":19,"author":{"gitID":"JasmineSee"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"JasmineSee"},"content":"    public boolean test(ReadOnlyPerson person) {"},{"lineNumber":21,"author":{"gitID":"JasmineSee"},"content":"        return keywords.stream()"},{"lineNumber":22,"author":{"gitID":"JasmineSee"},"content":"                .anyMatch(keyword -\u003e person.getTags().toString().toLowerCase().contains(keyword));"},{"lineNumber":23,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":25,"author":{"gitID":"JasmineSee"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"JasmineSee"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitID":"JasmineSee"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":28,"author":{"gitID":"JasmineSee"},"content":"                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":29,"author":{"gitID":"JasmineSee"},"content":"                \u0026\u0026 this.keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":30,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":32,"author":{"gitID":"JasmineSee"},"content":"}"}],"authorContributionMap":{"JasmineSee":26,"-":6}},{"path":"src/main/java/seedu/address/logic/commands/UploadPhotoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"blaqkrow"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":3,"author":{"gitID":"blaqkrow"},"content":"import java.awt.image.BufferedImage;"},{"lineNumber":4,"author":{"gitID":"blaqkrow"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitID":"blaqkrow"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"blaqkrow"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"blaqkrow"},"content":"import javax.imageio.ImageIO;"},{"lineNumber":11,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":12,"author":{"gitID":"blaqkrow"},"content":"import javafx.stage.FileChooser;"},{"lineNumber":13,"author":{"gitID":"blaqkrow"},"content":"import javafx.stage.Stage;"},{"lineNumber":14,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.commons.events.ui.PhotoChangeEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"blaqkrow"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":21,"author":{"gitID":"blaqkrow"},"content":""},{"lineNumber":22,"author":{"gitID":"JasmineSee"},"content":"//@@author JasmineSee"},{"lineNumber":23,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":24,"author":{"gitID":"JasmineSee"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"JasmineSee"},"content":" * Uploads image file to specified person."},{"lineNumber":26,"author":{"gitID":"JasmineSee"},"content":" */"},{"lineNumber":27,"author":{"gitID":"JasmineSee"},"content":"public class UploadPhotoCommand extends Command {"},{"lineNumber":28,"author":{"gitID":"JasmineSee"},"content":"    public static final String COMMAND_WORD \u003d \"photo\";"},{"lineNumber":29,"author":{"gitID":"JasmineSee"},"content":"    public static final String COMMAND_ALIAS \u003d \"p\";"},{"lineNumber":30,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":31,"author":{"gitID":"JasmineSee"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":32,"author":{"gitID":"JasmineSee"},"content":"            + \": Uploads image to the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":33,"author":{"gitID":"JasmineSee"},"content":"            + \"Parameters: INDEX (must be a positive integer) or \""},{"lineNumber":34,"author":{"gitID":"JasmineSee"},"content":"            + \"INDEX (must be a positive integer) and image file path\\n\""},{"lineNumber":35,"author":{"gitID":"JasmineSee"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\\n\""},{"lineNumber":36,"author":{"gitID":"JasmineSee"},"content":"            + \"OR: \" + COMMAND_WORD + \" 1 \" + \"C:\\\\Users\\\\Pictures\\\\photo.jpg\";"},{"lineNumber":37,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":38,"author":{"gitID":"JasmineSee"},"content":"    public static final String MESSAGE_UPLOAD_IMAGE_SUCCESS \u003d \"Uploaded image to Person: %1$s\";"},{"lineNumber":39,"author":{"gitID":"JasmineSee"},"content":"    public static final String MESSAGE_UPLOAD_IMAGE_FALURE \u003d \"Image file is not valid. Try again!\";"},{"lineNumber":40,"author":{"gitID":"JasmineSee"},"content":"    private final Index targetIndex;"},{"lineNumber":41,"author":{"gitID":"JasmineSee"},"content":"    private final String filePath;"},{"lineNumber":42,"author":{"gitID":"JasmineSee"},"content":"    private final FileChooser fileChooser \u003d new FileChooser();"},{"lineNumber":43,"author":{"gitID":"JasmineSee"},"content":"    private Stage stage;"},{"lineNumber":44,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":45,"author":{"gitID":"JasmineSee"},"content":"    public UploadPhotoCommand(Index targetIndex, String filePath) {"},{"lineNumber":46,"author":{"gitID":"JasmineSee"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":47,"author":{"gitID":"JasmineSee"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":48,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":50,"author":{"gitID":"JasmineSee"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"JasmineSee"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"JasmineSee"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":53,"author":{"gitID":"JasmineSee"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":54,"author":{"gitID":"JasmineSee"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":55,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"JasmineSee"},"content":"        ReadOnlyPerson personToUploadImage \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":57,"author":{"gitID":"JasmineSee"},"content":"        File imageFile;"},{"lineNumber":58,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":59,"author":{"gitID":"JasmineSee"},"content":"        if (filePath.equals(\"\")) {"},{"lineNumber":60,"author":{"gitID":"JasmineSee"},"content":"            imageFile \u003d handleFileChooser();"},{"lineNumber":61,"author":{"gitID":"JasmineSee"},"content":"        } else {"},{"lineNumber":62,"author":{"gitID":"JasmineSee"},"content":"            imageFile \u003d new File(filePath);"},{"lineNumber":63,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":65,"author":{"gitID":"JasmineSee"},"content":"        if (isValidImageFile(imageFile)) {"},{"lineNumber":66,"author":{"gitID":"JasmineSee"},"content":"            saveFile(imageFile, personToUploadImage.getEmail());"},{"lineNumber":67,"author":{"gitID":"JasmineSee"},"content":"            EventsCenter.getInstance().post(new PhotoChangeEvent());"},{"lineNumber":68,"author":{"gitID":"JasmineSee"},"content":"        } else {"},{"lineNumber":69,"author":{"gitID":"JasmineSee"},"content":"            throw new CommandException(String.format(MESSAGE_UPLOAD_IMAGE_FALURE));"},{"lineNumber":70,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":72,"author":{"gitID":"JasmineSee"},"content":"        LoggingCommand loggingCommand \u003d new LoggingCommand();"},{"lineNumber":73,"author":{"gitID":"JasmineSee"},"content":"        loggingCommand.keepLog(\"\", \"Uploaded photo to \" + targetIndex.getOneBased());"},{"lineNumber":74,"author":{"gitID":"JasmineSee"},"content":"        return new CommandResult(String.format(MESSAGE_UPLOAD_IMAGE_SUCCESS, personToUploadImage));"},{"lineNumber":75,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":77,"author":{"gitID":"JasmineSee"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"JasmineSee"},"content":"    public boolean equals(Object other) {"},{"lineNumber":79,"author":{"gitID":"JasmineSee"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":80,"author":{"gitID":"JasmineSee"},"content":"                || (other instanceof UploadPhotoCommand // instanceof handles nulls"},{"lineNumber":81,"author":{"gitID":"JasmineSee"},"content":"                \u0026\u0026 this.targetIndex.equals(((UploadPhotoCommand) other).targetIndex)); // state check"},{"lineNumber":82,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":84,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"JasmineSee"},"content":"     * Opens fileChooser to select image file"},{"lineNumber":86,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"JasmineSee"},"content":"    public File handleFileChooser() {"},{"lineNumber":88,"author":{"gitID":"JasmineSee"},"content":"        File file \u003d fileChooser.showOpenDialog(stage);"},{"lineNumber":89,"author":{"gitID":"JasmineSee"},"content":"        return file;"},{"lineNumber":90,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":92,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"JasmineSee"},"content":"     * Checks if file given is an valid image file."},{"lineNumber":94,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"JasmineSee"},"content":"    private boolean isValidImageFile(File file) {"},{"lineNumber":96,"author":{"gitID":"JasmineSee"},"content":"        boolean isValid \u003d true;"},{"lineNumber":97,"author":{"gitID":"JasmineSee"},"content":"        try {"},{"lineNumber":98,"author":{"gitID":"JasmineSee"},"content":"            BufferedImage image \u003d ImageIO.read(file);"},{"lineNumber":99,"author":{"gitID":"JasmineSee"},"content":"            if (image \u003d\u003d null) {  //file is not an image file"},{"lineNumber":100,"author":{"gitID":"JasmineSee"},"content":"                isValid \u003d false;"},{"lineNumber":101,"author":{"gitID":"JasmineSee"},"content":"            }"},{"lineNumber":102,"author":{"gitID":"JasmineSee"},"content":"        } catch (IOException ex) { //file could not be opened"},{"lineNumber":103,"author":{"gitID":"JasmineSee"},"content":"            isValid \u003d false;"},{"lineNumber":104,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"JasmineSee"},"content":"        return isValid;"},{"lineNumber":106,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":108,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"JasmineSee"},"content":"     * Reads and saves image file into project directory folder \"photos\"."},{"lineNumber":110,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"JasmineSee"},"content":"    private void saveFile(File file, Email email) {"},{"lineNumber":112,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":113,"author":{"gitID":"JasmineSee"},"content":"        File path \u003d new File(\"photos/\" + email.toString() + \".png\");"},{"lineNumber":114,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":115,"author":{"gitID":"JasmineSee"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"JasmineSee"},"content":"            path.mkdirs();"},{"lineNumber":117,"author":{"gitID":"JasmineSee"},"content":"            path.createNewFile();"},{"lineNumber":118,"author":{"gitID":"JasmineSee"},"content":"            BufferedImage image;"},{"lineNumber":119,"author":{"gitID":"JasmineSee"},"content":"            image \u003d ImageIO.read(file);"},{"lineNumber":120,"author":{"gitID":"JasmineSee"},"content":"            ImageIO.write(image, \"png\", path);"},{"lineNumber":121,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":122,"author":{"gitID":"JasmineSee"},"content":"        } catch (IOException e) {"},{"lineNumber":123,"author":{"gitID":"JasmineSee"},"content":"            e.printStackTrace();"},{"lineNumber":124,"author":{"gitID":"JasmineSee"},"content":"            Logger.getLogger(UploadPhotoCommand.class.getName()).log(Level.SEVERE, null, e);"},{"lineNumber":125,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":128,"author":{"gitID":"JasmineSee"},"content":"}"}],"authorContributionMap":{"JasmineSee":109,"blaqkrow":12,"-":7}},{"path":"src/main/java/seedu/address/logic/commands/DeletesAllPhotosCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"danielweide"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"danielweide"},"content":""},{"lineNumber":3,"author":{"gitID":"danielweide"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.commons.events.ui.PhotoChangeEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":9,"author":{"gitID":"JasmineSee"},"content":"//@@author JasmineSee"},{"lineNumber":10,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":11,"author":{"gitID":"JasmineSee"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"JasmineSee"},"content":" * Deletes all photos from all persons."},{"lineNumber":13,"author":{"gitID":"JasmineSee"},"content":" */"},{"lineNumber":14,"author":{"gitID":"JasmineSee"},"content":"public class DeletesAllPhotosCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"JasmineSee"},"content":"    public static final String COMMAND_WORD \u003d \"daphotos\";"},{"lineNumber":16,"author":{"gitID":"JasmineSee"},"content":"    public static final String COMMAND_ALIAS \u003d \"dap\";"},{"lineNumber":17,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":18,"author":{"gitID":"JasmineSee"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":19,"author":{"gitID":"JasmineSee"},"content":"            + \": Deletes all photos from all persons. \""},{"lineNumber":20,"author":{"gitID":"JasmineSee"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":21,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":22,"author":{"gitID":"JasmineSee"},"content":"    public static final String MESSAGE_DELETES_ALL_IMAGES_SUCCESS \u003d \"Deleted all photos\";"},{"lineNumber":23,"author":{"gitID":"JasmineSee"},"content":"    public static final String MESSAGE_DELETES_ALL_IMAGES_FAILURE \u003d \"No photos to delete\";"},{"lineNumber":24,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":25,"author":{"gitID":"JasmineSee"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"JasmineSee"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":27,"author":{"gitID":"JasmineSee"},"content":"        boolean isDeleted \u003d deletesAllPhotos();"},{"lineNumber":28,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":29,"author":{"gitID":"JasmineSee"},"content":"        if (isDeleted) {"},{"lineNumber":30,"author":{"gitID":"JasmineSee"},"content":"            EventsCenter.getInstance().post(new PhotoChangeEvent());"},{"lineNumber":31,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":32,"author":{"gitID":"JasmineSee"},"content":"            LoggingCommand loggingCommand \u003d new LoggingCommand();"},{"lineNumber":33,"author":{"gitID":"JasmineSee"},"content":"            loggingCommand.keepLog(\"\", \"Deleted all photos\");"},{"lineNumber":34,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":35,"author":{"gitID":"JasmineSee"},"content":"            return new CommandResult(String.format(MESSAGE_DELETES_ALL_IMAGES_SUCCESS));"},{"lineNumber":36,"author":{"gitID":"JasmineSee"},"content":"        } else {"},{"lineNumber":37,"author":{"gitID":"JasmineSee"},"content":"            return new CommandResult(String.format(MESSAGE_DELETES_ALL_IMAGES_FAILURE));"},{"lineNumber":38,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"JasmineSee"},"content":"     * Deletes all photos of persons in the address book."},{"lineNumber":42,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"JasmineSee"},"content":"    public boolean deletesAllPhotos() {"},{"lineNumber":44,"author":{"gitID":"JasmineSee"},"content":"        boolean isDeleted \u003d false;"},{"lineNumber":45,"author":{"gitID":"JasmineSee"},"content":"        File dir \u003d new File(\"photos/\");"},{"lineNumber":46,"author":{"gitID":"JasmineSee"},"content":"        for (File file : dir.listFiles()) {"},{"lineNumber":47,"author":{"gitID":"JasmineSee"},"content":"            if (!(file.getName().equals(\"default.jpeg\"))) {"},{"lineNumber":48,"author":{"gitID":"JasmineSee"},"content":"                file.delete();"},{"lineNumber":49,"author":{"gitID":"JasmineSee"},"content":"                isDeleted \u003d true;"},{"lineNumber":50,"author":{"gitID":"JasmineSee"},"content":"            }"},{"lineNumber":51,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"JasmineSee"},"content":"        return isDeleted;"},{"lineNumber":53,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"JasmineSee"},"content":"}"}],"authorContributionMap":{"danielweide":3,"JasmineSee":49,"-":2}},{"path":"src/main/java/seedu/address/logic/commands/DeletePhotoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"JasmineSee"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":3,"author":{"gitID":"limshunyong"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"JasmineSee"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitID":"JasmineSee"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitID":"JasmineSee"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitID":"JasmineSee"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":9,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"JasmineSee"},"content":"import seedu.address.commons.events.ui.PhotoChangeEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"JasmineSee"},"content":"//@@author JasmineSee"},{"lineNumber":17,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":18,"author":{"gitID":"JasmineSee"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"JasmineSee"},"content":" * Deletes photo of specified person."},{"lineNumber":20,"author":{"gitID":"JasmineSee"},"content":" */"},{"lineNumber":21,"author":{"gitID":"JasmineSee"},"content":"public class DeletePhotoCommand extends Command {"},{"lineNumber":22,"author":{"gitID":"JasmineSee"},"content":"    public static final String COMMAND_WORD \u003d \"dphoto\";"},{"lineNumber":23,"author":{"gitID":"JasmineSee"},"content":"    public static final String COMMAND_ALIAS \u003d \"dp\";"},{"lineNumber":24,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":25,"author":{"gitID":"JasmineSee"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":26,"author":{"gitID":"JasmineSee"},"content":"            + \": Deletes image of the person identified by the index number used \""},{"lineNumber":27,"author":{"gitID":"JasmineSee"},"content":"            + \"in the last person listing or from all images.\\n\""},{"lineNumber":28,"author":{"gitID":"JasmineSee"},"content":"            + \"Parameters: INDEX (must be a positive integer).\\n\""},{"lineNumber":29,"author":{"gitID":"JasmineSee"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\\n\";"},{"lineNumber":30,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":31,"author":{"gitID":"JasmineSee"},"content":"    public static final String MESSAGE_DELETE_IMAGE_SUCCESS \u003d \"Deleted photo of Person: %1$s\";"},{"lineNumber":32,"author":{"gitID":"JasmineSee"},"content":"    public static final String MESSAGE_DELETE_IMAGE_FAILURE \u003d \"Person does not have a photo to delete\";"},{"lineNumber":33,"author":{"gitID":"JasmineSee"},"content":"    private final Index targetIndex;"},{"lineNumber":34,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":35,"author":{"gitID":"JasmineSee"},"content":"    public DeletePhotoCommand(Index targetIndex) {"},{"lineNumber":36,"author":{"gitID":"JasmineSee"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":37,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":39,"author":{"gitID":"JasmineSee"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"JasmineSee"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":41,"author":{"gitID":"JasmineSee"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":42,"author":{"gitID":"JasmineSee"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":43,"author":{"gitID":"JasmineSee"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":44,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":46,"author":{"gitID":"JasmineSee"},"content":"        ReadOnlyPerson personToDeleteImage \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":47,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":48,"author":{"gitID":"JasmineSee"},"content":"        if (isPhotoExist(personToDeleteImage)) {"},{"lineNumber":49,"author":{"gitID":"JasmineSee"},"content":"            deletePhoto(personToDeleteImage);"},{"lineNumber":50,"author":{"gitID":"JasmineSee"},"content":"            EventsCenter.getInstance().post(new PhotoChangeEvent());"},{"lineNumber":51,"author":{"gitID":"JasmineSee"},"content":"        } else {"},{"lineNumber":52,"author":{"gitID":"JasmineSee"},"content":"            throw new CommandException(String.format(MESSAGE_DELETE_IMAGE_FAILURE));"},{"lineNumber":53,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":55,"author":{"gitID":"JasmineSee"},"content":"        LoggingCommand loggingCommand \u003d new LoggingCommand();"},{"lineNumber":56,"author":{"gitID":"JasmineSee"},"content":"        loggingCommand.keepLog(\"\", \"Deleted photo of \" + targetIndex.getOneBased());"},{"lineNumber":57,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":58,"author":{"gitID":"JasmineSee"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_IMAGE_SUCCESS, personToDeleteImage));"},{"lineNumber":59,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":61,"author":{"gitID":"JasmineSee"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"JasmineSee"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitID":"JasmineSee"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitID":"JasmineSee"},"content":"                || (other instanceof DeletePhotoCommand // instanceof handles nulls"},{"lineNumber":65,"author":{"gitID":"JasmineSee"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeletePhotoCommand) other).targetIndex)); // state check"},{"lineNumber":66,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":68,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"JasmineSee"},"content":"     * Checks if person\u0027s photo exist."},{"lineNumber":70,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"JasmineSee"},"content":"    public boolean isPhotoExist(ReadOnlyPerson target) {"},{"lineNumber":72,"author":{"gitID":"JasmineSee"},"content":"        Path path \u003d Paths.get(\"photos/\" + target.getEmail().toString() + \".png\");"},{"lineNumber":73,"author":{"gitID":"JasmineSee"},"content":"        if (Files.exists(path)) {"},{"lineNumber":74,"author":{"gitID":"JasmineSee"},"content":"            return true;"},{"lineNumber":75,"author":{"gitID":"JasmineSee"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"JasmineSee"},"content":"        return false;"},{"lineNumber":77,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":79,"author":{"gitID":"JasmineSee"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"JasmineSee"},"content":"     * Deletes photo of the person identified using it\u0027s last displayed index from the address book."},{"lineNumber":81,"author":{"gitID":"JasmineSee"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"JasmineSee"},"content":"    public void deletePhoto(ReadOnlyPerson target) {"},{"lineNumber":83,"author":{"gitID":"JasmineSee"},"content":"        File photoPath \u003d new File(\"photos/\" + target.getEmail().toString() + \".png\");"},{"lineNumber":84,"author":{"gitID":"JasmineSee"},"content":"        photoPath.delete();"},{"lineNumber":85,"author":{"gitID":"JasmineSee"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"JasmineSee"},"content":""},{"lineNumber":87,"author":{"gitID":"JasmineSee"},"content":"}"}],"authorContributionMap":{"JasmineSee":81,"limshunyong":1,"-":5}}]
