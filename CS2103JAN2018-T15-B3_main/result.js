var resultJson = [{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"kaisertanqr"},"content":"SLAP for Social Workers was developed by the our team (See below). We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]"},{"lineNumber":7,"author":{"gitID":"kaisertanqr"},"content":"and have extended from the project AddressBook - Level 4 developed by the https://se-edu.github.io/docs/Team.html[se-edu] team"},{"lineNumber":8,"author":{"gitID":"kaisertanqr"},"content":"to fit social worker more specifically."},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"kaisertanqr"},"content":"\u003d\u003d\u003d Chan Jin Jia"},{"lineNumber":13,"author":{"gitID":"jaronchan"},"content":"image::chan-jin-jia-photo.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"jaronchan"},"content":"{empty}[https://github.com/jaronchan[github]]"},{"lineNumber":16,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":17,"author":{"gitID":"kaisertanqr"},"content":"+Role:"},{"lineNumber":18,"author":{"gitID":"jaronchan"},"content":"+Responsibilities: Main UI, Map and Daily Scheduler"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"kaisertanqr"},"content":"\u003d\u003d\u003d Kaiser Tan"},{"lineNumber":23,"author":{"gitID":"kaisertanqr"},"content":"image::Profilepic_Kaiser.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":24,"author":{"gitID":"kaisertanqr"},"content":"{empty}[https://github.com/kaisertanqr[github]]"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"kaisertanqr"},"content":"+Role: Project Developer"},{"lineNumber":27,"author":{"gitID":"kaisertanqr"},"content":"+Responsibilities: Storage enhancements and Security"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"kaisertanqr"},"content":"\u003d\u003d\u003d Jason Mason-Hing"},{"lineNumber":32,"author":{"gitID":"-"},"content":"image::ifalluphill.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":33,"author":{"gitID":"-"},"content":"{empty}[https://github.com/ifalluphill[github]]"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"+Role: Developer"},{"lineNumber":36,"author":{"gitID":"-"},"content":"+Responsibilities: Calendar and Todolist"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"kaisertanqr"},"content":"\u003d\u003d\u003d Clarissa Yong"},{"lineNumber":41,"author":{"gitID":"-"},"content":"image::Clarissa_profilepic.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":42,"author":{"gitID":"-"},"content":"{empty}[https://github.com/clarissayong[github]]"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"kaisertanqr"},"content":"+Role: Project Developer"},{"lineNumber":45,"author":{"gitID":"kaisertanqr"},"content":"+Responsibilities:"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"kaisertanqr":15,"jaronchan":3,"-":31}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"kaisertanqr"},"content":"\u003d Session Logger and Planner for Social Workers (SLAP for Social Workers)"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"https://travis-ci.org/CS2103JAN2018-T15-B3/main[image:https://travis-ci.org/CS2103JAN2018-T15-B3/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://coveralls.io/github/CS2103JAN2018-T15-B3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-T15-B3/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":8,"author":{"gitID":"jaronchan"},"content":"image::docs/images/Ui.png[width\u003d\"800\"]"},{"lineNumber":9,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":12,"author":{"gitID":"jaronchan"},"content":"image::images/Ui.png[width\u003d\"800\"]"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"jaronchan"},"content":"Credit: @jaronchan"},{"lineNumber":16,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":17,"author":{"gitID":"kaisertanqr"},"content":"* This is a desktop Session Logger and Planner application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":18,"author":{"gitID":"-"},"content":"* It is a simple Java application intended for social workers to help them plan their day and keep track of their beneficiaries."},{"lineNumber":19,"author":{"gitID":"-"},"content":"* Some key features of this application include data encryption, secure sign-on, an address book, a planner/todo list, and user session reporting."},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":24,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":25,"author":{"gitID":"-"},"content":"* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":32,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":33,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"kaisertanqr":2,"jaronchan":4,"-":29}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kaisertanqr"},"content":"//package systemtests;"},{"lineNumber":2,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":3,"author":{"gitID":"kaisertanqr"},"content":"//import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"kaisertanqr"},"content":"//import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"kaisertanqr"},"content":"//import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"kaisertanqr"},"content":"//import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"kaisertanqr"},"content":"//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"kaisertanqr"},"content":"//import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":10,"author":{"gitID":"kaisertanqr"},"content":"//import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":12,"author":{"gitID":"kaisertanqr"},"content":"//import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"kaisertanqr"},"content":"//import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"kaisertanqr"},"content":"//import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"kaisertanqr"},"content":"//import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitID":"kaisertanqr"},"content":"//import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"kaisertanqr"},"content":"//import seedu.address.ui.BrowserPanel;"},{"lineNumber":18,"author":{"gitID":"kaisertanqr"},"content":"//import seedu.address.ui.StatusBarFooter;"},{"lineNumber":19,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":20,"author":{"gitID":"kaisertanqr"},"content":"///**"},{"lineNumber":21,"author":{"gitID":"kaisertanqr"},"content":"// * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":22,"author":{"gitID":"kaisertanqr"},"content":"// */"},{"lineNumber":23,"author":{"gitID":"kaisertanqr"},"content":"//public class HelpCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":24,"author":{"gitID":"kaisertanqr"},"content":"//    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":25,"author":{"gitID":"kaisertanqr"},"content":"//            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":26,"author":{"gitID":"kaisertanqr"},"content":"//            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":27,"author":{"gitID":"kaisertanqr"},"content":"//            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":28,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":29,"author":{"gitID":"kaisertanqr"},"content":"//    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":30,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":31,"author":{"gitID":"-"},"content":"//    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"//    public void openHelpWindow() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"//        //use accelerator"},{"lineNumber":34,"author":{"gitID":"-"},"content":"//        getCommandBox().click();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"//        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"//        assertHelpWindowOpen();"},{"lineNumber":37,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":38,"author":{"gitID":"-"},"content":"//        getResultDisplay().click();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"//        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"//        assertHelpWindowOpen();"},{"lineNumber":41,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":42,"author":{"gitID":"-"},"content":"//        getPersonListPanel().click();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"//        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"//        assertHelpWindowOpen();"},{"lineNumber":45,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":46,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":47,"author":{"gitID":"-"},"content":"//        getBrowserPanel().click();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"//        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"//        //assertHelpWindowNotOpen();"},{"lineNumber":50,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":51,"author":{"gitID":"-"},"content":"//        //use menu button"},{"lineNumber":52,"author":{"gitID":"-"},"content":"//        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"//        assertHelpWindowOpen();"},{"lineNumber":54,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":55,"author":{"gitID":"-"},"content":"//        //use command box"},{"lineNumber":56,"author":{"gitID":"-"},"content":"//        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"//        assertHelpWindowOpen();"},{"lineNumber":58,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":59,"author":{"gitID":"-"},"content":"//        // open help window and give it focus"},{"lineNumber":60,"author":{"gitID":"-"},"content":"//        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":61,"author":{"gitID":"kaisertanqr"},"content":"//        getMainWindowHandle().focus();"},{"lineNumber":62,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":63,"author":{"gitID":"-"},"content":"//        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":64,"author":{"gitID":"-"},"content":"//        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"//        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"//        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"//        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"//        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"//        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":70,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":71,"author":{"gitID":"-"},"content":"//        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":72,"author":{"gitID":"-"},"content":"//        // note: the select command tested above does not update the status bar"},{"lineNumber":73,"author":{"gitID":"-"},"content":"//        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"//        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":75,"author":{"gitID":"kaisertanqr"},"content":"//    }"},{"lineNumber":76,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":77,"author":{"gitID":"kaisertanqr"},"content":"//    /**"},{"lineNumber":78,"author":{"gitID":"kaisertanqr"},"content":"//     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":79,"author":{"gitID":"kaisertanqr"},"content":"//     */"},{"lineNumber":80,"author":{"gitID":"kaisertanqr"},"content":"//    private void assertHelpWindowOpen() {"},{"lineNumber":81,"author":{"gitID":"kaisertanqr"},"content":"//        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":82,"author":{"gitID":"kaisertanqr"},"content":"//        guiRobot.pauseForHuman();"},{"lineNumber":83,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":84,"author":{"gitID":"kaisertanqr"},"content":"//        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":85,"author":{"gitID":"kaisertanqr"},"content":"//        getMainWindowHandle().focus();"},{"lineNumber":86,"author":{"gitID":"kaisertanqr"},"content":"//    }"},{"lineNumber":87,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":88,"author":{"gitID":"kaisertanqr"},"content":"//    /**"},{"lineNumber":89,"author":{"gitID":"kaisertanqr"},"content":"//     * Asserts that the help window isn\u0027t open."},{"lineNumber":90,"author":{"gitID":"kaisertanqr"},"content":"//     */"},{"lineNumber":91,"author":{"gitID":"kaisertanqr"},"content":"//    private void assertHelpWindowNotOpen() {"},{"lineNumber":92,"author":{"gitID":"kaisertanqr"},"content":"//        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":93,"author":{"gitID":"kaisertanqr"},"content":"//    }"},{"lineNumber":94,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":95,"author":{"gitID":"kaisertanqr"},"content":"//}"}],"authorContributionMap":{"kaisertanqr":61,"-":34}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"kaisertanqr"},"content":"\u003d SLAP for Social Workers - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/se-edu/addressbook-level4"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"kaisertanqr"},"content":"By: `CS2103-T15-B3`      Since: `FEB 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"kaisertanqr"},"content":"Session Logger and Planner (SLAP) for Social Workers is for those who *prefer to use a desktop app for managing their schedule and"},{"lineNumber":21,"author":{"gitID":"kaisertanqr"},"content":"contacts*. More importantly, SLAP is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having"},{"lineNumber":22,"author":{"gitID":"kaisertanqr"},"content":"the benefits of a Graphical User Interface (GUI). If you can type fast, SLAP can get your daily scheduling and"},{"lineNumber":23,"author":{"gitID":"kaisertanqr"},"content":"contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":28,"author":{"gitID":"-"},"content":"+"},{"lineNumber":29,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":30,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":31,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":32,"author":{"gitID":"-"},"content":"+"},{"lineNumber":33,"author":{"gitID":"-"},"content":".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."},{"lineNumber":34,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your Address Book."},{"lineNumber":35,"author":{"gitID":"kaisertanqr"},"content":".  Double-click the file to start the app. The Login GUI should appear in a few seconds."},{"lineNumber":36,"author":{"gitID":"kaisertanqr"},"content":".  Enter your username and password. Press Enter."},{"lineNumber":37,"author":{"gitID":"kaisertanqr"},"content":".  If login is successful, the GUI should appear."},{"lineNumber":38,"author":{"gitID":"-"},"content":"+"},{"lineNumber":39,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":40,"author":{"gitID":"-"},"content":"+"},{"lineNumber":41,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":42,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":43,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":46,"author":{"gitID":"-"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."},{"lineNumber":47,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":48,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":53,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":56,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":59,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":60,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":61,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":62,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"kaisertanqr"},"content":"\u003d\u003d\u003d Login : `login`"},{"lineNumber":69,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":70,"author":{"gitID":"kaisertanqr"},"content":"Logs the user into the application."},{"lineNumber":71,"author":{"gitID":"kaisertanqr"},"content":"Format: `login u/USERNAME p/PASSWORD`"},{"lineNumber":72,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":73,"author":{"gitID":"kaisertanqr"},"content":"****"},{"lineNumber":74,"author":{"gitID":"kaisertanqr"},"content":"* Multiple entries of username and password can be included, however only the last entry will be considered."},{"lineNumber":75,"author":{"gitID":"kaisertanqr"},"content":"****"},{"lineNumber":76,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":77,"author":{"gitID":"kaisertanqr"},"content":"\u003d\u003d\u003d Logout: `logout`"},{"lineNumber":78,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":79,"author":{"gitID":"kaisertanqr"},"content":"Logs the user out of the application."},{"lineNumber":80,"author":{"gitID":"kaisertanqr"},"content":"Format: `logout`"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"jaronchan"},"content":"\u003d\u003d\u003d Switching between feature interfaces : `switch`"},{"lineNumber":83,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":84,"author":{"gitID":"jaronchan"},"content":"Switches to the user interface feature identified by the user. +"},{"lineNumber":85,"author":{"gitID":"jaronchan"},"content":"Format: `switch FEATURE`"},{"lineNumber":86,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":87,"author":{"gitID":"jaronchan"},"content":"****"},{"lineNumber":88,"author":{"gitID":"jaronchan"},"content":"* Switches to the specified `FEATURE`"},{"lineNumber":89,"author":{"gitID":"jaronchan"},"content":"* `FEATURE` must be either \"details\", \"calendar\" or \"scheduler\"."},{"lineNumber":90,"author":{"gitID":"jaronchan"},"content":"****"},{"lineNumber":91,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":92,"author":{"gitID":"jaronchan"},"content":"Examples:"},{"lineNumber":93,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":94,"author":{"gitID":"jaronchan"},"content":"* `switch calendar` +"},{"lineNumber":95,"author":{"gitID":"jaronchan"},"content":"Switches to `calendar` tab and displays contents"},{"lineNumber":96,"author":{"gitID":"jaronchan"},"content":"* `switch details` +"},{"lineNumber":97,"author":{"gitID":"jaronchan"},"content":"Switches to `details` tab and displays contents"},{"lineNumber":98,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a person: `add`"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"Adds a person to the address book +"},{"lineNumber":102,"author":{"gitID":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":105,"author":{"gitID":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"},{"lineNumber":110,"author":{"gitID":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all persons : `list`"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"Shows a list of all persons in the address book. +"},{"lineNumber":115,"author":{"gitID":"-"},"content":"Format: `list`"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a person : `edit`"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"Edits an existing person in the address book. +"},{"lineNumber":120,"author":{"gitID":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"****"},{"lineNumber":123,"author":{"gitID":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":124,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":125,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":126,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":128,"author":{"gitID":"-"},"content":"****"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":133,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":134,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":135,"author":{"gitID":"-"},"content":"Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating persons by name: `find`"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"Finds persons whose names contain any of the given keywords. +"},{"lineNumber":140,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"****"},{"lineNumber":143,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":144,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":145,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":146,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":147,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":148,"author":{"gitID":"-"},"content":"****"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":153,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":154,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` +"},{"lineNumber":155,"author":{"gitID":"-"},"content":"Returns any person having names `Betsy`, `Tim`, or `John`"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Filtering contacts by tag: `filter`"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"Filters persons whose contact contains the given tag. +"},{"lineNumber":160,"author":{"gitID":"-"},"content":"Format: `filter TAG`"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"****"},{"lineNumber":163,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `Friends` will match `friends`"},{"lineNumber":164,"author":{"gitID":"-"},"content":"****"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"* `filter friends` +"},{"lineNumber":169,"author":{"gitID":"-"},"content":"Returns any person that has the tag `friends`"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person : `delete`"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"Deletes the specified person from the address book. +"},{"lineNumber":174,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"****"},{"lineNumber":177,"author":{"gitID":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":178,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":179,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":180,"author":{"gitID":"-"},"content":"****"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":185,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":186,"author":{"gitID":"-"},"content":"Deletes the 2nd person in the address book."},{"lineNumber":187,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":188,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":189,"author":{"gitID":"-"},"content":"Deletes the 1st person in the results of the `find` command."},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a person : `select`"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"Selects the person identified by the index number used in the last person listing. +"},{"lineNumber":194,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"****"},{"lineNumber":197,"author":{"gitID":"-"},"content":"* Selects the person and loads the Google search page the person at the specified `INDEX`."},{"lineNumber":198,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":199,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":200,"author":{"gitID":"-"},"content":"****"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":205,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":206,"author":{"gitID":"-"},"content":"Selects the 2nd person in the address book."},{"lineNumber":207,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":208,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":209,"author":{"gitID":"-"},"content":"Selects the 1st person in the results of the `find` command."},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":214,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":217,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":218,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":219,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Opening a calendar : `calendar`"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"Opens a calendar in a webview. Will eventually have the option to be opened in the in application scene switcher."},{"lineNumber":224,"author":{"gitID":"-"},"content":"Format: `calendar`"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":227,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":228,"author":{"gitID":"-"},"content":"The user can also open the calendar by pressing the `F8` function key, or by pressing `View \u003e Open Calendar`"},{"lineNumber":229,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding and event to the calendar : `event-add`"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"Allows a user to add an event directly to their calendar."},{"lineNumber":234,"author":{"gitID":"-"},"content":"Format: `event-add t/\u003ctitle\u003e l/\u003clocation\u003e ds/\u003cstart date/time\u003e de/\u003cend date/time\u003e n/\u003cnotes\u003e`"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting an event from the calendar : `event-delete`"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"Displays a list of upcoming events to the user and lets them select one to delete."},{"lineNumber":239,"author":{"gitID":"-"},"content":"Format: `event-delete`"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing an event in the calendar : `event-edit`"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"Displays a list of upcoming events to the user and lets them select one to edit."},{"lineNumber":244,"author":{"gitID":"-"},"content":"Format: `event-edit`"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Opening the Error Log : `errorlog`"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"Opens the error log in a new window."},{"lineNumber":249,"author":{"gitID":"-"},"content":"Format: `errorlog`"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":252,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":253,"author":{"gitID":"-"},"content":"The user can also open the error log by pressing `View \u003e Show Error Log`"},{"lineNumber":254,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":257,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"Restores the address book to the state before the previous _undoable_ command was executed. +"},{"lineNumber":260,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":263,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":264,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":265,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":270,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":271,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":274,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":275,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":276,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":279,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":280,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":281,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":286,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":291,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":292,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":295,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":296,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":299,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":300,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":301,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":302,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":303,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":304,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"Clears all entries from the address book. +"},{"lineNumber":309,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":314,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"kaisertanqr"},"content":"SLAP data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":319,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":322,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":323,"author":{"gitID":"kaisertanqr"},"content":"\u003d\u003d\u003d Login to your account:"},{"lineNumber":324,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":325,"author":{"gitID":"kaisertanqr"},"content":"SLAP will request for your login credentials (username and password) before allowing you to access it."},{"lineNumber":326,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":327,"author":{"gitID":"kaisertanqr"},"content":"\u003d\u003d\u003d Logout from your account: `logout`"},{"lineNumber":328,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":329,"author":{"gitID":"kaisertanqr"},"content":"SLAP allows to log out from your account so that you can ensure confidentiality of your data."},{"lineNumber":330,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":331,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"kaisertanqr"},"content":"Encryption is done automatically when SLAP is logged out or is exited."},{"lineNumber":335,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":336,"author":{"gitID":"kaisertanqr"},"content":"\u003d\u003d\u003d Export SLAP `[coming in v2.0]`"},{"lineNumber":337,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":338,"author":{"gitID":"kaisertanqr"},"content":"Exports your SLAP into a file so that it can be transported across systems."},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":343,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":"* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"},{"lineNumber":348,"author":{"gitID":"-"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"},{"lineNumber":349,"author":{"gitID":"-"},"content":"* *Clear* : `clear`"},{"lineNumber":350,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":351,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":352,"author":{"gitID":"-"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"},{"lineNumber":353,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":354,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":355,"author":{"gitID":"-"},"content":"e.g. `find James Jake`"},{"lineNumber":356,"author":{"gitID":"-"},"content":"* *List* : `list`"},{"lineNumber":357,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":358,"author":{"gitID":"-"},"content":"* *Calendar* : `calendar` `[Since v1.1]`"},{"lineNumber":359,"author":{"gitID":"-"},"content":"* *Error* : `errorlog` `[Since v1.2]`"},{"lineNumber":360,"author":{"gitID":"jaronchan"},"content":"* *Switch* : `switch FEATURE` +"},{"lineNumber":361,"author":{"gitID":"jaronchan"},"content":"e.g.`switch scheduler`"},{"lineNumber":362,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` +"},{"lineNumber":363,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":364,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":365,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":366,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"},{"lineNumber":367,"author":{"gitID":"kaisertanqr"},"content":"* *Logout* : `logout`"},{"lineNumber":368,"author":{"gitID":"kaisertanqr"},"content":"* *Login Status* : `login-status`"}],"authorContributionMap":{"kaisertanqr":40,"jaronchan":19,"-":309}},{"path":"src/test/java/systemtests/LoginCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kaisertanqr"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":3,"author":{"gitID":"kaisertanqr"},"content":"public class LoginCommandSystemTest {"},{"lineNumber":4,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":5,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":6,"author":{"gitID":"kaisertanqr"},"content":"}"}],"authorContributionMap":{"kaisertanqr":6}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kaisertanqr"},"content":"//package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":3,"author":{"gitID":"kaisertanqr"},"content":"//import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":5,"author":{"gitID":"kaisertanqr"},"content":"//import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":7,"author":{"gitID":"kaisertanqr"},"content":"//import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"kaisertanqr"},"content":"//// import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":10,"author":{"gitID":"kaisertanqr"},"content":"//import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":11,"author":{"gitID":"kaisertanqr"},"content":"//import javafx.scene.input.KeyCode;"},{"lineNumber":12,"author":{"gitID":"kaisertanqr"},"content":"//import seedu.address.logic.Logic;"},{"lineNumber":13,"author":{"gitID":"kaisertanqr"},"content":"//import seedu.address.logic.LogicManager;"},{"lineNumber":14,"author":{"gitID":"kaisertanqr"},"content":"//import seedu.address.logic.commands.ListCommand;"},{"lineNumber":15,"author":{"gitID":"kaisertanqr"},"content":"//import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"kaisertanqr"},"content":"//import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":18,"author":{"gitID":"kaisertanqr"},"content":"//public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":19,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":20,"author":{"gitID":"kaisertanqr"},"content":"//    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":21,"author":{"gitID":"kaisertanqr"},"content":"//    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":22,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":23,"author":{"gitID":"kaisertanqr"},"content":"//    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":24,"author":{"gitID":"kaisertanqr"},"content":"//    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":25,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":26,"author":{"gitID":"kaisertanqr"},"content":"//    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":27,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":28,"author":{"gitID":"kaisertanqr"},"content":"//    @Before"},{"lineNumber":29,"author":{"gitID":"kaisertanqr"},"content":"//    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"kaisertanqr"},"content":"//        Model model \u003d new ModelManager();"},{"lineNumber":31,"author":{"gitID":"kaisertanqr"},"content":"//        Logic logic \u003d new LogicManager(model);"},{"lineNumber":32,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":33,"author":{"gitID":"kaisertanqr"},"content":"//        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":34,"author":{"gitID":"kaisertanqr"},"content":"//        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":35,"author":{"gitID":"kaisertanqr"},"content":"//                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":36,"author":{"gitID":"kaisertanqr"},"content":"//        uiPartRule.setUiPart(commandBox);"},{"lineNumber":37,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":38,"author":{"gitID":"kaisertanqr"},"content":"//        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":39,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":40,"author":{"gitID":"kaisertanqr"},"content":"//        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":41,"author":{"gitID":"kaisertanqr"},"content":"//        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":42,"author":{"gitID":"kaisertanqr"},"content":"//    }"},{"lineNumber":43,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":44,"author":{"gitID":"kaisertanqr"},"content":"////    @Test"},{"lineNumber":45,"author":{"gitID":"kaisertanqr"},"content":"////    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":46,"author":{"gitID":"kaisertanqr"},"content":"////        assertBehaviorForSuccessfulCommand();"},{"lineNumber":47,"author":{"gitID":"kaisertanqr"},"content":"////        assertBehaviorForFailedCommand();"},{"lineNumber":48,"author":{"gitID":"kaisertanqr"},"content":"////    }"},{"lineNumber":49,"author":{"gitID":"kaisertanqr"},"content":"////"},{"lineNumber":50,"author":{"gitID":"kaisertanqr"},"content":"////    @Test"},{"lineNumber":51,"author":{"gitID":"kaisertanqr"},"content":"////    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":52,"author":{"gitID":"kaisertanqr"},"content":"////        assertBehaviorForFailedCommand();"},{"lineNumber":53,"author":{"gitID":"kaisertanqr"},"content":"////        assertBehaviorForSuccessfulCommand();"},{"lineNumber":54,"author":{"gitID":"kaisertanqr"},"content":"////"},{"lineNumber":55,"author":{"gitID":"kaisertanqr"},"content":"////        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":56,"author":{"gitID":"kaisertanqr"},"content":"////        assertBehaviorForSuccessfulCommand();"},{"lineNumber":57,"author":{"gitID":"kaisertanqr"},"content":"////        assertBehaviorForFailedCommand();"},{"lineNumber":58,"author":{"gitID":"kaisertanqr"},"content":"////        assertBehaviorForFailedCommand();"},{"lineNumber":59,"author":{"gitID":"kaisertanqr"},"content":"////    }"},{"lineNumber":60,"author":{"gitID":"kaisertanqr"},"content":"////"},{"lineNumber":61,"author":{"gitID":"kaisertanqr"},"content":"////    @Test"},{"lineNumber":62,"author":{"gitID":"kaisertanqr"},"content":"////    public void commandBox_handleKeyPress() {"},{"lineNumber":63,"author":{"gitID":"kaisertanqr"},"content":"////        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":64,"author":{"gitID":"kaisertanqr"},"content":"////        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":65,"author":{"gitID":"kaisertanqr"},"content":"////        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":66,"author":{"gitID":"kaisertanqr"},"content":"////        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":67,"author":{"gitID":"kaisertanqr"},"content":"////"},{"lineNumber":68,"author":{"gitID":"kaisertanqr"},"content":"////        guiRobot.push(KeyCode.A);"},{"lineNumber":69,"author":{"gitID":"kaisertanqr"},"content":"////        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":70,"author":{"gitID":"kaisertanqr"},"content":"////    }"},{"lineNumber":71,"author":{"gitID":"kaisertanqr"},"content":"////"},{"lineNumber":72,"author":{"gitID":"kaisertanqr"},"content":"////    @Test"},{"lineNumber":73,"author":{"gitID":"kaisertanqr"},"content":"////    public void handleKeyPress_startingWithUp() {"},{"lineNumber":74,"author":{"gitID":"kaisertanqr"},"content":"////        // empty history"},{"lineNumber":75,"author":{"gitID":"kaisertanqr"},"content":"////        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":76,"author":{"gitID":"kaisertanqr"},"content":"////        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":77,"author":{"gitID":"kaisertanqr"},"content":"////"},{"lineNumber":78,"author":{"gitID":"kaisertanqr"},"content":"////        // one command"},{"lineNumber":79,"author":{"gitID":"kaisertanqr"},"content":"////        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":80,"author":{"gitID":"kaisertanqr"},"content":"////        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":81,"author":{"gitID":"kaisertanqr"},"content":"////        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":82,"author":{"gitID":"kaisertanqr"},"content":"////"},{"lineNumber":83,"author":{"gitID":"kaisertanqr"},"content":"////        // two commands (latest command is failure)"},{"lineNumber":84,"author":{"gitID":"kaisertanqr"},"content":"////        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":85,"author":{"gitID":"kaisertanqr"},"content":"////        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":86,"author":{"gitID":"kaisertanqr"},"content":"////        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":87,"author":{"gitID":"kaisertanqr"},"content":"////        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":88,"author":{"gitID":"kaisertanqr"},"content":"////        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":89,"author":{"gitID":"kaisertanqr"},"content":"////        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":90,"author":{"gitID":"kaisertanqr"},"content":"////        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":91,"author":{"gitID":"kaisertanqr"},"content":"////"},{"lineNumber":92,"author":{"gitID":"kaisertanqr"},"content":"////        // insert command in the middle of retrieving previous commands"},{"lineNumber":93,"author":{"gitID":"kaisertanqr"},"content":"////        guiRobot.push(KeyCode.UP);"},{"lineNumber":94,"author":{"gitID":"kaisertanqr"},"content":"////        String thirdCommand \u003d \"list\";"},{"lineNumber":95,"author":{"gitID":"kaisertanqr"},"content":"////        commandBoxHandle.run(thirdCommand);"},{"lineNumber":96,"author":{"gitID":"kaisertanqr"},"content":"////        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":97,"author":{"gitID":"kaisertanqr"},"content":"////        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":98,"author":{"gitID":"kaisertanqr"},"content":"////        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":99,"author":{"gitID":"kaisertanqr"},"content":"////        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":100,"author":{"gitID":"kaisertanqr"},"content":"////        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":101,"author":{"gitID":"kaisertanqr"},"content":"////        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":102,"author":{"gitID":"kaisertanqr"},"content":"////    }"},{"lineNumber":103,"author":{"gitID":"kaisertanqr"},"content":"////"},{"lineNumber":104,"author":{"gitID":"kaisertanqr"},"content":"////    @Test"},{"lineNumber":105,"author":{"gitID":"kaisertanqr"},"content":"////    public void handleKeyPress_startingWithDown() {"},{"lineNumber":106,"author":{"gitID":"kaisertanqr"},"content":"////        // empty history"},{"lineNumber":107,"author":{"gitID":"kaisertanqr"},"content":"////        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":108,"author":{"gitID":"kaisertanqr"},"content":"////        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":109,"author":{"gitID":"kaisertanqr"},"content":"////"},{"lineNumber":110,"author":{"gitID":"kaisertanqr"},"content":"////        // one command"},{"lineNumber":111,"author":{"gitID":"kaisertanqr"},"content":"////        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":112,"author":{"gitID":"kaisertanqr"},"content":"////        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":113,"author":{"gitID":"kaisertanqr"},"content":"////        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":114,"author":{"gitID":"kaisertanqr"},"content":"////"},{"lineNumber":115,"author":{"gitID":"kaisertanqr"},"content":"////        // two commands"},{"lineNumber":116,"author":{"gitID":"kaisertanqr"},"content":"////        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":117,"author":{"gitID":"kaisertanqr"},"content":"////        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":118,"author":{"gitID":"kaisertanqr"},"content":"////        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":119,"author":{"gitID":"kaisertanqr"},"content":"////"},{"lineNumber":120,"author":{"gitID":"kaisertanqr"},"content":"////        // insert command in the middle of retrieving previous commands"},{"lineNumber":121,"author":{"gitID":"kaisertanqr"},"content":"////        guiRobot.push(KeyCode.UP);"},{"lineNumber":122,"author":{"gitID":"kaisertanqr"},"content":"////        String thirdCommand \u003d \"list\";"},{"lineNumber":123,"author":{"gitID":"kaisertanqr"},"content":"////        commandBoxHandle.run(thirdCommand);"},{"lineNumber":124,"author":{"gitID":"kaisertanqr"},"content":"////        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":125,"author":{"gitID":"kaisertanqr"},"content":"////        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":126,"author":{"gitID":"kaisertanqr"},"content":"////  }"},{"lineNumber":127,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":128,"author":{"gitID":"kaisertanqr"},"content":"//    /**"},{"lineNumber":129,"author":{"gitID":"kaisertanqr"},"content":"//     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":130,"author":{"gitID":"kaisertanqr"},"content":"//     *      - the text remains \u003cbr\u003e"},{"lineNumber":131,"author":{"gitID":"kaisertanqr"},"content":"//     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":132,"author":{"gitID":"kaisertanqr"},"content":"//     */"},{"lineNumber":133,"author":{"gitID":"kaisertanqr"},"content":"//    private void assertBehaviorForFailedCommand() {"},{"lineNumber":134,"author":{"gitID":"kaisertanqr"},"content":"//        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":135,"author":{"gitID":"kaisertanqr"},"content":"//        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":136,"author":{"gitID":"kaisertanqr"},"content":"//        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":137,"author":{"gitID":"kaisertanqr"},"content":"//    }"},{"lineNumber":138,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":139,"author":{"gitID":"kaisertanqr"},"content":"//    /**"},{"lineNumber":140,"author":{"gitID":"kaisertanqr"},"content":"//     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"kaisertanqr"},"content":"//     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"kaisertanqr"},"content":"//     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":143,"author":{"gitID":"kaisertanqr"},"content":"//     */"},{"lineNumber":144,"author":{"gitID":"kaisertanqr"},"content":"//    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":145,"author":{"gitID":"kaisertanqr"},"content":"//        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":146,"author":{"gitID":"kaisertanqr"},"content":"//        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":147,"author":{"gitID":"kaisertanqr"},"content":"//        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":148,"author":{"gitID":"kaisertanqr"},"content":"//    }"},{"lineNumber":149,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":150,"author":{"gitID":"kaisertanqr"},"content":"//    /**"},{"lineNumber":151,"author":{"gitID":"kaisertanqr"},"content":"//     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":152,"author":{"gitID":"kaisertanqr"},"content":"//     */"},{"lineNumber":153,"author":{"gitID":"kaisertanqr"},"content":"//    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":154,"author":{"gitID":"kaisertanqr"},"content":"//        guiRobot.push(keycode);"},{"lineNumber":155,"author":{"gitID":"kaisertanqr"},"content":"//        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":156,"author":{"gitID":"kaisertanqr"},"content":"//    }"},{"lineNumber":157,"author":{"gitID":"kaisertanqr"},"content":"//}"}],"authorContributionMap":{"kaisertanqr":157}},{"path":"src/test/java/seedu/address/TestApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import systemtests.ModelHelper;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * This class is meant to override some properties of MainApp so that it will be suited for"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * testing"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TestApp extends MainApp {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String APP_TITLE \u003d \"Test App\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    protected static final String ADDRESS_BOOK_NAME \u003d \"Test\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    protected String saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public TestApp() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, String saveFileLocation) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.initialDataSupplier \u003d initialDataSupplier;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.saveFileLocation \u003d saveFileLocation;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // If some initial local data has been provided, write those to the file"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (initialDataSupplier.get() !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    this.saveFileLocation);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Config config \u003d super.initConfig(configFilePath);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        config.setAppTitle(APP_TITLE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d super.initPrefs(storage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookFilePath(saveFileLocation);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookName(ADDRESS_BOOK_NAME);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the address book data stored inside the storage file."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public AddressBook readStorageAddressBook() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"kaisertanqr"},"content":"            return new AddressBook(storage.readAddressBook().get(), true);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Data is not in the AddressBook format.\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns the file path of the storage file."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public String getStorageSaveLocation() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return storage.getAddressBookFilePath();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the model."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public Model getModel() {"},{"lineNumber":97,"author":{"gitID":"kaisertanqr"},"content":"        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs(), true);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return copy;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":104,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":106,"author":{"gitID":"kaisertanqr"},"content":"        this.initTest();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Creates an XML file at the {@code filePath} with the {@code data}."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            File saveFileForTesting \u003d new File(filePath);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            FileUtil.createIfMissing(saveFileForTesting);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(saveFileForTesting, data);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kaisertanqr":4,"-":121}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"kaisertanqr"},"content":"// import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":32,"author":{"gitID":"kaisertanqr"},"content":"        //assertHistoryCorrect(invalidCommand);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":38,"author":{"gitID":"kaisertanqr"},"content":"        //assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":39,"author":{"gitID":"kaisertanqr"},"content":"        //assertHistoryCorrect(deleteCommand);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":45,"author":{"gitID":"kaisertanqr"},"content":"        //assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":46,"author":{"gitID":"kaisertanqr"},"content":"        //assertHistoryCorrect(listCommand);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        logic.getFilteredPersonList().remove(0);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     *      - {@code expectedModel}\u0027s address book was saved to the storage file."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":118,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kaisertanqr":6,"-":118}},{"path":"src/test/java/seedu/address/logic/parser/LoginCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kaisertanqr"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":3,"author":{"gitID":"kaisertanqr"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_LOGIN_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"kaisertanqr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LOGIN_INVALID_DESC_PASSWORD;"},{"lineNumber":5,"author":{"gitID":"kaisertanqr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LOGIN_INVALID_DESC_USERNAME;"},{"lineNumber":6,"author":{"gitID":"kaisertanqr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LOGIN_VALID_DESC_PASSWORD;"},{"lineNumber":7,"author":{"gitID":"kaisertanqr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LOGIN_VALID_DESC_USERNAME;"},{"lineNumber":8,"author":{"gitID":"kaisertanqr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":9,"author":{"gitID":"kaisertanqr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":10,"author":{"gitID":"kaisertanqr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOGIN_PASSWORD;"},{"lineNumber":11,"author":{"gitID":"kaisertanqr"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOGIN_USERNAME;"},{"lineNumber":12,"author":{"gitID":"kaisertanqr"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":13,"author":{"gitID":"kaisertanqr"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":14,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":15,"author":{"gitID":"kaisertanqr"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":17,"author":{"gitID":"kaisertanqr"},"content":"import seedu.address.logic.commands.LoginCommand;"},{"lineNumber":18,"author":{"gitID":"kaisertanqr"},"content":"import seedu.address.model.login.Password;"},{"lineNumber":19,"author":{"gitID":"kaisertanqr"},"content":"import seedu.address.model.login.Username;"},{"lineNumber":20,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":21,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":22,"author":{"gitID":"kaisertanqr"},"content":"public class LoginCommandParserTest {"},{"lineNumber":23,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":24,"author":{"gitID":"kaisertanqr"},"content":"    private LoginCommandParser parser \u003d new LoginCommandParser();"},{"lineNumber":25,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":26,"author":{"gitID":"kaisertanqr"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"kaisertanqr"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":28,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":29,"author":{"gitID":"kaisertanqr"},"content":"        LoginCommand validLoginCommand \u003d new LoginCommand(new Username(VALID_LOGIN_USERNAME),"},{"lineNumber":30,"author":{"gitID":"kaisertanqr"},"content":"                new Password(VALID_LOGIN_PASSWORD));"},{"lineNumber":31,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":32,"author":{"gitID":"kaisertanqr"},"content":"        //successful input"},{"lineNumber":33,"author":{"gitID":"kaisertanqr"},"content":"        assertParseSuccess(parser, LOGIN_VALID_DESC_USERNAME + LOGIN_VALID_DESC_PASSWORD, validLoginCommand);"},{"lineNumber":34,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":35,"author":{"gitID":"kaisertanqr"},"content":"        // whitespace only preamble"},{"lineNumber":36,"author":{"gitID":"kaisertanqr"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + LOGIN_VALID_DESC_USERNAME + LOGIN_VALID_DESC_PASSWORD,"},{"lineNumber":37,"author":{"gitID":"kaisertanqr"},"content":"                validLoginCommand);"},{"lineNumber":38,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":39,"author":{"gitID":"kaisertanqr"},"content":"        // multiple usernames - last username accepted"},{"lineNumber":40,"author":{"gitID":"kaisertanqr"},"content":"        assertParseSuccess(parser, LOGIN_VALID_DESC_USERNAME + LOGIN_VALID_DESC_USERNAME"},{"lineNumber":41,"author":{"gitID":"kaisertanqr"},"content":"                        + LOGIN_VALID_DESC_PASSWORD, validLoginCommand);"},{"lineNumber":42,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":43,"author":{"gitID":"kaisertanqr"},"content":"        // multiple usernames with valid last username - last username accepted"},{"lineNumber":44,"author":{"gitID":"kaisertanqr"},"content":"        assertParseSuccess(parser,  LOGIN_INVALID_DESC_USERNAME + LOGIN_VALID_DESC_USERNAME"},{"lineNumber":45,"author":{"gitID":"kaisertanqr"},"content":"                        + LOGIN_VALID_DESC_PASSWORD, validLoginCommand);"},{"lineNumber":46,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":47,"author":{"gitID":"kaisertanqr"},"content":"        // multiple passwords with valid last password - last password accepted"},{"lineNumber":48,"author":{"gitID":"kaisertanqr"},"content":"        assertParseSuccess(parser, LOGIN_VALID_DESC_USERNAME + LOGIN_INVALID_DESC_PASSWORD"},{"lineNumber":49,"author":{"gitID":"kaisertanqr"},"content":"                        + LOGIN_VALID_DESC_PASSWORD, validLoginCommand);"},{"lineNumber":50,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":51,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":53,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":54,"author":{"gitID":"kaisertanqr"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"kaisertanqr"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":56,"author":{"gitID":"kaisertanqr"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_LOGIN_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE);"},{"lineNumber":57,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":58,"author":{"gitID":"kaisertanqr"},"content":"        // missing username prefix"},{"lineNumber":59,"author":{"gitID":"kaisertanqr"},"content":"        assertParseFailure(parser, LOGIN_INVALID_DESC_PASSWORD, expectedMessage);"},{"lineNumber":60,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":61,"author":{"gitID":"kaisertanqr"},"content":"        // missing password prefix"},{"lineNumber":62,"author":{"gitID":"kaisertanqr"},"content":"        assertParseFailure(parser, LOGIN_INVALID_DESC_USERNAME, expectedMessage);"},{"lineNumber":63,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":64,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":66,"author":{"gitID":"kaisertanqr"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"kaisertanqr"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":68,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":69,"author":{"gitID":"kaisertanqr"},"content":"        // invalid username"},{"lineNumber":70,"author":{"gitID":"kaisertanqr"},"content":"        assertParseFailure(parser, LOGIN_VALID_DESC_USERNAME + \"@@ \" + LOGIN_VALID_DESC_PASSWORD,"},{"lineNumber":71,"author":{"gitID":"kaisertanqr"},"content":"                Username.MESSAGE_USERNAME_CONSTRAINTS);"},{"lineNumber":72,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":73,"author":{"gitID":"kaisertanqr"},"content":"        // invalid password"},{"lineNumber":74,"author":{"gitID":"kaisertanqr"},"content":"        assertParseFailure(parser, LOGIN_VALID_DESC_USERNAME + LOGIN_VALID_DESC_PASSWORD + \"@@\","},{"lineNumber":75,"author":{"gitID":"kaisertanqr"},"content":"                Password.MESSAGE_PASSWORD_CONSTRAINTS);"},{"lineNumber":76,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":77,"author":{"gitID":"kaisertanqr"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":78,"author":{"gitID":"kaisertanqr"},"content":"        assertParseFailure(parser, LOGIN_VALID_DESC_USERNAME + \"@@ \" + LOGIN_VALID_DESC_PASSWORD + \"@@\","},{"lineNumber":79,"author":{"gitID":"kaisertanqr"},"content":"                Username.MESSAGE_USERNAME_CONSTRAINTS);"},{"lineNumber":80,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":81,"author":{"gitID":"kaisertanqr"},"content":"        // non-empty preamble"},{"lineNumber":82,"author":{"gitID":"kaisertanqr"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + LOGIN_VALID_DESC_USERNAME + LOGIN_VALID_DESC_PASSWORD,"},{"lineNumber":83,"author":{"gitID":"kaisertanqr"},"content":"                String.format(MESSAGE_INVALID_LOGIN_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"},{"lineNumber":84,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":85,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":87,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":88,"author":{"gitID":"kaisertanqr"},"content":"}"}],"authorContributionMap":{"kaisertanqr":88}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":25,"author":{"gitID":"jaronchan"},"content":"import guitests.guihandles.CalendarPanelHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":27,"author":{"gitID":"jaronchan"},"content":"import guitests.guihandles.DailySchedulerPanelHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":30,"author":{"gitID":"jaronchan"},"content":"import guitests.guihandles.PersonDetailsPanelHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":49,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":50,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":51,"author":{"gitID":"-"},"content":" */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"jaronchan"},"content":"    public PersonDetailsPanelHandle getPersonDetailsPanel() {"},{"lineNumber":120,"author":{"gitID":"jaronchan"},"content":"        return mainWindowHandle.getPersonDetailsPanel();"},{"lineNumber":121,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":123,"author":{"gitID":"jaronchan"},"content":"    public CalendarPanelHandle getCalenderPanel() {"},{"lineNumber":124,"author":{"gitID":"jaronchan"},"content":"        return mainWindowHandle.getCalendarPanel();"},{"lineNumber":125,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":127,"author":{"gitID":"jaronchan"},"content":"    public DailySchedulerPanelHandle getDailySchedulerPanel() {"},{"lineNumber":128,"author":{"gitID":"jaronchan"},"content":"        return mainWindowHandle.getDailySchedulerPanel();"},{"lineNumber":129,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":147,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":203,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":253,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":260,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":267,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":277,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":284,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":288,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":291,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":292,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":293,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":294,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":295,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":296,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":298,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":300,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":303,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":304,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":305,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":307,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":308,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jaronchan":15,"-":293}},{"path":"src/test/java/seedu/address/logic/commands/SwitchCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jaronchan"},"content":"//@@author jaronchan"},{"lineNumber":2,"author":{"gitID":"jaronchan"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":4,"author":{"gitID":"jaronchan"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"jaronchan"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":7,"author":{"gitID":"jaronchan"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"jaronchan"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":10,"author":{"gitID":"jaronchan"},"content":"import seedu.address.commons.events.ui.SwitchFeatureEvent;"},{"lineNumber":11,"author":{"gitID":"jaronchan"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":12,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":13,"author":{"gitID":"jaronchan"},"content":"public class SwitchCommandTest {"},{"lineNumber":14,"author":{"gitID":"jaronchan"},"content":"    @Rule"},{"lineNumber":15,"author":{"gitID":"jaronchan"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":16,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":17,"author":{"gitID":"jaronchan"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"jaronchan"},"content":"    public void execute_help_success() {"},{"lineNumber":19,"author":{"gitID":"jaronchan"},"content":"        CommandResult result \u003d new SwitchCommand(\"details\").execute();"},{"lineNumber":20,"author":{"gitID":"jaronchan"},"content":"        assertEquals(\"Switched to details tab\", result.feedbackToUser);"},{"lineNumber":21,"author":{"gitID":"jaronchan"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof SwitchFeatureEvent);"},{"lineNumber":22,"author":{"gitID":"jaronchan"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":23,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"jaronchan"},"content":"}"}],"authorContributionMap":{"jaronchan":24}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"jaronchan"},"content":"\u003d Social Worker Session Logger and Planner - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `CS2103-T15-B3`      Since: `Feb 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":22,"author":{"gitID":"-"},"content":"+"},{"lineNumber":23,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":24,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":26,"author":{"gitID":"-"},"content":"+"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":38,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":39,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":40,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":41,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":42,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":43,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":47,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":52,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":61,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":62,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":65,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":80,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":92,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":100,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":105,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":120,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":132,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":143,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":156,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":159,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":170,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":174,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":177,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":178,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":184,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":187,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":188,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":189,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":194,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":197,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":200,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":207,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":208,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":209,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":212,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":215,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":222,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":225,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"kaisertanqr"},"content":"\u003d\u003d\u003d Login Feature"},{"lineNumber":234,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"kaisertanqr"},"content":"\u003d\u003d\u003d\u003d\u003d User Login"},{"lineNumber":238,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":239,"author":{"gitID":"kaisertanqr"},"content":"The Login feature involves UI, Logic and Model components. It allows the user to login and logout"},{"lineNumber":240,"author":{"gitID":"kaisertanqr"},"content":"from the application. When the user is logged out, the user commands are limited, some panels are hidden"},{"lineNumber":241,"author":{"gitID":"kaisertanqr"},"content":"the user and the viewing of history is disabled. It serves the purpose of maintaining confidentiality of the data in the application."},{"lineNumber":242,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":243,"author":{"gitID":"kaisertanqr"},"content":"The `LoginCommand` is part of Logic component. However it makes use of `addressBook` to check for the match in"},{"lineNumber":244,"author":{"gitID":"kaisertanqr"},"content":"the username and password input. Below is a sequence diagram of how the feature works."},{"lineNumber":245,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":246,"author":{"gitID":"kaisertanqr"},"content":".Sequence Diagram for Login Command (Logic Component)"},{"lineNumber":247,"author":{"gitID":"kaisertanqr"},"content":"image::LoginFeatureLogicModelComponent.png[width\u003d\"800\"]"},{"lineNumber":248,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":249,"author":{"gitID":"kaisertanqr"},"content":"The Login feature involves the UI component as well as we need to know when to hide and show certain panels depending on"},{"lineNumber":250,"author":{"gitID":"kaisertanqr"},"content":"whether the user has logged in or not. To maintain our n-tier architecture, we make `CommandBox` check the login"},{"lineNumber":251,"author":{"gitID":"kaisertanqr"},"content":"status upon each command entry to effect the change on the UI. The sequence diagram is as shown below."},{"lineNumber":252,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":253,"author":{"gitID":"kaisertanqr"},"content":".Sequence Diagram for Login Command (UI Component)"},{"lineNumber":254,"author":{"gitID":"kaisertanqr"},"content":"image::LoginFeatureUIComponent.png[width\u003d\"800\"]"},{"lineNumber":255,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":256,"author":{"gitID":"kaisertanqr"},"content":"When the user is not logged in, commands that manipulate data in the application will be disabled. To avoid editing"},{"lineNumber":257,"author":{"gitID":"kaisertanqr"},"content":"every single command, the invalidity of the command is handled in `LogicManager`."},{"lineNumber":258,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":259,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":260,"author":{"gitID":"kaisertanqr"},"content":"\u003d\u003d\u003d\u003d\u003d User Logout"},{"lineNumber":261,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":262,"author":{"gitID":"kaisertanqr"},"content":"The logout feature similarly involves the UI, Logic and Model components. It allows the user to"},{"lineNumber":263,"author":{"gitID":"kaisertanqr"},"content":"log out from the application, securing his data."},{"lineNumber":264,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":265,"author":{"gitID":"kaisertanqr"},"content":"The user cannot logout when he/she is not even logged in initially. This is already handled by limiting the availability"},{"lineNumber":266,"author":{"gitID":"kaisertanqr"},"content":"of commands when the user is logged out."},{"lineNumber":267,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":268,"author":{"gitID":"kaisertanqr"},"content":"Similarly, some of the UI panels will be hidden when the user logs out."},{"lineNumber":269,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":270,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":271,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":273,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":274,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":285,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":286,"author":{"gitID":"-"},"content":"----"},{"lineNumber":287,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":288,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":291,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"-"},"content":"}"},{"lineNumber":293,"author":{"gitID":"-"},"content":"----"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":296,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":297,"author":{"gitID":"-"},"content":"----"},{"lineNumber":298,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":299,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":300,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":304,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":305,"author":{"gitID":"-"},"content":"}"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":308,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":309,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":310,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":311,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":312,"author":{"gitID":"-"},"content":"}"},{"lineNumber":313,"author":{"gitID":"-"},"content":"----"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":326,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":335,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":340,"author":{"gitID":"-"},"content":""},{"lineNumber":341,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":344,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":345,"author":{"gitID":"-"},"content":""},{"lineNumber":346,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":357,"author":{"gitID":"-"},"content":""},{"lineNumber":358,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":359,"author":{"gitID":"-"},"content":""},{"lineNumber":360,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":363,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":364,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":365,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":366,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":367,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":372,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":373,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":374,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":375,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":376,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":377,"author":{"gitID":"-"},"content":""},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":380,"author":{"gitID":"-"},"content":""},{"lineNumber":381,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":382,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":383,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":384,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":385,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":386,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":387,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":388,"author":{"gitID":"-"},"content":""},{"lineNumber":389,"author":{"gitID":"-"},"content":""},{"lineNumber":390,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":391,"author":{"gitID":"-"},"content":""},{"lineNumber":392,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":393,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":394,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":395,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":396,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":397,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":398,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":399,"author":{"gitID":"-"},"content":""},{"lineNumber":400,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":401,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":402,"author":{"gitID":"-"},"content":""},{"lineNumber":403,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":404,"author":{"gitID":"-"},"content":""},{"lineNumber":405,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":406,"author":{"gitID":"-"},"content":""},{"lineNumber":407,"author":{"gitID":"-"},"content":"// tag::calendarview[]"},{"lineNumber":408,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Google Calendar Integration"},{"lineNumber":409,"author":{"gitID":"-"},"content":"Command line and graphical integration with Google Calendar from within SLAP. This assumes that the user already uses Google Calendar to manage their events."},{"lineNumber":410,"author":{"gitID":"-"},"content":""},{"lineNumber":411,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Proposed Implementation"},{"lineNumber":412,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: GUI"},{"lineNumber":413,"author":{"gitID":"-"},"content":"The GUI portion of this feature will be a WebView of the Google Calendar web application. The user will have the option to either open their calendar as a new floating window by pressing the `F8` function key or by clicking `View \u003e Open Calendar` or as a scene within the main SLAP GUI by invoking the `calendar` command. In either case, the WebView will be instantiated as a new JavaFX scene and take advantage of Java\u0027s build in WebView/WebEngine. This will allow the user to interact with the familiar Google Calendar web interface without any loss of functionality."},{"lineNumber":414,"author":{"gitID":"-"},"content":""},{"lineNumber":415,"author":{"gitID":"-"},"content":"TODO: INSERT FINALIZED DIAGRAM HERE"},{"lineNumber":416,"author":{"gitID":"-"},"content":""},{"lineNumber":417,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: CLI"},{"lineNumber":418,"author":{"gitID":"-"},"content":"The CLI portion of this feature will rely on Google\u0027s Calendar API that uses the OAuth 2.0 protocol to allow an application (such as SLAP) to directly read/write to a user\u0027s calendar, provided that they have given them access to the calendar. Once a user has authorized the application to read/write to their calendar, they will gain access to the the following commands: `event-add`, `event-delete`, and `event-edit`. The Oauth authentication process will be entirely handled by Google with the only requirement being that the user must log in to their calendar using the GUI interface."},{"lineNumber":419,"author":{"gitID":"-"},"content":""},{"lineNumber":420,"author":{"gitID":"-"},"content":"A check will eventually be added to ensure that the user has already logged in before attempting to execute any of the afformentioned commands."},{"lineNumber":421,"author":{"gitID":"-"},"content":""},{"lineNumber":422,"author":{"gitID":"-"},"content":"TODO: INSERT FINALIZED DIAGRAM HERE"},{"lineNumber":423,"author":{"gitID":"-"},"content":""},{"lineNumber":424,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":425,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: GUI"},{"lineNumber":426,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Native Google Calendar WebView"},{"lineNumber":427,"author":{"gitID":"-"},"content":"** Pros: Minimal effort to implement as it is just a wrapper about the existing Google Calendar UI. Data is managed and secured by Google."},{"lineNumber":428,"author":{"gitID":"-"},"content":"** Cons: Cannot customize the interfact without injecting customize styles. Requires complicated OAuth 2.0 authentication to work. Assumes that the user already has a Google account."},{"lineNumber":429,"author":{"gitID":"-"},"content":""},{"lineNumber":430,"author":{"gitID":"-"},"content":"* **Alternative 2: ** https://github.com/dlemmermann/CalendarFX[CalendarFX]"},{"lineNumber":431,"author":{"gitID":"-"},"content":"** Pros: Can more easily create a custom UI and not rely on Google Calendar."},{"lineNumber":432,"author":{"gitID":"-"},"content":"** Cons: Documentation does not explain how to interface with the UI / Storage. Optimal if used with Google Calendar anyway. In the absense of using Google Calendar, it would require a custom local storage layer for persistant data."},{"lineNumber":433,"author":{"gitID":"-"},"content":""},{"lineNumber":434,"author":{"gitID":"-"},"content":"* **Alternative 3: ** http://jfxtras.org/[JFXtras]"},{"lineNumber":435,"author":{"gitID":"-"},"content":"** Pros: Simple adgenda view with relatively simple API to understand."},{"lineNumber":436,"author":{"gitID":"-"},"content":"** Cons: Not as feature rich as the other options and would require a custom local storage layer to have persistant data."},{"lineNumber":437,"author":{"gitID":"-"},"content":""},{"lineNumber":438,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data Access"},{"lineNumber":439,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use OAuth"},{"lineNumber":440,"author":{"gitID":"-"},"content":"** Pros: Can take advantage of Google\u0027s first-party Calendar APIs for seamless CLI data manipulation."},{"lineNumber":441,"author":{"gitID":"-"},"content":"** Cons: Extremely complicated to configure and set up."},{"lineNumber":442,"author":{"gitID":"-"},"content":""},{"lineNumber":443,"author":{"gitID":"-"},"content":"* **Alternative 2: ** Require the user to export their existing Google Calendar and import it into the application. New events added to the SLAP calendar would not appear in their Google Calendar."},{"lineNumber":444,"author":{"gitID":"-"},"content":"** Pros: Does not require complex authentication and is thus easier to implement. Solution works offline."},{"lineNumber":445,"author":{"gitID":"-"},"content":"** Cons: Requires additional local storage implementations and calendar events are no longer synced to the cloud."},{"lineNumber":446,"author":{"gitID":"-"},"content":""},{"lineNumber":447,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `AddEventCommand` -\u003e `event-add`"},{"lineNumber":448,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use Google\u0027s Calendar API"},{"lineNumber":449,"author":{"gitID":"-"},"content":"** Pros: First-party direct access to Google Calendar data."},{"lineNumber":450,"author":{"gitID":"-"},"content":"** Cons: Requires the user to authenticate our application before this feature works correctly."},{"lineNumber":451,"author":{"gitID":"-"},"content":""},{"lineNumber":452,"author":{"gitID":"-"},"content":"* **Alternative 2: ** Use URL Params"},{"lineNumber":453,"author":{"gitID":"-"},"content":"** Pros: Does not require Oauth and is therefore easier to implement."},{"lineNumber":454,"author":{"gitID":"-"},"content":"** Cons: Requires the user to confirm the event addition through a GUI action, thus not allowing for a true CLI-only experience."},{"lineNumber":455,"author":{"gitID":"-"},"content":""},{"lineNumber":456,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `ViewEventsCommand` -\u003e `calendar`"},{"lineNumber":457,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Open a Webview (either as a new window or within the main application gui)"},{"lineNumber":458,"author":{"gitID":"-"},"content":"** Pros: Low development cost as the webview exists already."},{"lineNumber":459,"author":{"gitID":"-"},"content":"** Cons: Requires an internet connection. Has no CLI-friendly output."},{"lineNumber":460,"author":{"gitID":"-"},"content":""},{"lineNumber":461,"author":{"gitID":"-"},"content":"* **Alternative 2: ** List events in the CLI"},{"lineNumber":462,"author":{"gitID":"-"},"content":"** Pros: CLI-only friendly. Does not require a webview and thus makes the application less resource intensive."},{"lineNumber":463,"author":{"gitID":"-"},"content":"** Cons: Higher development cost as it becomes necessary to format the response from Google\u0027s APIs (and write a new set of logic to parse and format the data.)"},{"lineNumber":464,"author":{"gitID":"-"},"content":""},{"lineNumber":465,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementaiton of `EditEventCommand` -\u003e `event-edit`"},{"lineNumber":466,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use Google\u0027s Calendar API"},{"lineNumber":467,"author":{"gitID":"-"},"content":"** Pros: First-party direct access to Google Calendar data."},{"lineNumber":468,"author":{"gitID":"-"},"content":"** Cons: Requires the user to authenticate our application before this feature works correctly."},{"lineNumber":469,"author":{"gitID":"-"},"content":""},{"lineNumber":470,"author":{"gitID":"-"},"content":"* **Alternative 2: ** Only allow for graphical editing"},{"lineNumber":471,"author":{"gitID":"-"},"content":"** Pros: No implementation required as everything happens through the spawned webview."},{"lineNumber":472,"author":{"gitID":"-"},"content":"** Cons: No CLI-friendly output. More resource intensive on the end-user\u0027s system."},{"lineNumber":473,"author":{"gitID":"-"},"content":""},{"lineNumber":474,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `DeleteEventCommand` -\u003e `event-delete`"},{"lineNumber":475,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use Google\u0027s Calendar API"},{"lineNumber":476,"author":{"gitID":"-"},"content":"** Pros: First-party direct access to Google Calendar data."},{"lineNumber":477,"author":{"gitID":"-"},"content":"** Cons: Requires the user to authenticate our application before this feature works correctly."},{"lineNumber":478,"author":{"gitID":"-"},"content":""},{"lineNumber":479,"author":{"gitID":"-"},"content":"* **Alternative 2: ** Only allow for graphical deleting"},{"lineNumber":480,"author":{"gitID":"-"},"content":"** Pros: No implementation required as everything happens through the spawned webview."},{"lineNumber":481,"author":{"gitID":"-"},"content":"** Cons: No CLI-friendly output. More resource intensive on the end-user\u0027s system."},{"lineNumber":482,"author":{"gitID":"-"},"content":""},{"lineNumber":483,"author":{"gitID":"-"},"content":"// end::calendarview[]"},{"lineNumber":484,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":485,"author":{"gitID":"jaronchan"},"content":"// tag::mapview[]"},{"lineNumber":486,"author":{"gitID":"jaronchan"},"content":"\u003d\u003d\u003d Map View feature"},{"lineNumber":487,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":488,"author":{"gitID":"-"},"content":""},{"lineNumber":489,"author":{"gitID":"jaronchan"},"content":"The map view feature is implemented using `GMapsFX`, an imported library created by https://github.com/rterp/GMapsFX[rterp]. The library contains basic integration of Google Maps APIs into FMXL files. There feature supports the display and retrieval of `Person` addresses as a marker on Google Maps."},{"lineNumber":490,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":491,"author":{"gitID":"jaronchan"},"content":"`GeocodeUtil` residing in `Commons`, in the `Util` folder, facilitates the retrieval of geocode from specified address. Selecting other persons will pan the displayed map to the appropriate location."},{"lineNumber":492,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":493,"author":{"gitID":"jaronchan"},"content":"TODO: INSERT FINALISED DIAGRAM HERE"},{"lineNumber":494,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":495,"author":{"gitID":"jaronchan"},"content":"The Map View feature will involve the UI component as while as the Model component, to retrieve the respective address of selected person."},{"lineNumber":496,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":497,"author":{"gitID":"jaronchan"},"content":"TODO: SECTION INCOMPLETE"},{"lineNumber":498,"author":{"gitID":"-"},"content":""},{"lineNumber":499,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":500,"author":{"gitID":"-"},"content":""},{"lineNumber":501,"author":{"gitID":"jaronchan"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: GUI"},{"lineNumber":502,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":503,"author":{"gitID":"jaronchan"},"content":"* **Alternative 1 (current choice):** `GMapsFX`"},{"lineNumber":504,"author":{"gitID":"jaronchan"},"content":"** Pros: Intuitive to use. Collated various Google Map APIs to be compatible with JavaFX. Sufficient for displaying and controlling simple usage of Google Maps. Once loaded, the map does not require further initialisation calls to load different address."},{"lineNumber":505,"author":{"gitID":"jaronchan"},"content":"** Cons: Unclear documentation. Several methods are designed as lambda expressions but not specified in documentation. Limited flexibility."},{"lineNumber":506,"author":{"gitID":"jaronchan"},"content":"* **Alternative 2:** Use WebView component and load HTML file containing simple embeded Google Maps"},{"lineNumber":507,"author":{"gitID":"jaronchan"},"content":"** Pros: Very easy to implement."},{"lineNumber":508,"author":{"gitID":"jaronchan"},"content":"** Cons: Requires re-loading for each call to view different person. Lacking in control. Application cannot communicate efficiently to loaded pages."},{"lineNumber":509,"author":{"gitID":"jaronchan"},"content":"* **Alternative 3:** Integrate Google Maps APIs directly"},{"lineNumber":510,"author":{"gitID":"jaronchan"},"content":"** Pros: Well-documented. Full-access to Google Maps APIs allows for great flexibility."},{"lineNumber":511,"author":{"gitID":"jaronchan"},"content":"** Cons: Too complicated. Not built/compatible for JavaFX."},{"lineNumber":512,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":513,"author":{"gitID":"jaronchan"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Retrieving Geocode"},{"lineNumber":514,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":515,"author":{"gitID":"jaronchan"},"content":"* **Alternative 1 (current choice):** Use implement `GeocodeUtil` in `Commons`."},{"lineNumber":516,"author":{"gitID":"jaronchan"},"content":"** Pros: Abstracted the calling of geocode request. Accessible across all components."},{"lineNumber":517,"author":{"gitID":"jaronchan"},"content":"** Cons: May have issues with retrieving correct data."},{"lineNumber":518,"author":{"gitID":"jaronchan"},"content":"* **Alternative 2:** Individual calls for `GeocodingService` in each UI controller using GMapsFX."},{"lineNumber":519,"author":{"gitID":"jaronchan"},"content":"** Pros: Easier to implement."},{"lineNumber":520,"author":{"gitID":"jaronchan"},"content":"** Cons: Bad SE practice. Violates proposed architecture."},{"lineNumber":521,"author":{"gitID":"jaronchan"},"content":"// end::mapview[]"},{"lineNumber":522,"author":{"gitID":"-"},"content":""},{"lineNumber":523,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":524,"author":{"gitID":"-"},"content":""},{"lineNumber":525,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":526,"author":{"gitID":"-"},"content":""},{"lineNumber":527,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":528,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":529,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":530,"author":{"gitID":"-"},"content":""},{"lineNumber":531,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":532,"author":{"gitID":"-"},"content":""},{"lineNumber":533,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":534,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":535,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":536,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":537,"author":{"gitID":"-"},"content":""},{"lineNumber":538,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":539,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":540,"author":{"gitID":"-"},"content":""},{"lineNumber":541,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":542,"author":{"gitID":"-"},"content":""},{"lineNumber":543,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":544,"author":{"gitID":"-"},"content":""},{"lineNumber":545,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":546,"author":{"gitID":"-"},"content":""},{"lineNumber":547,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":548,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":549,"author":{"gitID":"-"},"content":""},{"lineNumber":550,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":551,"author":{"gitID":"-"},"content":""},{"lineNumber":552,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":553,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":554,"author":{"gitID":"-"},"content":""},{"lineNumber":555,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":556,"author":{"gitID":"-"},"content":""},{"lineNumber":557,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":558,"author":{"gitID":"-"},"content":""},{"lineNumber":559,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":560,"author":{"gitID":"-"},"content":""},{"lineNumber":561,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":562,"author":{"gitID":"-"},"content":""},{"lineNumber":563,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":564,"author":{"gitID":"-"},"content":""},{"lineNumber":565,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":566,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":567,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":568,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":569,"author":{"gitID":"-"},"content":""},{"lineNumber":570,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":571,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":572,"author":{"gitID":"-"},"content":""},{"lineNumber":573,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":574,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":575,"author":{"gitID":"-"},"content":""},{"lineNumber":576,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":577,"author":{"gitID":"-"},"content":""},{"lineNumber":578,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":579,"author":{"gitID":"-"},"content":""},{"lineNumber":580,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":581,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":582,"author":{"gitID":"-"},"content":""},{"lineNumber":583,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":584,"author":{"gitID":"-"},"content":""},{"lineNumber":585,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":586,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":587,"author":{"gitID":"-"},"content":""},{"lineNumber":588,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":589,"author":{"gitID":"-"},"content":""},{"lineNumber":590,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":591,"author":{"gitID":"-"},"content":""},{"lineNumber":592,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":593,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":594,"author":{"gitID":"-"},"content":""},{"lineNumber":595,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":596,"author":{"gitID":"-"},"content":""},{"lineNumber":597,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":598,"author":{"gitID":"-"},"content":""},{"lineNumber":599,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":600,"author":{"gitID":"-"},"content":""},{"lineNumber":601,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":602,"author":{"gitID":"-"},"content":""},{"lineNumber":603,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":604,"author":{"gitID":"-"},"content":""},{"lineNumber":605,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":606,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":607,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":608,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":609,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":610,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":611,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":612,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":613,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":614,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":615,"author":{"gitID":"-"},"content":""},{"lineNumber":616,"author":{"gitID":"-"},"content":""},{"lineNumber":617,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":618,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":619,"author":{"gitID":"-"},"content":""},{"lineNumber":620,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":621,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":622,"author":{"gitID":"-"},"content":""},{"lineNumber":623,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":624,"author":{"gitID":"-"},"content":""},{"lineNumber":625,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":626,"author":{"gitID":"-"},"content":""},{"lineNumber":627,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":628,"author":{"gitID":"-"},"content":""},{"lineNumber":629,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":630,"author":{"gitID":"-"},"content":""},{"lineNumber":631,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":632,"author":{"gitID":"-"},"content":""},{"lineNumber":633,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":634,"author":{"gitID":"-"},"content":""},{"lineNumber":635,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":636,"author":{"gitID":"-"},"content":""},{"lineNumber":637,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":638,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":639,"author":{"gitID":"-"},"content":""},{"lineNumber":640,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":641,"author":{"gitID":"-"},"content":""},{"lineNumber":642,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":643,"author":{"gitID":"-"},"content":""},{"lineNumber":644,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":645,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":646,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":647,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":648,"author":{"gitID":"-"},"content":""},{"lineNumber":649,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":650,"author":{"gitID":"-"},"content":""},{"lineNumber":651,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":652,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":653,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":654,"author":{"gitID":"-"},"content":""},{"lineNumber":655,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":656,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":657,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":658,"author":{"gitID":"-"},"content":""},{"lineNumber":659,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":660,"author":{"gitID":"-"},"content":""},{"lineNumber":661,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":662,"author":{"gitID":"-"},"content":""},{"lineNumber":663,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":664,"author":{"gitID":"-"},"content":""},{"lineNumber":665,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":666,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":667,"author":{"gitID":"-"},"content":""},{"lineNumber":668,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":669,"author":{"gitID":"-"},"content":""},{"lineNumber":670,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":671,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":672,"author":{"gitID":"-"},"content":""},{"lineNumber":673,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":674,"author":{"gitID":"-"},"content":""},{"lineNumber":675,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":676,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":677,"author":{"gitID":"-"},"content":""},{"lineNumber":678,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":679,"author":{"gitID":"-"},"content":"+"},{"lineNumber":680,"author":{"gitID":"-"},"content":"****"},{"lineNumber":681,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":682,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":683,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":684,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":685,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":686,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":687,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":688,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":689,"author":{"gitID":"-"},"content":"****"},{"lineNumber":690,"author":{"gitID":"-"},"content":""},{"lineNumber":691,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":692,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":693,"author":{"gitID":"-"},"content":""},{"lineNumber":694,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":695,"author":{"gitID":"-"},"content":""},{"lineNumber":696,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":697,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":698,"author":{"gitID":"-"},"content":""},{"lineNumber":699,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":700,"author":{"gitID":"-"},"content":"+"},{"lineNumber":701,"author":{"gitID":"-"},"content":"****"},{"lineNumber":702,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":703,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":704,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":705,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":706,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":707,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":708,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":709,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":710,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":711,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":712,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":713,"author":{"gitID":"-"},"content":"****"},{"lineNumber":714,"author":{"gitID":"-"},"content":""},{"lineNumber":715,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":716,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":717,"author":{"gitID":"-"},"content":""},{"lineNumber":718,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":719,"author":{"gitID":"-"},"content":""},{"lineNumber":720,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":721,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":722,"author":{"gitID":"-"},"content":""},{"lineNumber":723,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":724,"author":{"gitID":"-"},"content":"+"},{"lineNumber":725,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":726,"author":{"gitID":"-"},"content":"+"},{"lineNumber":727,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":728,"author":{"gitID":"-"},"content":"+"},{"lineNumber":729,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":730,"author":{"gitID":"-"},"content":"+"},{"lineNumber":731,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":732,"author":{"gitID":"-"},"content":"+"},{"lineNumber":733,"author":{"gitID":"-"},"content":"****"},{"lineNumber":734,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":735,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":736,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":737,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":738,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":739,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":740,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":741,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":742,"author":{"gitID":"-"},"content":"****"},{"lineNumber":743,"author":{"gitID":"-"},"content":""},{"lineNumber":744,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":745,"author":{"gitID":"-"},"content":"+"},{"lineNumber":746,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":747,"author":{"gitID":"-"},"content":"+"},{"lineNumber":748,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":749,"author":{"gitID":"-"},"content":"+"},{"lineNumber":750,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":751,"author":{"gitID":"-"},"content":"+"},{"lineNumber":752,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":753,"author":{"gitID":"-"},"content":"+"},{"lineNumber":754,"author":{"gitID":"-"},"content":"****"},{"lineNumber":755,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":756,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":757,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":758,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":759,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":760,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":761,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":762,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":763,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":764,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":765,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":766,"author":{"gitID":"-"},"content":"****"},{"lineNumber":767,"author":{"gitID":"-"},"content":""},{"lineNumber":768,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":769,"author":{"gitID":"-"},"content":"+"},{"lineNumber":770,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":771,"author":{"gitID":"-"},"content":"+"},{"lineNumber":772,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":773,"author":{"gitID":"-"},"content":"+"},{"lineNumber":774,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":775,"author":{"gitID":"-"},"content":"+"},{"lineNumber":776,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":777,"author":{"gitID":"-"},"content":"+"},{"lineNumber":778,"author":{"gitID":"-"},"content":"****"},{"lineNumber":779,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":780,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":781,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":782,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":783,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":784,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":785,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":786,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":787,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":788,"author":{"gitID":"-"},"content":"****"},{"lineNumber":789,"author":{"gitID":"-"},"content":""},{"lineNumber":790,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":791,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":792,"author":{"gitID":"-"},"content":""},{"lineNumber":793,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":794,"author":{"gitID":"-"},"content":""},{"lineNumber":795,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":796,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":797,"author":{"gitID":"-"},"content":""},{"lineNumber":798,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":799,"author":{"gitID":"-"},"content":"+"},{"lineNumber":800,"author":{"gitID":"-"},"content":"****"},{"lineNumber":801,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":802,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":803,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":804,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":805,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":806,"author":{"gitID":"-"},"content":"****"},{"lineNumber":807,"author":{"gitID":"-"},"content":""},{"lineNumber":808,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":809,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":810,"author":{"gitID":"-"},"content":""},{"lineNumber":811,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":812,"author":{"gitID":"-"},"content":""},{"lineNumber":813,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":814,"author":{"gitID":"-"},"content":""},{"lineNumber":815,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":816,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":817,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":818,"author":{"gitID":"-"},"content":""},{"lineNumber":819,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":820,"author":{"gitID":"-"},"content":""},{"lineNumber":821,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":822,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":823,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":824,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":825,"author":{"gitID":"-"},"content":""},{"lineNumber":826,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":827,"author":{"gitID":"-"},"content":""},{"lineNumber":828,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":829,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":830,"author":{"gitID":"-"},"content":""},{"lineNumber":831,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":832,"author":{"gitID":"-"},"content":""},{"lineNumber":833,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":834,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":835,"author":{"gitID":"-"},"content":""},{"lineNumber":836,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":837,"author":{"gitID":"-"},"content":""},{"lineNumber":838,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":839,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":840,"author":{"gitID":"-"},"content":""},{"lineNumber":841,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":842,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":843,"author":{"gitID":"-"},"content":""},{"lineNumber":844,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":845,"author":{"gitID":"-"},"content":""},{"lineNumber":846,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":847,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":848,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":849,"author":{"gitID":"-"},"content":""},{"lineNumber":850,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":851,"author":{"gitID":"-"},"content":""},{"lineNumber":852,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":853,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":854,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":855,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":856,"author":{"gitID":"-"},"content":""},{"lineNumber":857,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":858,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":859,"author":{"gitID":"-"},"content":""},{"lineNumber":860,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":861,"author":{"gitID":"-"},"content":""},{"lineNumber":862,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":863,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":864,"author":{"gitID":"-"},"content":""},{"lineNumber":865,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":866,"author":{"gitID":"-"},"content":""},{"lineNumber":867,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":868,"author":{"gitID":"-"},"content":""},{"lineNumber":869,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":870,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":871,"author":{"gitID":"-"},"content":""},{"lineNumber":872,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":873,"author":{"gitID":"-"},"content":""},{"lineNumber":874,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":875,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":876,"author":{"gitID":"-"},"content":""},{"lineNumber":877,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":878,"author":{"gitID":"-"},"content":""},{"lineNumber":879,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":880,"author":{"gitID":"-"},"content":""},{"lineNumber":881,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":882,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":883,"author":{"gitID":"-"},"content":""},{"lineNumber":884,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":885,"author":{"gitID":"-"},"content":""},{"lineNumber":886,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":887,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":888,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":889,"author":{"gitID":"-"},"content":""},{"lineNumber":890,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":891,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":892,"author":{"gitID":"-"},"content":""},{"lineNumber":893,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":894,"author":{"gitID":"-"},"content":""},{"lineNumber":895,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":896,"author":{"gitID":"-"},"content":""},{"lineNumber":897,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":898,"author":{"gitID":"-"},"content":""},{"lineNumber":899,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":900,"author":{"gitID":"-"},"content":""},{"lineNumber":901,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":902,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":903,"author":{"gitID":"-"},"content":""},{"lineNumber":904,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":905,"author":{"gitID":"-"},"content":""},{"lineNumber":906,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":907,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":908,"author":{"gitID":"-"},"content":""},{"lineNumber":909,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":910,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":911,"author":{"gitID":"-"},"content":""},{"lineNumber":912,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":913,"author":{"gitID":"-"},"content":""},{"lineNumber":914,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":915,"author":{"gitID":"-"},"content":""},{"lineNumber":916,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":917,"author":{"gitID":"-"},"content":""},{"lineNumber":918,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":919,"author":{"gitID":"-"},"content":""},{"lineNumber":920,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":921,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":922,"author":{"gitID":"-"},"content":""},{"lineNumber":923,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":924,"author":{"gitID":"-"},"content":""},{"lineNumber":925,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":926,"author":{"gitID":"-"},"content":""},{"lineNumber":927,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":928,"author":{"gitID":"-"},"content":""},{"lineNumber":929,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":930,"author":{"gitID":"-"},"content":""},{"lineNumber":931,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":932,"author":{"gitID":"-"},"content":""},{"lineNumber":933,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":934,"author":{"gitID":"-"},"content":""},{"lineNumber":935,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":936,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":937,"author":{"gitID":"-"},"content":""},{"lineNumber":938,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":939,"author":{"gitID":"-"},"content":""},{"lineNumber":940,"author":{"gitID":"kaisertanqr"},"content":"Our SLAP aims to target social workers who have to visit different less privileged families and/or high-risk"},{"lineNumber":941,"author":{"gitID":"kaisertanqr"},"content":"stay-at-home patients as their daily routine. Social workers regularly make visits to these beneficiaries to assist them"},{"lineNumber":942,"author":{"gitID":"kaisertanqr"},"content":" in overcoming obstacles in their lives."},{"lineNumber":943,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":944,"author":{"gitID":"kaisertanqr"},"content":"Our SLAP will allow them to organise their schedule for the day as they may have to visit multiple locations, take"},{"lineNumber":945,"author":{"gitID":"kaisertanqr"},"content":"copious notes and help in many different ways. For example, a social worker may have to pick a victim of domestic abuse"},{"lineNumber":946,"author":{"gitID":"kaisertanqr"},"content":"up in the morning to take her to the lawyer’s office to file for a divorce from her abusive husband and after taking her"},{"lineNumber":947,"author":{"gitID":"kaisertanqr"},"content":" home, the social worker might have to visit another family to check on a disabled patient."},{"lineNumber":948,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":949,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":950,"author":{"gitID":"-"},"content":"* has a need to manage a significant number of contacts"},{"lineNumber":951,"author":{"gitID":"jaronchan"},"content":"* handles sensitive contacts"},{"lineNumber":952,"author":{"gitID":"jaronchan"},"content":"* plans and manages their daily visits on desktop"},{"lineNumber":953,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":954,"author":{"gitID":"-"},"content":""},{"lineNumber":955,"author":{"gitID":"jaronchan"},"content":"*Value proposition*:"},{"lineNumber":956,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":957,"author":{"gitID":"jaronchan"},"content":"* manage contacts faster than a typical mouse/GUI driven app"},{"lineNumber":958,"author":{"gitID":"jaronchan"},"content":"* easily add and manage calendar events without a full-blown application experience"},{"lineNumber":959,"author":{"gitID":"jaronchan"},"content":"* organize key meetings and keep track of key contacts in one place"},{"lineNumber":960,"author":{"gitID":"jaronchan"},"content":"* able to provide routes from one location to another"},{"lineNumber":961,"author":{"gitID":"jaronchan"},"content":"* uses minimal system resources"},{"lineNumber":962,"author":{"gitID":"jaronchan"},"content":"* more secure than a traditional address book"},{"lineNumber":963,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":964,"author":{"gitID":"kaisertanqr"},"content":"*Feature contribution:*"},{"lineNumber":965,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":966,"author":{"gitID":"kaisertanqr"},"content":"**Jason Manson-Hing**"},{"lineNumber":967,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":968,"author":{"gitID":"kaisertanqr"},"content":"`Major Feature:` Calendar Integration"},{"lineNumber":969,"author":{"gitID":"kaisertanqr"},"content":"* Functional calendar within the application with add/view/delete/edit functionality."},{"lineNumber":970,"author":{"gitID":"kaisertanqr"},"content":"* This is useful for social workers to keep track of all of the things that they have to do now and in the future."},{"lineNumber":971,"author":{"gitID":"kaisertanqr"},"content":"This calendar will be seperate from their personal calendar so as to keep business and personal information seperate."},{"lineNumber":972,"author":{"gitID":"kaisertanqr"},"content":"Additionally, this calendar will integrat with the daily scheduler function to help optimize their time in a day."},{"lineNumber":973,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":974,"author":{"gitID":"kaisertanqr"},"content":"`Minor Feature:` Daily Scheduler (Events)"},{"lineNumber":975,"author":{"gitID":"kaisertanqr"},"content":"* Collates the user\u0027s list of calendar events for the day into an easily consumable view."},{"lineNumber":976,"author":{"gitID":"kaisertanqr"},"content":"* Allows the user to plan the most optimal route of travel for their beneficiary visits for the day and creates the"},{"lineNumber":977,"author":{"gitID":"kaisertanqr"},"content":"optimal schedule for them."},{"lineNumber":978,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":979,"author":{"gitID":"-"},"content":"`Minor Feature:` View Error Log in App"},{"lineNumber":980,"author":{"gitID":"-"},"content":"* Allows the user to view the application\u0027s error from within the application itself."},{"lineNumber":981,"author":{"gitID":"-"},"content":"* This is useful as it allows an advanced user to send the application developer a log of the events that occurred before an exception was encountered."},{"lineNumber":982,"author":{"gitID":"-"},"content":"* This feature is unobtrustive as the information contained within the log is essentially meaningless to everyone except for the developer. Additionally, the command is relatively hard to invoke accidentally, and thus has a low chance of being discovered. Additionally, this command only shows read-only information and thus cannot cause any harm to the system."},{"lineNumber":983,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":984,"author":{"gitID":"kaisertanqr"},"content":"**Chan Jin Jia**"},{"lineNumber":985,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":986,"author":{"gitID":"kaisertanqr"},"content":"`Major Feature:` Map Location and Main UI"},{"lineNumber":987,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":988,"author":{"gitID":"kaisertanqr"},"content":"* As our application aims to better the day-to-day operations of a social worker, integrating maps into our application"},{"lineNumber":989,"author":{"gitID":"kaisertanqr"},"content":"greatly aids their visitation process. This integration aims to make the locating of beneficiaries much more convenient."},{"lineNumber":990,"author":{"gitID":"kaisertanqr"},"content":"* In addition, a cleaner Main UI will be required to better display our Session Logger and Planner (SLAP) for"},{"lineNumber":991,"author":{"gitID":"kaisertanqr"},"content":"Social Worker application as it will contain several major features (beneficiary details, calendar, and daily"},{"lineNumber":992,"author":{"gitID":"kaisertanqr"},"content":"scheduler)."},{"lineNumber":993,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":994,"author":{"gitID":"kaisertanqr"},"content":"`Minor Feature:` Daily Scheduler (Navigation)"},{"lineNumber":995,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":996,"author":{"gitID":"kaisertanqr"},"content":"* Rather than just seeing where the beneficiary is located, the daily scheduler feature of our app will display the"},{"lineNumber":997,"author":{"gitID":"kaisertanqr"},"content":"route between addresses of the beneficiaries on the daily agenda to facilitate ease of movement."},{"lineNumber":998,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":999,"author":{"gitID":"kaisertanqr"},"content":"**Kaiser Tan**"},{"lineNumber":1000,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":1001,"author":{"gitID":"kaisertanqr"},"content":"`Major feature:` Export function with Secure Encryption"},{"lineNumber":1002,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":1003,"author":{"gitID":"kaisertanqr"},"content":"* The storage file of our application will always be encrypted when logged out. User can also export and transfer the"},{"lineNumber":1004,"author":{"gitID":"kaisertanqr"},"content":" storage file securely."},{"lineNumber":1005,"author":{"gitID":"kaisertanqr"},"content":"* The social worker will have many sensitive data which needs to be kept confidential, hence a external user should not"},{"lineNumber":1006,"author":{"gitID":"kaisertanqr"},"content":"be able to see and read the storage file easily, especially when the user is logged out."},{"lineNumber":1007,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":1008,"author":{"gitID":"kaisertanqr"},"content":"`Minor feature:` User Login"},{"lineNumber":1009,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":1010,"author":{"gitID":"kaisertanqr"},"content":"* User can login and logout safely, preventing external users from accessing the SLAP without authorisation"},{"lineNumber":1011,"author":{"gitID":"kaisertanqr"},"content":"* As a social worker, I want to secure my SLAP and only ensure that it is only accessible to me, hence a login function"},{"lineNumber":1012,"author":{"gitID":"kaisertanqr"},"content":"is needed to maintain the C-I-A security framework."},{"lineNumber":1013,"author":{"gitID":"-"},"content":""},{"lineNumber":1014,"author":{"gitID":"-"},"content":"**Clarissa Yong**"},{"lineNumber":1015,"author":{"gitID":"-"},"content":""},{"lineNumber":1016,"author":{"gitID":"-"},"content":"`Major feature:` Organisation of Contacts"},{"lineNumber":1017,"author":{"gitID":"-"},"content":""},{"lineNumber":1018,"author":{"gitID":"-"},"content":"* Allows users to filter, sort, mark contacts as favourite, etc."},{"lineNumber":1019,"author":{"gitID":"-"},"content":"* This allows users to view cases by decreasing priority and view a subset of their contacts quiuckly."},{"lineNumber":1020,"author":{"gitID":"-"},"content":""},{"lineNumber":1021,"author":{"gitID":"-"},"content":"`Minor feature:` Detect Contacts that User Frequently Interacts with"},{"lineNumber":1022,"author":{"gitID":"-"},"content":""},{"lineNumber":1023,"author":{"gitID":"-"},"content":"* Detect and track contacts that the user frequently interacts with and allow user to access this list of contacts."},{"lineNumber":1024,"author":{"gitID":"-"},"content":"* This allows the user to quickly and conveniently retrieve the contact information of these contacts."},{"lineNumber":1025,"author":{"gitID":"-"},"content":""},{"lineNumber":1026,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1027,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":1028,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1029,"author":{"gitID":"-"},"content":""},{"lineNumber":1030,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1031,"author":{"gitID":"-"},"content":""},{"lineNumber":1032,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1033,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1034,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1035,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":1036,"author":{"gitID":"-"},"content":""},{"lineNumber":1037,"author":{"gitID":"-"},"content":"|`* * *` |user |add a new person |"},{"lineNumber":1038,"author":{"gitID":"-"},"content":""},{"lineNumber":1039,"author":{"gitID":"-"},"content":"|`* * *` |user |delete a person |remove entries that I no longer need"},{"lineNumber":1040,"author":{"gitID":"-"},"content":""},{"lineNumber":1041,"author":{"gitID":"-"},"content":"|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"},{"lineNumber":1042,"author":{"gitID":"-"},"content":""},{"lineNumber":1043,"author":{"gitID":"-"},"content":"|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"},{"lineNumber":1044,"author":{"gitID":"-"},"content":""},{"lineNumber":1045,"author":{"gitID":"-"},"content":"|`*` |user with many persons in the address book |sort persons by name |locate a person easily"},{"lineNumber":1046,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1047,"author":{"gitID":"jaronchan"},"content":"|`* * *` |user |add calendar events |keep track of my interactions with my contacts"},{"lineNumber":1048,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1049,"author":{"gitID":"jaronchan"},"content":"|`* * *` |user |view calendar events |quickly check my schedule"},{"lineNumber":1050,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1051,"author":{"gitID":"jaronchan"},"content":"|`* * *` |user |edit/delete calendar events |keep my schedule up to date"},{"lineNumber":1052,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1053,"author":{"gitID":"jaronchan"},"content":"|`*` |advanced user |view error logs in app |help the developer resolve the issues that I encountered"},{"lineNumber":1054,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1055,"author":{"gitID":"jaronchan"},"content":"|`* *` |novice user |get a command correction suggestion |easily fix my mistakes"},{"lineNumber":1056,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1057,"author":{"gitID":"jaronchan"},"content":"|`*` |user |have command autocomplete |enter commands faster"},{"lineNumber":1058,"author":{"gitID":"-"},"content":""},{"lineNumber":1059,"author":{"gitID":"-"},"content":"|`*` |user with many persons in the address book |sort persons by name |locate a person easily"},{"lineNumber":1060,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1061,"author":{"gitID":"jaronchan"},"content":"|`* * *` |user |edit the details of an existing contact |update a contact\u0027s information to the most current information"},{"lineNumber":1062,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1063,"author":{"gitID":"jaronchan"},"content":"|`* *` |user with many persons in the address book |filter contacts by tags |quickly view a subset of my contacts list"},{"lineNumber":1064,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1065,"author":{"gitID":"jaronchan"},"content":"|`* *` |user |sort contacts by tags |view contacts listed in decreasing level of urgency (in terms of their case)/priority"},{"lineNumber":1066,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1067,"author":{"gitID":"jaronchan"},"content":"|`*` |user |get the number of contacts that I have added |see how many contacts I have"},{"lineNumber":1068,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1069,"author":{"gitID":"jaronchan"},"content":"|`*` |advanced user |change the location of my address book |more easily back it up"},{"lineNumber":1070,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1071,"author":{"gitID":"jaronchan"},"content":"|`* *` |user |back up my address book |restore it to a previous state in case of emergency"},{"lineNumber":1072,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1073,"author":{"gitID":"jaronchan"},"content":"|`*` |user |export one or several contacts |easily share them with other address book users"},{"lineNumber":1074,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1075,"author":{"gitID":"jaronchan"},"content":"|`* *` |user |add the address of my contacts |keep track of where they live"},{"lineNumber":1076,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1077,"author":{"gitID":"jaronchan"},"content":"|`* *` |user |view the address of my contacts on a map |visually see where they live"},{"lineNumber":1078,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1079,"author":{"gitID":"jaronchan"},"content":"|`* *` |user |edit/delete the address of my contacts |keep contacts up to date"},{"lineNumber":1080,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1081,"author":{"gitID":"jaronchan"},"content":"|`*` |advanced user |export my entire address book as a CSV or JSON |for use in other applications"},{"lineNumber":1082,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1083,"author":{"gitID":"jaronchan"},"content":"|`* * *` |user |favourite contacts |keep track of particularly important contacts"},{"lineNumber":1084,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1085,"author":{"gitID":"jaronchan"},"content":"|`* *` |user |view frequently interacted-with contacts |quickly access frequently-contacted people"},{"lineNumber":1086,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1087,"author":{"gitID":"jaronchan"},"content":"|`* *` |user |view recently interacted-with contacts |quickly access recently interacted-with people"},{"lineNumber":1088,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1089,"author":{"gitID":"jaronchan"},"content":"|`* * *` |user |switch between views of features |easily navigate the address book features"},{"lineNumber":1090,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1091,"author":{"gitID":"jaronchan"},"content":"|`* * *` |social worker |view a daily schedule of planned visits |know where to visit and order of events for the day"},{"lineNumber":1092,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1093,"author":{"gitID":"jaronchan"},"content":"|`* *` |social worker |view pre-planned route between visit addresses |have a general direction between addresses planned for the day"},{"lineNumber":1094,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1095,"author":{"gitID":"jaronchan"},"content":"|`*` |social worker |export daily schedule as pdf file |view the document outside of the programme and/or be able to print out a physical copy"},{"lineNumber":1096,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1097,"author":{"gitID":"jaronchan"},"content":"|`*` |social worker |view fully-detailed directions between addresses |know what modes of transport to take and navigate the way between addresses"},{"lineNumber":1098,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1099,"author":{"gitID":"jaronchan"},"content":"|`*` |social worker |send reminder email from address book |be efficient with reminding beneficies of scheduled visits"},{"lineNumber":1100,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1101,"author":{"gitID":"jaronchan"},"content":"|`* * *` |secure user |login |gain access to my address book"},{"lineNumber":1102,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1103,"author":{"gitID":"jaronchan"},"content":"|`* * *` |secure user |logout |prevent others from having authorised access to my address book"},{"lineNumber":1104,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1105,"author":{"gitID":"jaronchan"},"content":"|`* * *` |user |change my password |update and secure access to my address book whenever I want"},{"lineNumber":1106,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1107,"author":{"gitID":"jaronchan"},"content":"|`* *` |user |reset my password |still recover my password when I forget what it is"},{"lineNumber":1108,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1109,"author":{"gitID":"jaronchan"},"content":"|`* *` |secure user |encrypt and export my address book |so that I can securely transport my address from one computer to another"},{"lineNumber":1110,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1111,"author":{"gitID":"jaronchan"},"content":"|`*` |secure user |lock my address book |so that it is convenient for me to secure and access my address book while it is still running"},{"lineNumber":1112,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1113,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1114,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1115,"author":{"gitID":"-"},"content":""},{"lineNumber":1116,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1117,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1118,"author":{"gitID":"-"},"content":""},{"lineNumber":1119,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1120,"author":{"gitID":"-"},"content":""},{"lineNumber":1121,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1122,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete person"},{"lineNumber":1123,"author":{"gitID":"-"},"content":""},{"lineNumber":1124,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1125,"author":{"gitID":"-"},"content":""},{"lineNumber":1126,"author":{"gitID":"-"},"content":"1.  User requests to list persons"},{"lineNumber":1127,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":1128,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific person in the list"},{"lineNumber":1129,"author":{"gitID":"-"},"content":"4.  AddressBook deletes the person"},{"lineNumber":1130,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1131,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1132,"author":{"gitID":"-"},"content":""},{"lineNumber":1133,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1134,"author":{"gitID":"-"},"content":""},{"lineNumber":1135,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1136,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1137,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1138,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1139,"author":{"gitID":"-"},"content":""},{"lineNumber":1140,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1141,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1142,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1143,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1144,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1145,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1146,"author":{"gitID":"-"},"content":""},{"lineNumber":1147,"author":{"gitID":"jaronchan"},"content":"[discrete]"},{"lineNumber":1148,"author":{"gitID":"jaronchan"},"content":"\u003d\u003d\u003d Use case: Add Calendar Event"},{"lineNumber":1149,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1150,"author":{"gitID":"jaronchan"},"content":"*MSS*"},{"lineNumber":1151,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1152,"author":{"gitID":"jaronchan"},"content":"1.  User attempts to add calendar event."},{"lineNumber":1153,"author":{"gitID":"jaronchan"},"content":"2.  AddressBook updates calendar events and updates the main window to show the events."},{"lineNumber":1154,"author":{"gitID":"jaronchan"},"content":"+"},{"lineNumber":1155,"author":{"gitID":"jaronchan"},"content":"Use case ends."},{"lineNumber":1156,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1157,"author":{"gitID":"jaronchan"},"content":"*Extensions*"},{"lineNumber":1158,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1159,"author":{"gitID":"jaronchan"},"content":"[none]"},{"lineNumber":1160,"author":{"gitID":"jaronchan"},"content":"* 1a. User formats the command incorrectly."},{"lineNumber":1161,"author":{"gitID":"jaronchan"},"content":"+"},{"lineNumber":1162,"author":{"gitID":"jaronchan"},"content":"[none]"},{"lineNumber":1163,"author":{"gitID":"jaronchan"},"content":"** 1a1. AddressBook notifies user of incorrect syntax."},{"lineNumber":1164,"author":{"gitID":"jaronchan"},"content":"+"},{"lineNumber":1165,"author":{"gitID":"jaronchan"},"content":"Use case ends."},{"lineNumber":1166,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1167,"author":{"gitID":"jaronchan"},"content":"[discrete]"},{"lineNumber":1168,"author":{"gitID":"jaronchan"},"content":"\u003d\u003d\u003d Use case: View Calendar Event"},{"lineNumber":1169,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1170,"author":{"gitID":"jaronchan"},"content":"*MSS*"},{"lineNumber":1171,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1172,"author":{"gitID":"jaronchan"},"content":"1.  User requests to view calendar events."},{"lineNumber":1173,"author":{"gitID":"jaronchan"},"content":"2.  AddressBook retrieves calendar events and updates the main window to show the events."},{"lineNumber":1174,"author":{"gitID":"jaronchan"},"content":"+"},{"lineNumber":1175,"author":{"gitID":"jaronchan"},"content":"Use case ends."},{"lineNumber":1176,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1177,"author":{"gitID":"jaronchan"},"content":"*Extensions*"},{"lineNumber":1178,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1179,"author":{"gitID":"jaronchan"},"content":"[none]"},{"lineNumber":1180,"author":{"gitID":"jaronchan"},"content":"* 1a. There are no calendar events."},{"lineNumber":1181,"author":{"gitID":"jaronchan"},"content":"+"},{"lineNumber":1182,"author":{"gitID":"jaronchan"},"content":"[none]"},{"lineNumber":1183,"author":{"gitID":"jaronchan"},"content":"** 1a1. AddressBook notifies user that there are no events."},{"lineNumber":1184,"author":{"gitID":"jaronchan"},"content":"+"},{"lineNumber":1185,"author":{"gitID":"jaronchan"},"content":"Use case ends."},{"lineNumber":1186,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1187,"author":{"gitID":"jaronchan"},"content":"[discrete]"},{"lineNumber":1188,"author":{"gitID":"jaronchan"},"content":"\u003d\u003d\u003d Use case: Edit Calendar Event"},{"lineNumber":1189,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1190,"author":{"gitID":"jaronchan"},"content":"*MSS*"},{"lineNumber":1191,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1192,"author":{"gitID":"jaronchan"},"content":"1.  User requests to view calendar events."},{"lineNumber":1193,"author":{"gitID":"jaronchan"},"content":"2.  AddressBook retrieves calendar events and updates the main window to show the events."},{"lineNumber":1194,"author":{"gitID":"jaronchan"},"content":"3.  User selects calendar event to edit."},{"lineNumber":1195,"author":{"gitID":"jaronchan"},"content":"4.  AddressBook returns calendar event info as editable string."},{"lineNumber":1196,"author":{"gitID":"jaronchan"},"content":"5.  User edits information and confirms action."},{"lineNumber":1197,"author":{"gitID":"jaronchan"},"content":"6.  AddressBook saves changes and refreshes the main window."},{"lineNumber":1198,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1199,"author":{"gitID":"jaronchan"},"content":"*Extensions*"},{"lineNumber":1200,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1201,"author":{"gitID":"jaronchan"},"content":"[none]"},{"lineNumber":1202,"author":{"gitID":"jaronchan"},"content":"* 1a. There are no calendar events."},{"lineNumber":1203,"author":{"gitID":"jaronchan"},"content":"+"},{"lineNumber":1204,"author":{"gitID":"jaronchan"},"content":"[none]"},{"lineNumber":1205,"author":{"gitID":"jaronchan"},"content":"** 1a1. AddressBook notifies user that there are no events."},{"lineNumber":1206,"author":{"gitID":"jaronchan"},"content":"+"},{"lineNumber":1207,"author":{"gitID":"jaronchan"},"content":"Use case ends."},{"lineNumber":1208,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1209,"author":{"gitID":"jaronchan"},"content":"[discrete]"},{"lineNumber":1210,"author":{"gitID":"jaronchan"},"content":"\u003d\u003d\u003d Use case: Delete Calendar Event"},{"lineNumber":1211,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1212,"author":{"gitID":"jaronchan"},"content":"*MSS*"},{"lineNumber":1213,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1214,"author":{"gitID":"jaronchan"},"content":"1.  User requests to view calendar events."},{"lineNumber":1215,"author":{"gitID":"jaronchan"},"content":"2.  AddressBook retrieves calendar events and updates the main window to show the events."},{"lineNumber":1216,"author":{"gitID":"jaronchan"},"content":"3.  User selects calendar event to delete."},{"lineNumber":1217,"author":{"gitID":"jaronchan"},"content":"4.  AddressBook asks for user confirmation."},{"lineNumber":1218,"author":{"gitID":"jaronchan"},"content":"5.  User confirms action."},{"lineNumber":1219,"author":{"gitID":"jaronchan"},"content":"6.  AddressBook deletes calendar event and refreshes the main window."},{"lineNumber":1220,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1221,"author":{"gitID":"jaronchan"},"content":"*Extensions*"},{"lineNumber":1222,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1223,"author":{"gitID":"jaronchan"},"content":"[none]"},{"lineNumber":1224,"author":{"gitID":"jaronchan"},"content":"* 1a. There are no calendar events."},{"lineNumber":1225,"author":{"gitID":"jaronchan"},"content":"+"},{"lineNumber":1226,"author":{"gitID":"jaronchan"},"content":"[none]"},{"lineNumber":1227,"author":{"gitID":"jaronchan"},"content":"** 1a1. AddressBook notifies user that there are no events."},{"lineNumber":1228,"author":{"gitID":"jaronchan"},"content":"+"},{"lineNumber":1229,"author":{"gitID":"jaronchan"},"content":"Use case ends."},{"lineNumber":1230,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1231,"author":{"gitID":"jaronchan"},"content":"* 3a. User selects invalid index."},{"lineNumber":1232,"author":{"gitID":"jaronchan"},"content":"+"},{"lineNumber":1233,"author":{"gitID":"jaronchan"},"content":"[none]"},{"lineNumber":1234,"author":{"gitID":"jaronchan"},"content":"** 3a1. AddressBook notifies user that they have selected an incorrect index."},{"lineNumber":1235,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1236,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1237,"author":{"gitID":"-"},"content":""},{"lineNumber":1238,"author":{"gitID":"jaronchan"},"content":"[discrete]"},{"lineNumber":1239,"author":{"gitID":"jaronchan"},"content":"\u003d\u003d\u003d Use case: Show Error Log"},{"lineNumber":1240,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1241,"author":{"gitID":"jaronchan"},"content":"*MSS*"},{"lineNumber":1242,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1243,"author":{"gitID":"jaronchan"},"content":"1.  User presses ‘View’ menu option and requests to see error log."},{"lineNumber":1244,"author":{"gitID":"jaronchan"},"content":"2.  AddressBook retrieves error log and displays it in a new window."},{"lineNumber":1245,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1246,"author":{"gitID":"jaronchan"},"content":"*Extensions*"},{"lineNumber":1247,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1248,"author":{"gitID":"jaronchan"},"content":"[none]"},{"lineNumber":1249,"author":{"gitID":"jaronchan"},"content":"* 1a. There is no error log."},{"lineNumber":1250,"author":{"gitID":"jaronchan"},"content":"+"},{"lineNumber":1251,"author":{"gitID":"jaronchan"},"content":"[none]"},{"lineNumber":1252,"author":{"gitID":"jaronchan"},"content":"** 1a1. AddressBook notifies user that there is no error log."},{"lineNumber":1253,"author":{"gitID":"jaronchan"},"content":"+"},{"lineNumber":1254,"author":{"gitID":"jaronchan"},"content":"Use case ends."},{"lineNumber":1255,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1256,"author":{"gitID":"jaronchan"},"content":"[discrete]"},{"lineNumber":1257,"author":{"gitID":"jaronchan"},"content":"\u003d\u003d\u003d Use case: Switch Views of Features"},{"lineNumber":1258,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1259,"author":{"gitID":"jaronchan"},"content":"*MSS*"},{"lineNumber":1260,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1261,"author":{"gitID":"jaronchan"},"content":"1.  User requests to change view (between calendar, details, daily schedule)"},{"lineNumber":1262,"author":{"gitID":"jaronchan"},"content":"2.  AddressBook updates main window to show specified feature"},{"lineNumber":1263,"author":{"gitID":"jaronchan"},"content":"+"},{"lineNumber":1264,"author":{"gitID":"jaronchan"},"content":"Use case ends."},{"lineNumber":1265,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1266,"author":{"gitID":"jaronchan"},"content":"[discrete]"},{"lineNumber":1267,"author":{"gitID":"jaronchan"},"content":"\u003d\u003d\u003d Use case: View Daily Schedule"},{"lineNumber":1268,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1269,"author":{"gitID":"jaronchan"},"content":"*MSS*"},{"lineNumber":1270,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1271,"author":{"gitID":"jaronchan"},"content":"1.  User requests to view daily schedule for specified date."},{"lineNumber":1272,"author":{"gitID":"jaronchan"},"content":"2.  AddressBook retrieves calendar events for the specified date."},{"lineNumber":1273,"author":{"gitID":"jaronchan"},"content":"3.  AddressBook retrieves addresses of specified contacts to be visited on specified day."},{"lineNumber":1274,"author":{"gitID":"jaronchan"},"content":"4.  AddressBook requests for Google navigation between specified addresses."},{"lineNumber":1275,"author":{"gitID":"jaronchan"},"content":"5.  AddressBook updates main window to show the listed events with suggested navigation."},{"lineNumber":1276,"author":{"gitID":"jaronchan"},"content":"6.  User receives automatically generated daily schedule."},{"lineNumber":1277,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1278,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1279,"author":{"gitID":"-"},"content":""},{"lineNumber":1280,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1281,"author":{"gitID":"-"},"content":""},{"lineNumber":1282,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1283,"author":{"gitID":"jaronchan"},"content":"* 1a. Specified date is invalid"},{"lineNumber":1284,"author":{"gitID":"jaronchan"},"content":"+"},{"lineNumber":1285,"author":{"gitID":"jaronchan"},"content":"[none]"},{"lineNumber":1286,"author":{"gitID":"jaronchan"},"content":"** 1a1. AddressBook notifies user of invalid date"},{"lineNumber":1287,"author":{"gitID":"jaronchan"},"content":"+"},{"lineNumber":1288,"author":{"gitID":"jaronchan"},"content":"Use case ends."},{"lineNumber":1289,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1290,"author":{"gitID":"jaronchan"},"content":"* 2a. Specified date has no calendar events."},{"lineNumber":1291,"author":{"gitID":"jaronchan"},"content":"+"},{"lineNumber":1292,"author":{"gitID":"jaronchan"},"content":"[none]"},{"lineNumber":1293,"author":{"gitID":"jaronchan"},"content":"** 2a1. AddressBook notifies user that there are no events."},{"lineNumber":1294,"author":{"gitID":"jaronchan"},"content":"+"},{"lineNumber":1295,"author":{"gitID":"jaronchan"},"content":"Use case ends."},{"lineNumber":1296,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1297,"author":{"gitID":"jaronchan"},"content":"[discrete]"},{"lineNumber":1298,"author":{"gitID":"jaronchan"},"content":"\u003d\u003d\u003d Use case: User Login"},{"lineNumber":1299,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1300,"author":{"gitID":"jaronchan"},"content":"*MSS*"},{"lineNumber":1301,"author":{"gitID":"jaronchan"},"content":"1.  User enters username"},{"lineNumber":1302,"author":{"gitID":"jaronchan"},"content":"2.  AddressBook requests for password"},{"lineNumber":1303,"author":{"gitID":"jaronchan"},"content":"3.  User enters password"},{"lineNumber":1304,"author":{"gitID":"jaronchan"},"content":"4.  AddressBook allows access to UI"},{"lineNumber":1305,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1306,"author":{"gitID":"jaronchan"},"content":"*Extensions*"},{"lineNumber":1307,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1308,"author":{"gitID":"jaronchan"},"content":"[none]"},{"lineNumber":1309,"author":{"gitID":"jaronchan"},"content":"* 1a. AddressBook detects invalid username"},{"lineNumber":1310,"author":{"gitID":"jaronchan"},"content":"+"},{"lineNumber":1311,"author":{"gitID":"jaronchan"},"content":"[none]"},{"lineNumber":1312,"author":{"gitID":"jaronchan"},"content":"** 1a1. AddressBook displays “invalid username” and request for username followed by Step 1"},{"lineNumber":1313,"author":{"gitID":"jaronchan"},"content":"+"},{"lineNumber":1314,"author":{"gitID":"jaronchan"},"content":"Use case resumes at step 1."},{"lineNumber":1315,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1316,"author":{"gitID":"jaronchan"},"content":"*3a. AddressBook detects invalid password"},{"lineNumber":1317,"author":{"gitID":"jaronchan"},"content":"+"},{"lineNumber":1318,"author":{"gitID":"jaronchan"},"content":"[none]"},{"lineNumber":1319,"author":{"gitID":"jaronchan"},"content":"** 3a1. AddressBook displays “invalid password” and request for username followed by Step 1"},{"lineNumber":1320,"author":{"gitID":"jaronchan"},"content":"+"},{"lineNumber":1321,"author":{"gitID":"jaronchan"},"content":"Use case resumes at step 1."},{"lineNumber":1322,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1323,"author":{"gitID":"jaronchan"},"content":"[discrete]"},{"lineNumber":1324,"author":{"gitID":"jaronchan"},"content":"\u003d\u003d\u003d Use case: User Logout"},{"lineNumber":1325,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1326,"author":{"gitID":"jaronchan"},"content":"*MSS*"},{"lineNumber":1327,"author":{"gitID":"jaronchan"},"content":"1.  User attempts to logout"},{"lineNumber":1328,"author":{"gitID":"jaronchan"},"content":"2.  AddressBook prompts for confirmation to logout"},{"lineNumber":1329,"author":{"gitID":"jaronchan"},"content":"3.  User confirms"},{"lineNumber":1330,"author":{"gitID":"jaronchan"},"content":"4.  AddressBook logs the user out"},{"lineNumber":1331,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1332,"author":{"gitID":"jaronchan"},"content":"[discrete]"},{"lineNumber":1333,"author":{"gitID":"jaronchan"},"content":"\u003d\u003d\u003d Use case: Export AddressBook"},{"lineNumber":1334,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1335,"author":{"gitID":"jaronchan"},"content":"*MSS*"},{"lineNumber":1336,"author":{"gitID":"jaronchan"},"content":"1.  User attempts to export AddressBook"},{"lineNumber":1337,"author":{"gitID":"jaronchan"},"content":"2.  AddressBook prompts for directory to export the file"},{"lineNumber":1338,"author":{"gitID":"jaronchan"},"content":"3.  User enters directory"},{"lineNumber":1339,"author":{"gitID":"jaronchan"},"content":"4.  Address prompts for confirmation"},{"lineNumber":1340,"author":{"gitID":"jaronchan"},"content":"5.  User confirms"},{"lineNumber":1341,"author":{"gitID":"jaronchan"},"content":"6.  AddressBook exports storage file into specified directory"},{"lineNumber":1342,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1343,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1344,"author":{"gitID":"-"},"content":""},{"lineNumber":1345,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1346,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1347,"author":{"gitID":"-"},"content":""},{"lineNumber":1348,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1349,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1350,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1351,"author":{"gitID":"jaronchan"},"content":".  Should come with automated unit tests and open source code."},{"lineNumber":1352,"author":{"gitID":"jaronchan"},"content":".  Should preserve user data when the program is restarted or updated."},{"lineNumber":1353,"author":{"gitID":"jaronchan"},"content":".  Should still retain basic functionality even when not connected to the internet."},{"lineNumber":1354,"author":{"gitID":"jaronchan"},"content":".  Should support both 32-bit and 64-bit operating systems."},{"lineNumber":1355,"author":{"gitID":"jaronchan"},"content":".  Should not be graphically intensive for maximum compatibility."},{"lineNumber":1356,"author":{"gitID":"jaronchan"},"content":".  Should be backward compatible with previous versions of AddressBook."},{"lineNumber":1357,"author":{"gitID":"jaronchan"},"content":".  Should have all features and commands documented."},{"lineNumber":1358,"author":{"gitID":"jaronchan"},"content":".  Should be easily usable by an infrequent computer user."},{"lineNumber":1359,"author":{"gitID":"jaronchan"},"content":".  Should gracefully handle incorrect user input and return friendly error messages to the user."},{"lineNumber":1360,"author":{"gitID":"jaronchan"},"content":".  Should be easy to setup and install for an infrequent computer user."},{"lineNumber":1361,"author":{"gitID":"jaronchan"},"content":".  Should not unnecessarily collect data about a user."},{"lineNumber":1362,"author":{"gitID":"jaronchan"},"content":".  Should sanitize sensitive user data before logging."},{"lineNumber":1363,"author":{"gitID":"jaronchan"},"content":".  Should not allow non-users to access storage file"},{"lineNumber":1364,"author":{"gitID":"jaronchan"},"content":".  Should not allow non-users to read storage file"},{"lineNumber":1365,"author":{"gitID":"jaronchan"},"content":".  Should not exit the program without encrypting the storage file"},{"lineNumber":1366,"author":{"gitID":"jaronchan"},"content":".  Should not hang"},{"lineNumber":1367,"author":{"gitID":"-"},"content":""},{"lineNumber":1368,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1369,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1370,"author":{"gitID":"-"},"content":""},{"lineNumber":1371,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1372,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1373,"author":{"gitID":"-"},"content":""},{"lineNumber":1374,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1375,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1376,"author":{"gitID":"-"},"content":""},{"lineNumber":1377,"author":{"gitID":"jaronchan"},"content":"[[infrequent-computer-user]] Infrequent computer user::"},{"lineNumber":1378,"author":{"gitID":"jaronchan"},"content":"A user who does not use a computer regularly (only a couple times a week)"},{"lineNumber":1379,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1380,"author":{"gitID":"jaronchan"},"content":"[[events]] Events::"},{"lineNumber":1381,"author":{"gitID":"jaronchan"},"content":"A pre-planned visit by the social worker to check on beneficiary"},{"lineNumber":1382,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1383,"author":{"gitID":"jaronchan"},"content":"[[daily-schedule]] Daily schedule::"},{"lineNumber":1384,"author":{"gitID":"jaronchan"},"content":"A list of events of a specified date with navigation details"},{"lineNumber":1385,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":1386,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1387,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1388,"author":{"gitID":"-"},"content":""},{"lineNumber":1389,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1390,"author":{"gitID":"-"},"content":""},{"lineNumber":1391,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1392,"author":{"gitID":"-"},"content":""},{"lineNumber":1393,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1394,"author":{"gitID":"-"},"content":""},{"lineNumber":1395,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1396,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1397,"author":{"gitID":"-"},"content":""},{"lineNumber":1398,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1399,"author":{"gitID":"-"},"content":""},{"lineNumber":1400,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1401,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1402,"author":{"gitID":"-"},"content":""},{"lineNumber":1403,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1404,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1405,"author":{"gitID":"-"},"content":""},{"lineNumber":1406,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1407,"author":{"gitID":"-"},"content":""},{"lineNumber":1408,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1409,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1410,"author":{"gitID":"-"},"content":""},{"lineNumber":1411,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1412,"author":{"gitID":"-"},"content":""},{"lineNumber":1413,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1414,"author":{"gitID":"-"},"content":""},{"lineNumber":1415,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1416,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1417,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1418,"author":{"gitID":"-"},"content":""},{"lineNumber":1419,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1420,"author":{"gitID":"-"},"content":""},{"lineNumber":1421,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1422,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1423,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1424,"author":{"gitID":"-"},"content":""},{"lineNumber":1425,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1426,"author":{"gitID":"-"},"content":""},{"lineNumber":1427,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1428,"author":{"gitID":"-"},"content":""},{"lineNumber":1429,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1430,"author":{"gitID":"-"},"content":""},{"lineNumber":1431,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1432,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1433,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1434,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1435,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1436,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1437,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1438,"author":{"gitID":"-"},"content":""},{"lineNumber":1439,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1440,"author":{"gitID":"-"},"content":""},{"lineNumber":1441,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1442,"author":{"gitID":"-"},"content":""},{"lineNumber":1443,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1444,"author":{"gitID":"-"},"content":""},{"lineNumber":1445,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1446,"author":{"gitID":"-"},"content":""},{"lineNumber":1447,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"kaisertanqr":90,"jaronchan":327,"-":1030}},{"path":"src/test/java/seedu/address/logic/commands/HelpCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kaisertanqr"},"content":"//package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":3,"author":{"gitID":"kaisertanqr"},"content":"//import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"kaisertanqr"},"content":"//import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"kaisertanqr"},"content":"//import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"},{"lineNumber":6,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":7,"author":{"gitID":"kaisertanqr"},"content":"//import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"kaisertanqr"},"content":"//import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":10,"author":{"gitID":"kaisertanqr"},"content":"//import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":11,"author":{"gitID":"kaisertanqr"},"content":"//import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":12,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":13,"author":{"gitID":"kaisertanqr"},"content":"//public class HelpCommandTest {"},{"lineNumber":14,"author":{"gitID":"kaisertanqr"},"content":"//    @Rule"},{"lineNumber":15,"author":{"gitID":"kaisertanqr"},"content":"//    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":16,"author":{"gitID":"kaisertanqr"},"content":"//"},{"lineNumber":17,"author":{"gitID":"kaisertanqr"},"content":"//    @Test"},{"lineNumber":18,"author":{"gitID":"kaisertanqr"},"content":"//    public void execute_help_success() {"},{"lineNumber":19,"author":{"gitID":"kaisertanqr"},"content":"//        CommandResult result \u003d new HelpCommand().execute();"},{"lineNumber":20,"author":{"gitID":"kaisertanqr"},"content":"//        assertEquals(SHOWING_HELP_MESSAGE, result.feedbackToUser);"},{"lineNumber":21,"author":{"gitID":"kaisertanqr"},"content":"//        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowHelpRequestEvent);"},{"lineNumber":22,"author":{"gitID":"kaisertanqr"},"content":"//        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":23,"author":{"gitID":"kaisertanqr"},"content":"//    }"},{"lineNumber":24,"author":{"gitID":"kaisertanqr"},"content":"//}"}],"authorContributionMap":{"kaisertanqr":24}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"kaisertanqr"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"kaisertanqr"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"kaisertanqr"},"content":"    public static final String VALID_LOGIN_USERNAME \u003d \"slap\";"},{"lineNumber":35,"author":{"gitID":"kaisertanqr"},"content":"    public static final String VALID_LOGIN_PASSWORD \u003d \"password\";"},{"lineNumber":36,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":37,"author":{"gitID":"kaisertanqr"},"content":"    public static final String LOGIN_VALID_DESC_USERNAME \u003d \" \" + PREFIX_USERNAME + VALID_LOGIN_USERNAME;"},{"lineNumber":38,"author":{"gitID":"kaisertanqr"},"content":"    public static final String LOGIN_VALID_DESC_PASSWORD \u003d \" \" + PREFIX_PASSWORD + VALID_LOGIN_PASSWORD;"},{"lineNumber":39,"author":{"gitID":"kaisertanqr"},"content":"    public static final String LOGIN_INVALID_DESC_USERNAME \u003d \" \" + PREFIX_USERNAME + VALID_LOGIN_USERNAME + \"AAA\";"},{"lineNumber":40,"author":{"gitID":"kaisertanqr"},"content":"    public static final String LOGIN_INVALID_DESC_PASSWORD \u003d \" \" + PREFIX_PASSWORD + VALID_LOGIN_PASSWORD + \"AAA\";"},{"lineNumber":41,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":110,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kaisertanqr":10,"-":156}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"kaisertanqr"},"content":"import seedu.address.model.login.Password;"},{"lineNumber":25,"author":{"gitID":"kaisertanqr"},"content":"import seedu.address.model.login.Username;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"kaisertanqr"},"content":"    private abstract class ModelStub implements Model {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"kaisertanqr"},"content":"        @Override"},{"lineNumber":136,"author":{"gitID":"kaisertanqr"},"content":"        public boolean hasLoggedIn() {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":138,"author":{"gitID":"kaisertanqr"},"content":"            return false;"},{"lineNumber":139,"author":{"gitID":"kaisertanqr"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":141,"author":{"gitID":"kaisertanqr"},"content":"        @Override"},{"lineNumber":142,"author":{"gitID":"kaisertanqr"},"content":"        public void setLoginStatus(boolean status) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":146,"author":{"gitID":"kaisertanqr"},"content":"        @Override"},{"lineNumber":147,"author":{"gitID":"kaisertanqr"},"content":"        public boolean checkLoginCredentials(Username username, Password password) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":149,"author":{"gitID":"kaisertanqr"},"content":"            return false;"},{"lineNumber":150,"author":{"gitID":"kaisertanqr"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kaisertanqr":17,"-":174}},{"path":"src/test/java/seedu/address/logic/commands/LoginCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kaisertanqr"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"kaisertanqr"},"content":"import java.util.function.Predicate;"},{"lineNumber":9,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":14,"author":{"gitID":"kaisertanqr"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitID":"kaisertanqr"},"content":"import seedu.address.model.login.Password;"},{"lineNumber":22,"author":{"gitID":"kaisertanqr"},"content":"import seedu.address.model.login.Username;"},{"lineNumber":23,"author":{"gitID":"kaisertanqr"},"content":"import seedu.address.model.login.exceptions.AlreadyLoggedInException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":28,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":29,"author":{"gitID":"kaisertanqr"},"content":"public class LoginCommandTest {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"kaisertanqr"},"content":"    public void execute_loginAcceptedByModel_loginSuccessful() throws Exception {"},{"lineNumber":36,"author":{"gitID":"kaisertanqr"},"content":"        ModelStubAcceptingLogin modelStub \u003d new ModelStubAcceptingLogin();"},{"lineNumber":37,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":38,"author":{"gitID":"kaisertanqr"},"content":"        LoginAttempt loginAttempt \u003d new LoginAttempt(\"slap\", \"password\");"},{"lineNumber":39,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":40,"author":{"gitID":"kaisertanqr"},"content":"        CommandResult commandResult \u003d getLoginCommandForLoginAttempt(loginAttempt.getUsername(),"},{"lineNumber":41,"author":{"gitID":"kaisertanqr"},"content":"                loginAttempt.getPassword(), modelStub).execute();"},{"lineNumber":42,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":43,"author":{"gitID":"kaisertanqr"},"content":"        assertEquals(LoginCommand.MESSAGE_LOGIN_SUCCESS, commandResult.feedbackToUser);"},{"lineNumber":44,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":46,"author":{"gitID":"kaisertanqr"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"kaisertanqr"},"content":"    public void execute_loginAcceptedByModel_loginFailure() throws Exception {"},{"lineNumber":48,"author":{"gitID":"kaisertanqr"},"content":"        ModelStubAcceptingLogin modelStub \u003d new ModelStubAcceptingLogin();"},{"lineNumber":49,"author":{"gitID":"kaisertanqr"},"content":"        LoginAttempt invalidloginAttempt \u003d new LoginAttempt(\"slapsdad\", \"password\");"},{"lineNumber":50,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":51,"author":{"gitID":"kaisertanqr"},"content":"        CommandResult commandResult \u003d getLoginCommandForLoginAttempt(invalidloginAttempt.getUsername(),"},{"lineNumber":52,"author":{"gitID":"kaisertanqr"},"content":"                invalidloginAttempt.getPassword(), modelStub).execute();"},{"lineNumber":53,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":54,"author":{"gitID":"kaisertanqr"},"content":"        assertEquals(LoginCommand.MESSAGE_LOGIN_SUCCESS, commandResult.feedbackToUser);"},{"lineNumber":55,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":57,"author":{"gitID":"kaisertanqr"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"kaisertanqr"},"content":"    public void execute_alreadyLoggedIn_throwsCommandException() throws Exception {"},{"lineNumber":59,"author":{"gitID":"kaisertanqr"},"content":"        ModelStubThrowingDuplicatePersonException modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":60,"author":{"gitID":"kaisertanqr"},"content":"        LoginAttempt validloginAttempt \u003d new LoginAttempt(\"slap\", \"password\");"},{"lineNumber":61,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":62,"author":{"gitID":"kaisertanqr"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":63,"author":{"gitID":"kaisertanqr"},"content":"        thrown.expectMessage(LoginCommand.MESSAGE_LOGIN_ALREADY);"},{"lineNumber":64,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":65,"author":{"gitID":"kaisertanqr"},"content":"        getLoginCommandForLoginAttempt(validloginAttempt.getUsername(),"},{"lineNumber":66,"author":{"gitID":"kaisertanqr"},"content":"                validloginAttempt.getPassword(), modelStub).execute();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"kaisertanqr"},"content":"    private LoginCommand getLoginCommandForLoginAttempt(Username username, Password password, Model model) {"},{"lineNumber":73,"author":{"gitID":"kaisertanqr"},"content":"        LoginCommand command \u003d new LoginCommand(username, password);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"kaisertanqr"},"content":"    private abstract class ModelStub implements Model {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"kaisertanqr"},"content":"        @Override"},{"lineNumber":117,"author":{"gitID":"kaisertanqr"},"content":"        public boolean hasLoggedIn() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":119,"author":{"gitID":"kaisertanqr"},"content":"            return false;"},{"lineNumber":120,"author":{"gitID":"kaisertanqr"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":122,"author":{"gitID":"kaisertanqr"},"content":"        @Override"},{"lineNumber":123,"author":{"gitID":"kaisertanqr"},"content":"        public void setLoginStatus(boolean status) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":127,"author":{"gitID":"kaisertanqr"},"content":"        @Override"},{"lineNumber":128,"author":{"gitID":"kaisertanqr"},"content":"        public boolean checkLoginCredentials(Username username, Password password) throws AlreadyLoggedInException {"},{"lineNumber":129,"author":{"gitID":"kaisertanqr"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitID":"kaisertanqr"},"content":"            return false;"},{"lineNumber":131,"author":{"gitID":"kaisertanqr"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":140,"author":{"gitID":"kaisertanqr"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"kaisertanqr"},"content":"     * A Model stub that always accepts the login attempt."},{"lineNumber":142,"author":{"gitID":"kaisertanqr"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"kaisertanqr"},"content":"    private class ModelStubAcceptingLogin extends ModelStub {"},{"lineNumber":144,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":145,"author":{"gitID":"kaisertanqr"},"content":"        private boolean loginStatus \u003d false;"},{"lineNumber":146,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":147,"author":{"gitID":"kaisertanqr"},"content":"        @Override"},{"lineNumber":148,"author":{"gitID":"kaisertanqr"},"content":"        public boolean checkLoginCredentials(Username username, Password password) throws AlreadyLoggedInException {"},{"lineNumber":149,"author":{"gitID":"kaisertanqr"},"content":"            requireNonNull(username);"},{"lineNumber":150,"author":{"gitID":"kaisertanqr"},"content":"            requireNonNull(password);"},{"lineNumber":151,"author":{"gitID":"kaisertanqr"},"content":"            setLoginStatus(true);"},{"lineNumber":152,"author":{"gitID":"kaisertanqr"},"content":"            return true;"},{"lineNumber":153,"author":{"gitID":"kaisertanqr"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":155,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":156,"author":{"gitID":"kaisertanqr"},"content":"        @Override"},{"lineNumber":157,"author":{"gitID":"kaisertanqr"},"content":"        public void setLoginStatus(boolean status) {"},{"lineNumber":158,"author":{"gitID":"kaisertanqr"},"content":"            this.loginStatus \u003d true;"},{"lineNumber":159,"author":{"gitID":"kaisertanqr"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":161,"author":{"gitID":"kaisertanqr"},"content":"        @Override"},{"lineNumber":162,"author":{"gitID":"kaisertanqr"},"content":"        public boolean hasLoggedIn() {"},{"lineNumber":163,"author":{"gitID":"kaisertanqr"},"content":"            return this.loginStatus;"},{"lineNumber":164,"author":{"gitID":"kaisertanqr"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":167,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":168,"author":{"gitID":"kaisertanqr"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"kaisertanqr"},"content":"     * A Model stub that always throw a AlreadyLoggedInException when trying to login."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":173,"author":{"gitID":"kaisertanqr"},"content":"        public boolean checkLoginCredentials(Username username, Password password)"},{"lineNumber":174,"author":{"gitID":"kaisertanqr"},"content":"                throws AlreadyLoggedInException {"},{"lineNumber":175,"author":{"gitID":"kaisertanqr"},"content":"            throw new AlreadyLoggedInException();"},{"lineNumber":176,"author":{"gitID":"kaisertanqr"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":178,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":180,"author":{"gitID":"kaisertanqr"},"content":"    private class LoginAttempt {"},{"lineNumber":181,"author":{"gitID":"kaisertanqr"},"content":"        private Username username;"},{"lineNumber":182,"author":{"gitID":"kaisertanqr"},"content":"        private Password password;"},{"lineNumber":183,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":184,"author":{"gitID":"kaisertanqr"},"content":"        public LoginAttempt(String username, String password) {"},{"lineNumber":185,"author":{"gitID":"kaisertanqr"},"content":"            this.username \u003d new Username(username);"},{"lineNumber":186,"author":{"gitID":"kaisertanqr"},"content":"            this.password \u003d new Password(password);"},{"lineNumber":187,"author":{"gitID":"kaisertanqr"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":189,"author":{"gitID":"kaisertanqr"},"content":"        public Password getPassword() {"},{"lineNumber":190,"author":{"gitID":"kaisertanqr"},"content":"            return password;"},{"lineNumber":191,"author":{"gitID":"kaisertanqr"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":193,"author":{"gitID":"kaisertanqr"},"content":"        public Username getUsername() {"},{"lineNumber":194,"author":{"gitID":"kaisertanqr"},"content":"            return username;"},{"lineNumber":195,"author":{"gitID":"kaisertanqr"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":198,"author":{"gitID":"kaisertanqr"},"content":"}"}],"authorContributionMap":{"kaisertanqr":121,"-":77}},{"path":"src/test/java/guitests/guihandles/MainWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Provides a handle for {@code MainWindow}."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class MainWindowHandle extends StageHandle {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    private final PersonListPanelHandle personListPanel;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private final ResultDisplayHandle resultDisplay;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final CommandBoxHandle commandBox;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final StatusBarFooterHandle statusBarFooter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final MainMenuHandle mainMenu;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private final BrowserPanelHandle browserPanel;"},{"lineNumber":16,"author":{"gitID":"jaronchan"},"content":"    private final PersonDetailsPanelHandle personDetailsPanel;"},{"lineNumber":17,"author":{"gitID":"jaronchan"},"content":"    private final CalendarPanelHandle calendarPanel;"},{"lineNumber":18,"author":{"gitID":"jaronchan"},"content":"    private final DailySchedulerPanelHandle dailySchedulerPanel;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public MainWindowHandle(Stage stage) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"},{"lineNumber":29,"author":{"gitID":"jaronchan"},"content":"        personDetailsPanel \u003d new PersonDetailsPanelHandle(getChildNode(PersonDetailsPanelHandle.BROWSER_ID));"},{"lineNumber":30,"author":{"gitID":"jaronchan"},"content":"        calendarPanel \u003d new CalendarPanelHandle(getChildNode(CalendarPanelHandle.BROWSER_ID));"},{"lineNumber":31,"author":{"gitID":"jaronchan"},"content":"        dailySchedulerPanel \u003d new DailySchedulerPanelHandle(getChildNode(DailySchedulerPanelHandle.BROWSER_ID));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return personListPanel;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return resultDisplay;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return commandBox;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return statusBarFooter;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return mainMenu;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return browserPanel;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":58,"author":{"gitID":"jaronchan"},"content":"    public PersonDetailsPanelHandle getPersonDetailsPanel() {"},{"lineNumber":59,"author":{"gitID":"jaronchan"},"content":"        return personDetailsPanel;"},{"lineNumber":60,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":62,"author":{"gitID":"kaisertanqr"},"content":"    public CalendarPanelHandle getCalendarPanel() {"},{"lineNumber":63,"author":{"gitID":"kaisertanqr"},"content":"        return calendarPanel;"},{"lineNumber":64,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public DailySchedulerPanelHandle getDailySchedulerPanel() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return dailySchedulerPanel;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kaisertanqr":4,"jaronchan":12,"-":54}},{"path":"src/test/java/guitests/guihandles/DailySchedulerPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.concurrent.Worker;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebEngine;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A handler for the {@code BrowserPanel} of the UI."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"jaronchan"},"content":"public class DailySchedulerPanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String BROWSER_ID \u003d \"#browser\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private boolean isWebViewLoaded \u003d true;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private URL lastRememberedUrl;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"jaronchan"},"content":"    public DailySchedulerPanelHandle(Node browserPanelNode) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        super(browserPanelNode);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        WebView webView \u003d getChildNode(BROWSER_ID);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        WebEngine engine \u003d webView.getEngine();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        new GuiRobot().interact(() -\u003e engine.getLoadWorker().stateProperty().addListener((obs, oldState, newState) -\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            if (newState \u003d\u003d Worker.State.RUNNING) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"                isWebViewLoaded \u003d false;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            } else if (newState \u003d\u003d Worker.State.SUCCEEDED) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                isWebViewLoaded \u003d true;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        }));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Returns the {@code URL} of the currently loaded page."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public URL getLoadedUrl() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return WebViewUtil.getLoadedUrl(getChildNode(BROWSER_ID));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Remembers the {@code URL} of the currently loaded page."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void rememberUrl() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        lastRememberedUrl \u003d getLoadedUrl();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Returns true if the current {@code URL} is different from the value remembered by the most recent"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * {@code rememberUrl()} call."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public boolean isUrlChanged() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return !lastRememberedUrl.equals(getLoadedUrl());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Returns true if the browser is done loading a page, or if this browser has yet to load any page."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public boolean isLoaded() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return isWebViewLoaded;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jaronchan":2,"-":62}},{"path":"src/test/java/guitests/guihandles/CalendarPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.concurrent.Worker;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebEngine;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A handler for the {@code BrowserPanel} of the UI."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"jaronchan"},"content":"public class CalendarPanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String BROWSER_ID \u003d \"#browser\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private boolean isWebViewLoaded \u003d true;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private URL lastRememberedUrl;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"jaronchan"},"content":"    public CalendarPanelHandle(Node browserPanelNode) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        super(browserPanelNode);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        WebView webView \u003d getChildNode(BROWSER_ID);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        WebEngine engine \u003d webView.getEngine();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        new GuiRobot().interact(() -\u003e engine.getLoadWorker().stateProperty().addListener((obs, oldState, newState) -\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            if (newState \u003d\u003d Worker.State.RUNNING) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"                isWebViewLoaded \u003d false;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            } else if (newState \u003d\u003d Worker.State.SUCCEEDED) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                isWebViewLoaded \u003d true;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        }));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Returns the {@code URL} of the currently loaded page."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public URL getLoadedUrl() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return WebViewUtil.getLoadedUrl(getChildNode(BROWSER_ID));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Remembers the {@code URL} of the currently loaded page."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void rememberUrl() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        lastRememberedUrl \u003d getLoadedUrl();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Returns true if the current {@code URL} is different from the value remembered by the most recent"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * {@code rememberUrl()} call."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public boolean isUrlChanged() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return !lastRememberedUrl.equals(getLoadedUrl());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Returns true if the browser is done loading a page, or if this browser has yet to load any page."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public boolean isLoaded() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return isWebViewLoaded;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jaronchan":2,"-":62}},{"path":"src/test/java/guitests/guihandles/MainMenuHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Provides a handle to the main menu of the app."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class MainMenuHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MENU_BAR_ID \u003d \"#menuBar\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public MainMenuHandle(Node mainMenuNode) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        super(mainMenuNode);"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Opens the {@code HelpWindow} using the menu bar in {@code MainWindow}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void openHelpWindowUsingMenu() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        clickOnMenuItemsSequentially(\"Help\", \"Help\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Opens the {@code HelpWindow} by pressing the shortcut key associated"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * with the menu bar in {@code MainWindow}."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void openHelpWindowUsingAccelerator() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.F1);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"iFallUpHill"},"content":"    //@@author ifalluphill"},{"lineNumber":34,"author":{"gitID":"iFallUpHill"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"iFallUpHill"},"content":"     * Opens the {@code CalendarWindow} using the menu bar in {@code MainWindow}."},{"lineNumber":36,"author":{"gitID":"iFallUpHill"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"iFallUpHill"},"content":"    public void openCalendarWindowUsingMenu() {"},{"lineNumber":38,"author":{"gitID":"iFallUpHill"},"content":"        clickOnMenuItemsSequentially(\"View\", \"Open Calendar\");"},{"lineNumber":39,"author":{"gitID":"iFallUpHill"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":41,"author":{"gitID":"iFallUpHill"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"iFallUpHill"},"content":"     * Opens the {@code CalendarWindow} by pressing the shortcut key associated"},{"lineNumber":43,"author":{"gitID":"iFallUpHill"},"content":"     * with the menu bar in {@code MainWindow}."},{"lineNumber":44,"author":{"gitID":"iFallUpHill"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"iFallUpHill"},"content":"    public void openCalendarWindowUsingAccelerator() {"},{"lineNumber":46,"author":{"gitID":"iFallUpHill"},"content":"        guiRobot.push(KeyCode.F8);"},{"lineNumber":47,"author":{"gitID":"iFallUpHill"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":49,"author":{"gitID":"iFallUpHill"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"iFallUpHill"},"content":"     * Opens the {@code ErrorLog} using the menu bar in {@code MainWindow}."},{"lineNumber":51,"author":{"gitID":"iFallUpHill"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"iFallUpHill"},"content":"    public void openErrorLogUsingMenu() {"},{"lineNumber":53,"author":{"gitID":"iFallUpHill"},"content":"        clickOnMenuItemsSequentially(\"View\", \"Show Error Log\");"},{"lineNumber":54,"author":{"gitID":"iFallUpHill"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"iFallUpHill"},"content":"    //@@author"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Clicks on {@code menuItems} in order."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private void clickOnMenuItemsSequentially(String... menuItems) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Arrays.stream(menuItems).forEach(guiRobot::clickOn);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"iFallUpHill":23,"-":40}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":29,"author":{"gitID":"kaisertanqr"},"content":"    private MainWindow mainWindow;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"kaisertanqr"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":38,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"kaisertanqr"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"kaisertanqr"},"content":"     * Initialise MainWindow"},{"lineNumber":44,"author":{"gitID":"kaisertanqr"},"content":"     * @param mainWindow"},{"lineNumber":45,"author":{"gitID":"kaisertanqr"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"kaisertanqr"},"content":"    public void setMainWindow(MainWindow mainWindow) {"},{"lineNumber":47,"author":{"gitID":"kaisertanqr"},"content":"        this.mainWindow \u003d mainWindow;"},{"lineNumber":48,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":55,"author":{"gitID":"kaisertanqr"},"content":"        if (logic.hasLoggedIn()) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            switch (keyEvent.getCode()) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            case UP:"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                // As up and down buttons will alter the position of the caret,"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                keyEvent.consume();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"                navigateToPreviousInput();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                break;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            case DOWN:"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                keyEvent.consume();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                navigateToNextInput();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                break;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            default:"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                    // let JavaFx handle the keypress"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":116,"author":{"gitID":"kaisertanqr"},"content":"            if (logic.hasLoggedIn()) {"},{"lineNumber":117,"author":{"gitID":"kaisertanqr"},"content":"                mainWindow.showAfterLogin();"},{"lineNumber":118,"author":{"gitID":"kaisertanqr"},"content":"            } else {"},{"lineNumber":119,"author":{"gitID":"kaisertanqr"},"content":"                mainWindow.hideBeforeLogin();"},{"lineNumber":120,"author":{"gitID":"kaisertanqr"},"content":"            }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":125,"author":{"gitID":"kaisertanqr"},"content":"            if (commandResult !\u003d null) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":128,"author":{"gitID":"kaisertanqr"},"content":"            } else {"},{"lineNumber":129,"author":{"gitID":"kaisertanqr"},"content":"                logger.info(\"Result: \" + \"User is not logged in yet.\");"},{"lineNumber":130,"author":{"gitID":"kaisertanqr"},"content":"                raise(new NewResultAvailableEvent(\"You have not logged in yet. Please log in.\"));"},{"lineNumber":131,"author":{"gitID":"kaisertanqr"},"content":"            }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":149,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kaisertanqr":22,"-":150}},{"path":"src/test/java/guitests/guihandles/PersonDetailsPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.concurrent.Worker;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebEngine;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A handler for the {@code BrowserPanel} of the UI."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"jaronchan"},"content":"public class PersonDetailsPanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String BROWSER_ID \u003d \"#browser\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private boolean isWebViewLoaded \u003d true;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private URL lastRememberedUrl;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"jaronchan"},"content":"    public PersonDetailsPanelHandle(Node browserPanelNode) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        super(browserPanelNode);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        WebView webView \u003d getChildNode(BROWSER_ID);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        WebEngine engine \u003d webView.getEngine();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        new GuiRobot().interact(() -\u003e engine.getLoadWorker().stateProperty().addListener((obs, oldState, newState) -\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            if (newState \u003d\u003d Worker.State.RUNNING) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"                isWebViewLoaded \u003d false;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            } else if (newState \u003d\u003d Worker.State.SUCCEEDED) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                isWebViewLoaded \u003d true;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        }));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Returns the {@code URL} of the currently loaded page."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public URL getLoadedUrl() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return WebViewUtil.getLoadedUrl(getChildNode(BROWSER_ID));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Remembers the {@code URL} of the currently loaded page."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void rememberUrl() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        lastRememberedUrl \u003d getLoadedUrl();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Returns true if the current {@code URL} is different from the value remembered by the most recent"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * {@code rememberUrl()} call."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public boolean isUrlChanged() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return !lastRememberedUrl.equals(getLoadedUrl());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Returns true if the browser is done loading a page, or if this browser has yet to load any page."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public boolean isLoaded() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return isWebViewLoaded;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jaronchan":2,"-":62}},{"path":"src/main/java/seedu/address/ui/CalendarWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"iFallUpHill"},"content":"//@@author ifalluphill"},{"lineNumber":2,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":3,"author":{"gitID":"iFallUpHill"},"content":"package seedu.address.ui;"},{"lineNumber":4,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":5,"author":{"gitID":"iFallUpHill"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"iFallUpHill"},"content":"import java.net.URI;"},{"lineNumber":7,"author":{"gitID":"iFallUpHill"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"iFallUpHill"},"content":"import java.util.LinkedHashMap;"},{"lineNumber":9,"author":{"gitID":"iFallUpHill"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"iFallUpHill"},"content":"import java.util.Map;"},{"lineNumber":11,"author":{"gitID":"iFallUpHill"},"content":"import java.util.logging.Logger;"},{"lineNumber":12,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":13,"author":{"gitID":"iFallUpHill"},"content":"import javafx.fxml.FXML;"},{"lineNumber":14,"author":{"gitID":"iFallUpHill"},"content":"import javafx.scene.web.WebEngine;"},{"lineNumber":15,"author":{"gitID":"iFallUpHill"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":16,"author":{"gitID":"iFallUpHill"},"content":"import javafx.stage.Stage;"},{"lineNumber":17,"author":{"gitID":"iFallUpHill"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"iFallUpHill"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":20,"author":{"gitID":"iFallUpHill"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"iFallUpHill"},"content":" * The CalendarWindow Window. Provides the basic window generation,"},{"lineNumber":22,"author":{"gitID":"iFallUpHill"},"content":" * content population, and rendering."},{"lineNumber":23,"author":{"gitID":"iFallUpHill"},"content":" */"},{"lineNumber":24,"author":{"gitID":"iFallUpHill"},"content":"public class CalendarWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":25,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":26,"author":{"gitID":"iFallUpHill"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ErrorsWindow.class);"},{"lineNumber":27,"author":{"gitID":"iFallUpHill"},"content":"    private static final String FXML \u003d \"CalendarWindow.fxml\";"},{"lineNumber":28,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":29,"author":{"gitID":"iFallUpHill"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"iFallUpHill"},"content":"    private WebView browser;"},{"lineNumber":31,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":32,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":33,"author":{"gitID":"iFallUpHill"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"iFallUpHill"},"content":"     * Creates a new CalendarWindow (Overload)."},{"lineNumber":35,"author":{"gitID":"iFallUpHill"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"iFallUpHill"},"content":"     * @param root Stage to use as the root of the CalendarWindow."},{"lineNumber":37,"author":{"gitID":"iFallUpHill"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"iFallUpHill"},"content":"    public CalendarWindow(Stage root, Logic logic) throws IOException {"},{"lineNumber":39,"author":{"gitID":"iFallUpHill"},"content":"        super(FXML, root);"},{"lineNumber":40,"author":{"gitID":"iFallUpHill"},"content":"        WebEngine engine \u003d browser.getEngine();"},{"lineNumber":41,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":42,"author":{"gitID":"iFallUpHill"},"content":"        if (logic.hasLoggedIn()) {"},{"lineNumber":43,"author":{"gitID":"iFallUpHill"},"content":"            String googleCalendarLink \u003d \"https://calendar.google.com/calendar/r\";"},{"lineNumber":44,"author":{"gitID":"iFallUpHill"},"content":"            URI uri \u003d URI.create(googleCalendarLink);"},{"lineNumber":45,"author":{"gitID":"iFallUpHill"},"content":"            Map\u003cString, List\u003cString\u003e\u003e headers \u003d new LinkedHashMap\u003c\u003e();"},{"lineNumber":46,"author":{"gitID":"iFallUpHill"},"content":"            headers.put(\"Set-Cookie\", Arrays.asList(\"name\u003dvalue\"));"},{"lineNumber":47,"author":{"gitID":"iFallUpHill"},"content":"            java.net.CookieHandler.getDefault().put(uri, headers);"},{"lineNumber":48,"author":{"gitID":"iFallUpHill"},"content":"            engine.setUserAgent(engine.getUserAgent().replace(\"Macintosh; \", \"\"));"},{"lineNumber":49,"author":{"gitID":"iFallUpHill"},"content":"            engine.load(googleCalendarLink);"},{"lineNumber":50,"author":{"gitID":"iFallUpHill"},"content":"        } else {"},{"lineNumber":51,"author":{"gitID":"iFallUpHill"},"content":"            browser.getEngine().loadContent(\"\u003chtml\u003eYou must be logged in to view the calendar log.\u003c/html\u003e\","},{"lineNumber":52,"author":{"gitID":"iFallUpHill"},"content":"                    \"text/Html\");"},{"lineNumber":53,"author":{"gitID":"iFallUpHill"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":55,"author":{"gitID":"iFallUpHill"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":57,"author":{"gitID":"iFallUpHill"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"iFallUpHill"},"content":"     * Creates a new CalendarWindow."},{"lineNumber":59,"author":{"gitID":"iFallUpHill"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"iFallUpHill"},"content":"    public CalendarWindow(Logic logic) throws IOException {"},{"lineNumber":61,"author":{"gitID":"iFallUpHill"},"content":"        this(new Stage(), logic);"},{"lineNumber":62,"author":{"gitID":"iFallUpHill"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":64,"author":{"gitID":"iFallUpHill"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"iFallUpHill"},"content":"     * Shows the calendar window."},{"lineNumber":66,"author":{"gitID":"iFallUpHill"},"content":"     * @throws IllegalStateException"},{"lineNumber":67,"author":{"gitID":"iFallUpHill"},"content":"     * \u003cul\u003e"},{"lineNumber":68,"author":{"gitID":"iFallUpHill"},"content":"     *     \u003cli\u003e"},{"lineNumber":69,"author":{"gitID":"iFallUpHill"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":70,"author":{"gitID":"iFallUpHill"},"content":"     *     \u003c/li\u003e"},{"lineNumber":71,"author":{"gitID":"iFallUpHill"},"content":"     *     \u003cli\u003e"},{"lineNumber":72,"author":{"gitID":"iFallUpHill"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":73,"author":{"gitID":"iFallUpHill"},"content":"     *     \u003c/li\u003e"},{"lineNumber":74,"author":{"gitID":"iFallUpHill"},"content":"     *     \u003cli\u003e"},{"lineNumber":75,"author":{"gitID":"iFallUpHill"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":76,"author":{"gitID":"iFallUpHill"},"content":"     *     \u003c/li\u003e"},{"lineNumber":77,"author":{"gitID":"iFallUpHill"},"content":"     *     \u003cli\u003e"},{"lineNumber":78,"author":{"gitID":"iFallUpHill"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":79,"author":{"gitID":"iFallUpHill"},"content":"     *     \u003c/li\u003e"},{"lineNumber":80,"author":{"gitID":"iFallUpHill"},"content":"     * \u003c/ul\u003e"},{"lineNumber":81,"author":{"gitID":"iFallUpHill"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"iFallUpHill"},"content":"    public void show() {"},{"lineNumber":83,"author":{"gitID":"iFallUpHill"},"content":"        logger.fine(\"Showing calendar window.\");"},{"lineNumber":84,"author":{"gitID":"iFallUpHill"},"content":"        getRoot().show();"},{"lineNumber":85,"author":{"gitID":"iFallUpHill"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"iFallUpHill"},"content":"}"},{"lineNumber":87,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":88,"author":{"gitID":"iFallUpHill"},"content":"//@@author"},{"lineNumber":89,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"iFallUpHill":88,"-":1}},{"path":"src/main/java/seedu/address/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"kaisertanqr"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"kaisertanqr"},"content":"    public MainWindow getMainWindow() {"},{"lineNumber":49,"author":{"gitID":"kaisertanqr"},"content":"        return mainWindow;"},{"lineNumber":50,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        //Set the application icon."},{"lineNumber":57,"author":{"gitID":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        mainWindow.releaseResources();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                event.exception);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kaisertanqr":6,"-":120}},{"path":"src/main/java/seedu/address/ui/Ui.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * API of UI component"},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public interface Ui {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    /** Starts the UI (and the App).  */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    void start(Stage primaryStage);"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /** Stops the UI. */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    void stop();"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"kaisertanqr"},"content":"    /** Returns the MainWindow */"},{"lineNumber":17,"author":{"gitID":"kaisertanqr"},"content":"    MainWindow getMainWindow();"},{"lineNumber":18,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kaisertanqr":2,"-":16}},{"path":"src/main/java/seedu/address/ui/PersonDetailsPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"jaronchan"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":3,"author":{"gitID":"jaronchan"},"content":"import static seedu.address.commons.util.GeocodeUtil.getGeocode;"},{"lineNumber":4,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":5,"author":{"gitID":"jaronchan"},"content":"import java.net.URL;"},{"lineNumber":6,"author":{"gitID":"jaronchan"},"content":"import java.util.ResourceBundle;"},{"lineNumber":7,"author":{"gitID":"jaronchan"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":9,"author":{"gitID":"jaronchan"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"jaronchan"},"content":"import com.lynden.gmapsfx.GoogleMapView;"},{"lineNumber":11,"author":{"gitID":"jaronchan"},"content":"import com.lynden.gmapsfx.MapComponentInitializedListener;"},{"lineNumber":12,"author":{"gitID":"jaronchan"},"content":"import com.lynden.gmapsfx.javascript.object.GoogleMap;"},{"lineNumber":13,"author":{"gitID":"jaronchan"},"content":"import com.lynden.gmapsfx.javascript.object.LatLong;"},{"lineNumber":14,"author":{"gitID":"jaronchan"},"content":"import com.lynden.gmapsfx.javascript.object.MapOptions;"},{"lineNumber":15,"author":{"gitID":"jaronchan"},"content":"import com.lynden.gmapsfx.javascript.object.MapTypeIdEnum;"},{"lineNumber":16,"author":{"gitID":"jaronchan"},"content":"import com.lynden.gmapsfx.javascript.object.Marker;"},{"lineNumber":17,"author":{"gitID":"jaronchan"},"content":"import com.lynden.gmapsfx.javascript.object.MarkerOptions;"},{"lineNumber":18,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":21,"author":{"gitID":"jaronchan"},"content":"import javafx.fxml.Initializable;"},{"lineNumber":22,"author":{"gitID":"jaronchan"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"jaronchan"},"content":"//@@author jaronchan"},{"lineNumber":28,"author":{"gitID":"jaronchan"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"jaronchan"},"content":" * The Person Details Panel of the App."},{"lineNumber":30,"author":{"gitID":"jaronchan"},"content":" * To be UPDATED"},{"lineNumber":31,"author":{"gitID":"jaronchan"},"content":" */"},{"lineNumber":32,"author":{"gitID":"jaronchan"},"content":"public class PersonDetailsPanel extends UiPart\u003cRegion\u003e"},{"lineNumber":33,"author":{"gitID":"jaronchan"},"content":"        implements Initializable, MapComponentInitializedListener {"},{"lineNumber":34,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":35,"author":{"gitID":"jaronchan"},"content":"    private static final String FXML \u003d \"PersonDetailsPanel.fxml\";"},{"lineNumber":36,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":37,"author":{"gitID":"jaronchan"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":38,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":39,"author":{"gitID":"jaronchan"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"jaronchan"},"content":"    private GoogleMapView mapView;"},{"lineNumber":41,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":42,"author":{"gitID":"jaronchan"},"content":"    private GoogleMap map;"},{"lineNumber":43,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":44,"author":{"gitID":"jaronchan"},"content":"    public PersonDetailsPanel() {"},{"lineNumber":45,"author":{"gitID":"jaronchan"},"content":"        super(FXML);"},{"lineNumber":46,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":47,"author":{"gitID":"jaronchan"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":48,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":49,"author":{"gitID":"jaronchan"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":50,"author":{"gitID":"jaronchan"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":51,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":53,"author":{"gitID":"jaronchan"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"jaronchan"},"content":"    public void initialize(URL url, ResourceBundle rb) {"},{"lineNumber":55,"author":{"gitID":"jaronchan"},"content":"        mapView.addMapInializedListener(this);"},{"lineNumber":56,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":57,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":59,"author":{"gitID":"jaronchan"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"jaronchan"},"content":"     * Update the map based on new selection event."},{"lineNumber":61,"author":{"gitID":"jaronchan"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":63,"author":{"gitID":"jaronchan"},"content":"    private void loadPersonMapAddress(Person person) {"},{"lineNumber":64,"author":{"gitID":"jaronchan"},"content":"        LatLong addressAsGeocode \u003d getGeocode(person.getAddress().toString());"},{"lineNumber":65,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":66,"author":{"gitID":"jaronchan"},"content":"        mapView.setZoom(17);"},{"lineNumber":67,"author":{"gitID":"jaronchan"},"content":"        mapView.setCenter(addressAsGeocode.getLatitude(), addressAsGeocode.getLongitude());"},{"lineNumber":68,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":69,"author":{"gitID":"jaronchan"},"content":"        MarkerOptions markerOptions \u003d new MarkerOptions();"},{"lineNumber":70,"author":{"gitID":"jaronchan"},"content":"        markerOptions.position(addressAsGeocode);"},{"lineNumber":71,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":72,"author":{"gitID":"jaronchan"},"content":"        Marker marker \u003d new Marker(markerOptions);"},{"lineNumber":73,"author":{"gitID":"jaronchan"},"content":"        map.addMarker(marker);"},{"lineNumber":74,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":75,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":77,"author":{"gitID":"jaronchan"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"jaronchan"},"content":"     * Set the initial properties of the map."},{"lineNumber":79,"author":{"gitID":"jaronchan"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":81,"author":{"gitID":"jaronchan"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"jaronchan"},"content":"    public void mapInitialized() {"},{"lineNumber":83,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":84,"author":{"gitID":"jaronchan"},"content":"        MapOptions mapOptions \u003d new MapOptions();"},{"lineNumber":85,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":86,"author":{"gitID":"jaronchan"},"content":"        mapOptions.center(new LatLong(1.3521, 103.8198))"},{"lineNumber":87,"author":{"gitID":"jaronchan"},"content":"                .mapType(MapTypeIdEnum.ROADMAP)"},{"lineNumber":88,"author":{"gitID":"jaronchan"},"content":"                .mapTypeControl(false)"},{"lineNumber":89,"author":{"gitID":"jaronchan"},"content":"                .overviewMapControl(false)"},{"lineNumber":90,"author":{"gitID":"jaronchan"},"content":"                .panControl(false)"},{"lineNumber":91,"author":{"gitID":"jaronchan"},"content":"                .rotateControl(false)"},{"lineNumber":92,"author":{"gitID":"jaronchan"},"content":"                .scaleControl(false)"},{"lineNumber":93,"author":{"gitID":"jaronchan"},"content":"                .streetViewControl(false)"},{"lineNumber":94,"author":{"gitID":"jaronchan"},"content":"                .zoomControl(false)"},{"lineNumber":95,"author":{"gitID":"jaronchan"},"content":"                .zoom(10);"},{"lineNumber":96,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":97,"author":{"gitID":"jaronchan"},"content":"        map \u003d mapView.createMap(mapOptions);"},{"lineNumber":98,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":100,"author":{"gitID":"jaronchan"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"jaronchan"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":102,"author":{"gitID":"jaronchan"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"jaronchan"},"content":"    public void freeResources() {"},{"lineNumber":104,"author":{"gitID":"jaronchan"},"content":"        map \u003d null;"},{"lineNumber":105,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":107,"author":{"gitID":"jaronchan"},"content":"    @Subscribe"},{"lineNumber":108,"author":{"gitID":"jaronchan"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":109,"author":{"gitID":"jaronchan"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":110,"author":{"gitID":"jaronchan"},"content":"        loadPersonMapAddress(event.getNewSelection().person);"},{"lineNumber":111,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"jaronchan"},"content":"}"}],"authorContributionMap":{"jaronchan":106,"-":6}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":11,"author":{"gitID":"jaronchan"},"content":"import javafx.scene.control.Tab;"},{"lineNumber":12,"author":{"gitID":"jaronchan"},"content":"import javafx.scene.control.TabPane;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowCalendarRequestEvent;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowErrorsRequestEvent;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":25,"author":{"gitID":"jaronchan"},"content":"import seedu.address.commons.events.ui.SwitchFeatureEvent;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":44,"author":{"gitID":"jaronchan"},"content":"    private PersonDetailsPanel personDetailsPanel;"},{"lineNumber":45,"author":{"gitID":"jaronchan"},"content":"    private CalendarPanel calendarPanel;"},{"lineNumber":46,"author":{"gitID":"jaronchan"},"content":"    private DailySchedulerPanel dailySchedulerPanel;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":50,"author":{"gitID":"kaisertanqr"},"content":"    private LoginStatusBar loginStatusBar;"},{"lineNumber":51,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"jaronchan"},"content":"    //@@author jaronchan"},{"lineNumber":57,"author":{"gitID":"jaronchan"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitID":"jaronchan"},"content":"    private StackPane personDetailsPlaceholder;"},{"lineNumber":59,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":60,"author":{"gitID":"jaronchan"},"content":"    @FXML"},{"lineNumber":61,"author":{"gitID":"jaronchan"},"content":"    private StackPane calendarPlaceholder;"},{"lineNumber":62,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":63,"author":{"gitID":"jaronchan"},"content":"    @FXML"},{"lineNumber":64,"author":{"gitID":"jaronchan"},"content":"    private StackPane dailySchedulerPlaceholder;"},{"lineNumber":65,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":66,"author":{"gitID":"jaronchan"},"content":"    @FXML"},{"lineNumber":67,"author":{"gitID":"jaronchan"},"content":"    private TabPane featuresTabPane;"},{"lineNumber":68,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":69,"author":{"gitID":"jaronchan"},"content":"    @FXML"},{"lineNumber":70,"author":{"gitID":"jaronchan"},"content":"    private Tab detailsTab;"},{"lineNumber":71,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":72,"author":{"gitID":"jaronchan"},"content":"    @FXML"},{"lineNumber":73,"author":{"gitID":"jaronchan"},"content":"    private Tab calendarTab;"},{"lineNumber":74,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":75,"author":{"gitID":"jaronchan"},"content":"    @FXML"},{"lineNumber":76,"author":{"gitID":"jaronchan"},"content":"    private Tab dailySchedulerTab;"},{"lineNumber":77,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":78,"author":{"gitID":"jaronchan"},"content":"    //@@author"},{"lineNumber":79,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    private MenuItem viewCalendarMenuItem;"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"kaisertanqr"},"content":"    @FXML"},{"lineNumber":99,"author":{"gitID":"kaisertanqr"},"content":"    private StackPane loginStatusbarPlaceholder;"},{"lineNumber":100,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        setAccelerator(viewCalendarMenuItem, KeyCombination.valueOf(\"F8\"));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":135,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":136,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":137,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":138,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":139,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":140,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":141,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":142,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":143,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":144,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":145,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":146,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":147,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":148,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":161,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":162,"author":{"gitID":"kaisertanqr"},"content":"        loginStatusBar \u003d new LoginStatusBar();"},{"lineNumber":163,"author":{"gitID":"kaisertanqr"},"content":"        loginStatusbarPlaceholder.getChildren().add(loginStatusBar.getRoot());"},{"lineNumber":164,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"jaronchan"},"content":"        personDetailsPanel \u003d new PersonDetailsPanel();"},{"lineNumber":170,"author":{"gitID":"jaronchan"},"content":"        personDetailsPlaceholder.getChildren().add(personDetailsPanel.getRoot());"},{"lineNumber":171,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":172,"author":{"gitID":"jaronchan"},"content":"        calendarPanel \u003d new CalendarPanel();"},{"lineNumber":173,"author":{"gitID":"jaronchan"},"content":"        calendarPlaceholder.getChildren().add(calendarPanel.getRoot());"},{"lineNumber":174,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":175,"author":{"gitID":"jaronchan"},"content":"        dailySchedulerPanel \u003d new DailySchedulerPanel();"},{"lineNumber":176,"author":{"gitID":"jaronchan"},"content":"        dailySchedulerPlaceholder.getChildren().add(dailySchedulerPanel.getRoot());"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":185,"author":{"gitID":"kaisertanqr"},"content":"        commandBox.setMainWindow(this);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":187,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":188,"author":{"gitID":"kaisertanqr"},"content":"        hideBeforeLogin();"},{"lineNumber":189,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"kaisertanqr"},"content":"    //@@author kaisertanqr"},{"lineNumber":197,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":198,"author":{"gitID":"kaisertanqr"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"kaisertanqr"},"content":"     * Hides browser and person list panel."},{"lineNumber":200,"author":{"gitID":"kaisertanqr"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"kaisertanqr"},"content":"    void hideBeforeLogin() {"},{"lineNumber":202,"author":{"gitID":"kaisertanqr"},"content":"        loginStatusBar.updateLoginStatus(false);"},{"lineNumber":203,"author":{"gitID":"kaisertanqr"},"content":"        featuresTabPane.setVisible(false);"},{"lineNumber":204,"author":{"gitID":"kaisertanqr"},"content":"        personDetailsPlaceholder.setVisible(false);"},{"lineNumber":205,"author":{"gitID":"kaisertanqr"},"content":"        calendarPlaceholder.setVisible(false);"},{"lineNumber":206,"author":{"gitID":"kaisertanqr"},"content":"        dailySchedulerPlaceholder.setVisible(false);"},{"lineNumber":207,"author":{"gitID":"kaisertanqr"},"content":"        personListPanelPlaceholder.setVisible(false);"},{"lineNumber":208,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":210,"author":{"gitID":"kaisertanqr"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"kaisertanqr"},"content":"     * Unhide browser and person list panel."},{"lineNumber":212,"author":{"gitID":"kaisertanqr"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"kaisertanqr"},"content":"    public void showAfterLogin() {"},{"lineNumber":214,"author":{"gitID":"kaisertanqr"},"content":"        loginStatusBar.updateLoginStatus(true);"},{"lineNumber":215,"author":{"gitID":"kaisertanqr"},"content":"        featuresTabPane.setVisible(true);"},{"lineNumber":216,"author":{"gitID":"kaisertanqr"},"content":"        personDetailsPlaceholder.setVisible(true);"},{"lineNumber":217,"author":{"gitID":"kaisertanqr"},"content":"        calendarPlaceholder.setVisible(true);"},{"lineNumber":218,"author":{"gitID":"kaisertanqr"},"content":"        dailySchedulerPlaceholder.setVisible(true);"},{"lineNumber":219,"author":{"gitID":"kaisertanqr"},"content":"        personListPanelPlaceholder.setVisible(true);"},{"lineNumber":220,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":222,"author":{"gitID":"kaisertanqr"},"content":"    //@@author"},{"lineNumber":223,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":230,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":236,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":242,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":245,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":250,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"iFallUpHill"},"content":"    //@@author ifalluphill"},{"lineNumber":258,"author":{"gitID":"iFallUpHill"},"content":"    /**"},{"lineNumber":259,"author":{"gitID":"iFallUpHill"},"content":"     * Opens the error window."},{"lineNumber":260,"author":{"gitID":"iFallUpHill"},"content":"     */"},{"lineNumber":261,"author":{"gitID":"iFallUpHill"},"content":"    @FXML"},{"lineNumber":262,"author":{"gitID":"iFallUpHill"},"content":"    public void handleViewErrors() {"},{"lineNumber":263,"author":{"gitID":"iFallUpHill"},"content":"        ErrorsWindow errorsWindow \u003d new ErrorsWindow(logic);"},{"lineNumber":264,"author":{"gitID":"iFallUpHill"},"content":"        errorsWindow.show();"},{"lineNumber":265,"author":{"gitID":"iFallUpHill"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":267,"author":{"gitID":"iFallUpHill"},"content":"    /**"},{"lineNumber":268,"author":{"gitID":"iFallUpHill"},"content":"     * Opens the calendar window."},{"lineNumber":269,"author":{"gitID":"iFallUpHill"},"content":"     */"},{"lineNumber":270,"author":{"gitID":"iFallUpHill"},"content":"    @FXML"},{"lineNumber":271,"author":{"gitID":"iFallUpHill"},"content":"    public void handleViewCalendar() throws IOException {"},{"lineNumber":272,"author":{"gitID":"iFallUpHill"},"content":"        CalendarWindow calendarWindow \u003d new CalendarWindow(logic);"},{"lineNumber":273,"author":{"gitID":"iFallUpHill"},"content":"        calendarWindow.show();"},{"lineNumber":274,"author":{"gitID":"iFallUpHill"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"iFallUpHill"},"content":"    //@@author"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"jaronchan"},"content":"    //@@author jaronchan"},{"lineNumber":282,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":283,"author":{"gitID":"jaronchan"},"content":"    /**"},{"lineNumber":284,"author":{"gitID":"jaronchan"},"content":"     * Handle event of feature tab switching."},{"lineNumber":285,"author":{"gitID":"jaronchan"},"content":"     */"},{"lineNumber":286,"author":{"gitID":"jaronchan"},"content":"    @Subscribe"},{"lineNumber":287,"author":{"gitID":"jaronchan"},"content":"    private void handleFeatureSwitch(SwitchFeatureEvent event) {"},{"lineNumber":288,"author":{"gitID":"jaronchan"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":289,"author":{"gitID":"jaronchan"},"content":"        switch (event.getFeatureTarget()) {"},{"lineNumber":290,"author":{"gitID":"jaronchan"},"content":"        case \"details\":"},{"lineNumber":291,"author":{"gitID":"jaronchan"},"content":"            featuresTabPane.getSelectionModel().select(detailsTab);"},{"lineNumber":292,"author":{"gitID":"jaronchan"},"content":"            break;"},{"lineNumber":293,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":294,"author":{"gitID":"jaronchan"},"content":"        case \"calendar\":"},{"lineNumber":295,"author":{"gitID":"jaronchan"},"content":"            featuresTabPane.getSelectionModel().select(calendarTab);"},{"lineNumber":296,"author":{"gitID":"jaronchan"},"content":"            break;"},{"lineNumber":297,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":298,"author":{"gitID":"jaronchan"},"content":"        case \"scheduler\":"},{"lineNumber":299,"author":{"gitID":"jaronchan"},"content":"            featuresTabPane.getSelectionModel().select(dailySchedulerTab);"},{"lineNumber":300,"author":{"gitID":"jaronchan"},"content":"            break;"},{"lineNumber":301,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":302,"author":{"gitID":"jaronchan"},"content":"        default:"},{"lineNumber":303,"author":{"gitID":"jaronchan"},"content":"            break;"},{"lineNumber":304,"author":{"gitID":"jaronchan"},"content":"        }"},{"lineNumber":305,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":306,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":307,"author":{"gitID":"jaronchan"},"content":"    /**"},{"lineNumber":308,"author":{"gitID":"jaronchan"},"content":"     * Closes the application."},{"lineNumber":309,"author":{"gitID":"jaronchan"},"content":"     */"},{"lineNumber":310,"author":{"gitID":"jaronchan"},"content":"    @FXML"},{"lineNumber":311,"author":{"gitID":"jaronchan"},"content":"    private void handleExit() {"},{"lineNumber":312,"author":{"gitID":"jaronchan"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":313,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":314,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":315,"author":{"gitID":"jaronchan"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":316,"author":{"gitID":"jaronchan"},"content":"        return this.personListPanel;"},{"lineNumber":317,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":318,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":319,"author":{"gitID":"jaronchan"},"content":"    void releaseResources() {"},{"lineNumber":320,"author":{"gitID":"jaronchan"},"content":"        personDetailsPanel.freeResources();"},{"lineNumber":321,"author":{"gitID":"jaronchan"},"content":"        calendarPanel.freeResources();"},{"lineNumber":322,"author":{"gitID":"jaronchan"},"content":"        dailySchedulerPanel.freeResources();"},{"lineNumber":323,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":324,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":325,"author":{"gitID":"jaronchan"},"content":"    @Subscribe"},{"lineNumber":326,"author":{"gitID":"jaronchan"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":327,"author":{"gitID":"jaronchan"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":328,"author":{"gitID":"jaronchan"},"content":"        handleHelp();"},{"lineNumber":329,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":330,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":331,"author":{"gitID":"iFallUpHill"},"content":"    //@@author ifalluphill"},{"lineNumber":332,"author":{"gitID":"iFallUpHill"},"content":"    @Subscribe"},{"lineNumber":333,"author":{"gitID":"iFallUpHill"},"content":"    private void handleShowErrorsEvent(ShowErrorsRequestEvent event) {"},{"lineNumber":334,"author":{"gitID":"iFallUpHill"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":335,"author":{"gitID":"iFallUpHill"},"content":"        handleViewErrors();"},{"lineNumber":336,"author":{"gitID":"iFallUpHill"},"content":"    }"},{"lineNumber":337,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":338,"author":{"gitID":"iFallUpHill"},"content":"    @Subscribe"},{"lineNumber":339,"author":{"gitID":"iFallUpHill"},"content":"    private void handleViewCalendarEvent(ShowCalendarRequestEvent event) throws IOException {"},{"lineNumber":340,"author":{"gitID":"iFallUpHill"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":341,"author":{"gitID":"iFallUpHill"},"content":"        handleViewCalendar();"},{"lineNumber":342,"author":{"gitID":"iFallUpHill"},"content":"    }"},{"lineNumber":343,"author":{"gitID":"iFallUpHill"},"content":"    //@@author"},{"lineNumber":344,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"iFallUpHill":32,"kaisertanqr":40,"jaronchan":89,"-":183}},{"path":"src/main/java/seedu/address/ui/LoginStatusBar.java","lines":[{"lineNumber":1,"author":{"gitID":"kaisertanqr"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":3,"author":{"gitID":"kaisertanqr"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":4,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":9,"author":{"gitID":"kaisertanqr"},"content":"//@@author kaisertanqr"},{"lineNumber":10,"author":{"gitID":"kaisertanqr"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"kaisertanqr"},"content":" * A ui for the login status bar that is displayed at the top of the application."},{"lineNumber":12,"author":{"gitID":"kaisertanqr"},"content":" */"},{"lineNumber":13,"author":{"gitID":"kaisertanqr"},"content":"public class LoginStatusBar extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":15,"author":{"gitID":"kaisertanqr"},"content":"    public static final String LOGIN_STATUS_PREFIX \u003d \"Status: \";"},{"lineNumber":16,"author":{"gitID":"kaisertanqr"},"content":"    public static final String LOGIN_STATUS_TRUE \u003d \"Logged In\";"},{"lineNumber":17,"author":{"gitID":"kaisertanqr"},"content":"    public static final String LOGIN_STATUS_FALSE \u003d \"Not Logged In\";"},{"lineNumber":18,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":19,"author":{"gitID":"kaisertanqr"},"content":"    private static final String FXML \u003d \"LoginStatusBar.fxml\";"},{"lineNumber":20,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":21,"author":{"gitID":"kaisertanqr"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitID":"kaisertanqr"},"content":"    private StatusBar loginStatus;"},{"lineNumber":23,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":24,"author":{"gitID":"kaisertanqr"},"content":"    public LoginStatusBar() {"},{"lineNumber":25,"author":{"gitID":"kaisertanqr"},"content":"        super(FXML);"},{"lineNumber":26,"author":{"gitID":"kaisertanqr"},"content":"        updateLoginStatus(false);"},{"lineNumber":27,"author":{"gitID":"kaisertanqr"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":28,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":30,"author":{"gitID":"kaisertanqr"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"kaisertanqr"},"content":"     * Updates the UI with the login status, {@code status}."},{"lineNumber":32,"author":{"gitID":"kaisertanqr"},"content":"     * @param status"},{"lineNumber":33,"author":{"gitID":"kaisertanqr"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"kaisertanqr"},"content":"    public void updateLoginStatus(boolean status) {"},{"lineNumber":35,"author":{"gitID":"kaisertanqr"},"content":"        if (status) {"},{"lineNumber":36,"author":{"gitID":"kaisertanqr"},"content":"            Platform.runLater(() -\u003e this.loginStatus.setText(LOGIN_STATUS_PREFIX + LOGIN_STATUS_TRUE));"},{"lineNumber":37,"author":{"gitID":"kaisertanqr"},"content":"            loginStatus.setStyle(\"-fx-background-color: rgb(0, 77, 26, 0.5)\");"},{"lineNumber":38,"author":{"gitID":"kaisertanqr"},"content":"        } else {"},{"lineNumber":39,"author":{"gitID":"kaisertanqr"},"content":"            Platform.runLater(() -\u003e this.loginStatus.setText(LOGIN_STATUS_PREFIX + LOGIN_STATUS_FALSE));"},{"lineNumber":40,"author":{"gitID":"kaisertanqr"},"content":"            loginStatus.setStyle(\"-fx-background-color: rgb(77, 0, 0, 0.5)\");"},{"lineNumber":41,"author":{"gitID":"kaisertanqr"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":44,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":45,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":46,"author":{"gitID":"kaisertanqr"},"content":"}"}],"authorContributionMap":{"kaisertanqr":43,"-":3}},{"path":"src/main/java/seedu/address/ui/CalendarPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"jaronchan"},"content":"//@@author jaronchan"},{"lineNumber":19,"author":{"gitID":"jaronchan"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"jaronchan"},"content":" * The Person Details Panel of the App."},{"lineNumber":21,"author":{"gitID":"jaronchan"},"content":" * To be UPDATED"},{"lineNumber":22,"author":{"gitID":"jaronchan"},"content":" */"},{"lineNumber":23,"author":{"gitID":"jaronchan"},"content":"public class CalendarPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":25,"author":{"gitID":"jaronchan"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":26,"author":{"gitID":"jaronchan"},"content":"    public static final String SEARCH_PAGE_URL \u003d"},{"lineNumber":27,"author":{"gitID":"jaronchan"},"content":"            \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"},{"lineNumber":28,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":29,"author":{"gitID":"jaronchan"},"content":"    private static final String FXML \u003d \"CalendarPanel.fxml\";"},{"lineNumber":30,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":31,"author":{"gitID":"jaronchan"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":32,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":33,"author":{"gitID":"jaronchan"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"jaronchan"},"content":"    private WebView browser;"},{"lineNumber":35,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":36,"author":{"gitID":"jaronchan"},"content":"    public CalendarPanel() {"},{"lineNumber":37,"author":{"gitID":"jaronchan"},"content":"        super(FXML);"},{"lineNumber":38,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":39,"author":{"gitID":"jaronchan"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":40,"author":{"gitID":"jaronchan"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":41,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":42,"author":{"gitID":"jaronchan"},"content":"        loadDefaultPage();"},{"lineNumber":43,"author":{"gitID":"jaronchan"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":44,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":46,"author":{"gitID":"jaronchan"},"content":"    private void loadPersonPage(Person person) {"},{"lineNumber":47,"author":{"gitID":"jaronchan"},"content":"        loadPage(SEARCH_PAGE_URL + person.getName().fullName);"},{"lineNumber":48,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":50,"author":{"gitID":"jaronchan"},"content":"    public void loadPage(String url) {"},{"lineNumber":51,"author":{"gitID":"jaronchan"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":52,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":54,"author":{"gitID":"jaronchan"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"jaronchan"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":56,"author":{"gitID":"jaronchan"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"jaronchan"},"content":"    private void loadDefaultPage() {"},{"lineNumber":58,"author":{"gitID":"jaronchan"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":59,"author":{"gitID":"jaronchan"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":60,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":62,"author":{"gitID":"jaronchan"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"jaronchan"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":64,"author":{"gitID":"jaronchan"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"jaronchan"},"content":"    public void freeResources() {"},{"lineNumber":66,"author":{"gitID":"jaronchan"},"content":"        browser \u003d null;"},{"lineNumber":67,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":69,"author":{"gitID":"jaronchan"},"content":"    @Subscribe"},{"lineNumber":70,"author":{"gitID":"jaronchan"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":71,"author":{"gitID":"jaronchan"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":72,"author":{"gitID":"jaronchan"},"content":"        loadPersonPage(event.getNewSelection().person);"},{"lineNumber":73,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"jaronchan"},"content":"}"}],"authorContributionMap":{"jaronchan":57,"-":17}},{"path":"src/main/java/seedu/address/ui/ErrorsWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"iFallUpHill"},"content":"//@@author ifalluphill"},{"lineNumber":2,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":3,"author":{"gitID":"iFallUpHill"},"content":"package seedu.address.ui;"},{"lineNumber":4,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":5,"author":{"gitID":"iFallUpHill"},"content":"import java.io.BufferedReader;"},{"lineNumber":6,"author":{"gitID":"iFallUpHill"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"iFallUpHill"},"content":"import java.io.FileReader;"},{"lineNumber":8,"author":{"gitID":"iFallUpHill"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"iFallUpHill"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":11,"author":{"gitID":"iFallUpHill"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"iFallUpHill"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":13,"author":{"gitID":"iFallUpHill"},"content":"import javafx.stage.Stage;"},{"lineNumber":14,"author":{"gitID":"iFallUpHill"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"iFallUpHill"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":16,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":17,"author":{"gitID":"iFallUpHill"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"iFallUpHill"},"content":" * The ErrorWindow Window. Provides the basic window generation,"},{"lineNumber":19,"author":{"gitID":"iFallUpHill"},"content":" * layout, content population, and rendering."},{"lineNumber":20,"author":{"gitID":"iFallUpHill"},"content":" */"},{"lineNumber":21,"author":{"gitID":"iFallUpHill"},"content":"public class ErrorsWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":22,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":23,"author":{"gitID":"iFallUpHill"},"content":"    private static final String ERROR_LOG_FILE_PATH \u003d \"./addressbook.log.0\";"},{"lineNumber":24,"author":{"gitID":"iFallUpHill"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ErrorsWindow.class);"},{"lineNumber":25,"author":{"gitID":"iFallUpHill"},"content":"    private static final String FXML \u003d \"ErrorsWindow.fxml\";"},{"lineNumber":26,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":27,"author":{"gitID":"iFallUpHill"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"iFallUpHill"},"content":"    private WebView browser;"},{"lineNumber":29,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":30,"author":{"gitID":"iFallUpHill"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"iFallUpHill"},"content":"     * Creates a new ErrorsWindow (Overload)."},{"lineNumber":32,"author":{"gitID":"iFallUpHill"},"content":"     *"},{"lineNumber":33,"author":{"gitID":"iFallUpHill"},"content":"     * @param root Stage to use as the root of the ErrorsWindow."},{"lineNumber":34,"author":{"gitID":"iFallUpHill"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"iFallUpHill"},"content":"    public ErrorsWindow(Stage root, Logic logic) {"},{"lineNumber":36,"author":{"gitID":"iFallUpHill"},"content":"        super(FXML, root);"},{"lineNumber":37,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":38,"author":{"gitID":"iFallUpHill"},"content":"        if (logic.hasLoggedIn()) {"},{"lineNumber":39,"author":{"gitID":"iFallUpHill"},"content":"            String errorLog \u003d getErrorLogAsHtmlString();"},{"lineNumber":40,"author":{"gitID":"iFallUpHill"},"content":"            String errorWindowHtml \u003d createErrorLogPageAsHtmlString(errorLog);"},{"lineNumber":41,"author":{"gitID":"iFallUpHill"},"content":"            browser.getEngine().loadContent(errorWindowHtml, \"text/Html\");"},{"lineNumber":42,"author":{"gitID":"iFallUpHill"},"content":"        } else {"},{"lineNumber":43,"author":{"gitID":"iFallUpHill"},"content":"            browser.getEngine().loadContent(\"\u003chtml\u003eYou must be logged in to view the error log.\u003c/html\u003e\","},{"lineNumber":44,"author":{"gitID":"iFallUpHill"},"content":"                    \"text/Html\");"},{"lineNumber":45,"author":{"gitID":"iFallUpHill"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":47,"author":{"gitID":"iFallUpHill"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":49,"author":{"gitID":"iFallUpHill"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"iFallUpHill"},"content":"     * Creates a new ErrorsWindow."},{"lineNumber":51,"author":{"gitID":"iFallUpHill"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"iFallUpHill"},"content":"    public ErrorsWindow(Logic logic) {"},{"lineNumber":53,"author":{"gitID":"iFallUpHill"},"content":"        this(new Stage(), logic);"},{"lineNumber":54,"author":{"gitID":"iFallUpHill"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":56,"author":{"gitID":"iFallUpHill"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"iFallUpHill"},"content":"     * Formats the error log for use in an Html page."},{"lineNumber":58,"author":{"gitID":"iFallUpHill"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":60,"author":{"gitID":"iFallUpHill"},"content":"    private String getErrorLogAsHtmlString() {"},{"lineNumber":61,"author":{"gitID":"iFallUpHill"},"content":"        StringBuilder errorLog \u003d new StringBuilder();"},{"lineNumber":62,"author":{"gitID":"iFallUpHill"},"content":"        try (BufferedReader reader \u003d new BufferedReader(new FileReader(new File(ERROR_LOG_FILE_PATH)))) {"},{"lineNumber":63,"author":{"gitID":"iFallUpHill"},"content":"            String line;"},{"lineNumber":64,"author":{"gitID":"iFallUpHill"},"content":"            while ((line \u003d reader.readLine()) !\u003d null) {"},{"lineNumber":65,"author":{"gitID":"iFallUpHill"},"content":"                errorLog.append(\"\u003cp\u003e\").append(line).append(\"\u003c/p\u003e\");"},{"lineNumber":66,"author":{"gitID":"iFallUpHill"},"content":"            }"},{"lineNumber":67,"author":{"gitID":"iFallUpHill"},"content":"        } catch (IOException e) {"},{"lineNumber":68,"author":{"gitID":"iFallUpHill"},"content":"            e.printStackTrace();"},{"lineNumber":69,"author":{"gitID":"iFallUpHill"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":71,"author":{"gitID":"iFallUpHill"},"content":"        return errorLog.toString();"},{"lineNumber":72,"author":{"gitID":"iFallUpHill"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":74,"author":{"gitID":"iFallUpHill"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"iFallUpHill"},"content":"     * Generates the Html page content for the errors window."},{"lineNumber":76,"author":{"gitID":"iFallUpHill"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":78,"author":{"gitID":"iFallUpHill"},"content":"    private String createErrorLogPageAsHtmlString(String errorLog) {"},{"lineNumber":79,"author":{"gitID":"iFallUpHill"},"content":"        return  \"\u003cHTML\u003e\""},{"lineNumber":80,"author":{"gitID":"iFallUpHill"},"content":"                    + \"\u003cstyle\u003e\""},{"lineNumber":81,"author":{"gitID":"iFallUpHill"},"content":"                        + \"body { background: #eee; }\""},{"lineNumber":82,"author":{"gitID":"iFallUpHill"},"content":"                        + \"p { margin: 0; }\""},{"lineNumber":83,"author":{"gitID":"iFallUpHill"},"content":"                    + \"\u003c/style\u003e\""},{"lineNumber":84,"author":{"gitID":"iFallUpHill"},"content":"                    + \"\u003cbody\u003e\""},{"lineNumber":85,"author":{"gitID":"iFallUpHill"},"content":"                        + \"\u003cdiv\u003e\" + errorLog + \"\u003c/div\u003e\""},{"lineNumber":86,"author":{"gitID":"iFallUpHill"},"content":"                    + \"\u003c/body\u003e\""},{"lineNumber":87,"author":{"gitID":"iFallUpHill"},"content":"                + \"\u003c/HTML\u003e\";"},{"lineNumber":88,"author":{"gitID":"iFallUpHill"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":90,"author":{"gitID":"iFallUpHill"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"iFallUpHill"},"content":"     * Shows the error window."},{"lineNumber":92,"author":{"gitID":"iFallUpHill"},"content":"     * @throws IllegalStateException"},{"lineNumber":93,"author":{"gitID":"iFallUpHill"},"content":"     * \u003cul\u003e"},{"lineNumber":94,"author":{"gitID":"iFallUpHill"},"content":"     *     \u003cli\u003e"},{"lineNumber":95,"author":{"gitID":"iFallUpHill"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":96,"author":{"gitID":"iFallUpHill"},"content":"     *     \u003c/li\u003e"},{"lineNumber":97,"author":{"gitID":"iFallUpHill"},"content":"     *     \u003cli\u003e"},{"lineNumber":98,"author":{"gitID":"iFallUpHill"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":99,"author":{"gitID":"iFallUpHill"},"content":"     *     \u003c/li\u003e"},{"lineNumber":100,"author":{"gitID":"iFallUpHill"},"content":"     *     \u003cli\u003e"},{"lineNumber":101,"author":{"gitID":"iFallUpHill"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":102,"author":{"gitID":"iFallUpHill"},"content":"     *     \u003c/li\u003e"},{"lineNumber":103,"author":{"gitID":"iFallUpHill"},"content":"     *     \u003cli\u003e"},{"lineNumber":104,"author":{"gitID":"iFallUpHill"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":105,"author":{"gitID":"iFallUpHill"},"content":"     *     \u003c/li\u003e"},{"lineNumber":106,"author":{"gitID":"iFallUpHill"},"content":"     * \u003c/ul\u003e"},{"lineNumber":107,"author":{"gitID":"iFallUpHill"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"iFallUpHill"},"content":"    public void show() {"},{"lineNumber":109,"author":{"gitID":"iFallUpHill"},"content":"        logger.fine(\"Showing error log within the application.\");"},{"lineNumber":110,"author":{"gitID":"iFallUpHill"},"content":"        getRoot().show();"},{"lineNumber":111,"author":{"gitID":"iFallUpHill"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"iFallUpHill"},"content":"}"},{"lineNumber":113,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":114,"author":{"gitID":"iFallUpHill"},"content":"//@@author"}],"authorContributionMap":{"iFallUpHill":114}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":12,"author":{"gitID":"kaisertanqr"},"content":"    public static final String MESSAGE_INVALID_LOGIN_COMMAND_FORMAT \u003d \"Invalid Login format! \\n%1$s\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kaisertanqr":1,"-":13}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowCalendarRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"iFallUpHill"},"content":"//@@author ifalluphill"},{"lineNumber":2,"author":{"gitID":"iFallUpHill"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":4,"author":{"gitID":"iFallUpHill"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":6,"author":{"gitID":"iFallUpHill"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"iFallUpHill"},"content":" * An event requesting to open the calendar."},{"lineNumber":8,"author":{"gitID":"iFallUpHill"},"content":" */"},{"lineNumber":9,"author":{"gitID":"iFallUpHill"},"content":"public class ShowCalendarRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":11,"author":{"gitID":"iFallUpHill"},"content":"    @Override"},{"lineNumber":12,"author":{"gitID":"iFallUpHill"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitID":"iFallUpHill"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":14,"author":{"gitID":"iFallUpHill"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":16,"author":{"gitID":"iFallUpHill"},"content":"}"},{"lineNumber":17,"author":{"gitID":"iFallUpHill"},"content":"//@@author"}],"authorContributionMap":{"iFallUpHill":17}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowErrorsRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"iFallUpHill"},"content":"//@@author ifalluphill"},{"lineNumber":2,"author":{"gitID":"iFallUpHill"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":4,"author":{"gitID":"iFallUpHill"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":6,"author":{"gitID":"iFallUpHill"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"iFallUpHill"},"content":" * An event requesting to view the error log."},{"lineNumber":8,"author":{"gitID":"iFallUpHill"},"content":" */"},{"lineNumber":9,"author":{"gitID":"iFallUpHill"},"content":"public class ShowErrorsRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":11,"author":{"gitID":"iFallUpHill"},"content":"    @Override"},{"lineNumber":12,"author":{"gitID":"iFallUpHill"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitID":"iFallUpHill"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":14,"author":{"gitID":"iFallUpHill"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":16,"author":{"gitID":"iFallUpHill"},"content":"}"},{"lineNumber":17,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":18,"author":{"gitID":"iFallUpHill"},"content":"//@@author"}],"authorContributionMap":{"iFallUpHill":18}},{"path":"src/main/java/seedu/address/commons/util/GeocodeUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"jaronchan"},"content":"//@@author jaronchan"},{"lineNumber":2,"author":{"gitID":"jaronchan"},"content":"package seedu.address.commons.util;"},{"lineNumber":3,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":4,"author":{"gitID":"jaronchan"},"content":"import com.lynden.gmapsfx.javascript.object.LatLong;"},{"lineNumber":5,"author":{"gitID":"jaronchan"},"content":"import com.lynden.gmapsfx.service.geocoding.GeocoderStatus;"},{"lineNumber":6,"author":{"gitID":"jaronchan"},"content":"import com.lynden.gmapsfx.service.geocoding.GeocodingResult;"},{"lineNumber":7,"author":{"gitID":"jaronchan"},"content":"import com.lynden.gmapsfx.service.geocoding.GeocodingService;"},{"lineNumber":8,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":9,"author":{"gitID":"jaronchan"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"jaronchan"},"content":" * Helps with retrieving the geocode from given address."},{"lineNumber":11,"author":{"gitID":"jaronchan"},"content":" */"},{"lineNumber":12,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":13,"author":{"gitID":"jaronchan"},"content":"public class GeocodeUtil {"},{"lineNumber":14,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":15,"author":{"gitID":"jaronchan"},"content":"    private static GeocodingService geocodingService;"},{"lineNumber":16,"author":{"gitID":"jaronchan"},"content":"    private static LatLong geocode;"},{"lineNumber":17,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":18,"author":{"gitID":"jaronchan"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"jaronchan"},"content":"     *  @return geocode"},{"lineNumber":20,"author":{"gitID":"jaronchan"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":22,"author":{"gitID":"jaronchan"},"content":"    public static LatLong getGeocode(String address) {"},{"lineNumber":23,"author":{"gitID":"jaronchan"},"content":"        convertAddressToGeocode(address);"},{"lineNumber":24,"author":{"gitID":"jaronchan"},"content":"        return geocode;"},{"lineNumber":25,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":27,"author":{"gitID":"jaronchan"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"jaronchan"},"content":"     *  Calls on geocodingService to update geocode."},{"lineNumber":29,"author":{"gitID":"jaronchan"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":31,"author":{"gitID":"jaronchan"},"content":"    private static void convertAddressToGeocode(String address) {"},{"lineNumber":32,"author":{"gitID":"jaronchan"},"content":"        geocodingService \u003d new GeocodingService();"},{"lineNumber":33,"author":{"gitID":"jaronchan"},"content":"        geocodingService.geocode(address, (GeocodingResult[] results, GeocoderStatus status) -\u003e {"},{"lineNumber":34,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":35,"author":{"gitID":"jaronchan"},"content":"            geocode \u003d null;"},{"lineNumber":36,"author":{"gitID":"jaronchan"},"content":"            if (status \u003d\u003d GeocoderStatus.ZERO_RESULTS) {"},{"lineNumber":37,"author":{"gitID":"jaronchan"},"content":"                return;"},{"lineNumber":38,"author":{"gitID":"jaronchan"},"content":"            } else if (results.length \u003e 1) {"},{"lineNumber":39,"author":{"gitID":"jaronchan"},"content":"                geocode \u003d new LatLong(results[0].getGeometry().getLocation().getLatitude(),"},{"lineNumber":40,"author":{"gitID":"jaronchan"},"content":"                        results[0].getGeometry().getLocation().getLongitude());"},{"lineNumber":41,"author":{"gitID":"jaronchan"},"content":"            } else {"},{"lineNumber":42,"author":{"gitID":"jaronchan"},"content":"                geocode \u003d new LatLong(results[0].getGeometry().getLocation().getLatitude(),"},{"lineNumber":43,"author":{"gitID":"jaronchan"},"content":"                        results[0].getGeometry().getLocation().getLongitude());"},{"lineNumber":44,"author":{"gitID":"jaronchan"},"content":"            }"},{"lineNumber":45,"author":{"gitID":"jaronchan"},"content":"        });"},{"lineNumber":46,"author":{"gitID":"jaronchan"},"content":"        return;"},{"lineNumber":47,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"jaronchan"},"content":"}"}],"authorContributionMap":{"jaronchan":48}},{"path":"src/main/java/seedu/address/ui/DailySchedulerPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"jaronchan"},"content":"//@@author jaronchan"},{"lineNumber":19,"author":{"gitID":"jaronchan"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"jaronchan"},"content":" * The Person Details Panel of the App."},{"lineNumber":21,"author":{"gitID":"jaronchan"},"content":" * To be UPDATED"},{"lineNumber":22,"author":{"gitID":"jaronchan"},"content":" */"},{"lineNumber":23,"author":{"gitID":"jaronchan"},"content":"public class DailySchedulerPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":25,"author":{"gitID":"jaronchan"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":26,"author":{"gitID":"jaronchan"},"content":"    public static final String SEARCH_PAGE_URL \u003d"},{"lineNumber":27,"author":{"gitID":"jaronchan"},"content":"            \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"},{"lineNumber":28,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":29,"author":{"gitID":"jaronchan"},"content":"    private static final String FXML \u003d \"DailySchedulerPanel.fxml\";"},{"lineNumber":30,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":31,"author":{"gitID":"jaronchan"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":32,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":33,"author":{"gitID":"jaronchan"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"jaronchan"},"content":"    private WebView browser;"},{"lineNumber":35,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":36,"author":{"gitID":"jaronchan"},"content":"    public DailySchedulerPanel() {"},{"lineNumber":37,"author":{"gitID":"jaronchan"},"content":"        super(FXML);"},{"lineNumber":38,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":39,"author":{"gitID":"jaronchan"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":40,"author":{"gitID":"jaronchan"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":41,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":42,"author":{"gitID":"jaronchan"},"content":"        loadDefaultPage();"},{"lineNumber":43,"author":{"gitID":"jaronchan"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":44,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":46,"author":{"gitID":"jaronchan"},"content":"    private void loadPersonPage(Person person) {"},{"lineNumber":47,"author":{"gitID":"jaronchan"},"content":"        loadPage(SEARCH_PAGE_URL + person.getName().fullName);"},{"lineNumber":48,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":50,"author":{"gitID":"jaronchan"},"content":"    public void loadPage(String url) {"},{"lineNumber":51,"author":{"gitID":"jaronchan"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":52,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":54,"author":{"gitID":"jaronchan"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"jaronchan"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":56,"author":{"gitID":"jaronchan"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"jaronchan"},"content":"    private void loadDefaultPage() {"},{"lineNumber":58,"author":{"gitID":"jaronchan"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":59,"author":{"gitID":"jaronchan"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":60,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":62,"author":{"gitID":"jaronchan"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"jaronchan"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":64,"author":{"gitID":"jaronchan"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"jaronchan"},"content":"    public void freeResources() {"},{"lineNumber":66,"author":{"gitID":"jaronchan"},"content":"        browser \u003d null;"},{"lineNumber":67,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":69,"author":{"gitID":"jaronchan"},"content":"    @Subscribe"},{"lineNumber":70,"author":{"gitID":"jaronchan"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":71,"author":{"gitID":"jaronchan"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":72,"author":{"gitID":"jaronchan"},"content":"        loadPersonPage(event.getNewSelection().person);"},{"lineNumber":73,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"jaronchan"},"content":"}"}],"authorContributionMap":{"jaronchan":57,"-":17}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"kaisertanqr"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":28,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":29,"author":{"gitID":"kaisertanqr"},"content":"    /** Returns the execution of the login function only, regardless of commandText */"},{"lineNumber":30,"author":{"gitID":"kaisertanqr"},"content":"    CommandResult executeNoLoginCommands(String commandText, Command command) throws CommandException;"},{"lineNumber":31,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":32,"author":{"gitID":"kaisertanqr"},"content":"    /** Returns whether the user has logged in successfully */"},{"lineNumber":33,"author":{"gitID":"kaisertanqr"},"content":"    boolean hasLoggedIn();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kaisertanqr":7,"-":27}},{"path":"src/main/java/seedu/address/commons/events/ui/SwitchFeatureEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"jaronchan"},"content":" * An event requesting to switch the feature user interface."},{"lineNumber":7,"author":{"gitID":"jaronchan"},"content":" */"},{"lineNumber":8,"author":{"gitID":"jaronchan"},"content":"public class SwitchFeatureEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":10,"author":{"gitID":"jaronchan"},"content":"    private final String featureTarget;"},{"lineNumber":11,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":12,"author":{"gitID":"jaronchan"},"content":"    public SwitchFeatureEvent(String feature) {"},{"lineNumber":13,"author":{"gitID":"jaronchan"},"content":"        this.featureTarget \u003d feature;"},{"lineNumber":14,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"jaronchan"},"content":"    public String getFeatureTarget() {"},{"lineNumber":22,"author":{"gitID":"jaronchan"},"content":"        return featureTarget;"},{"lineNumber":23,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":25,"author":{"gitID":"jaronchan"},"content":"}"}],"authorContributionMap":{"jaronchan":14,"-":11}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CalendarCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ErrorLogCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.LoginCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.LogoutCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.OAuthTestCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SwitchCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        case CalendarCommand.COMMAND_WORD:"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return new CalendarCommand();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        case ErrorLogCommand.COMMAND_WORD:"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            return new ErrorLogCommand();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        case OAuthTestCommand.COMMAND_WORD:"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return new OAuthTestCommand();"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"clarissayong"},"content":"        case FilterCommand.COMMAND_WORD:"},{"lineNumber":105,"author":{"gitID":"clarissayong"},"content":"            return new FilterCommandParser().parse(arguments);"},{"lineNumber":106,"author":{"gitID":"clarissayong"},"content":""},{"lineNumber":107,"author":{"gitID":"jaronchan"},"content":"        case SwitchCommand.COMMAND_WORD:"},{"lineNumber":108,"author":{"gitID":"jaronchan"},"content":"            return new SwitchCommandParser().parse(arguments);"},{"lineNumber":109,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":110,"author":{"gitID":"kaisertanqr"},"content":"        case LoginCommand.COMMAND_WORD:"},{"lineNumber":111,"author":{"gitID":"kaisertanqr"},"content":"            return new LoginCommandParser().parse(arguments);"},{"lineNumber":112,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":113,"author":{"gitID":"kaisertanqr"},"content":"        case LogoutCommand.COMMAND_WORD:"},{"lineNumber":114,"author":{"gitID":"kaisertanqr"},"content":"            return new LogoutCommand();"},{"lineNumber":115,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"clarissayong":3,"kaisertanqr":5,"jaronchan":4,"-":109}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitID":"kaisertanqr"},"content":"    public static final Prefix PREFIX_USERNAME \u003d new Prefix(\"u/\");"},{"lineNumber":15,"author":{"gitID":"kaisertanqr"},"content":"    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"p/\");"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kaisertanqr":2,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"kaisertanqr"},"content":"import seedu.address.model.login.Password;"},{"lineNumber":14,"author":{"gitID":"kaisertanqr"},"content":"import seedu.address.model.login.Username;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":23,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":171,"author":{"gitID":"jaronchan"},"content":"    //@@author jaronchan"},{"lineNumber":172,"author":{"gitID":"jaronchan"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"jaronchan"},"content":"     * Parses a {@code String feature}."},{"lineNumber":174,"author":{"gitID":"jaronchan"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":175,"author":{"gitID":"jaronchan"},"content":"     *"},{"lineNumber":176,"author":{"gitID":"jaronchan"},"content":"     * @throws IllegalValueException if the given {@code feature} is invalid."},{"lineNumber":177,"author":{"gitID":"jaronchan"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"jaronchan"},"content":"    public static String parseFeature(String feature) throws IllegalValueException {"},{"lineNumber":179,"author":{"gitID":"jaronchan"},"content":"        requireNonNull(feature);"},{"lineNumber":180,"author":{"gitID":"jaronchan"},"content":"        String trimmedFeature \u003d feature.trim();"},{"lineNumber":181,"author":{"gitID":"jaronchan"},"content":"        if (!(trimmedFeature.equals(\"details\")"},{"lineNumber":182,"author":{"gitID":"jaronchan"},"content":"                || trimmedFeature.equals(\"calendar\")"},{"lineNumber":183,"author":{"gitID":"jaronchan"},"content":"                || trimmedFeature.equals(\"scheduler\"))) {"},{"lineNumber":184,"author":{"gitID":"jaronchan"},"content":"            throw new IllegalValueException(\"Feature should only be either \\\"details\\\", \\\"calendar\\\" or \\\"scheduler\\\"\");"},{"lineNumber":185,"author":{"gitID":"jaronchan"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"jaronchan"},"content":"        return trimmedFeature;"},{"lineNumber":187,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":189,"author":{"gitID":"jaronchan"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"jaronchan"},"content":"     * Parses a {@code String username} into an {@code Username}."},{"lineNumber":191,"author":{"gitID":"jaronchan"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":192,"author":{"gitID":"jaronchan"},"content":"     *"},{"lineNumber":193,"author":{"gitID":"jaronchan"},"content":"     * @throws IllegalValueException if the given {@code username} is invalid."},{"lineNumber":194,"author":{"gitID":"jaronchan"},"content":"     */"},{"lineNumber":195,"author":{"gitID":"jaronchan"},"content":"    public static Username parseUsername(String username) throws IllegalValueException {"},{"lineNumber":196,"author":{"gitID":"jaronchan"},"content":"        requireNonNull(username);"},{"lineNumber":197,"author":{"gitID":"jaronchan"},"content":"        String trimmedUsername \u003d username.trim();"},{"lineNumber":198,"author":{"gitID":"jaronchan"},"content":"        if (!Username.isValidUsername(trimmedUsername)) {"},{"lineNumber":199,"author":{"gitID":"jaronchan"},"content":"            throw new IllegalValueException(Username.MESSAGE_USERNAME_CONSTRAINTS);"},{"lineNumber":200,"author":{"gitID":"jaronchan"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"jaronchan"},"content":"        return new Username(trimmedUsername);"},{"lineNumber":202,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":204,"author":{"gitID":"jaronchan"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"jaronchan"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cUsername\u003e} if {@code name} is present."},{"lineNumber":206,"author":{"gitID":"jaronchan"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":207,"author":{"gitID":"jaronchan"},"content":"     */"},{"lineNumber":208,"author":{"gitID":"jaronchan"},"content":"    public static Optional\u003cUsername\u003e parseUsername(Optional\u003cString\u003e username) throws IllegalValueException {"},{"lineNumber":209,"author":{"gitID":"jaronchan"},"content":"        requireNonNull(username);"},{"lineNumber":210,"author":{"gitID":"jaronchan"},"content":"        return username.isPresent() ? Optional.of(parseUsername(username.get())) : Optional.empty();"},{"lineNumber":211,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":213,"author":{"gitID":"jaronchan"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"jaronchan"},"content":"     * Parses a {@code String password} into an {@code Password}."},{"lineNumber":215,"author":{"gitID":"jaronchan"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":216,"author":{"gitID":"jaronchan"},"content":"     *"},{"lineNumber":217,"author":{"gitID":"jaronchan"},"content":"     * @throws IllegalValueException if the given {@code password} is invalid."},{"lineNumber":218,"author":{"gitID":"jaronchan"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"jaronchan"},"content":"    public static Password parsePassword(String password) throws IllegalValueException {"},{"lineNumber":220,"author":{"gitID":"jaronchan"},"content":"        requireNonNull(password);"},{"lineNumber":221,"author":{"gitID":"jaronchan"},"content":"        String trimmedPassword \u003d password.trim();"},{"lineNumber":222,"author":{"gitID":"jaronchan"},"content":"        if (!Password.isValidPassword(trimmedPassword)) {"},{"lineNumber":223,"author":{"gitID":"jaronchan"},"content":"            throw new IllegalValueException(Password.MESSAGE_PASSWORD_CONSTRAINTS);"},{"lineNumber":224,"author":{"gitID":"jaronchan"},"content":"        }"},{"lineNumber":225,"author":{"gitID":"jaronchan"},"content":"        return new Password(trimmedPassword);"},{"lineNumber":226,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":228,"author":{"gitID":"jaronchan"},"content":"    /**"},{"lineNumber":229,"author":{"gitID":"jaronchan"},"content":"     * Parses a {@code Optional\u003cString\u003e password} into an {@code Optional\u003cPassword\u003e} if {@code name} is present."},{"lineNumber":230,"author":{"gitID":"jaronchan"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":231,"author":{"gitID":"jaronchan"},"content":"     */"},{"lineNumber":232,"author":{"gitID":"jaronchan"},"content":"    public static Optional\u003cPassword\u003e parsePassword(Optional\u003cString\u003e password) throws IllegalValueException {"},{"lineNumber":233,"author":{"gitID":"jaronchan"},"content":"        requireNonNull(password);"},{"lineNumber":234,"author":{"gitID":"jaronchan"},"content":"        return password.isPresent() ? Optional.of(parsePassword(password.get())) : Optional.empty();"},{"lineNumber":235,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"jaronchan"},"content":"}"}],"authorContributionMap":{"kaisertanqr":2,"jaronchan":67,"-":167}},{"path":"src/main/java/seedu/address/logic/commands/FilterCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"clarissayong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"clarissayong"},"content":""},{"lineNumber":3,"author":{"gitID":"clarissayong"},"content":"import seedu.address.model.tag.TagPredicate;"},{"lineNumber":4,"author":{"gitID":"clarissayong"},"content":""},{"lineNumber":5,"author":{"gitID":"clarissayong"},"content":""},{"lineNumber":6,"author":{"gitID":"clarissayong"},"content":"//@@author {clarissayong}"},{"lineNumber":7,"author":{"gitID":"clarissayong"},"content":""},{"lineNumber":8,"author":{"gitID":"clarissayong"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"clarissayong"},"content":" * Finds and lists all persons in address book who is tagged with the provided keyword."},{"lineNumber":10,"author":{"gitID":"clarissayong"},"content":" * Keyword matching is case sensitive."},{"lineNumber":11,"author":{"gitID":"clarissayong"},"content":" */"},{"lineNumber":12,"author":{"gitID":"clarissayong"},"content":""},{"lineNumber":13,"author":{"gitID":"clarissayong"},"content":"public class FilterCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"clarissayong"},"content":""},{"lineNumber":15,"author":{"gitID":"clarissayong"},"content":"    public static final String COMMAND_WORD \u003d \"filter\";"},{"lineNumber":16,"author":{"gitID":"clarissayong"},"content":""},{"lineNumber":17,"author":{"gitID":"clarissayong"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filters all users with the specified tag \""},{"lineNumber":18,"author":{"gitID":"clarissayong"},"content":"            + \"(case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":19,"author":{"gitID":"clarissayong"},"content":"            + \"Parameters: TAG\\n\""},{"lineNumber":20,"author":{"gitID":"clarissayong"},"content":"            + \"Example: \" + COMMAND_WORD + \" diabetes\";"},{"lineNumber":21,"author":{"gitID":"clarissayong"},"content":""},{"lineNumber":22,"author":{"gitID":"clarissayong"},"content":"    private final TagPredicate predicate;"},{"lineNumber":23,"author":{"gitID":"clarissayong"},"content":""},{"lineNumber":24,"author":{"gitID":"clarissayong"},"content":"    public FilterCommand(TagPredicate predicate) {"},{"lineNumber":25,"author":{"gitID":"clarissayong"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":26,"author":{"gitID":"clarissayong"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"clarissayong"},"content":""},{"lineNumber":28,"author":{"gitID":"clarissayong"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"clarissayong"},"content":"    public CommandResult execute() {"},{"lineNumber":30,"author":{"gitID":"clarissayong"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":31,"author":{"gitID":"clarissayong"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":32,"author":{"gitID":"clarissayong"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"clarissayong"},"content":""},{"lineNumber":34,"author":{"gitID":"clarissayong"},"content":"}"}],"authorContributionMap":{"clarissayong":34}},{"path":"src/main/java/seedu/address/logic/parser/FilterCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"clarissayong"},"content":""},{"lineNumber":5,"author":{"gitID":"clarissayong"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"clarissayong"},"content":"import seedu.address.model.tag.TagPredicate;"},{"lineNumber":8,"author":{"gitID":"clarissayong"},"content":""},{"lineNumber":9,"author":{"gitID":"clarissayong"},"content":"//@@author {clarissayong}"},{"lineNumber":10,"author":{"gitID":"clarissayong"},"content":""},{"lineNumber":11,"author":{"gitID":"clarissayong"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"clarissayong"},"content":" * Parses input arguments and creates a new FilterCommand object"},{"lineNumber":13,"author":{"gitID":"clarissayong"},"content":" */"},{"lineNumber":14,"author":{"gitID":"clarissayong"},"content":"public class FilterCommandParser {"},{"lineNumber":15,"author":{"gitID":"clarissayong"},"content":""},{"lineNumber":16,"author":{"gitID":"clarissayong"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"clarissayong"},"content":"     * Parses the given {@code String} of arguments in the context of the FilterCommand"},{"lineNumber":18,"author":{"gitID":"clarissayong"},"content":"     * and returns an FilterCommand object for execution."},{"lineNumber":19,"author":{"gitID":"clarissayong"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"clarissayong"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"clarissayong"},"content":"    public FilterCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"clarissayong"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"clarissayong"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"clarissayong"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"clarissayong"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"clarissayong"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"clarissayong"},"content":""},{"lineNumber":28,"author":{"gitID":"clarissayong"},"content":"        return new FilterCommand(new TagPredicate(trimmedArgs));"},{"lineNumber":29,"author":{"gitID":"clarissayong"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"clarissayong"},"content":""},{"lineNumber":31,"author":{"gitID":"clarissayong"},"content":"}"}],"authorContributionMap":{"clarissayong":27,"-":4}},{"path":"src/main/java/seedu/address/logic/parser/LoginCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"kaisertanqr"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":3,"author":{"gitID":"kaisertanqr"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_LOGIN_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"kaisertanqr"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":5,"author":{"gitID":"kaisertanqr"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":6,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"kaisertanqr"},"content":"import seedu.address.logic.commands.LoginCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"kaisertanqr"},"content":"import seedu.address.model.login.Password;"},{"lineNumber":13,"author":{"gitID":"kaisertanqr"},"content":"import seedu.address.model.login.Username;"},{"lineNumber":14,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":15,"author":{"gitID":"kaisertanqr"},"content":"//@@author kaisertanqr"},{"lineNumber":16,"author":{"gitID":"kaisertanqr"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"kaisertanqr"},"content":" * Parses input arguments and creates a new LoginCommand object"},{"lineNumber":18,"author":{"gitID":"kaisertanqr"},"content":" */"},{"lineNumber":19,"author":{"gitID":"kaisertanqr"},"content":"public class LoginCommandParser implements Parser\u003cLoginCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":21,"author":{"gitID":"kaisertanqr"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"kaisertanqr"},"content":"     * Parses the given {@code String} of arguments in the context of the LoginCommand"},{"lineNumber":23,"author":{"gitID":"kaisertanqr"},"content":"     * and returns an LoginCommand object for execution."},{"lineNumber":24,"author":{"gitID":"kaisertanqr"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitID":"kaisertanqr"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"kaisertanqr"},"content":"    public LoginCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"kaisertanqr"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":28,"author":{"gitID":"kaisertanqr"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_USERNAME, PREFIX_PASSWORD);"},{"lineNumber":29,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":30,"author":{"gitID":"kaisertanqr"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_USERNAME, PREFIX_PASSWORD)"},{"lineNumber":31,"author":{"gitID":"kaisertanqr"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":32,"author":{"gitID":"kaisertanqr"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_LOGIN_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"kaisertanqr"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":35,"author":{"gitID":"kaisertanqr"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"kaisertanqr"},"content":"            Username username \u003d ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME)).get();"},{"lineNumber":37,"author":{"gitID":"kaisertanqr"},"content":"            Password password \u003d ParserUtil.parsePassword(argMultimap.getValue(PREFIX_PASSWORD)).get();"},{"lineNumber":38,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":39,"author":{"gitID":"kaisertanqr"},"content":"            return new LoginCommand(username, password);"},{"lineNumber":40,"author":{"gitID":"kaisertanqr"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":41,"author":{"gitID":"kaisertanqr"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":42,"author":{"gitID":"kaisertanqr"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":45,"author":{"gitID":"kaisertanqr"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"kaisertanqr"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":47,"author":{"gitID":"kaisertanqr"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":48,"author":{"gitID":"kaisertanqr"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"kaisertanqr"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":50,"author":{"gitID":"kaisertanqr"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":51,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":53,"author":{"gitID":"kaisertanqr"},"content":"}"}],"authorContributionMap":{"kaisertanqr":49,"-":4}},{"path":"src/main/java/seedu/address/logic/parser/SwitchCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"jaronchan"},"content":"//@@author jaronchan"},{"lineNumber":2,"author":{"gitID":"jaronchan"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":4,"author":{"gitID":"jaronchan"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":6,"author":{"gitID":"jaronchan"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"jaronchan"},"content":"import seedu.address.logic.commands.SwitchCommand;"},{"lineNumber":8,"author":{"gitID":"jaronchan"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":10,"author":{"gitID":"jaronchan"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"jaronchan"},"content":" * Parses input arguments and creates a new SwitchCommand object"},{"lineNumber":12,"author":{"gitID":"jaronchan"},"content":" */"},{"lineNumber":13,"author":{"gitID":"jaronchan"},"content":"public class SwitchCommandParser implements Parser\u003cSwitchCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":15,"author":{"gitID":"jaronchan"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"jaronchan"},"content":"     * Parses the given {@code String} of arguments in the context of the SelectCommand"},{"lineNumber":17,"author":{"gitID":"jaronchan"},"content":"     * and returns an SelectCommand object for execution."},{"lineNumber":18,"author":{"gitID":"jaronchan"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"jaronchan"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"jaronchan"},"content":"    public SwitchCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"jaronchan"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"jaronchan"},"content":"            String feature \u003d ParserUtil.parseFeature(args);"},{"lineNumber":23,"author":{"gitID":"jaronchan"},"content":"            return new SwitchCommand(feature);"},{"lineNumber":24,"author":{"gitID":"jaronchan"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"jaronchan"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"jaronchan"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"jaronchan"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"jaronchan"},"content":"}"}],"authorContributionMap":{"jaronchan":29}},{"path":"src/main/java/seedu/address/logic/commands/OAuthTestCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"iFallUpHill"},"content":"//@@author ifalluphill"},{"lineNumber":2,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":3,"author":{"gitID":"iFallUpHill"},"content":"package seedu.address.logic.commands;"},{"lineNumber":4,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":5,"author":{"gitID":"iFallUpHill"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":7,"author":{"gitID":"iFallUpHill"},"content":"import seedu.address.logic.OAuthManager;"},{"lineNumber":8,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":9,"author":{"gitID":"iFallUpHill"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"iFallUpHill"},"content":" * Opens a calendar window."},{"lineNumber":11,"author":{"gitID":"iFallUpHill"},"content":" */"},{"lineNumber":12,"author":{"gitID":"iFallUpHill"},"content":"public class OAuthTestCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":14,"author":{"gitID":"iFallUpHill"},"content":"    public static final String COMMAND_WORD \u003d \"oauthtest\";"},{"lineNumber":15,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":16,"author":{"gitID":"iFallUpHill"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Tests OAuth.\\n\""},{"lineNumber":17,"author":{"gitID":"iFallUpHill"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":18,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":19,"author":{"gitID":"iFallUpHill"},"content":"    public static final String MESSAGE_TEST_OAUTH \u003d \"Testing OAuth.\";"},{"lineNumber":20,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":21,"author":{"gitID":"iFallUpHill"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"iFallUpHill"},"content":"    public CommandResult execute() {"},{"lineNumber":23,"author":{"gitID":"iFallUpHill"},"content":"        try {"},{"lineNumber":24,"author":{"gitID":"iFallUpHill"},"content":"            OAuthManager.authorize();"},{"lineNumber":25,"author":{"gitID":"iFallUpHill"},"content":"        } catch (IOException e) {"},{"lineNumber":26,"author":{"gitID":"iFallUpHill"},"content":"            // Do nothing for now"},{"lineNumber":27,"author":{"gitID":"iFallUpHill"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":29,"author":{"gitID":"iFallUpHill"},"content":"        return new CommandResult(MESSAGE_TEST_OAUTH);"},{"lineNumber":30,"author":{"gitID":"iFallUpHill"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"iFallUpHill"},"content":"}"},{"lineNumber":32,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":33,"author":{"gitID":"iFallUpHill"},"content":"//@@author"}],"authorContributionMap":{"iFallUpHill":33}},{"path":"src/main/java/seedu/address/logic/commands/ErrorLogCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"iFallUpHill"},"content":"//@@author ifalluphill"},{"lineNumber":2,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":3,"author":{"gitID":"iFallUpHill"},"content":"package seedu.address.logic.commands;"},{"lineNumber":4,"author":{"gitID":"iFallUpHill"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":5,"author":{"gitID":"iFallUpHill"},"content":"import seedu.address.commons.events.ui.ShowErrorsRequestEvent;"},{"lineNumber":6,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":7,"author":{"gitID":"iFallUpHill"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"iFallUpHill"},"content":" * Opens a calendar window."},{"lineNumber":9,"author":{"gitID":"iFallUpHill"},"content":" */"},{"lineNumber":10,"author":{"gitID":"iFallUpHill"},"content":"public class ErrorLogCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":12,"author":{"gitID":"iFallUpHill"},"content":"    public static final String COMMAND_WORD \u003d \"errorlog\";"},{"lineNumber":13,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":14,"author":{"gitID":"iFallUpHill"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Opens the error log in a new window.\\n\""},{"lineNumber":15,"author":{"gitID":"iFallUpHill"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":16,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":17,"author":{"gitID":"iFallUpHill"},"content":"    public static final String MESSAGE_SHOWING_ERRORLOG \u003d \"Opened error log window.\";"},{"lineNumber":18,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":19,"author":{"gitID":"iFallUpHill"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"iFallUpHill"},"content":"    public CommandResult execute() {"},{"lineNumber":21,"author":{"gitID":"iFallUpHill"},"content":"        EventsCenter.getInstance().post(new ShowErrorsRequestEvent());"},{"lineNumber":22,"author":{"gitID":"iFallUpHill"},"content":"        return new CommandResult(MESSAGE_SHOWING_ERRORLOG);"},{"lineNumber":23,"author":{"gitID":"iFallUpHill"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"iFallUpHill"},"content":"}"},{"lineNumber":25,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":26,"author":{"gitID":"iFallUpHill"},"content":"//@@author"}],"authorContributionMap":{"iFallUpHill":26}},{"path":"src/main/java/seedu/address/logic/commands/LoginCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"kaisertanqr"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"kaisertanqr"},"content":"import seedu.address.model.login.Password;"},{"lineNumber":7,"author":{"gitID":"kaisertanqr"},"content":"import seedu.address.model.login.Username;"},{"lineNumber":8,"author":{"gitID":"kaisertanqr"},"content":"import seedu.address.model.login.exceptions.AlreadyLoggedInException;"},{"lineNumber":9,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":10,"author":{"gitID":"kaisertanqr"},"content":"//@@author kaisertanqr"},{"lineNumber":11,"author":{"gitID":"kaisertanqr"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"kaisertanqr"},"content":" * Authenticates login credentials."},{"lineNumber":13,"author":{"gitID":"kaisertanqr"},"content":" */"},{"lineNumber":14,"author":{"gitID":"kaisertanqr"},"content":"public class LoginCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":16,"author":{"gitID":"kaisertanqr"},"content":"    public static final String COMMAND_WORD \u003d \"login\";"},{"lineNumber":17,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":18,"author":{"gitID":"kaisertanqr"},"content":"    public static final String MESSAGE_USAGE \u003d \"Login with the parameters: u/USERNAME p/PASSWORD\""},{"lineNumber":19,"author":{"gitID":"kaisertanqr"},"content":"            + \"\\nEXAMPLE: login u/user p/123456\";"},{"lineNumber":20,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":21,"author":{"gitID":"kaisertanqr"},"content":"    public static final String MESSAGE_LOGIN_SUCCESS \u003d \"Login successful!\";"},{"lineNumber":22,"author":{"gitID":"kaisertanqr"},"content":"    public static final String MESSAGE_LOGIN_FAILURE \u003d \"Username or password is incorrect. Please login again.\";"},{"lineNumber":23,"author":{"gitID":"kaisertanqr"},"content":"    public static final String MESSAGE_LOGIN_ALREADY \u003d \"You have already logged in.\";"},{"lineNumber":24,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":25,"author":{"gitID":"kaisertanqr"},"content":"    private final Username username;"},{"lineNumber":26,"author":{"gitID":"kaisertanqr"},"content":"    private final Password password;"},{"lineNumber":27,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":28,"author":{"gitID":"kaisertanqr"},"content":"    public LoginCommand(Username username, Password password) {"},{"lineNumber":29,"author":{"gitID":"kaisertanqr"},"content":"        this.username \u003d username;"},{"lineNumber":30,"author":{"gitID":"kaisertanqr"},"content":"        this.password \u003d password;"},{"lineNumber":31,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":33,"author":{"gitID":"kaisertanqr"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"kaisertanqr"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"kaisertanqr"},"content":"        requireNonNull(model);"},{"lineNumber":36,"author":{"gitID":"kaisertanqr"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"kaisertanqr"},"content":"            if (model.checkLoginCredentials(this.username, this.password)) {"},{"lineNumber":38,"author":{"gitID":"kaisertanqr"},"content":"                return new CommandResult(MESSAGE_LOGIN_SUCCESS);"},{"lineNumber":39,"author":{"gitID":"kaisertanqr"},"content":"            } else {"},{"lineNumber":40,"author":{"gitID":"kaisertanqr"},"content":"                return new CommandResult(MESSAGE_LOGIN_FAILURE);"},{"lineNumber":41,"author":{"gitID":"kaisertanqr"},"content":"            }"},{"lineNumber":42,"author":{"gitID":"kaisertanqr"},"content":"        } catch (AlreadyLoggedInException e) {"},{"lineNumber":43,"author":{"gitID":"kaisertanqr"},"content":"            throw new CommandException(MESSAGE_LOGIN_ALREADY);"},{"lineNumber":44,"author":{"gitID":"kaisertanqr"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":47,"author":{"gitID":"kaisertanqr"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"kaisertanqr"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"kaisertanqr"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"kaisertanqr"},"content":"                || (other instanceof LoginCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"kaisertanqr"},"content":"                \u0026\u0026 this.username.equals(((LoginCommand) other).username)"},{"lineNumber":52,"author":{"gitID":"kaisertanqr"},"content":"                \u0026\u0026 this.password.equals(((LoginCommand) other).password)); // state check"},{"lineNumber":53,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"kaisertanqr"},"content":"}"}],"authorContributionMap":{"kaisertanqr":52,"-":2}},{"path":"src/main/java/seedu/address/logic/commands/SwitchCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"jaronchan"},"content":"//@@author jaronchan"},{"lineNumber":2,"author":{"gitID":"jaronchan"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":4,"author":{"gitID":"jaronchan"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":5,"author":{"gitID":"jaronchan"},"content":"import seedu.address.commons.events.ui.SwitchFeatureEvent;"},{"lineNumber":6,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":7,"author":{"gitID":"jaronchan"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"jaronchan"},"content":" * Switches user interface to the feature requested."},{"lineNumber":9,"author":{"gitID":"jaronchan"},"content":" */"},{"lineNumber":10,"author":{"gitID":"jaronchan"},"content":"public class SwitchCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":12,"author":{"gitID":"jaronchan"},"content":"    public static final String COMMAND_WORD \u003d \"switch\";"},{"lineNumber":13,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":14,"author":{"gitID":"jaronchan"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":15,"author":{"gitID":"jaronchan"},"content":"            + \": Switches to the user interface feature identified by the user.\\n\""},{"lineNumber":16,"author":{"gitID":"jaronchan"},"content":"            + \"Parameters: FEATURE (must be either \\\"details\\\", \\\"calendar\\\" or \\\"scheduler\\\")\\n\""},{"lineNumber":17,"author":{"gitID":"jaronchan"},"content":"            + \"Example: \" + COMMAND_WORD + \" calendar\";"},{"lineNumber":18,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":19,"author":{"gitID":"jaronchan"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Switched to %1$s tab\";"},{"lineNumber":20,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":21,"author":{"gitID":"jaronchan"},"content":"    private final String featureTarget;"},{"lineNumber":22,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":23,"author":{"gitID":"jaronchan"},"content":"    public SwitchCommand(String featureTarget) {"},{"lineNumber":24,"author":{"gitID":"jaronchan"},"content":"        this.featureTarget \u003d featureTarget;"},{"lineNumber":25,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":27,"author":{"gitID":"jaronchan"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"jaronchan"},"content":"    public CommandResult execute() {"},{"lineNumber":29,"author":{"gitID":"jaronchan"},"content":"        EventsCenter.getInstance().post(new SwitchFeatureEvent(featureTarget));"},{"lineNumber":30,"author":{"gitID":"jaronchan"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, featureTarget));"},{"lineNumber":31,"author":{"gitID":"jaronchan"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"jaronchan"},"content":""},{"lineNumber":33,"author":{"gitID":"jaronchan"},"content":"}"}],"authorContributionMap":{"jaronchan":33}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"kaisertanqr"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":11,"author":{"gitID":"kaisertanqr"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":12,"author":{"gitID":"kaisertanqr"},"content":"import seedu.address.logic.commands.LoginCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":43,"author":{"gitID":"kaisertanqr"},"content":"            CommandResult result;"},{"lineNumber":44,"author":{"gitID":"kaisertanqr"},"content":"            if (model.hasLoggedIn()) {"},{"lineNumber":45,"author":{"gitID":"kaisertanqr"},"content":"                result \u003d command.execute();"},{"lineNumber":46,"author":{"gitID":"kaisertanqr"},"content":"            } else {"},{"lineNumber":47,"author":{"gitID":"kaisertanqr"},"content":"                logger.info(\"User attempts to use a command without logging in first.\");"},{"lineNumber":48,"author":{"gitID":"kaisertanqr"},"content":"                result \u003d executeNoLoginCommands(commandText, command);"},{"lineNumber":49,"author":{"gitID":"kaisertanqr"},"content":"            }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":67,"author":{"gitID":"kaisertanqr"},"content":"    //@@author kaisertanqr"},{"lineNumber":68,"author":{"gitID":"kaisertanqr"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"kaisertanqr"},"content":"    public CommandResult executeNoLoginCommands (String commandText, Command command) throws CommandException {"},{"lineNumber":70,"author":{"gitID":"kaisertanqr"},"content":"        CommandResult result;"},{"lineNumber":71,"author":{"gitID":"kaisertanqr"},"content":"        try {"},{"lineNumber":72,"author":{"gitID":"kaisertanqr"},"content":"            if (commandText.split(\" \")[0].equals(LoginCommand.COMMAND_WORD)"},{"lineNumber":73,"author":{"gitID":"kaisertanqr"},"content":"                    || commandText.split(\" \")[0].equals(HelpCommand.COMMAND_WORD)"},{"lineNumber":74,"author":{"gitID":"kaisertanqr"},"content":"                    || commandText.split(\" \")[0].equals(ExitCommand.COMMAND_WORD)) {"},{"lineNumber":75,"author":{"gitID":"kaisertanqr"},"content":"                result \u003d command.execute();"},{"lineNumber":76,"author":{"gitID":"kaisertanqr"},"content":"            } else {"},{"lineNumber":77,"author":{"gitID":"kaisertanqr"},"content":"                result \u003d null;"},{"lineNumber":78,"author":{"gitID":"kaisertanqr"},"content":"            }"},{"lineNumber":79,"author":{"gitID":"kaisertanqr"},"content":"        } finally { }"},{"lineNumber":80,"author":{"gitID":"kaisertanqr"},"content":"        return result;"},{"lineNumber":81,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":83,"author":{"gitID":"kaisertanqr"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"kaisertanqr"},"content":"    public boolean hasLoggedIn() {"},{"lineNumber":85,"author":{"gitID":"kaisertanqr"},"content":"        return model.hasLoggedIn();"},{"lineNumber":86,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":88,"author":{"gitID":"kaisertanqr"},"content":"}"}],"authorContributionMap":{"kaisertanqr":33,"-":55}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":37,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":41,"author":{"gitID":"-"},"content":" */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        System.setProperty(\"sun.net.http.allowRestrictedHeaders\", \"true\");"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"kaisertanqr"},"content":"    /** Initialise for tests */"},{"lineNumber":83,"author":{"gitID":"kaisertanqr"},"content":"    public void initTest() {"},{"lineNumber":84,"author":{"gitID":"kaisertanqr"},"content":"        model.setLoginStatus(true);"},{"lineNumber":85,"author":{"gitID":"kaisertanqr"},"content":"        ui.getMainWindow().showAfterLogin();"},{"lineNumber":86,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":145,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":173,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kaisertanqr":7,"-":215}},{"path":"src/main/java/seedu/address/logic/commands/CalendarCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"iFallUpHill"},"content":"//@@author ifalluphill"},{"lineNumber":2,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":3,"author":{"gitID":"iFallUpHill"},"content":"package seedu.address.logic.commands;"},{"lineNumber":4,"author":{"gitID":"iFallUpHill"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":5,"author":{"gitID":"iFallUpHill"},"content":"import seedu.address.commons.events.ui.ShowCalendarRequestEvent;"},{"lineNumber":6,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":7,"author":{"gitID":"iFallUpHill"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"iFallUpHill"},"content":" * Opens a calendar window."},{"lineNumber":9,"author":{"gitID":"iFallUpHill"},"content":" */"},{"lineNumber":10,"author":{"gitID":"iFallUpHill"},"content":"public class CalendarCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":12,"author":{"gitID":"iFallUpHill"},"content":"    public static final String COMMAND_WORD \u003d \"calendar\";"},{"lineNumber":13,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":14,"author":{"gitID":"iFallUpHill"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Opens a calendar window.\\n\""},{"lineNumber":15,"author":{"gitID":"iFallUpHill"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":16,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":17,"author":{"gitID":"iFallUpHill"},"content":"    public static final String MESSAGE_SHOWING_CALENDAR \u003d \"Opened calendar window.\";"},{"lineNumber":18,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":19,"author":{"gitID":"iFallUpHill"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"iFallUpHill"},"content":"    public CommandResult execute() {"},{"lineNumber":21,"author":{"gitID":"iFallUpHill"},"content":"        EventsCenter.getInstance().post(new ShowCalendarRequestEvent());"},{"lineNumber":22,"author":{"gitID":"iFallUpHill"},"content":"        return new CommandResult(MESSAGE_SHOWING_CALENDAR);"},{"lineNumber":23,"author":{"gitID":"iFallUpHill"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"iFallUpHill"},"content":"}"},{"lineNumber":25,"author":{"gitID":"iFallUpHill"},"content":""},{"lineNumber":26,"author":{"gitID":"iFallUpHill"},"content":"//@@author"}],"authorContributionMap":{"iFallUpHill":26}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class UserPrefs {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private String addressBookFilePath \u003d \"data/addressbook.xml\";"},{"lineNumber":14,"author":{"gitID":"kaisertanqr"},"content":"    private String addressBookName \u003d \"SLAP for Social Workers\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public UserPrefs() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        this.setGuiSettings(500, 500, 0, 0);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void setAddressBookFilePath(String addressBookFilePath) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public String getAddressBookName() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return addressBookName;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void setAddressBookName(String addressBookName) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.addressBookName \u003d addressBookName;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":54,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookName, o.addressBookName);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath, addressBookName);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        sb.append(\"\\nAddressBook name : \" + addressBookName);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kaisertanqr":1,"-":77}},{"path":"src/main/java/seedu/address/logic/commands/LogoutCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"kaisertanqr"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":7,"author":{"gitID":"kaisertanqr"},"content":"//@@ author kaisertanqr"},{"lineNumber":8,"author":{"gitID":"kaisertanqr"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"kaisertanqr"},"content":" * Logs user out from application"},{"lineNumber":10,"author":{"gitID":"kaisertanqr"},"content":" */"},{"lineNumber":11,"author":{"gitID":"kaisertanqr"},"content":"public class LogoutCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":13,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":14,"author":{"gitID":"kaisertanqr"},"content":"    public static final String COMMAND_WORD \u003d \"logout\";"},{"lineNumber":15,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":16,"author":{"gitID":"kaisertanqr"},"content":"    public static final String MESSAGE_LOGOUT_SUCCESS \u003d \"You have logged out.\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":20,"author":{"gitID":"kaisertanqr"},"content":"        requireNonNull(model);"},{"lineNumber":21,"author":{"gitID":"kaisertanqr"},"content":"        model.setLoginStatus(false);"},{"lineNumber":22,"author":{"gitID":"kaisertanqr"},"content":"        return new CommandResult(MESSAGE_LOGOUT_SUCCESS);"},{"lineNumber":23,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":25,"author":{"gitID":"kaisertanqr"},"content":"}"}],"authorContributionMap":{"kaisertanqr":20,"-":5}},{"path":"src/main/java/seedu/address/model/tag/exceptions/TagNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"clarissayong"},"content":"package seedu.address.model.tag.exceptions;"},{"lineNumber":2,"author":{"gitID":"clarissayong"},"content":""},{"lineNumber":3,"author":{"gitID":"clarissayong"},"content":"//@@author {clarissayong}"},{"lineNumber":4,"author":{"gitID":"clarissayong"},"content":""},{"lineNumber":5,"author":{"gitID":"clarissayong"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"clarissayong"},"content":" * Signals that the operation is unable to find the specified tag."},{"lineNumber":7,"author":{"gitID":"clarissayong"},"content":" */"},{"lineNumber":8,"author":{"gitID":"clarissayong"},"content":"public class TagNotFoundException extends Exception {"},{"lineNumber":9,"author":{"gitID":"clarissayong"},"content":"    public TagNotFoundException() {"},{"lineNumber":10,"author":{"gitID":"clarissayong"},"content":"        super(\"There are no contacts with this tag.\");"},{"lineNumber":11,"author":{"gitID":"clarissayong"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"clarissayong"},"content":"}"}],"authorContributionMap":{"clarissayong":12}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"kaisertanqr"},"content":"import seedu.address.model.login.Password;"},{"lineNumber":15,"author":{"gitID":"kaisertanqr"},"content":"import seedu.address.model.login.Username;"},{"lineNumber":16,"author":{"gitID":"kaisertanqr"},"content":"import seedu.address.model.login.exceptions.AlreadyLoggedInException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":32,"author":{"gitID":"kaisertanqr"},"content":"    private final Username username;"},{"lineNumber":33,"author":{"gitID":"kaisertanqr"},"content":"    private final Password password;"},{"lineNumber":34,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":35,"author":{"gitID":"kaisertanqr"},"content":"    private boolean hasLoggedIn;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"kaisertanqr"},"content":"    public AddressBook() {"},{"lineNumber":50,"author":{"gitID":"kaisertanqr"},"content":"        hasLoggedIn \u003d false;"},{"lineNumber":51,"author":{"gitID":"kaisertanqr"},"content":"        this.username \u003d new Username(\"slap\");"},{"lineNumber":52,"author":{"gitID":"kaisertanqr"},"content":"        this.password \u003d new Password(\"password\");"},{"lineNumber":53,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"kaisertanqr"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"kaisertanqr"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied} and logged-in status"},{"lineNumber":65,"author":{"gitID":"kaisertanqr"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"kaisertanqr"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied, boolean loggedin) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":69,"author":{"gitID":"kaisertanqr"},"content":"        hasLoggedIn \u003d loggedin;"},{"lineNumber":70,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":72,"author":{"gitID":"kaisertanqr"},"content":"    //@@author kaisertanqr"},{"lineNumber":73,"author":{"gitID":"kaisertanqr"},"content":"    /// login authentication operations"},{"lineNumber":74,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":75,"author":{"gitID":"kaisertanqr"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"kaisertanqr"},"content":"     * Returns the login status of the user."},{"lineNumber":77,"author":{"gitID":"kaisertanqr"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"kaisertanqr"},"content":"    public boolean hasLoggedIn() {"},{"lineNumber":79,"author":{"gitID":"kaisertanqr"},"content":"        return hasLoggedIn;"},{"lineNumber":80,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":82,"author":{"gitID":"kaisertanqr"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"kaisertanqr"},"content":"     * Sets the login status of the user to {@code status}."},{"lineNumber":84,"author":{"gitID":"kaisertanqr"},"content":"     * @param status"},{"lineNumber":85,"author":{"gitID":"kaisertanqr"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"kaisertanqr"},"content":"    public void setLoginStatus(boolean status) {"},{"lineNumber":87,"author":{"gitID":"kaisertanqr"},"content":"        hasLoggedIn \u003d status;"},{"lineNumber":88,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":90,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":91,"author":{"gitID":"kaisertanqr"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"kaisertanqr"},"content":"     * Checks the login credentials whether it matches the one in addressbook."},{"lineNumber":93,"author":{"gitID":"kaisertanqr"},"content":"     *"},{"lineNumber":94,"author":{"gitID":"kaisertanqr"},"content":"     * @param username"},{"lineNumber":95,"author":{"gitID":"kaisertanqr"},"content":"     * @param password"},{"lineNumber":96,"author":{"gitID":"kaisertanqr"},"content":"     * @throws AlreadyLoggedInException is the user is already logged in."},{"lineNumber":97,"author":{"gitID":"kaisertanqr"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"kaisertanqr"},"content":"    public boolean checkLoginCredentials(Username username, Password password) throws AlreadyLoggedInException {"},{"lineNumber":99,"author":{"gitID":"kaisertanqr"},"content":"        if (hasLoggedIn) {"},{"lineNumber":100,"author":{"gitID":"kaisertanqr"},"content":"            throw new AlreadyLoggedInException();"},{"lineNumber":101,"author":{"gitID":"kaisertanqr"},"content":"        } else if (!username.equals(this.username) || !password.equals(this.password)) {"},{"lineNumber":102,"author":{"gitID":"kaisertanqr"},"content":"            return hasLoggedIn;"},{"lineNumber":103,"author":{"gitID":"kaisertanqr"},"content":"        } else {"},{"lineNumber":104,"author":{"gitID":"kaisertanqr"},"content":"            hasLoggedIn \u003d true;"},{"lineNumber":105,"author":{"gitID":"kaisertanqr"},"content":"            return hasLoggedIn;"},{"lineNumber":106,"author":{"gitID":"kaisertanqr"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":109,"author":{"gitID":"kaisertanqr"},"content":"    //@@author"},{"lineNumber":110,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":152,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":171,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":173,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":192,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        Person correctPerson \u003d new Person("},{"lineNumber":195,"author":{"gitID":"-"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(), correctTagReferences);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        return correctPerson;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":202,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":238,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":239,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":240,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kaisertanqr":58,"-":190}},{"path":"src/main/java/seedu/address/model/login/exceptions/AlreadyLoggedInException.java","lines":[{"lineNumber":1,"author":{"gitID":"kaisertanqr"},"content":"package seedu.address.model.login.exceptions;"},{"lineNumber":2,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":3,"author":{"gitID":"kaisertanqr"},"content":"//@@author kaisertanqr"},{"lineNumber":4,"author":{"gitID":"kaisertanqr"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"kaisertanqr"},"content":" * Signals that the user has already logged in."},{"lineNumber":6,"author":{"gitID":"kaisertanqr"},"content":" */"},{"lineNumber":7,"author":{"gitID":"kaisertanqr"},"content":"public class AlreadyLoggedInException extends Exception {"},{"lineNumber":8,"author":{"gitID":"kaisertanqr"},"content":"}"}],"authorContributionMap":{"kaisertanqr":8}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":15,"author":{"gitID":"kaisertanqr"},"content":"import seedu.address.model.login.Password;"},{"lineNumber":16,"author":{"gitID":"kaisertanqr"},"content":"import seedu.address.model.login.Username;"},{"lineNumber":17,"author":{"gitID":"kaisertanqr"},"content":"import seedu.address.model.login.exceptions.AlreadyLoggedInException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":24,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"kaisertanqr"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"kaisertanqr"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"kaisertanqr"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs and a login status"},{"lineNumber":47,"author":{"gitID":"kaisertanqr"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"kaisertanqr"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs, boolean loggedIn) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"kaisertanqr"},"content":"        this.addressBook \u003d new AddressBook(addressBook, true);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"kaisertanqr"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"kaisertanqr"},"content":"    public boolean checkLoginCredentials(Username username, Password password) throws AlreadyLoggedInException {"},{"lineNumber":101,"author":{"gitID":"kaisertanqr"},"content":"        return addressBook.checkLoginCredentials(username, password);"},{"lineNumber":102,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":104,"author":{"gitID":"kaisertanqr"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"kaisertanqr"},"content":"    public boolean hasLoggedIn() {"},{"lineNumber":106,"author":{"gitID":"kaisertanqr"},"content":"        return addressBook.hasLoggedIn();"},{"lineNumber":107,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":109,"author":{"gitID":"kaisertanqr"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"kaisertanqr"},"content":"    public void setLoginStatus(boolean status) {"},{"lineNumber":111,"author":{"gitID":"kaisertanqr"},"content":"        addressBook.setLoginStatus(status);"},{"lineNumber":112,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kaisertanqr":24,"-":125}},{"path":"src/main/java/seedu/address/model/login/exceptions/AuthenticationFailedException.java","lines":[{"lineNumber":1,"author":{"gitID":"kaisertanqr"},"content":"package seedu.address.model.login.exceptions;"},{"lineNumber":2,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":3,"author":{"gitID":"kaisertanqr"},"content":"//@@author kaisertanqr"},{"lineNumber":4,"author":{"gitID":"kaisertanqr"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"kaisertanqr"},"content":" * Signals that the operation has failed the authentication process."},{"lineNumber":6,"author":{"gitID":"kaisertanqr"},"content":" */"},{"lineNumber":7,"author":{"gitID":"kaisertanqr"},"content":"public class AuthenticationFailedException extends Exception {}"}],"authorContributionMap":{"kaisertanqr":7}},{"path":"src/main/java/seedu/address/model/tag/TagPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"clarissayong"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"clarissayong"},"content":""},{"lineNumber":3,"author":{"gitID":"clarissayong"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"clarissayong"},"content":""},{"lineNumber":5,"author":{"gitID":"clarissayong"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"clarissayong"},"content":""},{"lineNumber":7,"author":{"gitID":"clarissayong"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"clarissayong"},"content":" * @@author {clarissayong}"},{"lineNumber":9,"author":{"gitID":"clarissayong"},"content":" * Tests that a {@code Person}\u0027s {@code Tag} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"clarissayong"},"content":" */"},{"lineNumber":11,"author":{"gitID":"clarissayong"},"content":"public class TagPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":12,"author":{"gitID":"clarissayong"},"content":"    private final String tag;"},{"lineNumber":13,"author":{"gitID":"clarissayong"},"content":""},{"lineNumber":14,"author":{"gitID":"clarissayong"},"content":"    public TagPredicate(String tag) {"},{"lineNumber":15,"author":{"gitID":"clarissayong"},"content":"        this.tag \u003d tag;"},{"lineNumber":16,"author":{"gitID":"clarissayong"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"clarissayong"},"content":""},{"lineNumber":18,"author":{"gitID":"clarissayong"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"clarissayong"},"content":"    public boolean test(Person person) {"},{"lineNumber":20,"author":{"gitID":"clarissayong"},"content":"        return person.getTags().stream()"},{"lineNumber":21,"author":{"gitID":"clarissayong"},"content":"                .anyMatch(keyword -\u003e keyword.tagName.equalsIgnoreCase(tag));"},{"lineNumber":22,"author":{"gitID":"clarissayong"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"clarissayong"},"content":""},{"lineNumber":24,"author":{"gitID":"clarissayong"},"content":"    /*"},{"lineNumber":25,"author":{"gitID":"clarissayong"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"clarissayong"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitID":"clarissayong"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":28,"author":{"gitID":"clarissayong"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":29,"author":{"gitID":"clarissayong"},"content":"                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":30,"author":{"gitID":"clarissayong"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"clarissayong"},"content":"    */"},{"lineNumber":32,"author":{"gitID":"clarissayong"},"content":"}"}],"authorContributionMap":{"clarissayong":32}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"kaisertanqr"},"content":"import seedu.address.model.login.Password;"},{"lineNumber":7,"author":{"gitID":"kaisertanqr"},"content":"import seedu.address.model.login.Username;"},{"lineNumber":8,"author":{"gitID":"kaisertanqr"},"content":"import seedu.address.model.login.exceptions.AlreadyLoggedInException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"kaisertanqr"},"content":"    //@@author kaisertanqr"},{"lineNumber":52,"author":{"gitID":"kaisertanqr"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"kaisertanqr"},"content":"     * Checks the login credentials."},{"lineNumber":54,"author":{"gitID":"kaisertanqr"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"kaisertanqr"},"content":"     * @param username"},{"lineNumber":56,"author":{"gitID":"kaisertanqr"},"content":"     * @param password"},{"lineNumber":57,"author":{"gitID":"kaisertanqr"},"content":"     *"},{"lineNumber":58,"author":{"gitID":"kaisertanqr"},"content":"     * @throws AlreadyLoggedInException if user has already logged in."},{"lineNumber":59,"author":{"gitID":"kaisertanqr"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"kaisertanqr"},"content":"    boolean checkLoginCredentials(Username username, Password password) throws AlreadyLoggedInException;"},{"lineNumber":61,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":62,"author":{"gitID":"kaisertanqr"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"kaisertanqr"},"content":"     * Returns whether the AddressBook has already been logged into."},{"lineNumber":64,"author":{"gitID":"kaisertanqr"},"content":"     *"},{"lineNumber":65,"author":{"gitID":"kaisertanqr"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"kaisertanqr"},"content":"    boolean hasLoggedIn();"},{"lineNumber":67,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":68,"author":{"gitID":"kaisertanqr"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"kaisertanqr"},"content":"     * Set login status in AddressBook to {@code status}."},{"lineNumber":70,"author":{"gitID":"kaisertanqr"},"content":"     *"},{"lineNumber":71,"author":{"gitID":"kaisertanqr"},"content":"     * @param status"},{"lineNumber":72,"author":{"gitID":"kaisertanqr"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"kaisertanqr"},"content":"    void setLoginStatus(boolean status);"},{"lineNumber":74,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":75,"author":{"gitID":"kaisertanqr"},"content":"}"}],"authorContributionMap":{"kaisertanqr":28,"-":47}},{"path":"src/main/java/seedu/address/model/login/Username.java","lines":[{"lineNumber":1,"author":{"gitID":"kaisertanqr"},"content":"package seedu.address.model.login;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"kaisertanqr"},"content":"//@@author kaisertanqr"},{"lineNumber":7,"author":{"gitID":"kaisertanqr"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"kaisertanqr"},"content":" * Represents a Username used to login to AddressBook"},{"lineNumber":9,"author":{"gitID":"kaisertanqr"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidUsername(String)}"},{"lineNumber":10,"author":{"gitID":"kaisertanqr"},"content":" */"},{"lineNumber":11,"author":{"gitID":"kaisertanqr"},"content":"public class Username {"},{"lineNumber":12,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":13,"author":{"gitID":"kaisertanqr"},"content":"    public static final String MESSAGE_USERNAME_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"kaisertanqr"},"content":"            \"Usernames should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":16,"author":{"gitID":"kaisertanqr"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"kaisertanqr"},"content":"     * The first character of the username must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"kaisertanqr"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"kaisertanqr"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"kaisertanqr"},"content":"    public static final String USERNAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":21,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":22,"author":{"gitID":"kaisertanqr"},"content":"    public final String fullUsername;"},{"lineNumber":23,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":24,"author":{"gitID":"kaisertanqr"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"kaisertanqr"},"content":"     * Constructs a {@code Username}."},{"lineNumber":26,"author":{"gitID":"kaisertanqr"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"kaisertanqr"},"content":"     * @param username A valid username."},{"lineNumber":28,"author":{"gitID":"kaisertanqr"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"kaisertanqr"},"content":"    public Username(String username) {"},{"lineNumber":30,"author":{"gitID":"kaisertanqr"},"content":"        requireNonNull(username);"},{"lineNumber":31,"author":{"gitID":"kaisertanqr"},"content":"        checkArgument(isValidUsername(username), MESSAGE_USERNAME_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"kaisertanqr"},"content":"        this.fullUsername \u003d username;"},{"lineNumber":33,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":35,"author":{"gitID":"kaisertanqr"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"kaisertanqr"},"content":"     * Returns true if a given string is a valid username."},{"lineNumber":37,"author":{"gitID":"kaisertanqr"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"kaisertanqr"},"content":"    public static boolean isValidUsername(String test) {"},{"lineNumber":39,"author":{"gitID":"kaisertanqr"},"content":"        return test.matches(USERNAME_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":42,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":43,"author":{"gitID":"kaisertanqr"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"kaisertanqr"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"kaisertanqr"},"content":"        return fullUsername;"},{"lineNumber":46,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":48,"author":{"gitID":"kaisertanqr"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"kaisertanqr"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"kaisertanqr"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"kaisertanqr"},"content":"                || (other instanceof Username // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"kaisertanqr"},"content":"                \u0026\u0026 this.fullUsername.equals(((Username) other).fullUsername)); // state check"},{"lineNumber":53,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":55,"author":{"gitID":"kaisertanqr"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"kaisertanqr"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"kaisertanqr"},"content":"        return fullUsername.hashCode();"},{"lineNumber":58,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"kaisertanqr"},"content":"}"}],"authorContributionMap":{"kaisertanqr":55,"-":4}},{"path":"src/main/java/seedu/address/model/login/Password.java","lines":[{"lineNumber":1,"author":{"gitID":"kaisertanqr"},"content":"package seedu.address.model.login;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"kaisertanqr"},"content":"//@@author kaisertanqr"},{"lineNumber":7,"author":{"gitID":"kaisertanqr"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"kaisertanqr"},"content":" * Represents a Username used to login to AddressBook"},{"lineNumber":9,"author":{"gitID":"kaisertanqr"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPassword(String)}"},{"lineNumber":10,"author":{"gitID":"kaisertanqr"},"content":" */"},{"lineNumber":11,"author":{"gitID":"kaisertanqr"},"content":"public class Password {"},{"lineNumber":12,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":13,"author":{"gitID":"kaisertanqr"},"content":"    public static final String MESSAGE_PASSWORD_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"kaisertanqr"},"content":"            \"Password should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":16,"author":{"gitID":"kaisertanqr"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"kaisertanqr"},"content":"     * The first character of the password must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"kaisertanqr"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"kaisertanqr"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"kaisertanqr"},"content":"    public static final String PASSWORD_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":21,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":22,"author":{"gitID":"kaisertanqr"},"content":"    public final String password;"},{"lineNumber":23,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":24,"author":{"gitID":"kaisertanqr"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"kaisertanqr"},"content":"     * Constructs a {@code Username}."},{"lineNumber":26,"author":{"gitID":"kaisertanqr"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"kaisertanqr"},"content":"     * @param password A valid name."},{"lineNumber":28,"author":{"gitID":"kaisertanqr"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"kaisertanqr"},"content":"    public Password(String password) {"},{"lineNumber":30,"author":{"gitID":"kaisertanqr"},"content":"        requireNonNull(password);"},{"lineNumber":31,"author":{"gitID":"kaisertanqr"},"content":"        checkArgument(isValidPassword(password), MESSAGE_PASSWORD_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"kaisertanqr"},"content":"        this.password \u003d password;"},{"lineNumber":33,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":35,"author":{"gitID":"kaisertanqr"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"kaisertanqr"},"content":"     * Returns true if a given string is a valid person name."},{"lineNumber":37,"author":{"gitID":"kaisertanqr"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"kaisertanqr"},"content":"    public static boolean isValidPassword(String test) {"},{"lineNumber":39,"author":{"gitID":"kaisertanqr"},"content":"        return test.matches(PASSWORD_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":42,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":43,"author":{"gitID":"kaisertanqr"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"kaisertanqr"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"kaisertanqr"},"content":"        return password;"},{"lineNumber":46,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":48,"author":{"gitID":"kaisertanqr"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"kaisertanqr"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"kaisertanqr"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"kaisertanqr"},"content":"                || (other instanceof Password // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"kaisertanqr"},"content":"                \u0026\u0026 this.password.equals(((Password) other).password)); // state check"},{"lineNumber":53,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"kaisertanqr"},"content":""},{"lineNumber":55,"author":{"gitID":"kaisertanqr"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"kaisertanqr"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"kaisertanqr"},"content":"        return password.hashCode();"},{"lineNumber":58,"author":{"gitID":"kaisertanqr"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"kaisertanqr"},"content":"}"}],"authorContributionMap":{"kaisertanqr":55,"-":4}}]
