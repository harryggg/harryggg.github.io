var resultJson = [{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d TuitionCor - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"e0032017"},"content":":repoURL: https://github.com/CS2103JAN2018-F11-B2/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `Team F11-B2`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"TuitionCor is for those who *prefer to use a desktop app for managing client information*. More importantly, TuitionCor is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, TuitionCor can get your client management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":24,"author":{"gitID":"-"},"content":"+"},{"lineNumber":25,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":26,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":27,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":28,"author":{"gitID":"-"},"content":"+"},{"lineNumber":29,"author":{"gitID":"-"},"content":".  Download the latest `TuitionCor.jar` link:{repoURL}/releases[here]."},{"lineNumber":30,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your client information."},{"lineNumber":31,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":32,"author":{"gitID":"-"},"content":"+"},{"lineNumber":33,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":34,"author":{"gitID":"-"},"content":"+"},{"lineNumber":35,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":36,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":37,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":40,"author":{"gitID":"-"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."},{"lineNumber":41,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":42,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":50,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":53,"author":{"gitID":"e0032017"},"content":"* there are alias for some of the commands, which helps users to save some time. e.g. for add command, you can use add n/... or a n/..."},{"lineNumber":54,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":55,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":56,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":57,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":58,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a person: `add`"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"Adds a person to the address book +"},{"lineNumber":67,"author":{"gitID":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"e0032017"},"content":"Alias Format: `a n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"},{"lineNumber":70,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":71,"author":{"gitID":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"},{"lineNumber":76,"author":{"gitID":"e0032017"},"content":"* `a n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"shookshire"},"content":"\u003d\u003d\u003d Adding a client: `addclient`"},{"lineNumber":79,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":80,"author":{"gitID":"shookshire"},"content":"Adds a client to TuitionCor +"},{"lineNumber":81,"author":{"gitID":"shookshire"},"content":"Format: `addclient c/CATEGORY n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]... l/LOCATION g/GRADE s/SUBJECT`"},{"lineNumber":82,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":83,"author":{"gitID":"shookshire"},"content":"Alias Format: `ac c/CATEGORY n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]... l/LOCATION g/GRADE s/SUBJECT`"},{"lineNumber":84,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"},{"lineNumber":90,"author":{"gitID":"e0032017"},"content":"* `a n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all persons : `list`"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"Shows a list of all persons in the address book. +"},{"lineNumber":95,"author":{"gitID":"-"},"content":"Format: `list`"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"e0032017"},"content":"Alias Format: `l`"},{"lineNumber":98,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a person : `edit`"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"Edits an existing person in the address book. +"},{"lineNumber":102,"author":{"gitID":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"e0032017"},"content":"Alias Format: `e INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"},{"lineNumber":105,"author":{"gitID":"-"},"content":"****"},{"lineNumber":106,"author":{"gitID":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":107,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":108,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":109,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":111,"author":{"gitID":"-"},"content":"****"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":116,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":117,"author":{"gitID":"e0032017"},"content":"* `e 2 n/Betsy Crower t/` +"},{"lineNumber":118,"author":{"gitID":"-"},"content":"Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating persons: `find`"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"Finds persons that contain any of the given keywords. +"},{"lineNumber":123,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"e0032017"},"content":"Alias Format: `f KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":126,"author":{"gitID":"-"},"content":"****"},{"lineNumber":127,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":128,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":129,"author":{"gitID":"-"},"content":"* Not only the name is searched, but all the fields of a person is searched."},{"lineNumber":130,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":131,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":132,"author":{"gitID":"-"},"content":"****"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":137,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":138,"author":{"gitID":"e0032017"},"content":"* `f Betsy Tim John` +"},{"lineNumber":139,"author":{"gitID":"-"},"content":"Returns any person having names `Betsy`, `Tim`, or `John`"},{"lineNumber":140,"author":{"gitID":"-"},"content":"* `f 96528541` +"},{"lineNumber":141,"author":{"gitID":"-"},"content":"Returns any person having phone number `96528541`"},{"lineNumber":142,"author":{"gitID":"-"},"content":"* `f blk` +"},{"lineNumber":143,"author":{"gitID":"-"},"content":"Returns any person having keyword `blk`"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Matching potential clients: `match`"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"Matches any potential clients according to data input +"},{"lineNumber":148,"author":{"gitID":"-"},"content":"Format: `match NAME`"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"Alias Format: `m NAME`"},{"lineNumber":151,"author":{"gitID":"-"},"content":"****"},{"lineNumber":152,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":153,"author":{"gitID":"-"},"content":"* Only the first name entered will be matched. if 2 names are entered only the first name will be matched. e.g. `Hans Bo` will return result based on `Hans`"},{"lineNumber":154,"author":{"gitID":"-"},"content":"* Only the name can be used for match function."},{"lineNumber":155,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":156,"author":{"gitID":"-"},"content":"* Only clients that fit all the data fields will be listed. (i.e. `AND` search)."},{"lineNumber":157,"author":{"gitID":"-"},"content":"****"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"* `match John` +"},{"lineNumber":162,"author":{"gitID":"-"},"content":"If John is a tutor finding students that are staying in WEST and is looking for sec4 chemistry, then `match John` will return a list of students that are staying in the WEST and is currently looking for sec4 chemistry tutor."},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person : `delete`"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"Deletes the specified person from the address book. +"},{"lineNumber":167,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"e0032017"},"content":"Alias Format: `d INDEX`"},{"lineNumber":170,"author":{"gitID":"-"},"content":"****"},{"lineNumber":171,"author":{"gitID":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":172,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":173,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":174,"author":{"gitID":"-"},"content":"****"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":179,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":180,"author":{"gitID":"-"},"content":"Deletes the 2nd person in the address book."},{"lineNumber":181,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":182,"author":{"gitID":"e0032017"},"content":"`d 1` +"},{"lineNumber":183,"author":{"gitID":"-"},"content":"Deletes the 1st person in the results of the `find` command."},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a person : `select`"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"Selects the person identified by the index number used in the last person listing. +"},{"lineNumber":188,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"e0032017"},"content":"Alias Format: `s INDEX`"},{"lineNumber":191,"author":{"gitID":"-"},"content":"****"},{"lineNumber":192,"author":{"gitID":"-"},"content":"* Selects the person and loads the Google search page the person at the specified `INDEX`."},{"lineNumber":193,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":194,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":195,"author":{"gitID":"-"},"content":"****"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":200,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":201,"author":{"gitID":"-"},"content":"Selects the 2nd person in the address book."},{"lineNumber":202,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":203,"author":{"gitID":"e0032017"},"content":"`s 1` +"},{"lineNumber":204,"author":{"gitID":"-"},"content":"Selects the 1st person in the results of the `find` command."},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":209,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"e0032017"},"content":"Alias Format: `h`"},{"lineNumber":212,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":213,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":214,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":215,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":218,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"Restores the address book to the state before the previous _undoable_ command was executed. +"},{"lineNumber":221,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"e0032017"},"content":"Alias Format: `u`"},{"lineNumber":224,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":225,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":226,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":227,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":232,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":233,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":236,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":237,"author":{"gitID":"e0032017"},"content":"`u` +"},{"lineNumber":238,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":241,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":242,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":243,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":248,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"e0032017"},"content":"Alias Format: `r`"},{"lineNumber":251,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":255,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":256,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":259,"author":{"gitID":"e0032017"},"content":"`r` +"},{"lineNumber":260,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":263,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":264,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":265,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":266,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":267,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":268,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"Clears all entries from the address book. +"},{"lineNumber":273,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"e0032017"},"content":"Alias Format: `c`"},{"lineNumber":276,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":280,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"e0032017"},"content":"Alias Format: `x`"},{"lineNumber":283,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"Address book data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":287,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":290,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"_{explain how the user can enable/disable data encryption}_"},{"lineNumber":293,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":298,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"},{"lineNumber":303,"author":{"gitID":"-"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague` +"},{"lineNumber":304,"author":{"gitID":"-"},"content":"Alias: `a`"},{"lineNumber":305,"author":{"gitID":"shookshire"},"content":"* *AddClient* `addclient c/CATEGORY n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]... l/LOCATION g/GRADE s/SUBJECT` +"},{"lineNumber":306,"author":{"gitID":"shookshire"},"content":"e.g. `addclient c/t n/Tutor1 p/98765432 a/Blk 10 Singapore, #01-239 e/testing@example.com t/family l/north g/pri3 s/physics` +"},{"lineNumber":307,"author":{"gitID":"shookshire"},"content":"Alias: `ac`"},{"lineNumber":308,"author":{"gitID":"-"},"content":"* *Clear* : `clear` +"},{"lineNumber":309,"author":{"gitID":"-"},"content":"Alias: `c`"},{"lineNumber":310,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":311,"author":{"gitID":"-"},"content":"e.g. `delete 3` +"},{"lineNumber":312,"author":{"gitID":"-"},"content":"Alias: `d`"},{"lineNumber":313,"author":{"gitID":"-"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"},{"lineNumber":314,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com` +"},{"lineNumber":315,"author":{"gitID":"-"},"content":"Alias: `e`"},{"lineNumber":316,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":317,"author":{"gitID":"-"},"content":"e.g. `find James Jake` +"},{"lineNumber":318,"author":{"gitID":"-"},"content":"Alias: `f`"},{"lineNumber":319,"author":{"gitID":"-"},"content":"* *Match* : `match NAME` +"},{"lineNumber":320,"author":{"gitID":"-"},"content":"e.g. `match James` +"},{"lineNumber":321,"author":{"gitID":"-"},"content":"Alias: `m`"},{"lineNumber":322,"author":{"gitID":"-"},"content":"* *List* : `list` +"},{"lineNumber":323,"author":{"gitID":"-"},"content":"Alias: `l`"},{"lineNumber":324,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":325,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` +"},{"lineNumber":326,"author":{"gitID":"-"},"content":"e.g.`select 2` +"},{"lineNumber":327,"author":{"gitID":"-"},"content":"Alias: `s`"},{"lineNumber":328,"author":{"gitID":"-"},"content":"* *History* : `history` +"},{"lineNumber":329,"author":{"gitID":"-"},"content":"Alias: `h`"},{"lineNumber":330,"author":{"gitID":"-"},"content":"* *Undo* : `undo` +"},{"lineNumber":331,"author":{"gitID":"-"},"content":"Alias: `u`"},{"lineNumber":332,"author":{"gitID":"-"},"content":"* *Redo* : `redo` +"},{"lineNumber":333,"author":{"gitID":"-"},"content":"Alias: `r`"}],"authorContributionMap":{"e0032017":26,"shookshire":9,"-":298}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d TuitionCor - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-F11-B2/main forked from Team SE-EDU"},{"lineNumber":14,"author":{"gitID":"-"},"content":":Team SE-EDU: https://github.com/se-edu/addressbook-level4"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"By: `Team F11-B2`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":23,"author":{"gitID":"-"},"content":"+"},{"lineNumber":24,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":25,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":26,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":27,"author":{"gitID":"-"},"content":"+"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":30,"author":{"gitID":"-"},"content":"+"},{"lineNumber":31,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":32,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":33,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":39,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":40,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":41,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":42,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":43,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":47,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":48,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":53,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":62,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":63,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":66,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":81,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":86,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":93,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":98,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":101,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":106,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":111,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":116,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":123,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":128,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":133,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":136,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":141,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":144,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":149,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":152,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":157,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":160,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":172,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":175,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":178,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":179,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":185,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":188,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":189,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":190,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":195,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":198,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":201,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":208,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":209,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":210,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":213,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":216,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":223,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":226,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":236,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":247,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":248,"author":{"gitID":"-"},"content":"----"},{"lineNumber":249,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":"}"},{"lineNumber":255,"author":{"gitID":"-"},"content":"----"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":258,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":259,"author":{"gitID":"-"},"content":"----"},{"lineNumber":260,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"-"},"content":"}"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":273,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"-"},"content":"}"},{"lineNumber":275,"author":{"gitID":"-"},"content":"----"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":288,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":297,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":306,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":323,"author":{"gitID":"-"},"content":""},{"lineNumber":324,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":325,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":326,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":327,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":328,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":329,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":334,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":335,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":336,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":337,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":338,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":""},{"lineNumber":341,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":344,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":345,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":346,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":347,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":348,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":349,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":356,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":357,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":358,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":359,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":360,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"-"},"content":"// tag::match[]"},{"lineNumber":363,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Match Function"},{"lineNumber":364,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":365,"author":{"gitID":"-"},"content":"The match function is a function that behaves like a multi-layer find function. It helps to match clients that share same attributes."},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"author":{"gitID":"-"},"content":"For example, John is a Tutor client that is staying in the WEST of Singapore, and is looking for students that requires help in sec4 math. Keying in `match John` will return a list of students that are registered in TuitionCor, which also stay in the WEST, and are looking for sec4 math tutors."},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":"Step 1:"},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"-"},"content":"match function behaves like at double-layered find function. When a user enters `match John`, the system will first need to locate John from the list of tutors stored in TuitionCor. This is done by `MatchContainsKeywordsPredicate.java` method."},{"lineNumber":372,"author":{"gitID":"-"},"content":"The detailed code is shown below:"},{"lineNumber":373,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":374,"author":{"gitID":"-"},"content":"----"},{"lineNumber":375,"author":{"gitID":"-"},"content":"public boolean test(Person person) {"},{"lineNumber":376,"author":{"gitID":"-"},"content":"return keywords.stream()"},{"lineNumber":377,"author":{"gitID":"-"},"content":"        .anyMatch(keyword -\u003e"},{"lineNumber":378,"author":{"gitID":"-"},"content":"StringUtil.contailsWordIgnoreCase(person.getName().fullName, keyword));"},{"lineNumber":379,"author":{"gitID":"-"},"content":"}"},{"lineNumber":380,"author":{"gitID":"-"},"content":"----"},{"lineNumber":381,"author":{"gitID":"-"},"content":"Step 2:"},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"-"},"content":"When the `John` is located, his data (location, grade, subject and category) are then retrieved into `MatchCommand.java`"},{"lineNumber":384,"author":{"gitID":"-"},"content":"The detailed code is shown below:"},{"lineNumber":385,"author":{"gitID":"-"},"content":"----"},{"lineNumber":386,"author":{"gitID":"-"},"content":"public CommandResult execute() {"},{"lineNumber":387,"author":{"gitID":"-"},"content":"    model.updateFilteredPersonList(predicate);"},{"lineNumber":388,"author":{"gitID":"-"},"content":"    model.updateFilteredPersonList(new MatchContainsPersonsPredicate("},{"lineNumber":389,"author":{"gitID":"-"},"content":"        Arrays.asList(model.getFilteredPersonList().get(0).toString().split(\"\\\\s+\"))));"},{"lineNumber":390,"author":{"gitID":"-"},"content":"}"},{"lineNumber":391,"author":{"gitID":"-"},"content":"----"},{"lineNumber":392,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":393,"author":{"gitID":"-"},"content":"Currently match function can only match client one at a time, as the code is only retrieving the first person’s data from the `getFilteredPersonList()`. Hence, even though a user can key in many names at one search, the search result is only corresponding to the first name entered."},{"lineNumber":394,"author":{"gitID":"-"},"content":""},{"lineNumber":395,"author":{"gitID":"-"},"content":"Step 3:"},{"lineNumber":396,"author":{"gitID":"-"},"content":""},{"lineNumber":397,"author":{"gitID":"-"},"content":"The data(location, grade, subject and category) of `John` will then passed into `MatchContainsPersonPredicate.java`, this method will then look through all the students and return all the students that have same data as `John`."},{"lineNumber":398,"author":{"gitID":"-"},"content":"The detailed code is shown below:"},{"lineNumber":399,"author":{"gitID":"-"},"content":"----"},{"lineNumber":400,"author":{"gitID":"-"},"content":"public boolean test(Person person) {"},{"lineNumber":401,"author":{"gitID":"-"},"content":"    return keywords.stream()"},{"lineNumber":402,"author":{"gitID":"-"},"content":"            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getEmail().value, keyword))"},{"lineNumber":403,"author":{"gitID":"-"},"content":"            \u0026\u0026 keywords.stream()"},{"lineNumber":404,"author":{"gitID":"-"},"content":"            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getAddress().value, keyword))"},{"lineNumber":405,"author":{"gitID":"-"},"content":"            \u0026\u0026 keywords.stream()"},{"lineNumber":406,"author":{"gitID":"-"},"content":"            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getPhone().value, keyword));"},{"lineNumber":407,"author":{"gitID":"-"},"content":"}"},{"lineNumber":408,"author":{"gitID":"-"},"content":"----"},{"lineNumber":409,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":410,"author":{"gitID":"-"},"content":"If a `KEYWORD` that is not a name, or a name that is not registered in TuitionCor is entered, TuitionCor will return an empty list."},{"lineNumber":411,"author":{"gitID":"-"},"content":""},{"lineNumber":412,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Future Improvements"},{"lineNumber":413,"author":{"gitID":"-"},"content":""},{"lineNumber":414,"author":{"gitID":"-"},"content":"* Currently, match can only be done one client at a time. future implementations could be updating it to match all the possible combinations."},{"lineNumber":415,"author":{"gitID":"-"},"content":"* Currently, when matching a name or a word that is not stored in TuitionCor, an empty list is returned. This could be misleading since the user would not know its a typo or there is simply no match. Future implementation could help to resolve such issue."},{"lineNumber":416,"author":{"gitID":"-"},"content":"* Currently, a match only takes place when all the data of another client fits the data of the client entered. Future implementation could return a list of clients that ranks from highest match to lowest match. This provide more flexible choices to our clients."},{"lineNumber":417,"author":{"gitID":"-"},"content":"// end::match[]"},{"lineNumber":418,"author":{"gitID":"-"},"content":""},{"lineNumber":419,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":420,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":421,"author":{"gitID":"-"},"content":""},{"lineNumber":422,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":423,"author":{"gitID":"-"},"content":""},{"lineNumber":424,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":425,"author":{"gitID":"-"},"content":""},{"lineNumber":426,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":427,"author":{"gitID":"-"},"content":""},{"lineNumber":428,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":429,"author":{"gitID":"-"},"content":""},{"lineNumber":430,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":431,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":432,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":433,"author":{"gitID":"-"},"content":""},{"lineNumber":434,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":435,"author":{"gitID":"-"},"content":""},{"lineNumber":436,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":437,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":438,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":439,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":440,"author":{"gitID":"-"},"content":""},{"lineNumber":441,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":442,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":443,"author":{"gitID":"-"},"content":""},{"lineNumber":444,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":445,"author":{"gitID":"-"},"content":""},{"lineNumber":446,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":447,"author":{"gitID":"-"},"content":""},{"lineNumber":448,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":449,"author":{"gitID":"-"},"content":""},{"lineNumber":450,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":451,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":452,"author":{"gitID":"-"},"content":""},{"lineNumber":453,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":454,"author":{"gitID":"-"},"content":""},{"lineNumber":455,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":456,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":457,"author":{"gitID":"-"},"content":""},{"lineNumber":458,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":459,"author":{"gitID":"-"},"content":""},{"lineNumber":460,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":461,"author":{"gitID":"-"},"content":""},{"lineNumber":462,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":463,"author":{"gitID":"-"},"content":""},{"lineNumber":464,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":465,"author":{"gitID":"-"},"content":""},{"lineNumber":466,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":467,"author":{"gitID":"-"},"content":""},{"lineNumber":468,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":469,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":470,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":471,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":472,"author":{"gitID":"-"},"content":""},{"lineNumber":473,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":474,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":475,"author":{"gitID":"-"},"content":""},{"lineNumber":476,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":477,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":478,"author":{"gitID":"-"},"content":""},{"lineNumber":479,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":480,"author":{"gitID":"-"},"content":""},{"lineNumber":481,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":482,"author":{"gitID":"-"},"content":""},{"lineNumber":483,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":484,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":485,"author":{"gitID":"-"},"content":""},{"lineNumber":486,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":487,"author":{"gitID":"-"},"content":""},{"lineNumber":488,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":489,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":490,"author":{"gitID":"-"},"content":""},{"lineNumber":491,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":492,"author":{"gitID":"-"},"content":""},{"lineNumber":493,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":494,"author":{"gitID":"-"},"content":""},{"lineNumber":495,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":496,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":497,"author":{"gitID":"-"},"content":""},{"lineNumber":498,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":499,"author":{"gitID":"-"},"content":""},{"lineNumber":500,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":501,"author":{"gitID":"-"},"content":""},{"lineNumber":502,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":503,"author":{"gitID":"-"},"content":""},{"lineNumber":504,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":505,"author":{"gitID":"-"},"content":""},{"lineNumber":506,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":507,"author":{"gitID":"-"},"content":""},{"lineNumber":508,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":509,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":510,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":511,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":512,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":513,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":514,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":515,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":516,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":517,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":518,"author":{"gitID":"-"},"content":""},{"lineNumber":519,"author":{"gitID":"-"},"content":""},{"lineNumber":520,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":521,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":522,"author":{"gitID":"-"},"content":""},{"lineNumber":523,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":524,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":525,"author":{"gitID":"-"},"content":""},{"lineNumber":526,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":527,"author":{"gitID":"-"},"content":""},{"lineNumber":528,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":529,"author":{"gitID":"-"},"content":""},{"lineNumber":530,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":531,"author":{"gitID":"-"},"content":""},{"lineNumber":532,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":533,"author":{"gitID":"-"},"content":""},{"lineNumber":534,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":535,"author":{"gitID":"-"},"content":""},{"lineNumber":536,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":537,"author":{"gitID":"-"},"content":""},{"lineNumber":538,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":539,"author":{"gitID":"-"},"content":""},{"lineNumber":540,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":541,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":542,"author":{"gitID":"-"},"content":""},{"lineNumber":543,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":544,"author":{"gitID":"-"},"content":""},{"lineNumber":545,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":546,"author":{"gitID":"-"},"content":""},{"lineNumber":547,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":548,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":549,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":550,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":551,"author":{"gitID":"-"},"content":""},{"lineNumber":552,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":553,"author":{"gitID":"-"},"content":""},{"lineNumber":554,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":555,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":556,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":557,"author":{"gitID":"-"},"content":""},{"lineNumber":558,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":559,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":560,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":561,"author":{"gitID":"-"},"content":""},{"lineNumber":562,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":563,"author":{"gitID":"-"},"content":""},{"lineNumber":564,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":565,"author":{"gitID":"-"},"content":""},{"lineNumber":566,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":567,"author":{"gitID":"-"},"content":""},{"lineNumber":568,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":569,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":570,"author":{"gitID":"-"},"content":""},{"lineNumber":571,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":572,"author":{"gitID":"-"},"content":""},{"lineNumber":573,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":574,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":575,"author":{"gitID":"-"},"content":""},{"lineNumber":576,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":577,"author":{"gitID":"-"},"content":""},{"lineNumber":578,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":579,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":580,"author":{"gitID":"-"},"content":""},{"lineNumber":581,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":582,"author":{"gitID":"-"},"content":"+"},{"lineNumber":583,"author":{"gitID":"-"},"content":"****"},{"lineNumber":584,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":585,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":586,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":587,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":588,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":589,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":590,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":591,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":592,"author":{"gitID":"-"},"content":"****"},{"lineNumber":593,"author":{"gitID":"-"},"content":""},{"lineNumber":594,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":595,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":596,"author":{"gitID":"-"},"content":""},{"lineNumber":597,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":598,"author":{"gitID":"-"},"content":""},{"lineNumber":599,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":600,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":601,"author":{"gitID":"-"},"content":""},{"lineNumber":602,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":603,"author":{"gitID":"-"},"content":"+"},{"lineNumber":604,"author":{"gitID":"-"},"content":"****"},{"lineNumber":605,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":606,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":607,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":608,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":609,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":610,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":611,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":612,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":613,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":614,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":615,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":616,"author":{"gitID":"-"},"content":"****"},{"lineNumber":617,"author":{"gitID":"-"},"content":""},{"lineNumber":618,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":619,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":620,"author":{"gitID":"-"},"content":""},{"lineNumber":621,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":622,"author":{"gitID":"-"},"content":""},{"lineNumber":623,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":624,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":625,"author":{"gitID":"-"},"content":""},{"lineNumber":626,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":627,"author":{"gitID":"-"},"content":"+"},{"lineNumber":628,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":629,"author":{"gitID":"-"},"content":"+"},{"lineNumber":630,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":631,"author":{"gitID":"-"},"content":"+"},{"lineNumber":632,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":633,"author":{"gitID":"-"},"content":"+"},{"lineNumber":634,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":635,"author":{"gitID":"-"},"content":"+"},{"lineNumber":636,"author":{"gitID":"-"},"content":"****"},{"lineNumber":637,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":638,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":639,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":640,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":641,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":642,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":643,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":644,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":645,"author":{"gitID":"-"},"content":"****"},{"lineNumber":646,"author":{"gitID":"-"},"content":""},{"lineNumber":647,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":648,"author":{"gitID":"-"},"content":"+"},{"lineNumber":649,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":650,"author":{"gitID":"-"},"content":"+"},{"lineNumber":651,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":652,"author":{"gitID":"-"},"content":"+"},{"lineNumber":653,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":654,"author":{"gitID":"-"},"content":"+"},{"lineNumber":655,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":656,"author":{"gitID":"-"},"content":"+"},{"lineNumber":657,"author":{"gitID":"-"},"content":"****"},{"lineNumber":658,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":659,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":660,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":661,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":662,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":663,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":664,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":665,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":666,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":667,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":668,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":669,"author":{"gitID":"-"},"content":"****"},{"lineNumber":670,"author":{"gitID":"-"},"content":""},{"lineNumber":671,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":672,"author":{"gitID":"-"},"content":"+"},{"lineNumber":673,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":674,"author":{"gitID":"-"},"content":"+"},{"lineNumber":675,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":676,"author":{"gitID":"-"},"content":"+"},{"lineNumber":677,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":678,"author":{"gitID":"-"},"content":"+"},{"lineNumber":679,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":680,"author":{"gitID":"-"},"content":"+"},{"lineNumber":681,"author":{"gitID":"-"},"content":"****"},{"lineNumber":682,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":683,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":684,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":685,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":686,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":687,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":688,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":689,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":690,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":691,"author":{"gitID":"-"},"content":"****"},{"lineNumber":692,"author":{"gitID":"-"},"content":""},{"lineNumber":693,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":694,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":695,"author":{"gitID":"-"},"content":""},{"lineNumber":696,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":697,"author":{"gitID":"-"},"content":""},{"lineNumber":698,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":699,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":700,"author":{"gitID":"-"},"content":""},{"lineNumber":701,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":702,"author":{"gitID":"-"},"content":"+"},{"lineNumber":703,"author":{"gitID":"-"},"content":"****"},{"lineNumber":704,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":705,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":706,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":707,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":708,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":709,"author":{"gitID":"-"},"content":"****"},{"lineNumber":710,"author":{"gitID":"-"},"content":""},{"lineNumber":711,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":712,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":713,"author":{"gitID":"-"},"content":""},{"lineNumber":714,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":715,"author":{"gitID":"-"},"content":""},{"lineNumber":716,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":717,"author":{"gitID":"-"},"content":""},{"lineNumber":718,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":719,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":720,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":721,"author":{"gitID":"-"},"content":""},{"lineNumber":722,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":723,"author":{"gitID":"-"},"content":""},{"lineNumber":724,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":725,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":726,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":727,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":728,"author":{"gitID":"-"},"content":""},{"lineNumber":729,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":730,"author":{"gitID":"-"},"content":""},{"lineNumber":731,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":732,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":733,"author":{"gitID":"-"},"content":""},{"lineNumber":734,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":735,"author":{"gitID":"-"},"content":""},{"lineNumber":736,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":737,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":738,"author":{"gitID":"-"},"content":""},{"lineNumber":739,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":740,"author":{"gitID":"-"},"content":""},{"lineNumber":741,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":742,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":743,"author":{"gitID":"-"},"content":""},{"lineNumber":744,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":745,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":746,"author":{"gitID":"-"},"content":""},{"lineNumber":747,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":748,"author":{"gitID":"-"},"content":""},{"lineNumber":749,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":750,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":751,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":752,"author":{"gitID":"-"},"content":""},{"lineNumber":753,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":754,"author":{"gitID":"-"},"content":""},{"lineNumber":755,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":756,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":757,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":758,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":759,"author":{"gitID":"-"},"content":""},{"lineNumber":760,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":761,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":762,"author":{"gitID":"-"},"content":""},{"lineNumber":763,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":764,"author":{"gitID":"-"},"content":""},{"lineNumber":765,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":766,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":767,"author":{"gitID":"-"},"content":""},{"lineNumber":768,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":769,"author":{"gitID":"-"},"content":""},{"lineNumber":770,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":771,"author":{"gitID":"-"},"content":""},{"lineNumber":772,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":773,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":774,"author":{"gitID":"-"},"content":""},{"lineNumber":775,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":776,"author":{"gitID":"-"},"content":""},{"lineNumber":777,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":778,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":779,"author":{"gitID":"-"},"content":""},{"lineNumber":780,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":781,"author":{"gitID":"-"},"content":""},{"lineNumber":782,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":783,"author":{"gitID":"-"},"content":""},{"lineNumber":784,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":785,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":786,"author":{"gitID":"-"},"content":""},{"lineNumber":787,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":788,"author":{"gitID":"-"},"content":""},{"lineNumber":789,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":790,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":791,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":792,"author":{"gitID":"-"},"content":""},{"lineNumber":793,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":794,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":795,"author":{"gitID":"-"},"content":""},{"lineNumber":796,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":797,"author":{"gitID":"-"},"content":""},{"lineNumber":798,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":799,"author":{"gitID":"-"},"content":""},{"lineNumber":800,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":801,"author":{"gitID":"-"},"content":""},{"lineNumber":802,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":803,"author":{"gitID":"-"},"content":""},{"lineNumber":804,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":805,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":806,"author":{"gitID":"-"},"content":""},{"lineNumber":807,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":808,"author":{"gitID":"-"},"content":""},{"lineNumber":809,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":810,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":811,"author":{"gitID":"-"},"content":""},{"lineNumber":812,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":813,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":814,"author":{"gitID":"-"},"content":""},{"lineNumber":815,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":816,"author":{"gitID":"-"},"content":""},{"lineNumber":817,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":818,"author":{"gitID":"-"},"content":""},{"lineNumber":819,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":820,"author":{"gitID":"-"},"content":""},{"lineNumber":821,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":822,"author":{"gitID":"-"},"content":""},{"lineNumber":823,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":824,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":825,"author":{"gitID":"-"},"content":""},{"lineNumber":826,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":827,"author":{"gitID":"-"},"content":""},{"lineNumber":828,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":829,"author":{"gitID":"-"},"content":""},{"lineNumber":830,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":831,"author":{"gitID":"-"},"content":""},{"lineNumber":832,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":833,"author":{"gitID":"-"},"content":""},{"lineNumber":834,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":835,"author":{"gitID":"-"},"content":""},{"lineNumber":836,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":837,"author":{"gitID":"-"},"content":""},{"lineNumber":838,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":839,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":840,"author":{"gitID":"-"},"content":""},{"lineNumber":841,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":842,"author":{"gitID":"-"},"content":"* Tuition coordinators who handle significant number of contacts and are comfortable with CLI applications."},{"lineNumber":843,"author":{"gitID":"-"},"content":""},{"lineNumber":844,"author":{"gitID":"-"},"content":"*Value proposition*:"},{"lineNumber":845,"author":{"gitID":"-"},"content":"TuitionCor is targeted at tuition coordinators who have to manage a large amount of contacts."},{"lineNumber":846,"author":{"gitID":"-"},"content":"The daily job-scope of a tuition coordinator involves the need to manage large amount of contacts and match the students to tutors according to their credentials, needs and location."},{"lineNumber":847,"author":{"gitID":"-"},"content":"Therefore, TuitionCor aims to facilitate this process and make the job of a tuition coordinator easier."},{"lineNumber":848,"author":{"gitID":"-"},"content":""},{"lineNumber":849,"author":{"gitID":"-"},"content":"In addition, users are able to"},{"lineNumber":850,"author":{"gitID":"-"},"content":"* find and filter contacts easily"},{"lineNumber":851,"author":{"gitID":"-"},"content":"* add and edit contacts"},{"lineNumber":852,"author":{"gitID":"-"},"content":""},{"lineNumber":853,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":854,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":855,"author":{"gitID":"-"},"content":""},{"lineNumber":856,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":857,"author":{"gitID":"-"},"content":""},{"lineNumber":858,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":859,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":860,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":861,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":862,"author":{"gitID":"-"},"content":""},{"lineNumber":863,"author":{"gitID":"-"},"content":"|`* * *` |user |add a new person (tutor or student) |expand user\u0027s addressbook for future tuition coordination"},{"lineNumber":864,"author":{"gitID":"-"},"content":""},{"lineNumber":865,"author":{"gitID":"-"},"content":"|`* * *` |user |delete a person |remove entries that the user no longer need"},{"lineNumber":866,"author":{"gitID":"-"},"content":""},{"lineNumber":867,"author":{"gitID":"-"},"content":"|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"},{"lineNumber":868,"author":{"gitID":"-"},"content":""},{"lineNumber":869,"author":{"gitID":"-"},"content":"|`* * *` |user |sort contacts based on the clients\u0027 location (North, South, East, West, Central |better match students and tutors that are staying near each other."},{"lineNumber":870,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":871,"author":{"gitID":"e0032017"},"content":"|`* * *` |user |edit the information stored |keep the information up to date"},{"lineNumber":872,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":873,"author":{"gitID":"-"},"content":"|`* * *` |user |tag tutors and students with multiple fields |do multi-layer searching to better match tutors and students"},{"lineNumber":874,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":875,"author":{"gitID":"-"},"content":"|`* * *` |user |categorise contacts between students and tutors |reduce the number of tagging required and make searching more convenient"},{"lineNumber":876,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":877,"author":{"gitID":"-"},"content":"|`* * *` |user |group clients based on the subject they wish to study/teach (Math, Eng, Phy, Chem...) |find and match client easily by the subjects registered"},{"lineNumber":878,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":879,"author":{"gitID":"-"},"content":"|`* * *` |user |record the gender preference the students/tutors have (male/female) |find and match client easily by the gender preference registered"},{"lineNumber":880,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":881,"author":{"gitID":"e0032017"},"content":"|`* * *` |user |see and compare the price that students/tutors are willing to pay/accept|match them based on pricing"},{"lineNumber":882,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":883,"author":{"gitID":"-"},"content":"|`* * *` |user |search by tags added to client |generate a list of clients that have the same tags"},{"lineNumber":884,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":885,"author":{"gitID":"-"},"content":"|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"},{"lineNumber":886,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":887,"author":{"gitID":"-"},"content":"|`* *` |user |search multiple tags |narrow down the search to clients that fit all the different tags searched."},{"lineNumber":888,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":889,"author":{"gitID":"-"},"content":"|`* *` |user |easily delete all students/tutors |save time manually deleting"},{"lineNumber":890,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":891,"author":{"gitID":"-"},"content":"|`* *` |user |get a list of all tutors that corresponds to a students requirements |give students more choices on which tutor they want"},{"lineNumber":892,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":893,"author":{"gitID":"-"},"content":"|`* *` |user |get a list of all students that corresponds to a tutor\u0027s requirements |give tutors more choices on which students they want"},{"lineNumber":894,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":895,"author":{"gitID":"e0032017"},"content":"|`* *` |user |automatically update the year of all students |need not manually change all the information during new year"},{"lineNumber":896,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":897,"author":{"gitID":"e0032017"},"content":"|`* *` |user |update which time slot the tutor is already working |plan their timetable without any clash in timing"},{"lineNumber":898,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":899,"author":{"gitID":"-"},"content":"|`* *` |user |have a ranking on how good the tutor is |understand which tutor the user should recommend more"},{"lineNumber":900,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":901,"author":{"gitID":"e0032017"},"content":"|`* *` |user |highlight urgent tuition requests |set reminder to place more attention on these assignments"},{"lineNumber":902,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":903,"author":{"gitID":"-"},"content":"|`* *` |user |blacklist certain tutors or students |make sure the user will not accept their assignments"},{"lineNumber":904,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":905,"author":{"gitID":"-"},"content":"|`* *` |user |have the option to customise the font size and colour |make changes to the appearance to suit the user\u0027s preference"},{"lineNumber":906,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":907,"author":{"gitID":"-"},"content":"|`* *` |user |have the option to customise the user\u0027s background |make the application more appealing to the user"},{"lineNumber":908,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":909,"author":{"gitID":"e0032017"},"content":"|`* *` |user |email the contacts in the application |save the trouble from opening another web-browser or email application"},{"lineNumber":910,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":911,"author":{"gitID":"-"},"content":"|`* *` |user |keep track of whether the tutors have paid their agent fee |keep track and remind those who have not paid."},{"lineNumber":912,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":913,"author":{"gitID":"e0032017"},"content":"|`*` |user |directly navigate between contacts |save the trouble from returning to the main page every time"},{"lineNumber":914,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":915,"author":{"gitID":"e0032017"},"content":"|`*` |user |keep a record of how much the students improve |keep track of how good the tutor is"},{"lineNumber":916,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":917,"author":{"gitID":"-"},"content":""},{"lineNumber":918,"author":{"gitID":"-"},"content":""},{"lineNumber":919,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":920,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":921,"author":{"gitID":"-"},"content":""},{"lineNumber":922,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `TuitionCor` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":923,"author":{"gitID":"-"},"content":""},{"lineNumber":924,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":925,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete person"},{"lineNumber":926,"author":{"gitID":"-"},"content":""},{"lineNumber":927,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":928,"author":{"gitID":"-"},"content":""},{"lineNumber":929,"author":{"gitID":"-"},"content":"1.  User requests to list persons"},{"lineNumber":930,"author":{"gitID":"-"},"content":"2.  TuitionCor shows a list of persons"},{"lineNumber":931,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific person in the list"},{"lineNumber":932,"author":{"gitID":"-"},"content":"4.  TuitionCor deletes the person"},{"lineNumber":933,"author":{"gitID":"-"},"content":"+"},{"lineNumber":934,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":935,"author":{"gitID":"-"},"content":""},{"lineNumber":936,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":937,"author":{"gitID":"-"},"content":""},{"lineNumber":938,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":939,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":940,"author":{"gitID":"-"},"content":"+"},{"lineNumber":941,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":942,"author":{"gitID":"-"},"content":""},{"lineNumber":943,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":944,"author":{"gitID":"-"},"content":"+"},{"lineNumber":945,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":946,"author":{"gitID":"-"},"content":"** 3a1. TuitionCor shows an error message."},{"lineNumber":947,"author":{"gitID":"-"},"content":"+"},{"lineNumber":948,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":949,"author":{"gitID":"-"},"content":""},{"lineNumber":950,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":951,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Sort student\u0027s list by locality"},{"lineNumber":952,"author":{"gitID":"-"},"content":""},{"lineNumber":953,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":954,"author":{"gitID":"-"},"content":""},{"lineNumber":955,"author":{"gitID":"-"},"content":"1.  User types “/sort sl” in to the command line."},{"lineNumber":956,"author":{"gitID":"-"},"content":"2.  TuitionCor will return a list of students or tutors based sorted by their locality."},{"lineNumber":957,"author":{"gitID":"-"},"content":"+"},{"lineNumber":958,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":959,"author":{"gitID":"-"},"content":""},{"lineNumber":960,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":961,"author":{"gitID":"-"},"content":""},{"lineNumber":962,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":963,"author":{"gitID":"-"},"content":"* 1a. System detects an invalid input."},{"lineNumber":964,"author":{"gitID":"-"},"content":"+"},{"lineNumber":965,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":966,"author":{"gitID":"-"},"content":"** 1a1. TuitionCor will display invalid command or display sort message usage."},{"lineNumber":967,"author":{"gitID":"-"},"content":"** 1a2. User enter required information."},{"lineNumber":968,"author":{"gitID":"-"},"content":"** 1a3. Steps 3a1 and 3a2 are repeated until valid input is entered."},{"lineNumber":969,"author":{"gitID":"-"},"content":"+"},{"lineNumber":970,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":971,"author":{"gitID":"-"},"content":""},{"lineNumber":972,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":973,"author":{"gitID":"-"},"content":"* 1b. System detects no further input."},{"lineNumber":974,"author":{"gitID":"-"},"content":"+"},{"lineNumber":975,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":976,"author":{"gitID":"-"},"content":""},{"lineNumber":977,"author":{"gitID":"-"},"content":""},{"lineNumber":978,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":979,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Match"},{"lineNumber":980,"author":{"gitID":"-"},"content":""},{"lineNumber":981,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":982,"author":{"gitID":"-"},"content":""},{"lineNumber":983,"author":{"gitID":"-"},"content":"1.  User enter match followed by a person name."},{"lineNumber":984,"author":{"gitID":"-"},"content":"2.  TuitionCor displays information of client in the respective list (either tutor list or student list)"},{"lineNumber":985,"author":{"gitID":"-"},"content":"3.  TuitionCor returns a list of potential matches in the respective list."},{"lineNumber":986,"author":{"gitID":"-"},"content":"+"},{"lineNumber":987,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":988,"author":{"gitID":"-"},"content":""},{"lineNumber":989,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":990,"author":{"gitID":"-"},"content":""},{"lineNumber":991,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":992,"author":{"gitID":"-"},"content":"* 1a. Client cannot be found."},{"lineNumber":993,"author":{"gitID":"-"},"content":"+"},{"lineNumber":994,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":995,"author":{"gitID":"-"},"content":""},{"lineNumber":996,"author":{"gitID":"-"},"content":"* 3a. There is no match found."},{"lineNumber":997,"author":{"gitID":"-"},"content":"+"},{"lineNumber":998,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":999,"author":{"gitID":"-"},"content":"** 3a1. TuitionCor returns an empty list."},{"lineNumber":1000,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1001,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1002,"author":{"gitID":"-"},"content":""},{"lineNumber":1003,"author":{"gitID":"-"},"content":""},{"lineNumber":1004,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1005,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1006,"author":{"gitID":"-"},"content":""},{"lineNumber":1007,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1008,"author":{"gitID":"-"},"content":".  Should be able to hold up to 5000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1009,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1010,"author":{"gitID":"-"},"content":".  Application should be able execute any command within 3 seconds."},{"lineNumber":1011,"author":{"gitID":"-"},"content":".  Application should have a self-explanatory installation process."},{"lineNumber":1012,"author":{"gitID":"-"},"content":".  Application should be less than 5mb in size."},{"lineNumber":1013,"author":{"gitID":"-"},"content":".  Application is expected to allow printing."},{"lineNumber":1014,"author":{"gitID":"-"},"content":".  Application should have an auto-save function upon exiting the application."},{"lineNumber":1015,"author":{"gitID":"-"},"content":""},{"lineNumber":1016,"author":{"gitID":"-"},"content":""},{"lineNumber":1017,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1018,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1019,"author":{"gitID":"-"},"content":""},{"lineNumber":1020,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1021,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1022,"author":{"gitID":"-"},"content":""},{"lineNumber":1023,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1024,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1025,"author":{"gitID":"-"},"content":""},{"lineNumber":1026,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1027,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1028,"author":{"gitID":"-"},"content":""},{"lineNumber":1029,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1030,"author":{"gitID":"-"},"content":""},{"lineNumber":1031,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1032,"author":{"gitID":"-"},"content":""},{"lineNumber":1033,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1034,"author":{"gitID":"-"},"content":""},{"lineNumber":1035,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1036,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1037,"author":{"gitID":"-"},"content":""},{"lineNumber":1038,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1039,"author":{"gitID":"-"},"content":""},{"lineNumber":1040,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1041,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1042,"author":{"gitID":"-"},"content":""},{"lineNumber":1043,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1044,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1045,"author":{"gitID":"-"},"content":""},{"lineNumber":1046,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1047,"author":{"gitID":"-"},"content":""},{"lineNumber":1048,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1049,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1050,"author":{"gitID":"-"},"content":""},{"lineNumber":1051,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1052,"author":{"gitID":"-"},"content":""},{"lineNumber":1053,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1054,"author":{"gitID":"-"},"content":""},{"lineNumber":1055,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1056,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1057,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1058,"author":{"gitID":"-"},"content":""},{"lineNumber":1059,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1060,"author":{"gitID":"-"},"content":""},{"lineNumber":1061,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1062,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1063,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1064,"author":{"gitID":"-"},"content":""},{"lineNumber":1065,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1066,"author":{"gitID":"-"},"content":""},{"lineNumber":1067,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1068,"author":{"gitID":"-"},"content":""},{"lineNumber":1069,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1070,"author":{"gitID":"-"},"content":""},{"lineNumber":1071,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1072,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1073,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1074,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1075,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1076,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1077,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1078,"author":{"gitID":"-"},"content":""},{"lineNumber":1079,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1080,"author":{"gitID":"-"},"content":""},{"lineNumber":1081,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1082,"author":{"gitID":"-"},"content":""},{"lineNumber":1083,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1084,"author":{"gitID":"-"},"content":""},{"lineNumber":1085,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1086,"author":{"gitID":"-"},"content":""},{"lineNumber":1087,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1088,"author":{"gitID":"-"},"content":""},{"lineNumber":1089,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1090,"author":{"gitID":"-"},"content":"\u003d\u003d Feature Contribution"},{"lineNumber":1091,"author":{"gitID":"-"},"content":""},{"lineNumber":1092,"author":{"gitID":"-"},"content":"Given below are the minor and major feature contributions for each of our team member."},{"lineNumber":1093,"author":{"gitID":"-"},"content":""},{"lineNumber":1094,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Ngeow Shan Yong Destin"},{"lineNumber":1095,"author":{"gitID":"-"},"content":""},{"lineNumber":1096,"author":{"gitID":"-"},"content":". Major Contribution"},{"lineNumber":1097,"author":{"gitID":"-"},"content":""},{"lineNumber":1098,"author":{"gitID":"-"},"content":".. Extending of Person class to Client class +"},{"lineNumber":1099,"author":{"gitID":"-"},"content":"   Client class includes fields that are specific to TuitionCor such as subject, which is not available in person."},{"lineNumber":1100,"author":{"gitID":"-"},"content":""},{"lineNumber":1101,"author":{"gitID":"-"},"content":". Minor Contribution"},{"lineNumber":1102,"author":{"gitID":"-"},"content":""},{"lineNumber":1103,"author":{"gitID":"-"},"content":".. Splitting storage of UniquePersonList into 2 List, 1 for Student and 1 for Tutor +"},{"lineNumber":1104,"author":{"gitID":"-"},"content":"   In TuitionCor all Client added would be either a student or a tutor, hence this would allow for easier organization of added entries. Also, this would remove the need to have to search through the entire list to see who are student or tutor at every command."},{"lineNumber":1105,"author":{"gitID":"-"},"content":""},{"lineNumber":1106,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Zhu Jiahui"},{"lineNumber":1107,"author":{"gitID":"-"},"content":""},{"lineNumber":1108,"author":{"gitID":"-"},"content":". Major Contribution"},{"lineNumber":1109,"author":{"gitID":"-"},"content":""},{"lineNumber":1110,"author":{"gitID":"-"},"content":".. Match Function +"},{"lineNumber":1111,"author":{"gitID":"-"},"content":"   This function matches a Student to any Tutor in TuitionCor that meets the requirements of the Student (or vice versa).This acts as the main purpose of TuitionCor, which is to help coordinate Students and Tutors."},{"lineNumber":1112,"author":{"gitID":"-"},"content":""},{"lineNumber":1113,"author":{"gitID":"-"},"content":". Minor Contribution"},{"lineNumber":1114,"author":{"gitID":"-"},"content":""},{"lineNumber":1115,"author":{"gitID":"-"},"content":".. Enhancement of Find function to be able to find all fields and not only the person name +"},{"lineNumber":1116,"author":{"gitID":"-"},"content":"   This allows the user be able to search for anything related to the person he wishes to find in TuitionCor. For example, he can now search the address or phone number and be able to find the person."},{"lineNumber":1117,"author":{"gitID":"-"},"content":""},{"lineNumber":1118,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Lim Hong Cho"},{"lineNumber":1119,"author":{"gitID":"-"},"content":""},{"lineNumber":1120,"author":{"gitID":"-"},"content":". Major Contribution"},{"lineNumber":1121,"author":{"gitID":"-"},"content":""},{"lineNumber":1122,"author":{"gitID":"-"},"content":".. UI Changes +"},{"lineNumber":1123,"author":{"gitID":"-"},"content":"   The UI would be edited to suit TuitionCor\u0027s purpose by showing the Student and Tutor separately"},{"lineNumber":1124,"author":{"gitID":"-"},"content":""},{"lineNumber":1125,"author":{"gitID":"-"},"content":". Minor Contribution"},{"lineNumber":1126,"author":{"gitID":"-"},"content":""},{"lineNumber":1127,"author":{"gitID":"-"},"content":".. Sort +"},{"lineNumber":1128,"author":{"gitID":"-"},"content":"   This would allow the user to view the sorted list of Students and Tutors separately allowing for easier viewing of a specific category."}],"authorContributionMap":{"e0032017":31,"-":1097}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.AddClientCommand;"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.SearchContainsKeywordsPredicate;"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"import seedu.address.testutil.ClientBuilder;"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"import seedu.address.testutil.ClientUtil;"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"e0032017"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"e0032017"},"content":"    public void parseCommand_addAlias() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":58,"author":{"gitID":"e0032017"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS + \" \""},{"lineNumber":59,"author":{"gitID":"e0032017"},"content":"                + PersonUtil.getPersonDetails(person));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"shookshire"},"content":"    public void parseCommand_addClient() throws Exception {"},{"lineNumber":65,"author":{"gitID":"shookshire"},"content":"        Client client \u003d new ClientBuilder().build();"},{"lineNumber":66,"author":{"gitID":"shookshire"},"content":"        AddClientCommand command \u003d (AddClientCommand) parser.parseCommand(ClientUtil.getAddClientCommand(client));"},{"lineNumber":67,"author":{"gitID":"shookshire"},"content":"        assertEquals(new AddClientCommand(client), command);"},{"lineNumber":68,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":70,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"shookshire"},"content":"    public void parseCommand_addClientAlias() throws Exception {"},{"lineNumber":72,"author":{"gitID":"shookshire"},"content":"        Client client \u003d new ClientBuilder().build();"},{"lineNumber":73,"author":{"gitID":"shookshire"},"content":"        AddClientCommand command \u003d (AddClientCommand) parser.parseCommand(AddClientCommand.COMMAND_ALIAS + \" \""},{"lineNumber":74,"author":{"gitID":"shookshire"},"content":"                + ClientUtil.getClientDetails(client));"},{"lineNumber":75,"author":{"gitID":"shookshire"},"content":"        assertEquals(new AddClientCommand(client), command);"},{"lineNumber":76,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":80,"author":{"gitID":"e0032017"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":81,"author":{"gitID":"e0032017"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":82,"author":{"gitID":"e0032017"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":84,"author":{"gitID":"e0032017"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"e0032017"},"content":"    public void parseCommand_clearAlias() throws Exception {"},{"lineNumber":86,"author":{"gitID":"e0032017"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":87,"author":{"gitID":"e0032017"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":93,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"e0032017"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"e0032017"},"content":"    public void parseCommand_deleteAlias() throws Exception {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":100,"author":{"gitID":"e0032017"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":109,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"e0032017"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"e0032017"},"content":"    public void parseCommand_editAlias() throws Exception {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":117,"author":{"gitID":"e0032017"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":118,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"e0032017"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"e0032017"},"content":"    public void parseCommand_exitAlias() throws Exception {"},{"lineNumber":130,"author":{"gitID":"e0032017"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS) instanceof ExitCommand);"},{"lineNumber":131,"author":{"gitID":"e0032017"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS + \" 3\") instanceof ExitCommand);"},{"lineNumber":132,"author":{"gitID":"e0032017"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":138,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new SearchContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"e0032017"},"content":"    @Test"},{"lineNumber":143,"author":{"gitID":"e0032017"},"content":"    public void parseCommand_findAlias() throws Exception {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":146,"author":{"gitID":"e0032017"},"content":"                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new SearchContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":148,"author":{"gitID":"e0032017"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"e0032017"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"e0032017"},"content":"    public void parseCommand_historyAlias() throws Exception {"},{"lineNumber":171,"author":{"gitID":"e0032017"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":172,"author":{"gitID":"e0032017"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"e0032017"},"content":"    @Test"},{"lineNumber":189,"author":{"gitID":"e0032017"},"content":"    public void parseCommand_listAlias() throws Exception {"},{"lineNumber":190,"author":{"gitID":"e0032017"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"},{"lineNumber":191,"author":{"gitID":"e0032017"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":192,"author":{"gitID":"e0032017"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":197,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"e0032017"},"content":"    @Test"},{"lineNumber":202,"author":{"gitID":"e0032017"},"content":"    public void parseCommand_selectAlias() throws Exception {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":204,"author":{"gitID":"e0032017"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":211,"author":{"gitID":"e0032017"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"e0032017"},"content":"    @Test"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"},{"lineNumber":216,"author":{"gitID":"e0032017"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"},{"lineNumber":217,"author":{"gitID":"e0032017"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":218,"author":{"gitID":"e0032017"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":223,"author":{"gitID":"e0032017"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"e0032017"},"content":"    @Test"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":229,"author":{"gitID":"e0032017"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":230,"author":{"gitID":"e0032017"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"e0032017"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"e0032017":53,"shookshire":34,"-":158}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":128,"author":{"gitID":"shookshire"},"content":"        public void addTutor(Client tutor) throws DuplicatePersonException {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":132,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":133,"author":{"gitID":"shookshire"},"content":"        public void addStudent(Client student) throws DuplicatePersonException {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":146,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":148,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":149,"author":{"gitID":"shookshire"},"content":"        public ObservableList\u003cClient\u003e getFilteredTutorList() {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":155,"author":{"gitID":"shookshire"},"content":"        public void updateFilteredTutorList(Predicate\u003cClient\u003e predicate) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":12,"-":181}},{"path":"src/test/java/seedu/address/model/UniqueClientListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.UniqueClientList;"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"public class UniqueClientListTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"        UniqueClientList uniqueClientList \u003d new UniqueClientList();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"        uniqueClientList.asObservableList().remove(0);"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":7,"-":12}},{"path":"src/test/java/seedu/address/model/person/GradeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"public class GradeTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Grade(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidSubject_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidSubject \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Grade(invalidSubject));"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"    public void isValidGrade() {"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"        // null subject"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Grade.isValidGrade(null));"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"        // invalid subject"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"        assertFalse(Grade.isValidGrade(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"        assertFalse(Grade.isValidGrade(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"        // valid subject"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"        assertTrue(Grade.isValidGrade(\"pri3\"));"},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"        assertTrue(Grade.isValidGrade(\"-\")); // one character"},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"        assertTrue(Grade.isValidGrade(\"pri3 pri5 pri6 sec3\")); // long subject"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":20,"-":17}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":77,"author":{"gitID":"shookshire"},"content":"        private final ObservableList\u003cClient\u003e tutors \u003d FXCollections.observableArrayList();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":91,"author":{"gitID":"shookshire"},"content":"        public ObservableList\u003cClient\u003e getTutorList() {"},{"lineNumber":92,"author":{"gitID":"shookshire"},"content":"            return tutors;"},{"lineNumber":93,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":7,"-":94}},{"path":"src/test/java/seedu/address/model/person/CategoryTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"public class CategoryTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Category(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidSubject_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidSubject \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Category(invalidSubject));"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"    public void isValidCategory() {"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"        // null subject"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Category.isValidCategory(null));"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"        // invalid subject"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"        assertFalse(Category.isValidCategory(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"        assertFalse(Category.isValidCategory(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"        assertFalse(Category.isValidCategory(\"a\")); // character apart from s or t"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"        assertFalse(Category.isValidCategory(\"st\")); // more than just character s or t"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"        // valid subject"},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"        assertTrue(Category.isValidCategory(\"s\"));"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"        assertTrue(Category.isValidCategory(\"t\"));"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":21,"-":17}},{"path":"src/test/java/seedu/address/logic/commands/AddClientCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"import seedu.address.testutil.ClientBuilder;"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"public class AddClientCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"    public void constructor_nullClient_throwsNullPointerException() {"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"        new AddClientCommand(null);"},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"    public void execute_clientAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"        ModelStubAcceptingClientAdded modelStub \u003d new ModelStubAcceptingClientAdded();"},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"        Client validClient \u003d new ClientBuilder().build();"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"        CommandResult commandResult \u003d getAddClientCommandForPerson(validClient, modelStub).execute();"},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"        assertEquals(String.format(AddClientCommand.MESSAGE_SUCCESS_TUTOR, validClient), commandResult.feedbackToUser);"},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":"        assertEquals(Arrays.asList(validClient), modelStub.tutorsAdded);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateClientException();"},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":"        Client validClient \u003d new ClientBuilder().build();"},{"lineNumber":56,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":57,"author":{"gitID":"shookshire"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":"        thrown.expectMessage(AddClientCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":59,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":60,"author":{"gitID":"shookshire"},"content":"        getAddClientCommandForPerson(validClient, modelStub).execute();"},{"lineNumber":61,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":63,"author":{"gitID":"shookshire"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"shookshire"},"content":"    public void equals() {"},{"lineNumber":65,"author":{"gitID":"shookshire"},"content":"        Client alice \u003d new ClientBuilder().withName(\"Alice\").build();"},{"lineNumber":66,"author":{"gitID":"shookshire"},"content":"        Client bob \u003d new ClientBuilder().withName(\"Bob\").build();"},{"lineNumber":67,"author":{"gitID":"shookshire"},"content":"        AddClientCommand addAliceCommand \u003d new AddClientCommand(alice);"},{"lineNumber":68,"author":{"gitID":"shookshire"},"content":"        AddClientCommand addBobCommand \u003d new AddClientCommand(bob);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":74,"author":{"gitID":"shookshire"},"content":"        AddClientCommand addAliceCommandCopy \u003d new AddClientCommand(alice);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"shookshire"},"content":"     * Generates a new AddClientCommand with the details of the given person."},{"lineNumber":89,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"shookshire"},"content":"    private AddClientCommand getAddClientCommandForPerson(Client client, Model model) {"},{"lineNumber":91,"author":{"gitID":"shookshire"},"content":"        AddClientCommand command \u003d new AddClientCommand(client);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":128,"author":{"gitID":"shookshire"},"content":"        public void addTutor(Client tutor) throws DuplicatePersonException {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":132,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":133,"author":{"gitID":"shookshire"},"content":"        public void addStudent(Client student) throws DuplicatePersonException {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":146,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":148,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":149,"author":{"gitID":"shookshire"},"content":"        public ObservableList\u003cClient\u003e getFilteredTutorList() {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":155,"author":{"gitID":"shookshire"},"content":"        public void updateFilteredTutorList(Predicate\u003cClient\u003e predicate) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"shookshire"},"content":"    private class ModelStubThrowingDuplicateClientException extends AddClientCommandTest.ModelStub {"},{"lineNumber":164,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":165,"author":{"gitID":"shookshire"},"content":"        public void addTutor(Client tutor) throws DuplicatePersonException {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":170,"author":{"gitID":"shookshire"},"content":"        public void addStudent(Client student) throws DuplicatePersonException {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"shookshire"},"content":"     * A Model stub that always accept the client being added."},{"lineNumber":182,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"shookshire"},"content":"    private class ModelStubAcceptingClientAdded extends AddClientCommandTest.ModelStub {"},{"lineNumber":184,"author":{"gitID":"shookshire"},"content":"        final ArrayList\u003cClient\u003e tutorsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":185,"author":{"gitID":"shookshire"},"content":"        final ArrayList\u003cClient\u003e studentsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":188,"author":{"gitID":"shookshire"},"content":"        public void addTutor(Client tutor) throws DuplicatePersonException {"},{"lineNumber":189,"author":{"gitID":"shookshire"},"content":"            requireNonNull(tutor);"},{"lineNumber":190,"author":{"gitID":"shookshire"},"content":"            tutorsAdded.add(tutor);"},{"lineNumber":191,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":193,"author":{"gitID":"shookshire"},"content":"        @Override"},{"lineNumber":194,"author":{"gitID":"shookshire"},"content":"        public void addStudent(Client student) throws DuplicatePersonException {"},{"lineNumber":195,"author":{"gitID":"shookshire"},"content":"            requireNonNull(student);"},{"lineNumber":196,"author":{"gitID":"shookshire"},"content":"            studentsAdded.add(student);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":68,"-":137}},{"path":"src/test/java/seedu/address/testutil/ClientUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"shookshire"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":3,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":5,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.AddClientCommand;"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":" * A utility class for Client."},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":" */"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"public class ClientUtil {"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"     * Returns an add command string for adding the {@code client}."},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"    public static String getAddClientCommand(Client client) {"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"        return AddClientCommand.COMMAND_WORD + \" \" + getClientDetails(client);"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"     * Returns the part of command string for the given {@code client}\u0027s details."},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"    public static String getClientDetails(Client client) {"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"        sb.append(PREFIX_CATEGORY + client.getCategory().value + \" \");"},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"        sb.append(PREFIX_NAME + client.getName().fullName + \" \");"},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"        sb.append(PREFIX_PHONE + client.getPhone().value + \" \");"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"        sb.append(PREFIX_EMAIL + client.getEmail().value + \" \");"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"        sb.append(PREFIX_ADDRESS + client.getAddress().value + \" \");"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"        client.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"        sb.append(PREFIX_LOCATION + client.getLocation().value + \" \");"},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"        sb.append(PREFIX_GRADE + client.getGrade().value + \" \");"},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"        sb.append(PREFIX_SUBJECT + client.getSubject().value + \" \");"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"        return sb.toString();"},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":45}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private TutorListPanel tutorListPanel;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private StudentListPanel studentListPanel;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private StackPane tutorListPanelPlaceholder;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private StackPane studentListPanelPlaceholder;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":93,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":94,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":95,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":96,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":97,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":98,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":99,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":100,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":101,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":102,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":103,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":104,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":105,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":106,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        studentListPanel \u003d new StudentListPanel(logic.getFilteredPersonList());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        studentListPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"shookshire"},"content":"        tutorListPanel \u003d new TutorListPanel(logic.getFilteredTutorList());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        tutorListPanelPlaceholder.getChildren().add(tutorListPanel.getRoot());"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":160,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public StudentListPanel getStudentListPanel() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        return this.studentListPanel;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    public TutorListPanel getTutorListPanel () {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        return this.tutorListPanel;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * @// TODO: 14/3/2018 Remove this if no longer needed"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":1,"-":202}},{"path":"src/test/java/seedu/address/testutil/ClientBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Grade;"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Location;"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":" * A utility class to help with building Client objects."},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":" */"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"public class ClientBuilder {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"    public static final String DEFAULT_LOCATION \u003d \"north\";"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"    public static final String DEFAULT_GRADE \u003d \"pri3\";"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"    public static final String DEFAULT_SUBJECT \u003d \"physics\";"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"    public static final String DEFAULT_CATEGORY \u003d \"t\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"    private Location location;"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"    private Grade grade;"},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"    private Subject subject;"},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"    private Category category;"},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"    public ClientBuilder() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":"        location \u003d new Location(DEFAULT_LOCATION);"},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":"        grade \u003d new Grade(DEFAULT_GRADE);"},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"        subject \u003d new Subject(DEFAULT_SUBJECT);"},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":"        category \u003d new Category(DEFAULT_CATEGORY);"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"shookshire"},"content":"     * Initializes the ClientBuilder with the data of {@code ClientToCopy}."},{"lineNumber":57,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":"    public ClientBuilder(Client clientToCopy) {"},{"lineNumber":59,"author":{"gitID":"shookshire"},"content":"        name \u003d clientToCopy.getName();"},{"lineNumber":60,"author":{"gitID":"shookshire"},"content":"        phone \u003d clientToCopy.getPhone();"},{"lineNumber":61,"author":{"gitID":"shookshire"},"content":"        email \u003d clientToCopy.getEmail();"},{"lineNumber":62,"author":{"gitID":"shookshire"},"content":"        address \u003d clientToCopy.getAddress();"},{"lineNumber":63,"author":{"gitID":"shookshire"},"content":"        tags \u003d new HashSet\u003c\u003e(clientToCopy.getTags());"},{"lineNumber":64,"author":{"gitID":"shookshire"},"content":"        location \u003d clientToCopy.getLocation();"},{"lineNumber":65,"author":{"gitID":"shookshire"},"content":"        grade \u003d clientToCopy.getGrade();"},{"lineNumber":66,"author":{"gitID":"shookshire"},"content":"        subject \u003d clientToCopy.getSubject();"},{"lineNumber":67,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":69,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"shookshire"},"content":"     * Sets the {@code Name} of the {@code Client} that we are building."},{"lineNumber":71,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"shookshire"},"content":"    public ClientBuilder withName(String name) {"},{"lineNumber":73,"author":{"gitID":"shookshire"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":74,"author":{"gitID":"shookshire"},"content":"        return this;"},{"lineNumber":75,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":77,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"shookshire"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Client} that we are building."},{"lineNumber":79,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"shookshire"},"content":"    public ClientBuilder withTags(String ... tags) {"},{"lineNumber":81,"author":{"gitID":"shookshire"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":82,"author":{"gitID":"shookshire"},"content":"        return this;"},{"lineNumber":83,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":85,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"shookshire"},"content":"     * Sets the {@code Address} of the {@code Client} that we are building."},{"lineNumber":87,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"shookshire"},"content":"    public ClientBuilder withAddress(String address) {"},{"lineNumber":89,"author":{"gitID":"shookshire"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":90,"author":{"gitID":"shookshire"},"content":"        return this;"},{"lineNumber":91,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":93,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"shookshire"},"content":"     * Sets the {@code Phone} of the {@code Client} that we are building."},{"lineNumber":95,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"shookshire"},"content":"    public ClientBuilder withPhone(String phone) {"},{"lineNumber":97,"author":{"gitID":"shookshire"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":98,"author":{"gitID":"shookshire"},"content":"        return this;"},{"lineNumber":99,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":101,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"shookshire"},"content":"     * Sets the {@code Email} of the {@code Client} that we are building."},{"lineNumber":103,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"shookshire"},"content":"    public ClientBuilder withEmail(String email) {"},{"lineNumber":105,"author":{"gitID":"shookshire"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":106,"author":{"gitID":"shookshire"},"content":"        return this;"},{"lineNumber":107,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":109,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"shookshire"},"content":"     * Sets the {@code Location} of the {@code Client} that we are building."},{"lineNumber":111,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"shookshire"},"content":"    public ClientBuilder withLocation(String location) {"},{"lineNumber":113,"author":{"gitID":"shookshire"},"content":"        this.location \u003d new Location(location);"},{"lineNumber":114,"author":{"gitID":"shookshire"},"content":"        return this;"},{"lineNumber":115,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":117,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"shookshire"},"content":"     * Sets the {@code Grade} of the {@code Client} that we are building."},{"lineNumber":119,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"shookshire"},"content":"    public ClientBuilder withGrade(String grade) {"},{"lineNumber":121,"author":{"gitID":"shookshire"},"content":"        this.grade \u003d new Grade(grade);"},{"lineNumber":122,"author":{"gitID":"shookshire"},"content":"        return this;"},{"lineNumber":123,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":125,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"shookshire"},"content":"     * Sets the {@code Subject} of the {@code Client} that we are building."},{"lineNumber":127,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"shookshire"},"content":"    public ClientBuilder withSubject(String subject) {"},{"lineNumber":129,"author":{"gitID":"shookshire"},"content":"        this.subject \u003d new Subject(subject);"},{"lineNumber":130,"author":{"gitID":"shookshire"},"content":"        return this;"},{"lineNumber":131,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":133,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"shookshire"},"content":"     * Sets the {@code Category} of the {@code Client} that we are building."},{"lineNumber":135,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"shookshire"},"content":"    public ClientBuilder withCategory(String category) {"},{"lineNumber":137,"author":{"gitID":"shookshire"},"content":"        this.category \u003d new Category(category);"},{"lineNumber":138,"author":{"gitID":"shookshire"},"content":"        return this;"},{"lineNumber":139,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":141,"author":{"gitID":"shookshire"},"content":"    public Client build() {"},{"lineNumber":142,"author":{"gitID":"shookshire"},"content":"        return new Client(name, phone, email, address, tags, location, grade, subject, category);"},{"lineNumber":143,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":145,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":123,"-":22}},{"path":"src/main/java/seedu/address/ui/TutorListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"import seedu.address.commons.events.ui.ClientPanelSelectionChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Panel containing the list of tutors."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class TutorListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"TutorListPanel.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(TutorListPanel.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"    private ListView\u003cClientCard\u003e tutorListView;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"    public TutorListPanel(ObservableList\u003cClient\u003e tutorList) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        setConnections(tutorList);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"    private void setConnections(ObservableList\u003cClient\u003e tutorList) {"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"        ObservableList\u003cClientCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"                tutorList, (client) -\u003e new ClientCard(client, tutorList.indexOf(client) + 1));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        tutorListView.setItems(mappedList);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        tutorListView.setCellFactory(listView -\u003e new StudentListViewCell());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        tutorListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":"                        raise(new ClientPanelSelectionChangedEvent(newValue));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                });"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":"     * Scrolls to the {@code ClientCard} at the {@code index} and selects it."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            tutorListView.scrollTo(index);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            tutorListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"shookshire"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code ClientCard}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"shookshire"},"content":"    class StudentListViewCell extends ListCell\u003cClientCard\u003e {"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":76,"author":{"gitID":"shookshire"},"content":"        protected void updateItem(ClientCard person, boolean empty) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            super.updateItem(person, empty);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"            if (empty || person \u003d\u003d null) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                setGraphic(null);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                setText(null);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                setGraphic(person.getRoot());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":12,"-":76}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"    /** Returns an unmodifiable view of the filtered list of tutors */"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"    ObservableList\u003cClient\u003e getFilteredTutorList();"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":4,"-":27}},{"path":"src/main/java/seedu/address/ui/ClientCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":" * An UI component that displays information of a {@code Client}."},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":" */"},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"public class ClientCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"    private static final String FXML \u003d \"ClientListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String[] TAGS_COLOUR_STYLES \u003d {\"red\" , \"blue\" , \"green\" , \"yellow\" , \"orange\"};"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"    public final Client client;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"    private Label place;"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"    private Label grade;"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"    private Label subject;"},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"    private FlowPane tags;"},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"    public ClientCard(Client client, int displayedIndex) {"},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":"        super(FXML);"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"        this.client \u003d client;"},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":"        name.setText(client.getName().fullName);"},{"lineNumber":56,"author":{"gitID":"shookshire"},"content":"        phone.setText(client.getPhone().value);"},{"lineNumber":57,"author":{"gitID":"shookshire"},"content":"        address.setText(client.getAddress().value);"},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":"        email.setText(client.getEmail().value);"},{"lineNumber":59,"author":{"gitID":"shookshire"},"content":"        place.setText(client.getLocation().value);"},{"lineNumber":60,"author":{"gitID":"shookshire"},"content":"        grade.setText(client.getGrade().value);"},{"lineNumber":61,"author":{"gitID":"shookshire"},"content":"        subject.setText(client.getSubject().value);"},{"lineNumber":62,"author":{"gitID":"shookshire"},"content":"        intTags(client);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     *@author olimhc-reused"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     *Reused from https://github.com/se-edu/addressbook-level4/pull/798/commits with minor modification"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Initialises tags"},{"lineNumber":69,"author":{"gitID":"shookshire"},"content":"     * @param client"},{"lineNumber":70,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"shookshire"},"content":"    private void intTags(Client client) {"},{"lineNumber":72,"author":{"gitID":"shookshire"},"content":"        client.getTags().forEach(tag -\u003e {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            Label newLabel \u003d new Label(tag.tagName);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            newLabel.getStyleClass().add(getColour(tag.tagName));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            tags.getChildren().add(newLabel);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * @param name"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @return String colour"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    private String getColour(String name) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return TAGS_COLOUR_STYLES[(Math.abs(name.hashCode() % TAGS_COLOUR_STYLES.length))];"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":95,"author":{"gitID":"shookshire"},"content":"        if (!(other instanceof ClientCard)) {"},{"lineNumber":96,"author":{"gitID":"shookshire"},"content":"            return false;"},{"lineNumber":97,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":99,"author":{"gitID":"shookshire"},"content":"        // state check"},{"lineNumber":100,"author":{"gitID":"shookshire"},"content":"        ClientCard card \u003d (ClientCard) other;"},{"lineNumber":101,"author":{"gitID":"shookshire"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":102,"author":{"gitID":"shookshire"},"content":"                \u0026\u0026 client.equals(card.client);"},{"lineNumber":103,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":44,"-":60}},{"path":"src/main/java/seedu/address/commons/events/ui/ClientPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"shookshire"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":5,"author":{"gitID":"shookshire"},"content":"import seedu.address.ui.ClientCard;"},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":" * Represents a selection change in the Client List Panel"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":" */"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"public class ClientPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"    private final ClientCard newSelection;"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"    public ClientPanelSelectionChangedEvent(ClientCard newSelection) {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"    public ClientCard getNewSelection() {"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"        return newSelection;"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":18,"-":9}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.AddClientCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.MatchCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":54,"author":{"gitID":"e0032017"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":58,"author":{"gitID":"e0032017"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":62,"author":{"gitID":"e0032017"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":66,"author":{"gitID":"e0032017"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitID":"e0032017"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":74,"author":{"gitID":"e0032017"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":78,"author":{"gitID":"e0032017"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":82,"author":{"gitID":"e0032017"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":86,"author":{"gitID":"e0032017"},"content":"        case ExitCommand.COMMAND_ALIAS:"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":93,"author":{"gitID":"e0032017"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":97,"author":{"gitID":"e0032017"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        case MatchCommand.COMMAND_WORD:"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        case MatchCommand.COMMAND_ALIAS:"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            return new MatchCommandParser().parse(arguments);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"shookshire"},"content":"        case AddClientCommand.COMMAND_WORD:"},{"lineNumber":105,"author":{"gitID":"shookshire"},"content":"        case AddClientCommand.COMMAND_ALIAS:"},{"lineNumber":106,"author":{"gitID":"shookshire"},"content":"            return new AddClientCommandParser().parse(arguments);"},{"lineNumber":107,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"e0032017":11,"shookshire":5,"-":97}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":6,"author":{"gitID":"-"},"content":" */"},{"lineNumber":7,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"    public static final Prefix PREFIX_GRADE \u003d new Prefix(\"g/\");"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"    public static final Prefix PREFIX_SUBJECT \u003d new Prefix(\"s/\");"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":5,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Grade;"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Location;"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":25,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":173,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"shookshire"},"content":"     * Parses a {@code String location} into an {@code Location}."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":177,"author":{"gitID":"shookshire"},"content":"     * @throws IllegalValueException if the given {@code location} is invalid."},{"lineNumber":178,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"shookshire"},"content":"    public static Location parseLocation(String location) throws IllegalValueException {"},{"lineNumber":180,"author":{"gitID":"shookshire"},"content":"        requireNonNull(location);"},{"lineNumber":181,"author":{"gitID":"shookshire"},"content":"        String trimmedLocation \u003d location.trim();"},{"lineNumber":182,"author":{"gitID":"shookshire"},"content":"        if (!Location.isValidLocation(trimmedLocation)) {"},{"lineNumber":183,"author":{"gitID":"shookshire"},"content":"            throw new IllegalValueException(Location.MESSAGE_LOCATION_CONSTRAINTS);"},{"lineNumber":184,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"shookshire"},"content":"        return new Location(trimmedLocation);"},{"lineNumber":186,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":188,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"shookshire"},"content":"     * Parses a {@code Optional\u003cString\u003e location} into an {@code Optional\u003cLocation\u003e} if {@code location} is present."},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":191,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":193,"author":{"gitID":"shookshire"},"content":"    public static Optional\u003cLocation\u003e parseLocation(Optional\u003cString\u003e location) throws IllegalValueException {"},{"lineNumber":194,"author":{"gitID":"shookshire"},"content":"        requireNonNull(location);"},{"lineNumber":195,"author":{"gitID":"shookshire"},"content":"        return location.isPresent() ? Optional.of(parseLocation(location.get())) : Optional.empty();"},{"lineNumber":196,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":198,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"shookshire"},"content":"     * Parses a {@code String grade} into an {@code Grade}."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":201,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":202,"author":{"gitID":"shookshire"},"content":"     * @throws IllegalValueException if the given {@code grade} is invalid."},{"lineNumber":203,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"shookshire"},"content":"    public static Grade parseGrade(String grade) throws IllegalValueException {"},{"lineNumber":205,"author":{"gitID":"shookshire"},"content":"        requireNonNull(grade);"},{"lineNumber":206,"author":{"gitID":"shookshire"},"content":"        String trimmedGrade \u003d grade.trim();"},{"lineNumber":207,"author":{"gitID":"shookshire"},"content":"        if (!Grade.isValidGrade(trimmedGrade)) {"},{"lineNumber":208,"author":{"gitID":"shookshire"},"content":"            throw new IllegalValueException(Grade.MESSAGE_GRADE_CONSTRAINTS);"},{"lineNumber":209,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"shookshire"},"content":"        return new Grade(trimmedGrade);"},{"lineNumber":211,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":213,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"shookshire"},"content":"     * Parses a {@code Optional\u003cString\u003e grade} into an {@code Optional\u003cGrade\u003e} if {@code grade} is present."},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":216,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"shookshire"},"content":"    public static Optional\u003cGrade\u003e parseGrade(Optional\u003cString\u003e grade) throws IllegalValueException {"},{"lineNumber":218,"author":{"gitID":"shookshire"},"content":"        requireNonNull(grade);"},{"lineNumber":219,"author":{"gitID":"shookshire"},"content":"        return grade.isPresent() ? Optional.of(parseGrade(grade.get())) : Optional.empty();"},{"lineNumber":220,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":222,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"shookshire"},"content":"     * Parses a {@code String subject} into an {@code Subject}."},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":225,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":226,"author":{"gitID":"shookshire"},"content":"     * @throws IllegalValueException if the given {@code subject} is invalid."},{"lineNumber":227,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"shookshire"},"content":"    public static Subject parseSubject(String subject) throws IllegalValueException {"},{"lineNumber":229,"author":{"gitID":"shookshire"},"content":"        requireNonNull(subject);"},{"lineNumber":230,"author":{"gitID":"shookshire"},"content":"        String trimmedSubject \u003d subject.trim();"},{"lineNumber":231,"author":{"gitID":"shookshire"},"content":"        if (!Subject.isValidSubject(trimmedSubject)) {"},{"lineNumber":232,"author":{"gitID":"shookshire"},"content":"            throw new IllegalValueException(Subject.MESSAGE_SUBJECT_CONSTRAINTS);"},{"lineNumber":233,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"shookshire"},"content":"        return new Subject(trimmedSubject);"},{"lineNumber":235,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":237,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"shookshire"},"content":"     * Parses a {@code Optional\u003cString\u003e subject} into an {@code Optional\u003cSubject\u003e} if {@code subject} is present."},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":240,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"shookshire"},"content":"    public static Optional\u003cSubject\u003e parseSubject(Optional\u003cString\u003e subject) throws IllegalValueException {"},{"lineNumber":242,"author":{"gitID":"shookshire"},"content":"        requireNonNull(subject);"},{"lineNumber":243,"author":{"gitID":"shookshire"},"content":"        return subject.isPresent() ? Optional.of(parseSubject(subject.get())) : Optional.empty();"},{"lineNumber":244,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":246,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":247,"author":{"gitID":"shookshire"},"content":"     * Parses a {@code String category} into an {@code Category}."},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":249,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":250,"author":{"gitID":"shookshire"},"content":"     * @throws IllegalValueException if the given {@code type} is invalid."},{"lineNumber":251,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":252,"author":{"gitID":"shookshire"},"content":"    public static Category parseCategory(String category) throws IllegalValueException {"},{"lineNumber":253,"author":{"gitID":"shookshire"},"content":"        requireNonNull(category);"},{"lineNumber":254,"author":{"gitID":"shookshire"},"content":"        String trimmedCategory \u003d category.trim();"},{"lineNumber":255,"author":{"gitID":"shookshire"},"content":"        if (!Category.isValidCategory(trimmedCategory)) {"},{"lineNumber":256,"author":{"gitID":"shookshire"},"content":"            throw new IllegalValueException(Category.MESSAGE_CATEGORY_CONSTRAINTS);"},{"lineNumber":257,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":258,"author":{"gitID":"shookshire"},"content":"        return new Category(trimmedCategory);"},{"lineNumber":259,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":261,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":262,"author":{"gitID":"shookshire"},"content":"     * Parses a {@code Optional\u003cString\u003e category} into an {@code Optional\u003cCategory\u003e} if {@code category} is present."},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":264,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":265,"author":{"gitID":"shookshire"},"content":"    public static Optional\u003cCategory\u003e parseCategory(Optional\u003cString\u003e category) throws IllegalValueException {"},{"lineNumber":266,"author":{"gitID":"shookshire"},"content":"        requireNonNull(category);"},{"lineNumber":267,"author":{"gitID":"shookshire"},"content":"        return category.isPresent() ? Optional.of(parseCategory(category.get())) : Optional.empty();"},{"lineNumber":268,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":89,"-":180}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"e0032017"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Person personToDelete;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"e0032017":1,"-":67}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":11,"author":{"gitID":"e0032017"},"content":"    public static final String COMMAND_ALIAS \u003d \"l\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"e0032017":1,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"e0032017"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"e0032017":1,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":20,"author":{"gitID":"e0032017"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"e0032017":1,"-":67}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":16,"author":{"gitID":"e0032017"},"content":"    public static final String COMMAND_ALIAS \u003d \"r\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"e0032017":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/HistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":18,"author":{"gitID":"e0032017"},"content":"    public static final String COMMAND_ALIAS \u003d \"h\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireNonNull(history);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.history \u003d history;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"e0032017":1,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"e0032017"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"e0032017":1,"-":52}},{"path":"src/main/java/seedu/address/logic/parser/AddClientCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"import seedu.address.logic.commands.AddClientCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Category;"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Grade;"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Location;"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":" * Parses input arguments and creates a new AddClientCommand object"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":" */"},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"public class AddClientCommandParser {"},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"     * Parses the given {@code String} of arguments in the context of the AddClientCommand"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"     * and returns an AddClientCommand object for execution."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"    public AddClientCommand parse(String args) throws ParseException {"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"                        PREFIX_TAG, PREFIX_LOCATION, PREFIX_GRADE, PREFIX_SUBJECT, PREFIX_CATEGORY);"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":"                PREFIX_LOCATION, PREFIX_GRADE, PREFIX_SUBJECT, PREFIX_CATEGORY)"},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddClientCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":"            Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION)).get();"},{"lineNumber":59,"author":{"gitID":"shookshire"},"content":"            Grade grade \u003d ParserUtil.parseGrade(argMultimap.getValue(PREFIX_GRADE)).get();"},{"lineNumber":60,"author":{"gitID":"shookshire"},"content":"            Subject subject \u003d ParserUtil.parseSubject(argMultimap.getValue(PREFIX_SUBJECT)).get();"},{"lineNumber":61,"author":{"gitID":"shookshire"},"content":"            Category category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY)).get();"},{"lineNumber":62,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":63,"author":{"gitID":"shookshire"},"content":"            Client client \u003d new Client(name, phone, email, address, tagList, location, grade, subject, category);"},{"lineNumber":64,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":65,"author":{"gitID":"shookshire"},"content":"            return new AddClientCommand(client);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":46,"-":33}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.person.SearchContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book that contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Keyword matching is case insensitive."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":12,"author":{"gitID":"e0032017"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons that contain any of \""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final SearchContainsKeywordsPredicate predicate;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public FindCommand(SearchContainsKeywordsPredicate predicate) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"e0032017":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Terminates the program."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":12,"author":{"gitID":"e0032017"},"content":"    public static final String COMMAND_ALIAS \u003d \"x\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ExitAppRequestEvent());"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"e0032017":1,"-":21}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":"    public ObservableList\u003cClient\u003e getFilteredTutorList() {"},{"lineNumber":56,"author":{"gitID":"shookshire"},"content":"        return model.getFilteredTutorList();"},{"lineNumber":57,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":6,"-":57}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":37,"author":{"gitID":"e0032017"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":149,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":150,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":161,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.tags);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":199,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":200,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":201,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":207,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":208,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":209,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":210,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":223,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":228,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":231,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":232,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":233,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":234,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"e0032017":1,"-":236}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":16,"author":{"gitID":"e0032017"},"content":"    public static final String COMMAND_ALIAS \u003d \"u\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"e0032017":1,"-":36}},{"path":"src/main/java/seedu/address/model/person/Client.java","lines":[{"lineNumber":1,"author":{"gitID":"shookshire"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":5,"author":{"gitID":"shookshire"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":" * Represents a Client in tuitionCor."},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"public class Client extends Person {"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"    private final Location location;"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"    private final Grade grade;"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"    private final Subject subject;"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"    private final Category category;"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"     * Every field must be present and not null."},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"    public Client(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Location location,"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"                  Grade grade, Subject subject, Category category) {"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"        super(name, phone, email, address, tags);"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"        requireAllNonNull(location, grade, subject);"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"        this.location \u003d location;"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"        this.grade \u003d grade;"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"        this.subject \u003d subject;"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"        this.category \u003d category;"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"    public Location getLocation() {"},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"        return location;"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"    public Grade getGrade() {"},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"        return grade;"},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"    public Subject getSubject() {"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"        return subject;"},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"    public Category getCategory() {"},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":"        return category;"},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"        return Objects.hash(this.getName(), this.getPhone(), this.getEmail(), this.getAddress(),"},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":"                this.getTags(), location, grade, subject, category);"},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":57,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":51,"-":6}},{"path":"src/main/java/seedu/address/logic/commands/AddClientCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"shookshire"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":3,"author":{"gitID":"shookshire"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":" * Adds a tutor to TuitionCor."},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":" */"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"public class AddClientCommand extends UndoableCommand {"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"    public static final String COMMAND_WORD \u003d \"addclient\";"},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":"    public static final String COMMAND_ALIAS \u003d \"ac\";"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a tutor to TuitionCor. \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]... \""},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"            + PREFIX_LOCATION + \"LOCATION \""},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"            + PREFIX_GRADE + \"GRADE \""},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"            + PREFIX_SUBJECT + \"SUBJECT\\n\""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"            + PREFIX_TAG + \"owesMoney \""},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"            + PREFIX_LOCATION + \"east \""},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"            + PREFIX_GRADE + \"pri6 \""},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"            + PREFIX_SUBJECT + \"physics\";"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_SUCCESS_STUDENT \u003d \"New student added: %1$s\";"},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_SUCCESS_TUTOR \u003d \"New tutor added: %1$s\";"},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This student/tutor already exists in the address book\";"},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":"    private final Client toAdd;"},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":52,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"shookshire"},"content":"     * Creates an AddClientCommand to add the specified {@code Client}"},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"shookshire"},"content":"    public AddClientCommand(Client client) {"},{"lineNumber":56,"author":{"gitID":"shookshire"},"content":"        requireNonNull(client);"},{"lineNumber":57,"author":{"gitID":"shookshire"},"content":"        toAdd \u003d client;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":64,"author":{"gitID":"shookshire"},"content":"            if (toAdd.getCategory().isStudent()) {"},{"lineNumber":65,"author":{"gitID":"shookshire"},"content":"                model.addStudent(toAdd);"},{"lineNumber":66,"author":{"gitID":"shookshire"},"content":"                return new CommandResult(String.format(MESSAGE_SUCCESS_STUDENT, toAdd));"},{"lineNumber":67,"author":{"gitID":"shookshire"},"content":"            } else {"},{"lineNumber":68,"author":{"gitID":"shookshire"},"content":"                model.addTutor(toAdd);"},{"lineNumber":69,"author":{"gitID":"shookshire"},"content":"                return new CommandResult(String.format(MESSAGE_SUCCESS_TUTOR, toAdd));"},{"lineNumber":70,"author":{"gitID":"shookshire"},"content":"            }"},{"lineNumber":71,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":81,"author":{"gitID":"shookshire"},"content":"                || (other instanceof AddClientCommand // instanceof handles nulls"},{"lineNumber":82,"author":{"gitID":"shookshire"},"content":"                \u0026\u0026 toAdd.equals(((AddClientCommand) other).toAdd));"},{"lineNumber":83,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":55,"-":29}},{"path":"src/main/java/seedu/address/model/person/Category.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":" * Represents if a Client is a student or tutor in TuitionCor."},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidCategory(String)}"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":" */"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"public class Category {"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_CATEGORY_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"            \"Client Category can only be s or t, representing student or tutor respectively\";"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"     * Must be either s or t"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[st]\";"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":"     * Constructs an {@code Category}."},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"     * @param category A valid category."},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"    public Category(String category) {"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"        requireNonNull(category);"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"        checkArgument(isValidCategory(category), MESSAGE_CATEGORY_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"        this.value \u003d category;"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"     * Returns true if a given string is a valid client category."},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"    public static boolean isValidCategory(String test) {"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX);"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"    public boolean isStudent() {"},{"lineNumber":41,"author":{"gitID":"shookshire"},"content":"        return value.equals(\"s\");"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"    public boolean isTutor() {"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":"        return value.equals(\"t\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":56,"author":{"gitID":"shookshire"},"content":"                || (other instanceof Category // instanceof handles nulls"},{"lineNumber":57,"author":{"gitID":"shookshire"},"content":"                \u0026\u0026 this.value.equals(((Category) other).value)); // state check"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":65,"author":{"gitID":"shookshire"},"content":"}"}],"authorContributionMap":{"shookshire":43,"-":22}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":"     * Returns an unmodifiable view of the tutors list."},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"     * This list will not contain any duplicate clients."},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":"    ObservableList\u003cClient\u003e getTutorList();"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":7,"-":24}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.UniqueClientList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"    private final UniqueClientList students;"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"    private final UniqueClientList tutors;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"        students \u003d new UniqueClientList();"},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"        tutors \u003d new UniqueClientList();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":99,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":103,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"shookshire"},"content":"     * Adds a tutor to TuitionCor."},{"lineNumber":105,"author":{"gitID":"shookshire"},"content":"     * Also checks the new tutor\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":106,"author":{"gitID":"shookshire"},"content":"     * and updates the Tag objects in the tutor to point to those in {@link #tags}."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"shookshire"},"content":"    public void addTutor(Client t) throws DuplicatePersonException {"},{"lineNumber":111,"author":{"gitID":"shookshire"},"content":"        Client tutor \u003d syncWithMasterTagList(t);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":115,"author":{"gitID":"shookshire"},"content":"        tutors.add(tutor);"},{"lineNumber":116,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":118,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"shookshire"},"content":"     * Adds a student to TuitionCor."},{"lineNumber":120,"author":{"gitID":"shookshire"},"content":"     * Also checks the new student\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":121,"author":{"gitID":"shookshire"},"content":"     * and updates the Tag objects in the tutor to point to those in {@link #tags}."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"shookshire"},"content":"    public void addStudent(Client t) throws DuplicatePersonException {"},{"lineNumber":126,"author":{"gitID":"shookshire"},"content":"        Client student \u003d syncWithMasterTagList(t);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":130,"author":{"gitID":"shookshire"},"content":"        students.add(student);"},{"lineNumber":131,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":151,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":169,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":172,"author":{"gitID":"-"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(), correctTagReferences);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":176,"author":{"gitID":"shookshire"},"content":"     *  Updates the master tag list to include tags in {@code client} that are not in the list."},{"lineNumber":177,"author":{"gitID":"shookshire"},"content":"     *  @return a copy of this {@code client} such that every tag in this person points to a Tag object in the master"},{"lineNumber":178,"author":{"gitID":"shookshire"},"content":"     *  list."},{"lineNumber":179,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"shookshire"},"content":"    private Client syncWithMasterTagList(Client client) {"},{"lineNumber":181,"author":{"gitID":"shookshire"},"content":"        final UniqueTagList clientTags \u003d new UniqueTagList(client.getTags());"},{"lineNumber":182,"author":{"gitID":"shookshire"},"content":"        tags.mergeFrom(clientTags);"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":190,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":191,"author":{"gitID":"shookshire"},"content":"        clientTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":192,"author":{"gitID":"shookshire"},"content":"        return new Client("},{"lineNumber":193,"author":{"gitID":"shookshire"},"content":"                client.getName(), client.getPhone(), client.getEmail(), client.getAddress(), correctTagReferences,"},{"lineNumber":194,"author":{"gitID":"shookshire"},"content":"                client.getLocation(), client.getGrade(), client.getSubject(), client.getCategory());"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":229,"author":{"gitID":"shookshire"},"content":"    public ObservableList\u003cClient\u003e getTutorList() {"},{"lineNumber":230,"author":{"gitID":"shookshire"},"content":"        return tutors.asObservableList();"},{"lineNumber":231,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":241,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":242,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":243,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":44,"-":207}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":22,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"    private final FilteredList\u003cClient\u003e filteredTutors;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":42,"author":{"gitID":"shookshire"},"content":"        filteredTutors \u003d new FilteredList\u003c\u003e(this.addressBook.getTutorList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"shookshire"},"content":"    public synchronized void addTutor(Client tutor) throws DuplicatePersonException {"},{"lineNumber":89,"author":{"gitID":"shookshire"},"content":"        addressBook.addTutor(tutor);"},{"lineNumber":90,"author":{"gitID":"shookshire"},"content":"        updateFilteredTutorList(PREDICATE_SHOW_ALL_TUTORS);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":92,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":94,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"shookshire"},"content":"    public synchronized void addStudent(Client student) throws DuplicatePersonException {"},{"lineNumber":96,"author":{"gitID":"shookshire"},"content":"        addressBook.addStudent(student);"},{"lineNumber":97,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"shookshire"},"content":"     * Returns an unmodifiable view of the list of {@code Client} backed by the internal list of"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"shookshire"},"content":"    public ObservableList\u003cClient\u003e getFilteredTutorList() {"},{"lineNumber":122,"author":{"gitID":"shookshire"},"content":"        return FXCollections.unmodifiableObservableList(filteredTutors);"},{"lineNumber":123,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":125,"author":{"gitID":"shookshire"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"shookshire"},"content":"    public void updateFilteredTutorList(Predicate\u003cClient\u003e predicate) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":128,"author":{"gitID":"shookshire"},"content":"        filteredTutors.setPredicate(predicate);"},{"lineNumber":129,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":25,"-":124}},{"path":"src/main/java/seedu/address/model/person/Grade.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"shookshire"},"content":" * Represents a Person\u0027s related Grade (the year of study eg. pri4, sec3) in the TuitionCor."},{"lineNumber":8,"author":{"gitID":"shookshire"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidGrade(String)}"},{"lineNumber":9,"author":{"gitID":"shookshire"},"content":" */"},{"lineNumber":10,"author":{"gitID":"shookshire"},"content":"public class Grade {"},{"lineNumber":11,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":12,"author":{"gitID":"shookshire"},"content":"    public static final String MESSAGE_GRADE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"shookshire"},"content":"            \"Grade can be any specified grade but should not be blank\";"},{"lineNumber":14,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":15,"author":{"gitID":"shookshire"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":"     * The first character of the Grade must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"    public static final String GRADE_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":21,"author":{"gitID":"shookshire"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":"     * Constructs an {@code Grade}."},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":"     * @param grade A valid grade."},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"    public Grade(String grade) {"},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"        requireNonNull(grade);"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"        checkArgument(isValidGrade(grade), MESSAGE_GRADE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"shookshire"},"content":"        this.value \u003d grade;"},{"lineNumber":32,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":34,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"shookshire"},"content":"     * Returns true if a given string is a valid client Grade."},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"    public static boolean isValidGrade(String test) {"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"        return test.matches(GRADE_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":"                || (other instanceof Grade // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":"                \u0026\u0026 this.value.equals(((Grade) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":34,"-":23}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"shookshire"},"content":"import seedu.address.model.person.Client;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":"    Predicate\u003cClient\u003e PREDICATE_SHOW_ALL_TUTORS \u003d unused -\u003e true;"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"shookshire"},"content":"    /** Adds the given tutor */"},{"lineNumber":44,"author":{"gitID":"shookshire"},"content":"    void addTutor(Client tutor) throws DuplicatePersonException;"},{"lineNumber":45,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":46,"author":{"gitID":"shookshire"},"content":"    /** Adds the given student */"},{"lineNumber":47,"author":{"gitID":"shookshire"},"content":"    void addStudent(Client student) throws DuplicatePersonException;"},{"lineNumber":48,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"shookshire"},"content":"    /** Returns an unmodifiable view of the filtered tutors list */"},{"lineNumber":59,"author":{"gitID":"shookshire"},"content":"    ObservableList\u003cClient\u003e getFilteredTutorList();"},{"lineNumber":60,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":61,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"shookshire"},"content":"     * Updates the filter of the filtered tutor list to filter by the given {@code predicate}."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"shookshire"},"content":"    void updateFilteredTutorList(Predicate\u003cClient\u003e predicate);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":15,"-":51}},{"path":"src/main/java/seedu/address/model/person/UniqueClientList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"shookshire"},"content":" * A list of client that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitID":"shookshire"},"content":" *"},{"lineNumber":18,"author":{"gitID":"shookshire"},"content":" * Supports a minimal set of list operations."},{"lineNumber":19,"author":{"gitID":"shookshire"},"content":" *"},{"lineNumber":20,"author":{"gitID":"shookshire"},"content":" * @see Client#equals(Object)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"shookshire"},"content":"public class UniqueClientList implements Iterable\u003cClient\u003e {"},{"lineNumber":24,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":25,"author":{"gitID":"shookshire"},"content":"    private final ObservableList\u003cClient\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":26,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":27,"author":{"gitID":"shookshire"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"shookshire"},"content":"     * Returns true if the list contains an equivalent client as the given argument."},{"lineNumber":29,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"shookshire"},"content":"    public boolean contains(Client toCheck) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"shookshire"},"content":"     * Adds a client to the list."},{"lineNumber":37,"author":{"gitID":"shookshire"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"shookshire"},"content":"     * @throws DuplicatePersonException if the client to add is a duplicate of an existing client in the list."},{"lineNumber":39,"author":{"gitID":"shookshire"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"shookshire"},"content":"    public void add(Client toAdd) throws DuplicatePersonException {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"shookshire"},"content":"     * Replaces the client {@code target} in the list with {@code editedClient}."},{"lineNumber":50,"author":{"gitID":"shookshire"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"shookshire"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing client in the list."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"shookshire"},"content":"    public void setClient(Client target, Client editedClient)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":56,"author":{"gitID":"shookshire"},"content":"        requireNonNull(editedClient);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"shookshire"},"content":"        if (!target.equals(editedClient) \u0026\u0026 internalList.contains(editedClient)) {"},{"lineNumber":64,"author":{"gitID":"shookshire"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":65,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":67,"author":{"gitID":"shookshire"},"content":"        internalList.set(index, editedClient);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"shookshire"},"content":"    public boolean remove(Client toRemove) throws PersonNotFoundException {"},{"lineNumber":76,"author":{"gitID":"shookshire"},"content":"        requireNonNull(toRemove);"},{"lineNumber":77,"author":{"gitID":"shookshire"},"content":"        final boolean clientFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":78,"author":{"gitID":"shookshire"},"content":"        if (!clientFoundAndDeleted) {"},{"lineNumber":79,"author":{"gitID":"shookshire"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":80,"author":{"gitID":"shookshire"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"shookshire"},"content":"        return clientFoundAndDeleted;"},{"lineNumber":82,"author":{"gitID":"shookshire"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"shookshire"},"content":""},{"lineNumber":84,"author":{"gitID":"shookshire"},"content":"    public void setPersons(UniqueClientList replacement) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"shookshire"},"content":"    public void setPersons(List\u003cClient\u003e clients) throws DuplicatePersonException {"},{"lineNumber":89,"author":{"gitID":"shookshire"},"content":"        requireAllNonNull(clients);"},{"lineNumber":90,"author":{"gitID":"shookshire"},"content":"        final UniqueClientList replacement \u003d new UniqueClientList();"},{"lineNumber":91,"author":{"gitID":"shookshire"},"content":"        for (final Client client : clients) {"},{"lineNumber":92,"author":{"gitID":"shookshire"},"content":"            replacement.add(client);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        setPersons(replacement);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"shookshire"},"content":"    public ObservableList\u003cClient\u003e asObservableList() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"shookshire"},"content":"    public Iterator\u003cClient\u003e iterator() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":112,"author":{"gitID":"shookshire"},"content":"                || (other instanceof UniqueClientList // instanceof handles nulls"},{"lineNumber":113,"author":{"gitID":"shookshire"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueClientList) other).internalList));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shookshire":47,"-":73}}]
