var resultJson = [{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"Medeina is developed by the https://github.com/CS2103JAN2018-F14-B2[F14-B2] team. +"},{"lineNumber":7,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":8,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]. +"},{"lineNumber":9,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":10,"author":{"gitID":"-"},"content":"The development of the Medeina application is our project for CS2103T Software Engineering module."},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Jacqueline Cheong"},{"lineNumber":15,"author":{"gitID":"-"},"content":"image::aquarinte.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":16,"author":{"gitID":"-"},"content":"{empty}[http://github.com/aquarinte[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":19,"author":{"gitID":"-"},"content":"Responsibilities: Logic component, managing documentation"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d Chia Le Jing"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"image::lejing.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"{empty}[https://github.com/chialejing[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"Responsibilities: Storage component, managing documentation"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d Wynona Kaan"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"image::wynonaK.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"{empty}[https://github.com/wynonaK[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":37,"author":{"gitID":"-"},"content":"Responsibilities: Model component"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Peng Xuanchang"},{"lineNumber":42,"author":{"gitID":"-"},"content":"image::Robert_Peng.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":43,"author":{"gitID":"-"},"content":"{empty}[http://github.com/Robert-Peng[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":46,"author":{"gitID":"-"},"content":"Responsibilities: UI Component"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"chialejing":4,"wynonaK":3,"-":41}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Medeina"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"https://travis-ci.org/CS2103JAN2018-F14-B2/main[image:https://travis-ci.org/CS2103JAN2018-F14-B2/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://coveralls.io/github/CS2103JAN2018-F14-B2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-F14-B2/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":6,"author":{"gitID":"-"},"content":"https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":11,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":15,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"Medeina is a desktop application developed for **veterinarians and their assistants** to manage contacts, pet patient list and appointments seamlessly."},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"It is a specialized application that provides **dual functionality** of an address book and a task manager, to assist veterinarians and their assistants in their day-to-day practices."},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"Medeina is written in the Java programming language and conforms to the Object-Oriented Programming (OOP) style. This is to ensure that future upgrades can be integrated easily."},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"\u003d\u003d Key Features"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"Customized appointment tracking:: Medeina offers a clean and organized user interface to track your appointments easily. You can expect an overview of upcoming appointments, to detailed information on pet patient involved and point of contact for an appointment."},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"Easily manage dependencies amongst contacts, pet patient list and appointments:: You no longer need to worry about mistyping a pet\u0027s name and/or owner\u0027s information when making a new appointment. Medeina will check for you."},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"Simple and intuitive user commands:: Medeina keeps to simple and intuitive commands to make things easy for you. Be it adding an appointment, new contact or new patient, you just need to remember one command: `add`. For users familiar with Command Line Interface (CLI) or Windows command prompt, rejoice! You will find much familiarity in Medeina\u0027s list of commands."},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"Convenient tagging:: Use tags to easily distinguish different types of contacts, pet patients and appointments at a glance."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"Runs on all mainstream OS:: Hassle-free. Get Medeina now and use it today."},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":39,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":40,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":41,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"* Original source: https://github.com/se-edu/addressbook-level4[Address Book Level 4] by https://github.com/se-edu/[SE-EDU]"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"* Application icon: Made by http://www.freepik.com[Freepik] from http://www.flaticon.com[FLATICON]"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"chialejing":1,"-":47}},{"path":"src/test/java/systemtests/SampleDataTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class SampleDataTest extends AddressBookSystemTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Returns a non-existent file location to force test app to load sample data."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        deleteFileIfExists(filePath);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Deletes the file at {@code filePath} if it exists."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private void deleteFileIfExists(String filePath) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            Files.deleteIfExists(Paths.get(filePath));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new AssertionError(ioe);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"    public void addressBook_dataFileDoesNotExist_loadSampleOwnerData() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Person[] expectedList \u003d SampleDataUtil.getSamplePersons();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedList);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"    public void addressBook_dataFileDoesNotExist_loadSamplePetData() {"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"        PetPatient[] expectedList \u003d SampleDataUtil.getSamplePetPatients();"},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"        assertListMatching(getPetPatientListPanel(), expectedList);"},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"    /** unable to be done until appointments can be viewed."},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"    public void addressBook_dataFileDoesNotExist_loadSampleAppointmentData() {"},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"        Appointment[] expectedList \u003d SampleDataUtil.getSampleAppointments();"},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"        assertListMatching(getApp)"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"    */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":1,"wynonaK":15,"-":50}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Medeina - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":":warning-caption: :warning:"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":":important-caption: :stop_sign:"},{"lineNumber":15,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":16,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-F14-B2/main"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"By: `Team F14-B2`      Since: `Mar 2018`      Licence: `MIT`"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"Are you a veterinarian or a veterinary assistant in need of help to manage growing number of contacts, never-ending list of pet patients and floods of appointments? Are you having nightmares over the sheer amount of data to catalogue? Are you struggling to find the right pet patient\u0027s details and owner\u0027s contact amongst a plethora of paper records for each of your appointment?"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"Medeina is finally here to solve your problems."},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d What is Medeina"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"Medeina is a specialized desktop application designed to provide veterinarians and their assistants with better management over contacts, pet patient details and appointments. It serves as both an address book and a task manager."},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"If you are comfortable working with a Command Line Interface (CLI), then Medeina is perfect for you. Nevertheless, Medeina keeps to simple and intuitive commands that even those who are unfamiliar with CLI can pick it up easily. Medeina also comes with a clean and organized Graphical User Interface (GUI) to present information in the most optimal way for your perusal."},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"Medeina, your all-in-one solution to curb your data nightmare."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Using this Guide"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"This document provides detailed information pertaining to Medeina\u0027s set-up and usage instructions for the various features it offers. The user guide can be accessed any time through the `help` command in Medeina."},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"To successsfully install and run Medeina, you need to:"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":".  Ensure that you have Java version `1.8.0_60` or later installed on your Computer."},{"lineNumber":44,"author":{"gitID":"-"},"content":"+"},{"lineNumber":45,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":46,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"This app will not work with earlier versions of Java 8. +"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"You can download the latest version of Java link:https://java.com/en/download//[here]."},{"lineNumber":49,"author":{"gitID":"-"},"content":"+"},{"lineNumber":50,"author":{"gitID":"-"},"content":".  Download the latest `medeina.jar` link:{repoURL}/releases[here]."},{"lineNumber":51,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for Medeina."},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":".  Double-click the file to start the app. You should see the GUI (Graphical User Interface) in a few seconds."},{"lineNumber":53,"author":{"gitID":"-"},"content":"+"},{"lineNumber":54,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":55,"author":{"gitID":"-"},"content":"+"},{"lineNumber":56,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":57,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":58,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"* *`list`* : lists all persons and pet patients"},{"lineNumber":61,"author":{"gitID":"-"},"content":"* **`add -o`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 nr/S1234567G` : adds a contact named `John Doe` to Medeina"},{"lineNumber":62,"author":{"gitID":"-"},"content":"* **`delete -o`**`3` : deletes the 3rd person shown in the current list"},{"lineNumber":63,"author":{"gitID":"-"},"content":"* *`exit`* : exits the application"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":68,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":71,"author":{"gitID":"-"},"content":"*Command format used in Medeina :*"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add **-o** n/NAME`, `NAME` is a parameter which can be used as `add **-o** n/John Doe`."},{"lineNumber":74,"author":{"gitID":"-"},"content":"* Characters in **bold** are options to be specified by the user to execute variants of a command e.g. in `add **-p** n/NAME`, **-p** denotes to add a pet patient."},{"lineNumber":75,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":76,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":77,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":78,"author":{"gitID":"-"},"content":"* Shorthand equivalent alias is available for all commands to simplify execution of commands e.g. `a` is the alias for `add`."},{"lineNumber":79,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":80,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":81,"author":{"gitID":"-"},"content":"*Command autocomplete in Medeina :* `[Since v1.3]`"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"image::autocomplete.png[width\u003d\"500\"]"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"* Medeina supports autocomplete for command words, options, prefixes, NRICs, pet patient names and tags."},{"lineNumber":86,"author":{"gitID":"-"},"content":"* You will be shown a list of suggested NRICs when when you need to reference an existing person in Medeina e.g. adding a pet patient / appointment, editing a pet patient to change ownership."},{"lineNumber":87,"author":{"gitID":"-"},"content":"* You will also be shown a list of suggested pet patients names when you need to reference them in `*-p* n/PET_PATIENT_NAME`."},{"lineNumber":88,"author":{"gitID":"-"},"content":"* Autocomplete matching is case-insensitive e.g. you will see autocomplete suggestions \u0027edit\u0027 and \u0027exit\u0027 when you type \u0027E\u0027."},{"lineNumber":89,"author":{"gitID":"-"},"content":"* You can use kbd:[Up] and kbd:[Down], or kbd:[Tab] to traverse through the autocomplete suggestions in the pop-up context menu."},{"lineNumber":90,"author":{"gitID":"-"},"content":"* Press kbd:[Enter] to select an autocomplete suggestion on the pop-up context menu."},{"lineNumber":91,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":94,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help` or `h`"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"If you are feeling lost, enter `help` or `h` in Medeina\u0027s command box, or press kbd:[F1] to bring up this user guide document in a pop-up window."},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":100,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a contact, pet patient or appointment : `add` or `a` `[Since v1.2]`"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"You can use `add` or `a` to do the following :"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"[width\u003d\"100%\", cols\u003d\"15%,\u003c45%a,\u003c40%\", options\u003d\"header\"]"},{"lineNumber":106,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":107,"author":{"gitID":"-"},"content":"| To add"},{"lineNumber":108,"author":{"gitID":"-"},"content":"| Command syntax"},{"lineNumber":109,"author":{"gitID":"-"},"content":"| Notes"},{"lineNumber":110,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":".^a|Person"},{"lineNumber":112,"author":{"gitID":"-"},"content":"| `add **-o** n/CONTACT_NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS nr/NRIC [t/TAG]...`"},{"lineNumber":113,"author":{"gitID":"-"},"content":"a| * Tag is optional."},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":".^| Pet patient"},{"lineNumber":116,"author":{"gitID":"-"},"content":"| `add **-p** n/PET_PATIENT_NAME s/SPECIES b/BREED c/COLOR bt/BLOOD_TYPE [t/TAG]... **-o** nr/OWNER_NRIC`"},{"lineNumber":117,"author":{"gitID":"-"},"content":"a| * OWNER_NRIC must belong to an existing contact."},{"lineNumber":118,"author":{"gitID":"-"},"content":"* Tag is optional."},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":".^| Appointment"},{"lineNumber":121,"author":{"gitID":"-"},"content":"| `add **-a** d/YYYY-MM-DD HH:MM r/REMARK t/TAG...` +"},{"lineNumber":122,"author":{"gitID":"-"},"content":"`**-o** nr/OWNER_NRIC **-p** n/PET_PATIENT_NAME`"},{"lineNumber":123,"author":{"gitID":"-"},"content":"a| * OWNER_NRIC must belong to an existing contact."},{"lineNumber":124,"author":{"gitID":"-"},"content":"* PET_PATIENT_NAME must belong to an existing pet patient."},{"lineNumber":125,"author":{"gitID":"-"},"content":"* Appointment time HH:MM must be in 30-minute blocks."},{"lineNumber":126,"author":{"gitID":"-"},"content":"* Type \u0027-\u0027 or \u0027nil\u0027 if you have no REMARK to record."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Compulsory tag (minimum 1)."},{"lineNumber":128,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":".^| All of the above"},{"lineNumber":130,"author":{"gitID":"-"},"content":"| `add **-o** n/CONTACT_NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS nr/NRIC [t/TAG]...` +"},{"lineNumber":131,"author":{"gitID":"-"},"content":"`**-p** n/PET_PATIENT_NAME s/SPECIES b/BREED c/COLOR bt/BLOOD_TYPE [t/TAG]...` +"},{"lineNumber":132,"author":{"gitID":"-"},"content":"`**-a** d/YYYY-MM-DD HH:MM r/REMARK [t/TAG]...`"},{"lineNumber":133,"author":{"gitID":"-"},"content":"a|"},{"lineNumber":134,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":135,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"image::add_examples.PNG[width\u003d\"800\"]"},{"lineNumber":138,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":".**Copy \u0026 paste to try out**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"----"},{"lineNumber":142,"author":{"gitID":"-"},"content":"add -o n/Viktor Nikiforov p/91237890 e/v_nikiforov@gmail.com a/27 Skating Place nr/F0012345Z"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"add n/Makkachin s/dog b/poodle c/brown bt/DEA-1.1 -o nr/F0012345Z"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"add -a d/2018-05-27 14:30 r/had poor appetite the last 3 days t/vaccination t/checkup -o nr/F0012345Z"},{"lineNumber":147,"author":{"gitID":"-"},"content":"-p n/Makkachin"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"add -o n/Jacqueline p/65123456 e/jacq@gmail.com a/96 Computing Drive, #02-03 nr/S1234567G -p n/jewel"},{"lineNumber":150,"author":{"gitID":"-"},"content":"s/cat b/persian c/calico bt/AB -a d/2018-12-31 12:30 r/nil t/surgery t/sterilization"},{"lineNumber":151,"author":{"gitID":"-"},"content":"----"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all contacts : `list` or `ls`"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"Medeina will show a list of all stored Owners and PetPatients if you enter `list` or `ls` in the command box."},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":".`list` command"},{"lineNumber":160,"author":{"gitID":"-"},"content":"image::List_Command.PNG[width\u003d\"800\"]"},{"lineNumber":161,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":162,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d Editing a contact, pet patient or appointment : `edit` or `ed` `[Since v1.4]`"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"chialejing"},"content":"You can use `edit` or `ed` to do the following:"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"[width\u003d\"100%\", cols\u003d\"15%,\u003c45%a,\u003c40%\", options\u003d\"header\"]"},{"lineNumber":169,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":170,"author":{"gitID":"chialejing"},"content":"| To edit"},{"lineNumber":171,"author":{"gitID":"chialejing"},"content":"| Command syntax"},{"lineNumber":172,"author":{"gitID":"chialejing"},"content":"| Notes"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"chialejing"},"content":".^a|Person"},{"lineNumber":175,"author":{"gitID":"chialejing"},"content":"| `edit **-o** INDEX [n/CONTACT_NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [nr/NRIC] [t/TAG]...`"},{"lineNumber":176,"author":{"gitID":"chialejing"},"content":"a| * At least one of the optional fields must be provided."},{"lineNumber":177,"author":{"gitID":"chialejing"},"content":"* The command edits the contact at the specified `INDEX`."},{"lineNumber":178,"author":{"gitID":"chialejing"},"content":"* The index refers to the index number shown in the latest contact listing. The index *must be a positive integer* 1, 2, 3, etc ..."},{"lineNumber":179,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":180,"author":{"gitID":"chialejing"},"content":"* When editing tags, the existing tags of the contact will be removed i.e adding of tags is not cumulative."},{"lineNumber":181,"author":{"gitID":"-"},"content":"* You can remove all of the contact\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"chialejing"},"content":".^| Pet Patient"},{"lineNumber":184,"author":{"gitID":"chialejing"},"content":"| `edit **-p** INDEX [n/PET_PATIENT_NAME] [s/SPECIES] [b/BREED] [c/COLOR] [bt/BLOOD_TYPE] [nr/OWNER_NRIC] [t/TAG]...`"},{"lineNumber":185,"author":{"gitID":"chialejing"},"content":"a| * At least one of the optional fields must be provided."},{"lineNumber":186,"author":{"gitID":"chialejing"},"content":"* The command edits the pet patient at the specified `INDEX`."},{"lineNumber":187,"author":{"gitID":"chialejing"},"content":"* The index refers to the index number shown in the latest pet patient listing. The index *must be a positive integer* 1, 2, 3, etc ..."},{"lineNumber":188,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":189,"author":{"gitID":"chialejing"},"content":"* When editing tags, the existing tags of the pet patient will be removed i.e adding of tags is not cumulative."},{"lineNumber":190,"author":{"gitID":"chialejing"},"content":"* You can remove all of the pet patient\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":191,"author":{"gitID":"chialejing"},"content":"* OWNER_NRIC must belong to an existing contact."},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"chialejing"},"content":".^| Appointment"},{"lineNumber":194,"author":{"gitID":"chialejing"},"content":"| `edit **-a** INDEX [d/YYYY-MM-DD HH:MM] [r/REMARK] [t/TAG]...`"},{"lineNumber":195,"author":{"gitID":"chialejing"},"content":"a| * At least one of the optional fields must be provided."},{"lineNumber":196,"author":{"gitID":"chialejing"},"content":"* The command edits the appointment at the specified `INDEX`."},{"lineNumber":197,"author":{"gitID":"chialejing"},"content":"* The index refers to the index number shown in the latest appointment listing. The index *must be a positive integer* 1, 2, 3, etc ..."},{"lineNumber":198,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":199,"author":{"gitID":"chialejing"},"content":"* When editing tags, the existing tags of the appointment will be removed i.e adding of tags is not cumulative."},{"lineNumber":200,"author":{"gitID":"chialejing"},"content":"* You can remove all of the appointment\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":201,"author":{"gitID":"-"},"content":"* Appointment time HH:MM must be in 30-minute blocks."},{"lineNumber":202,"author":{"gitID":"chialejing"},"content":"* Modification of owner\u0027s NRIC and / or pet patient\u0027s name is NOT allowed."},{"lineNumber":203,"author":{"gitID":"chialejing"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":204,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"chialejing"},"content":"image::edit_examples.PNG[width\u003d\"800\"]"},{"lineNumber":207,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"chialejing"},"content":".**Copy \u0026 paste to try out**"},{"lineNumber":210,"author":{"gitID":"chialejing"},"content":"----"},{"lineNumber":211,"author":{"gitID":"chialejing"},"content":"edit -o 1 p/91234567 e/alexyeoh@anotherexample.com"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"chialejing"},"content":"edit -o 2 n/Betsy Crowers t/"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"chialejing"},"content":"edit -p 2 n/Makkachin t/"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"chialejing"},"content":"edit -a 3 d/2018-06-04 12:30"},{"lineNumber":218,"author":{"gitID":"chialejing"},"content":"----"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d Find contacts or pet patients: `find` or `f` `[Since v1.4]`"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"wynonaK"},"content":"You can use `find` or `f` to do the following :"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"[width\u003d\"100%\", cols\u003d\"15%,\u003c45%a,\u003c40%\", options\u003d\"header\"]"},{"lineNumber":227,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":228,"author":{"gitID":"wynonaK"},"content":"| To find"},{"lineNumber":229,"author":{"gitID":"-"},"content":"| Command syntax"},{"lineNumber":230,"author":{"gitID":"-"},"content":"| Notes"},{"lineNumber":231,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":".^a|Person"},{"lineNumber":233,"author":{"gitID":"wynonaK"},"content":"| `find **-o** PREFIX/KEYWORD [MORE KEYWORDS] [MORE PREFIX/MORE KEYWORDS]`"},{"lineNumber":234,"author":{"gitID":"wynonaK"},"content":"a| * Currently accepted individual `PREFIX` finding are `n/NAME`, `nr/NRIC`, `t/TAGS`."},{"lineNumber":235,"author":{"gitID":"wynonaK"},"content":"* The above `PREFIX` can be used in any combination to find more specific contacts."},{"lineNumber":236,"author":{"gitID":"wynonaK"},"content":"* Pets of displayed contacts will also be displayed."},{"lineNumber":237,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":238,"author":{"gitID":"wynonaK"},"content":".^| Pet patient"},{"lineNumber":239,"author":{"gitID":"wynonaK"},"content":"| `find **-p** PREFIX/KEYWORD [MORE KEYWORDS] [MORE PREFIX/MORE KEYWORDS]`"},{"lineNumber":240,"author":{"gitID":"wynonaK"},"content":"a| * Currently accepted individual `PREFIX` finding are `n/PET_NAME`, `s/SPECIES`, `b/BREED`, `c/COLOR`, `bt/BLOOD_TYPE`, `t/PET_TAGS`."},{"lineNumber":241,"author":{"gitID":"wynonaK"},"content":"* The above `PREFIX` can be used in any combination to find more specific pet patients."},{"lineNumber":242,"author":{"gitID":"wynonaK"},"content":"* Contacts of displayed pets will also be displayed."},{"lineNumber":243,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":244,"author":{"gitID":"wynonaK"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":245,"author":{"gitID":"wynonaK"},"content":"{empty} +"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"****"},{"lineNumber":248,"author":{"gitID":"wynonaK"},"content":"* The search is case insensitive. e.g `-o n/alex` will match `Alex`."},{"lineNumber":249,"author":{"gitID":"wynonaK"},"content":"* The order of the keywords does not matter. e.g. `-o n/Yeoh Alex` will match `Alex Yeoh`."},{"lineNumber":250,"author":{"gitID":"wynonaK"},"content":"* Only full words will be matched e.g. `-o n/Al` will not match `Alex`."},{"lineNumber":251,"author":{"gitID":"wynonaK"},"content":"* Data matching at least one keyword within a prefix will be returned. e.g. `-o n/Alex Yu` will return `Alex Yeoh`, `Bernice Yu`."},{"lineNumber":252,"author":{"gitID":"wynonaK"},"content":"* Only data matching at least one keyword in all prefixes will be returned. e.g. `-o n/Alex Yu nr/S0123456B` will return `Alex Yeoh` with the nric `S0123456B`."},{"lineNumber":253,"author":{"gitID":"-"},"content":"****"},{"lineNumber":254,"author":{"gitID":"wynonaK"},"content":"{empty} +"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"wynonaK"},"content":"image::find_examples.PNG[width\u003d\"800\"]"},{"lineNumber":257,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":".**Copy \u0026 paste to try out**"},{"lineNumber":260,"author":{"gitID":"-"},"content":"----"},{"lineNumber":261,"author":{"gitID":"wynonaK"},"content":"find -o n/Alex Bernice Charlotte t/Owner"},{"lineNumber":262,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":263,"author":{"gitID":"wynonaK"},"content":"find -o nr/S0123456B T0123456C t/Owner"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"wynonaK"},"content":"find -p n/Bei Nei s/Cat"},{"lineNumber":266,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":267,"author":{"gitID":"wynonaK"},"content":"find -p s/Dog Cat bt/DEA 4"},{"lineNumber":268,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":269,"author":{"gitID":"wynonaK"},"content":"find -p s/Dog c/White Golden"},{"lineNumber":270,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":271,"author":{"gitID":"wynonaK"},"content":"find -p s/Dog b/Pug c/Golden Brown"},{"lineNumber":272,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":273,"author":{"gitID":"wynonaK"},"content":"find -p s/Cat b/Maine Coon c/Black bt/AB t/Aggressive"},{"lineNumber":274,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":275,"author":{"gitID":"wynonaK"},"content":"find -p n/Chae s/Cat b/Russian Blue c/Grey bt/A t/Naive"},{"lineNumber":276,"author":{"gitID":"wynonaK"},"content":"----"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d Deleting a owner, pet patient or appointment : `delete` or `d` `[Since v1.3]`"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"wynonaK"},"content":"You can use `delete` or `d` to do the following :"},{"lineNumber":283,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"[width\u003d\"100%\", cols\u003d\"15%,\u003c45%a,\u003c40%\", options\u003d\"header\"]"},{"lineNumber":285,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":286,"author":{"gitID":"wynonaK"},"content":"| To delete"},{"lineNumber":287,"author":{"gitID":"wynonaK"},"content":"| Command syntax"},{"lineNumber":288,"author":{"gitID":"wynonaK"},"content":"| Notes"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"wynonaK"},"content":".^a|Person"},{"lineNumber":291,"author":{"gitID":"wynonaK"},"content":"| `delete **-[f]o** INDEX`"},{"lineNumber":292,"author":{"gitID":"wynonaK"},"content":"a| * The command will delete the contact at the specified `INDEX` listed by the `list` or `find` command."},{"lineNumber":293,"author":{"gitID":"chialejing"},"content":"* The index refers to the index number shown in the latest contact listing. The index *must be a positive integer* 1, 2, 3, etc ..."},{"lineNumber":294,"author":{"gitID":"wynonaK"},"content":"* The command prefix `-o` will not delete a contact if there are still pet and appointment dependencies that rely on it. Use `-fo` to forcefully delete a contact and its relevant dependencies."},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"wynonaK"},"content":".^| Pet patient"},{"lineNumber":297,"author":{"gitID":"wynonaK"},"content":"| `delete **-[f]p** INDEX`"},{"lineNumber":298,"author":{"gitID":"wynonaK"},"content":"a| * The command will delete the pet patient at the specified `INDEX` listed by the `list` or `find` command."},{"lineNumber":299,"author":{"gitID":"chialejing"},"content":"* The index refers to the index number shown in the latest pet patient listing. The index *must be a positive integer* 1, 2, 3, etc ..."},{"lineNumber":300,"author":{"gitID":"wynonaK"},"content":"* The command prefix `-p` will not delete a pet patient if there are still appointment dependencies that rely on it. Use `-fp` to forcefully delete a pet patient and its relevant dependencies."},{"lineNumber":301,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":302,"author":{"gitID":"wynonaK"},"content":".^| Appointment"},{"lineNumber":303,"author":{"gitID":"wynonaK"},"content":"| `delete **-a** INDEX`"},{"lineNumber":304,"author":{"gitID":"wynonaK"},"content":"a| * The command will delete the appointment at the specified `INDEX` listed by the `list` or `find` command."},{"lineNumber":305,"author":{"gitID":"chialejing"},"content":"* The index refers to the index number shown in the latest appointment listing. The index *must be a positive integer* 1, 2, 3, etc ..."},{"lineNumber":306,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":307,"author":{"gitID":"wynonaK"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":308,"author":{"gitID":"wynonaK"},"content":"{empty} +"},{"lineNumber":309,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":310,"author":{"gitID":"wynonaK"},"content":"image::delete_examples.PNG[width\u003d\"800\"]"},{"lineNumber":311,"author":{"gitID":"wynonaK"},"content":"{empty} +"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"wynonaK"},"content":".**Copy \u0026 paste to try out**"},{"lineNumber":314,"author":{"gitID":"wynonaK"},"content":"----"},{"lineNumber":315,"author":{"gitID":"wynonaK"},"content":"delete -a 1"},{"lineNumber":316,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":317,"author":{"gitID":"wynonaK"},"content":"delete -p 1"},{"lineNumber":318,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":319,"author":{"gitID":"wynonaK"},"content":"delete -o 1"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"wynonaK"},"content":"delete -fp 1"},{"lineNumber":322,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":323,"author":{"gitID":"wynonaK"},"content":"delete -fo 1"},{"lineNumber":324,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":325,"author":{"gitID":"wynonaK"},"content":"----"},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history` or `his`"},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"To list all the commands that you have entered in reverse chronological order. +"},{"lineNumber":332,"author":{"gitID":"-"},"content":"The command format should be: `history` or `his`"},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"image::History_Command.PNG[width:800]"},{"lineNumber":335,"author":{"gitID":"-"},"content":""},{"lineNumber":336,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":337,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":338,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":339,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":340,"author":{"gitID":"-"},"content":""},{"lineNumber":341,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":342,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":344,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo` or `ud`"},{"lineNumber":345,"author":{"gitID":"-"},"content":""},{"lineNumber":346,"author":{"gitID":"-"},"content":"To restore Medeina to the state before the previous _undoable_ command was executed, enter `undo` or `ud` in the command box. +"},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":349,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":350,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify Medeina\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":351,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"**Examples:**"},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"-"},"content":"* `delete **-fo** 1` +"},{"lineNumber":356,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":357,"author":{"gitID":"-"},"content":"`ud` (The command will reverse the `delete **-fo** 1` command) +"},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"-"},"content":".After `delete **-fo** 1` and `list`"},{"lineNumber":360,"author":{"gitID":"-"},"content":"image::After_Delete.PNG[width:800]"},{"lineNumber":361,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":362,"author":{"gitID":"-"},"content":""},{"lineNumber":363,"author":{"gitID":"-"},"content":".After `ud`"},{"lineNumber":364,"author":{"gitID":"-"},"content":"image::After_Undo.PNG[width:800]"},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"-"},"content":"* `find **-o** n/Joe` +"},{"lineNumber":367,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":368,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":369,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"-"},"content":".`undo` fails"},{"lineNumber":372,"author":{"gitID":"-"},"content":"image::Undo_Fail.PNG[width:800]"},{"lineNumber":373,"author":{"gitID":"-"},"content":""},{"lineNumber":374,"author":{"gitID":"-"},"content":"* `delete **-fo** 1` +"},{"lineNumber":375,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":376,"author":{"gitID":"-"},"content":"`undo` (This command reverses `clear`) +"},{"lineNumber":377,"author":{"gitID":"-"},"content":"`ud` (This command reverses the `delete **-fo** 1`) +"},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":".Executed `delete **-fo** 1` and `clear`"},{"lineNumber":380,"author":{"gitID":"-"},"content":"image::After_Clear.PNG[width:800]"},{"lineNumber":381,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"-"},"content":".After `undo`"},{"lineNumber":384,"author":{"gitID":"-"},"content":"image::Undo_Clear.PNG[width:800]"},{"lineNumber":385,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":386,"author":{"gitID":"-"},"content":""},{"lineNumber":387,"author":{"gitID":"-"},"content":".After `ud`"},{"lineNumber":388,"author":{"gitID":"-"},"content":"image::After_Undo.PNG[width:800]"},{"lineNumber":389,"author":{"gitID":"-"},"content":""},{"lineNumber":390,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":391,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":392,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo` or `rd`"},{"lineNumber":393,"author":{"gitID":"-"},"content":""},{"lineNumber":394,"author":{"gitID":"-"},"content":"To reverse the most recent `undo` command. +"},{"lineNumber":395,"author":{"gitID":"-"},"content":"The command format should be: `redo` or `rd`"},{"lineNumber":396,"author":{"gitID":"-"},"content":""},{"lineNumber":397,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":398,"author":{"gitID":"-"},"content":""},{"lineNumber":399,"author":{"gitID":"-"},"content":"* `delete **-fo** 1` +"},{"lineNumber":400,"author":{"gitID":"-"},"content":"`undo` (This command reverses `delete **-fo** 1`) +"},{"lineNumber":401,"author":{"gitID":"-"},"content":"`redo` (This command reapplies `delete **-fo** 1`) +"},{"lineNumber":402,"author":{"gitID":"-"},"content":""},{"lineNumber":403,"author":{"gitID":"-"},"content":".After `delete **-fo** 1` + `undo`"},{"lineNumber":404,"author":{"gitID":"-"},"content":"image::After_Undo.PNG[width:800]"},{"lineNumber":405,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":406,"author":{"gitID":"-"},"content":""},{"lineNumber":407,"author":{"gitID":"-"},"content":".After `redo`"},{"lineNumber":408,"author":{"gitID":"-"},"content":"image::Redo_Success.PNG[width:800]"},{"lineNumber":409,"author":{"gitID":"-"},"content":""},{"lineNumber":410,"author":{"gitID":"-"},"content":"* `delete **-fo** 1` +"},{"lineNumber":411,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":412,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":413,"author":{"gitID":"-"},"content":""},{"lineNumber":414,"author":{"gitID":"-"},"content":".`redo` fails"},{"lineNumber":415,"author":{"gitID":"-"},"content":"image::Redo_Fail.PNG[width:800]"},{"lineNumber":416,"author":{"gitID":"-"},"content":""},{"lineNumber":417,"author":{"gitID":"-"},"content":"* `delete **-fo** 1` +"},{"lineNumber":418,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":419,"author":{"gitID":"-"},"content":"`ud` (This command reverses `clear`) +"},{"lineNumber":420,"author":{"gitID":"-"},"content":"`ud` (This command reverses `delete 1`) +"},{"lineNumber":421,"author":{"gitID":"-"},"content":"`rd` (This command reapplies `delete 1`) +"},{"lineNumber":422,"author":{"gitID":"-"},"content":"`rd` (This command reapplies `clear`) +"},{"lineNumber":423,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":424,"author":{"gitID":"-"},"content":""},{"lineNumber":425,"author":{"gitID":"-"},"content":".After `delete **-fo** 1` + `clear`"},{"lineNumber":426,"author":{"gitID":"-"},"content":"image::After_Clear.PNG[width:800]"},{"lineNumber":427,"author":{"gitID":"-"},"content":""},{"lineNumber":428,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":429,"author":{"gitID":"-"},"content":""},{"lineNumber":430,"author":{"gitID":"-"},"content":".After first `ud`"},{"lineNumber":431,"author":{"gitID":"-"},"content":"image::Undo_Clear.PNG[width:800]"},{"lineNumber":432,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":433,"author":{"gitID":"-"},"content":""},{"lineNumber":434,"author":{"gitID":"-"},"content":".After second `ud`"},{"lineNumber":435,"author":{"gitID":"-"},"content":"image::After_Undo.PNG[width:800]"},{"lineNumber":436,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":437,"author":{"gitID":"-"},"content":""},{"lineNumber":438,"author":{"gitID":"-"},"content":".After first `rd`:"},{"lineNumber":439,"author":{"gitID":"-"},"content":"image::Redo_Success.PNG[width:800]"},{"lineNumber":440,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":441,"author":{"gitID":"-"},"content":""},{"lineNumber":442,"author":{"gitID":"-"},"content":".After second `rd`:"},{"lineNumber":443,"author":{"gitID":"-"},"content":"image::Redo_Clear.PNG[width:800]"},{"lineNumber":444,"author":{"gitID":"-"},"content":""},{"lineNumber":445,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":446,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":447,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear` or `cls`"},{"lineNumber":448,"author":{"gitID":"-"},"content":""},{"lineNumber":449,"author":{"gitID":"-"},"content":"You can use `clear` or `cls` to delete all entries in Medeina. +"},{"lineNumber":450,"author":{"gitID":"-"},"content":""},{"lineNumber":451,"author":{"gitID":"-"},"content":".Executed clear command"},{"lineNumber":452,"author":{"gitID":"-"},"content":"image::After_Clear.PNG[width:800]"},{"lineNumber":453,"author":{"gitID":"-"},"content":""},{"lineNumber":454,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":455,"author":{"gitID":"chialejing"},"content":"[WARNING]"},{"lineNumber":456,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":457,"author":{"gitID":"chialejing"},"content":"This command **cannot** be undone. Please be certain that you have backed up your data (which is located in the `data` folder) before executing this command!"},{"lineNumber":458,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":459,"author":{"gitID":"-"},"content":""},{"lineNumber":460,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":461,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":462,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Changing theme : `theme` or `t` `[Since v1.1]`"},{"lineNumber":463,"author":{"gitID":"-"},"content":""},{"lineNumber":464,"author":{"gitID":"-"},"content":"You can use `theme THEME_NAME` or `t THEME_NAME` to change Medeina\u0027s theme to one of the following: +"},{"lineNumber":465,"author":{"gitID":"-"},"content":""},{"lineNumber":466,"author":{"gitID":"-"},"content":"* dark"},{"lineNumber":467,"author":{"gitID":"-"},"content":"* light"},{"lineNumber":468,"author":{"gitID":"-"},"content":""},{"lineNumber":469,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":470,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":471,"author":{"gitID":"-"},"content":"`THEME_NAME` is case insensitive. e.g DARK will match dark."},{"lineNumber":472,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":473,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":474,"author":{"gitID":"-"},"content":""},{"lineNumber":475,"author":{"gitID":"-"},"content":".Dark theme"},{"lineNumber":476,"author":{"gitID":"-"},"content":"image::Theme_Dark.PNG[width:800]"},{"lineNumber":477,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":478,"author":{"gitID":"-"},"content":""},{"lineNumber":479,"author":{"gitID":"-"},"content":".Light theme"},{"lineNumber":480,"author":{"gitID":"-"},"content":"image::Theme_Light.PNG[width:800]"},{"lineNumber":481,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":482,"author":{"gitID":"-"},"content":""},{"lineNumber":483,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":484,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":485,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit` or `q`"},{"lineNumber":486,"author":{"gitID":"-"},"content":""},{"lineNumber":487,"author":{"gitID":"-"},"content":"You can easily exit Medeina without any mouse click by entering `exit` or `q` in the command box. +"},{"lineNumber":488,"author":{"gitID":"-"},"content":""},{"lineNumber":489,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":490,"author":{"gitID":"-"},"content":""},{"lineNumber":491,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d Data saving"},{"lineNumber":492,"author":{"gitID":"-"},"content":""},{"lineNumber":493,"author":{"gitID":"wynonaK"},"content":"The data in Medeina is automatically saved to the hard disk after any command that may result in a change in the storage. +"},{"lineNumber":494,"author":{"gitID":"wynonaK"},"content":"Commands that may result in a change in the storage are:"},{"lineNumber":495,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":496,"author":{"gitID":"wynonaK"},"content":"* `add` or `a` +"},{"lineNumber":497,"author":{"gitID":"wynonaK"},"content":"This command will add new information into the storage."},{"lineNumber":498,"author":{"gitID":"wynonaK"},"content":"* `edit` or `ed` +"},{"lineNumber":499,"author":{"gitID":"wynonaK"},"content":"This command will update information in the storage."},{"lineNumber":500,"author":{"gitID":"wynonaK"},"content":"* `delete` or `d` +"},{"lineNumber":501,"author":{"gitID":"wynonaK"},"content":"This command will remove information in the storage."},{"lineNumber":502,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":503,"author":{"gitID":"wynonaK"},"content":"You do not need to manually save the data."},{"lineNumber":504,"author":{"gitID":"-"},"content":""},{"lineNumber":505,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":506,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":507,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":508,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":509,"author":{"gitID":"-"},"content":""},{"lineNumber":510,"author":{"gitID":"wynonaK"},"content":"Coming v2.0, the data you have will be automatically encrypted after commands that may change the storage, so that you do not have to worry about it being stolen. +"},{"lineNumber":511,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":512,"author":{"gitID":"wynonaK"},"content":"You do not need to manually encrypt your data files."},{"lineNumber":513,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":514,"author":{"gitID":"-"},"content":""},{"lineNumber":515,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":516,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":517,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d Creating other user profiles `[coming in v2.0]`"},{"lineNumber":518,"author":{"gitID":"-"},"content":""},{"lineNumber":519,"author":{"gitID":"wynonaK"},"content":"Coming v2.0, Medeina will have user accounts, so that veterinarians and their assistants can collaborate on the same computer, but at the same time keep their information private to themselves. +"},{"lineNumber":520,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":521,"author":{"gitID":"wynonaK"},"content":"This command will be added when it is released."},{"lineNumber":522,"author":{"gitID":"-"},"content":""},{"lineNumber":523,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":524,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":525,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d Setting user permissions `[coming in v2.0]`"},{"lineNumber":526,"author":{"gitID":"-"},"content":""},{"lineNumber":527,"author":{"gitID":"wynonaK"},"content":"Coming v2.0, Medeina will have user permissions, to ensure that protected information is not easily changed by other staff. There will be an administrator role to gain total access in the application. +"},{"lineNumber":528,"author":{"gitID":"-"},"content":""},{"lineNumber":529,"author":{"gitID":"wynonaK"},"content":"Information that vet assistants should not change:"},{"lineNumber":530,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":531,"author":{"gitID":"wynonaK"},"content":"* You can add new information (contacts, pet patients, appointments) to the application, but you should not be able to delete it."},{"lineNumber":532,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":533,"author":{"gitID":"wynonaK"},"content":"* You can see the medical histories of pet patients but should not modify it."},{"lineNumber":534,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":535,"author":{"gitID":"wynonaK"},"content":"Information that vets should not change:"},{"lineNumber":536,"author":{"gitID":"-"},"content":""},{"lineNumber":537,"author":{"gitID":"wynonaK"},"content":"* You should not change information belonging to other vets in the application without permission."},{"lineNumber":538,"author":{"gitID":"-"},"content":""},{"lineNumber":539,"author":{"gitID":"wynonaK"},"content":"The command will be added when it is released."},{"lineNumber":540,"author":{"gitID":"-"},"content":""},{"lineNumber":541,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":542,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":543,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d Supporting multiple users `[coming in v2.0]`"},{"lineNumber":544,"author":{"gitID":"-"},"content":""},{"lineNumber":545,"author":{"gitID":"wynonaK"},"content":"Coming v2.0, Medeina can be used concurrently on different systems. The data will be synced over an internet connection. This allow Veterinarians and their assistants to access Medeina simultaneously in different rooms, making it easier to collaborate with others. +"},{"lineNumber":546,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":547,"author":{"gitID":"wynonaK"},"content":"The command will be added when it is released."},{"lineNumber":548,"author":{"gitID":"-"},"content":""},{"lineNumber":549,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":550,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":551,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":552,"author":{"gitID":"-"},"content":""},{"lineNumber":553,"author":{"gitID":"wynonaK"},"content":"*Q*: What if I find a bug? +"},{"lineNumber":554,"author":{"gitID":"wynonaK"},"content":"*A*: Create an issue in our github link:{repoURL}/issues[here]. We will get back to you shortly."},{"lineNumber":555,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":556,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":557,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Medeina folder."},{"lineNumber":558,"author":{"gitID":"-"},"content":""},{"lineNumber":559,"author":{"gitID":"wynonaK"},"content":"*Q*: Help! What is with this data that in Medeina on initial startup? +"},{"lineNumber":560,"author":{"gitID":"wynonaK"},"content":"*A*: This data is sample data aimed to get users started with Medeina."},{"lineNumber":561,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":562,"author":{"gitID":"wynonaK"},"content":"*Q*: What if my questions are not answered through this user guide? +"},{"lineNumber":563,"author":{"gitID":"wynonaK"},"content":"*A*: Post an issue in our github link:{repoURL}/issues[here]. Alternatively, email us at help@medeina.com. We will address your question as soon as possible."},{"lineNumber":564,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":565,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":566,"author":{"gitID":"-"},"content":""},{"lineNumber":567,"author":{"gitID":"-"},"content":"The following is a summary of all commands available in Medeina:"},{"lineNumber":568,"author":{"gitID":"-"},"content":""},{"lineNumber":569,"author":{"gitID":"-"},"content":"* *Add* `add` or `a` with options **-o**, **-p** and **-a**"},{"lineNumber":570,"author":{"gitID":"-"},"content":"* *Clear* : `clear` or `cls`"},{"lineNumber":571,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` or `d INDEX`"},{"lineNumber":572,"author":{"gitID":"-"},"content":"* *Edit* : `edit INDEX [PREFIX/ INFO]` or `e INDEX [PREFIX/ INFO]` with options **-o**, **-p** and **-a**"},{"lineNumber":573,"author":{"gitID":"-"},"content":"* *Exit* : `exit` or `q`"},{"lineNumber":574,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` or `f KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":575,"author":{"gitID":"-"},"content":"* *List* : `list` or `ls`"},{"lineNumber":576,"author":{"gitID":"-"},"content":"* *Help* : `help` or `h`"},{"lineNumber":577,"author":{"gitID":"-"},"content":"* *History* : `history` or `his`"},{"lineNumber":578,"author":{"gitID":"-"},"content":"* *Undo* : `undo` or `ud`"},{"lineNumber":579,"author":{"gitID":"-"},"content":"* *Redo* : `redo` or `rd`"},{"lineNumber":580,"author":{"gitID":"-"},"content":"* *Change Theme* : `theme THEME_NAME` or `t THEME_NAME`"},{"lineNumber":581,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":582,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d Person-related Commands"},{"lineNumber":583,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":584,"author":{"gitID":"chialejing"},"content":"[width\u003d\"100%\", cols\u003d\"20%, 10%, 40%, 30%\", options\u003d\"header\"]"},{"lineNumber":585,"author":{"gitID":"chialejing"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":586,"author":{"gitID":"chialejing"},"content":"| Command"},{"lineNumber":587,"author":{"gitID":"chialejing"},"content":"| Alias"},{"lineNumber":588,"author":{"gitID":"chialejing"},"content":"| Command Syntax"},{"lineNumber":589,"author":{"gitID":"chialejing"},"content":"| Description"},{"lineNumber":590,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":591,"author":{"gitID":"chialejing"},"content":".^a|`add -o`"},{"lineNumber":592,"author":{"gitID":"chialejing"},"content":"| `a -o`"},{"lineNumber":593,"author":{"gitID":"-"},"content":"| `add **-o** n/CONTACT_NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS nr/NRIC [t/TAG]...`"},{"lineNumber":594,"author":{"gitID":"chialejing"},"content":"| Add a contact into Medeina"},{"lineNumber":595,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":596,"author":{"gitID":"chialejing"},"content":".^a|`edit -o`"},{"lineNumber":597,"author":{"gitID":"chialejing"},"content":"| `ed -o`"},{"lineNumber":598,"author":{"gitID":"chialejing"},"content":"| `edit **-o** INDEX [n/CONTACT_NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [nr/NRIC] [t/TAG]...`"},{"lineNumber":599,"author":{"gitID":"chialejing"},"content":"| Edit a contact in Medeina"},{"lineNumber":600,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":601,"author":{"gitID":"chialejing"},"content":".^a|`find -o`"},{"lineNumber":602,"author":{"gitID":"chialejing"},"content":"| `f -o`"},{"lineNumber":603,"author":{"gitID":"wynonaK"},"content":"| `find **-o** PREFIX/KEYWORD [MORE KEYWORDS] [MORE PREFIX/MORE KEYWORDS]`"},{"lineNumber":604,"author":{"gitID":"chialejing"},"content":"| Find a contact in Medeina"},{"lineNumber":605,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":606,"author":{"gitID":"chialejing"},"content":".^a|`delete -o`"},{"lineNumber":607,"author":{"gitID":"chialejing"},"content":"| `d -o`"},{"lineNumber":608,"author":{"gitID":"chialejing"},"content":"| `delete **-[f]o** INDEX`"},{"lineNumber":609,"author":{"gitID":"chialejing"},"content":"| Delete a contact in Medeina"},{"lineNumber":610,"author":{"gitID":"chialejing"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":611,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":612,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d Pet patient-related Commands"},{"lineNumber":613,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":614,"author":{"gitID":"chialejing"},"content":"[width\u003d\"100%\", cols\u003d\"20%, 10%, 40%, 30%\", options\u003d\"header\"]"},{"lineNumber":615,"author":{"gitID":"chialejing"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":616,"author":{"gitID":"chialejing"},"content":"| Command"},{"lineNumber":617,"author":{"gitID":"chialejing"},"content":"| Alias"},{"lineNumber":618,"author":{"gitID":"chialejing"},"content":"| Command Syntax"},{"lineNumber":619,"author":{"gitID":"chialejing"},"content":"| Description"},{"lineNumber":620,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":621,"author":{"gitID":"chialejing"},"content":".^a|`add -p`"},{"lineNumber":622,"author":{"gitID":"chialejing"},"content":"| `a -p`"},{"lineNumber":623,"author":{"gitID":"-"},"content":"| `add **-p** n/PET_PATIENT_NAME s/SPECIES b/BREED c/COLOR bt/BLOOD_TYPE [t/TAG]... **-o** nr/OWNER_NRIC`"},{"lineNumber":624,"author":{"gitID":"chialejing"},"content":"| Add a pet patient into Medeina"},{"lineNumber":625,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":626,"author":{"gitID":"chialejing"},"content":".^a|`edit -p`"},{"lineNumber":627,"author":{"gitID":"chialejing"},"content":"| `ed -p`"},{"lineNumber":628,"author":{"gitID":"chialejing"},"content":"| `edit **-p** INDEX [n/PET_PATIENT_NAME] [s/SPECIES] [b/BREED] [c/COLOR] [bt/BLOOD_TYPE] [nr/OWNER_NRIC] [t/TAG]...`"},{"lineNumber":629,"author":{"gitID":"chialejing"},"content":"| Edit a pet patient in Medeina"},{"lineNumber":630,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":631,"author":{"gitID":"chialejing"},"content":".^a|`find -p`"},{"lineNumber":632,"author":{"gitID":"chialejing"},"content":"| `f -p`"},{"lineNumber":633,"author":{"gitID":"wynonaK"},"content":"| `find **-p** PREFIX/KEYWORD [MORE KEYWORDS] [MORE PREFIX/MORE KEYWORDS]`"},{"lineNumber":634,"author":{"gitID":"chialejing"},"content":"| Find a pet patient in Medeina"},{"lineNumber":635,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":636,"author":{"gitID":"chialejing"},"content":".^a|`delete -p`"},{"lineNumber":637,"author":{"gitID":"chialejing"},"content":"| `d -p`"},{"lineNumber":638,"author":{"gitID":"chialejing"},"content":"| `delete **-[f]p** INDEX`"},{"lineNumber":639,"author":{"gitID":"chialejing"},"content":"| Delete a pet patient in Medeina"},{"lineNumber":640,"author":{"gitID":"chialejing"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":641,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":642,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d Appointment-related Commands"},{"lineNumber":643,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":644,"author":{"gitID":"chialejing"},"content":"[width\u003d\"100%\", cols\u003d\"20%, 10%, 40%, 30%\", options\u003d\"header\"]"},{"lineNumber":645,"author":{"gitID":"chialejing"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":646,"author":{"gitID":"chialejing"},"content":"| Command"},{"lineNumber":647,"author":{"gitID":"chialejing"},"content":"| Alias"},{"lineNumber":648,"author":{"gitID":"chialejing"},"content":"| Command Syntax"},{"lineNumber":649,"author":{"gitID":"chialejing"},"content":"| Description"},{"lineNumber":650,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":651,"author":{"gitID":"chialejing"},"content":".^a|`add -a`"},{"lineNumber":652,"author":{"gitID":"chialejing"},"content":"| `a -a`"},{"lineNumber":653,"author":{"gitID":"-"},"content":"| `add **-a** d/YYYY-MM-DD HH:MM r/REMARK t/TAG...` +"},{"lineNumber":654,"author":{"gitID":"-"},"content":"  `**-o** nr/OWNER_NRIC **-p** n/PET_PATIENT_NAME`"},{"lineNumber":655,"author":{"gitID":"chialejing"},"content":"| Adds an appointment into Medeina"},{"lineNumber":656,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":657,"author":{"gitID":"chialejing"},"content":".^a|`edit -a`"},{"lineNumber":658,"author":{"gitID":"chialejing"},"content":"| `ed -a`"},{"lineNumber":659,"author":{"gitID":"chialejing"},"content":"| `edit **-a** INDEX [d/YYYY-MM-DD HH:MM] [r/REMARK] [t/TAG]...`"},{"lineNumber":660,"author":{"gitID":"chialejing"},"content":"| Edit an appointment in Medeina"},{"lineNumber":661,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":662,"author":{"gitID":"chialejing"},"content":".^a|`find -a`"},{"lineNumber":663,"author":{"gitID":"chialejing"},"content":"| `f -a`"},{"lineNumber":664,"author":{"gitID":"chialejing"},"content":"| \u003cIN PROGRESS\u003e"},{"lineNumber":665,"author":{"gitID":"chialejing"},"content":"| Find an appointment in Medeina"},{"lineNumber":666,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":667,"author":{"gitID":"chialejing"},"content":".^a|`delete -a`"},{"lineNumber":668,"author":{"gitID":"chialejing"},"content":"| `d -a`"},{"lineNumber":669,"author":{"gitID":"chialejing"},"content":"| `delete **-a** INDEX`"},{"lineNumber":670,"author":{"gitID":"chialejing"},"content":"| Delete an appointment in Medeina"},{"lineNumber":671,"author":{"gitID":"chialejing"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":672,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":673,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d System-related Commands"},{"lineNumber":674,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":675,"author":{"gitID":"chialejing"},"content":"[cols\u003d\"20, 10, 50\", options\u003d\"header\"]"},{"lineNumber":676,"author":{"gitID":"chialejing"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":677,"author":{"gitID":"chialejing"},"content":"| Command"},{"lineNumber":678,"author":{"gitID":"chialejing"},"content":"| Alias"},{"lineNumber":679,"author":{"gitID":"chialejing"},"content":"| Description"},{"lineNumber":680,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":681,"author":{"gitID":"chialejing"},"content":".^a|`list`"},{"lineNumber":682,"author":{"gitID":"chialejing"},"content":"| `ls`"},{"lineNumber":683,"author":{"gitID":"chialejing"},"content":"| Lists all contacts and pet patients"},{"lineNumber":684,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":685,"author":{"gitID":"chialejing"},"content":".^a|`help`"},{"lineNumber":686,"author":{"gitID":"chialejing"},"content":"| `h`"},{"lineNumber":687,"author":{"gitID":"chialejing"},"content":"| Brings up this user guide for your reference"},{"lineNumber":688,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":689,"author":{"gitID":"chialejing"},"content":".^a|`history`"},{"lineNumber":690,"author":{"gitID":"chialejing"},"content":"| `his`"},{"lineNumber":691,"author":{"gitID":"chialejing"},"content":"| Lists all the commands that you have entered in reverse chronological order"},{"lineNumber":692,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":693,"author":{"gitID":"chialejing"},"content":".^a|`undo`"},{"lineNumber":694,"author":{"gitID":"chialejing"},"content":"| `ud`"},{"lineNumber":695,"author":{"gitID":"chialejing"},"content":"| Undo the previous command"},{"lineNumber":696,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":697,"author":{"gitID":"chialejing"},"content":".^a|`redo`"},{"lineNumber":698,"author":{"gitID":"chialejing"},"content":"| `rd`"},{"lineNumber":699,"author":{"gitID":"chialejing"},"content":"| Redo the previous command"},{"lineNumber":700,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":701,"author":{"gitID":"chialejing"},"content":".^a|`clear`"},{"lineNumber":702,"author":{"gitID":"chialejing"},"content":"| `cls`"},{"lineNumber":703,"author":{"gitID":"chialejing"},"content":"| Clears all entries from Medeina"},{"lineNumber":704,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":705,"author":{"gitID":"chialejing"},"content":".^a|`exit`"},{"lineNumber":706,"author":{"gitID":"chialejing"},"content":"| `q`"},{"lineNumber":707,"author":{"gitID":"chialejing"},"content":"| Exits the program"}],"authorContributionMap":{"chialejing":202,"wynonaK":122,"-":383}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"//import seedu.address.ui.BrowserPanel;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.ui.StatusBarFooter;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class HelpCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        getPersonListPanel().click();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        getPersonListPanel().click();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        getCalendarPanel().click();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        //assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" -o \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":1,"-":97}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.exceptions.PetDependencyNotEmptyException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class DeleteCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT_OWNER \u003d"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE_OWNER);"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT_PET_PATIENT \u003d"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE_PET_PATIENT);"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT_FORCE_OWNER \u003d"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE_FORCE_OWNER);"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT_FORCE_PET_PATIENT \u003d"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE_FORCE_PET_PATIENT);"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT_APPOINTMENT \u003d"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE_APPOINTMENT);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"   -o   \""},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \"       \";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        /* Case: delete the last person in the list -\u003e deleted */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        /* Case: undo deleting the last person in the list -\u003e last person restored */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* Case: delete the middle person in the list -\u003e deleted */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"},{"lineNumber":81,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":82,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -o \" + invalidIndex;"},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -o \" + selectedIndex.getOneBased();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"wynonaK"},"content":"        /* ----------------------- Performing invalid delete operation for owner ------------------------------------ */"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":104,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -o 0\";"},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT_OWNER);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":108,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -o -1\";"},{"lineNumber":109,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT_OWNER);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":113,"author":{"gitID":"-"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":114,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -o \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":115,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" -o abc\","},{"lineNumber":119,"author":{"gitID":"wynonaK"},"content":"                MESSAGE_INVALID_DELETE_COMMAND_FORMAT_OWNER);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":122,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" -o 1 abc\","},{"lineNumber":123,"author":{"gitID":"wynonaK"},"content":"                MESSAGE_INVALID_DELETE_COMMAND_FORMAT_OWNER);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":126,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(\"DelETE -o 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":127,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":128,"author":{"gitID":"wynonaK"},"content":"        /* ------------------ Performing invalid delete operation for appointment ----------------------------------- */"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":131,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -a 0\";"},{"lineNumber":132,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT_APPOINTMENT);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":135,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -a -1\";"},{"lineNumber":136,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT_APPOINTMENT);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":139,"author":{"gitID":"wynonaK"},"content":"        outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":140,"author":{"gitID":"wynonaK"},"content":"                getModel().getAddressBook().getAppointmentList().size() + 1);"},{"lineNumber":141,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -a \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":142,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":145,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" -a abc\","},{"lineNumber":146,"author":{"gitID":"wynonaK"},"content":"                MESSAGE_INVALID_DELETE_COMMAND_FORMAT_APPOINTMENT);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":149,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" -a 1 abc\","},{"lineNumber":150,"author":{"gitID":"wynonaK"},"content":"                MESSAGE_INVALID_DELETE_COMMAND_FORMAT_APPOINTMENT);"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(\"DelETE -a 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":154,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":155,"author":{"gitID":"wynonaK"},"content":"        /* ------------------ Performing invalid delete operation for pet patient ----------------------------------- */"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":158,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -p 0\";"},{"lineNumber":159,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT_PET_PATIENT);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":162,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -p -1\";"},{"lineNumber":163,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT_PET_PATIENT);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":166,"author":{"gitID":"wynonaK"},"content":"        outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":167,"author":{"gitID":"wynonaK"},"content":"                getModel().getAddressBook().getPetPatientList().size() + 1);"},{"lineNumber":168,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -p \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":169,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":172,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" -p abc\","},{"lineNumber":173,"author":{"gitID":"wynonaK"},"content":"                MESSAGE_INVALID_DELETE_COMMAND_FORMAT_PET_PATIENT);"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":176,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" -p 1 abc\","},{"lineNumber":177,"author":{"gitID":"wynonaK"},"content":"                MESSAGE_INVALID_DELETE_COMMAND_FORMAT_PET_PATIENT);"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":180,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(\"DelETE -p 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":181,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":182,"author":{"gitID":"wynonaK"},"content":"        /* ----------------------- Performing invalid delete operation for force owner ------------------------------ */"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":185,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -fo 0\";"},{"lineNumber":186,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT_FORCE_OWNER);"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":189,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -fo -1\";"},{"lineNumber":190,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT_FORCE_OWNER);"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":193,"author":{"gitID":"wynonaK"},"content":"        outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":194,"author":{"gitID":"-"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":195,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -fo \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":196,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":199,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" -fo abc\","},{"lineNumber":200,"author":{"gitID":"wynonaK"},"content":"                MESSAGE_INVALID_DELETE_COMMAND_FORMAT_FORCE_OWNER);"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":203,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" -fo 1 abc\","},{"lineNumber":204,"author":{"gitID":"wynonaK"},"content":"                MESSAGE_INVALID_DELETE_COMMAND_FORMAT_FORCE_OWNER);"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":207,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(\"DelETE -fo 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":208,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":209,"author":{"gitID":"wynonaK"},"content":"        /* ----------------------- Performing invalid delete operation for force pet patient ------------------------ */"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":212,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -fp 0\";"},{"lineNumber":213,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT_FORCE_PET_PATIENT);"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":216,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -fp -1\";"},{"lineNumber":217,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT_FORCE_PET_PATIENT);"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":220,"author":{"gitID":"wynonaK"},"content":"        outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":221,"author":{"gitID":"-"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":222,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -fp \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":223,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":226,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" -fp abc\","},{"lineNumber":227,"author":{"gitID":"wynonaK"},"content":"                MESSAGE_INVALID_DELETE_COMMAND_FORMAT_FORCE_PET_PATIENT);"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":230,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" -fp 1 abc\","},{"lineNumber":231,"author":{"gitID":"wynonaK"},"content":"                MESSAGE_INVALID_DELETE_COMMAND_FORMAT_FORCE_PET_PATIENT);"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":234,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(\"DelETE -fp 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":235,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":236,"author":{"gitID":"wynonaK"},"content":"        /* ------------------------- Performing invalid delete operation with wrong type ---------------------------- */"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":239,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -sha 0\";"},{"lineNumber":240,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":243,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -fza -1\";"},{"lineNumber":244,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":247,"author":{"gitID":"wynonaK"},"content":"        outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":248,"author":{"gitID":"-"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":249,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -fup \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":250,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":253,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" -fsp abc\","},{"lineNumber":254,"author":{"gitID":"wynonaK"},"content":"                MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":257,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" -nafp 1 abc\","},{"lineNumber":258,"author":{"gitID":"wynonaK"},"content":"                MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * @return the removed person"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    private Person removePerson(Model model, Index index) {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        Person targetPerson \u003d getPerson(model, index);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":268,"author":{"gitID":"wynonaK"},"content":"            model.deletePerson(targetPerson);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":271,"author":{"gitID":"wynonaK"},"content":"        } catch (PetDependencyNotEmptyException e) {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        return targetPerson;"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":281,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":288,"author":{"gitID":"wynonaK"},"content":"                DeleteCommand.COMMAND_WORD + \" -o \" + toDelete.getOneBased(),"},{"lineNumber":289,"author":{"gitID":"wynonaK"},"content":"                expectedModel, expectedResultMessage);"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":293,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":294,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":295,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":296,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":297,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":298,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":299,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":300,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":301,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":302,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":303,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":304,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":306,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":309,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":310,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":311,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":312,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":313,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":314,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":315,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":316,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":317,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":320,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":321,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":322,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":323,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":326,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":327,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":330,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":331,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":332,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":333,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":334,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":335,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":336,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":337,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":338,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":339,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":340,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":341,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":344,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":345,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":346,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":347,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":348,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":349,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":104,"-":245}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_NERO;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BREED_DESC_NERO;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.COLOUR_DESC_NERO;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_NERO;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_CHARLIE;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_DION;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_ELIAS;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_FION;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_OWNER;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_PET;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SPECIES_DESC_NERO;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_CHARLIE;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_DION;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_ELIAS;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_FION;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPetPatients.KARUPIN;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPetPatients.NERO;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicateNricException;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"import seedu.address.model.petpatient.exceptions.DuplicatePetPatientException;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PetPatientUtil;"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":90,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":91,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + OPTION_OWNER + \"  \" + NAME_DESC_AMY + \"  \""},{"lineNumber":94,"author":{"gitID":"-"},"content":"                + PHONE_DESC_AMY + \" \" + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + NRIC_DESC_AMY + \" \""},{"lineNumber":95,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND + \" \";"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e rejected */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + NRIC_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_NRIC);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name and nric"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        -\u003e accepted */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withNric(VALID_NRIC_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + NRIC_DESC_BOB + TAG_DESC_FRIEND;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone and nric"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        -\u003e added */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withNric(VALID_NRIC_CHARLIE).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            + ADDRESS_DESC_AMY + NRIC_DESC_CHARLIE + TAG_DESC_FRIEND;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email and nric"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        -\u003e added */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withNric(VALID_NRIC_DION).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            + ADDRESS_DESC_AMY + NRIC_DESC_DION + TAG_DESC_FRIEND;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address and nric"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        -\u003e added */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withNric(VALID_NRIC_ELIAS).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            + ADDRESS_DESC_BOB + NRIC_DESC_ELIAS + TAG_DESC_FRIEND;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except NRIC -\u003e added */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            .withAddress(VALID_ADDRESS_AMY).withNric(VALID_NRIC_FION).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            + ADDRESS_DESC_AMY + NRIC_DESC_FION + TAG_DESC_FRIEND;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            + NAME_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"Aquarinte"},"content":"        //@@author aquarinte"},{"lineNumber":168,"author":{"gitID":"Aquarinte"},"content":"        /* Case: add a pet patient without tags to a non-empty address book, command with leading spaces and"},{"lineNumber":169,"author":{"gitID":"Aquarinte"},"content":"         * trailing spaces -\u003e added"},{"lineNumber":170,"author":{"gitID":"Aquarinte"},"content":"         */"},{"lineNumber":171,"author":{"gitID":"Aquarinte"},"content":"        PetPatient toAddPet \u003d NERO;"},{"lineNumber":172,"author":{"gitID":"Aquarinte"},"content":"        Nric bobNric \u003d BOB.getNric();"},{"lineNumber":173,"author":{"gitID":"Aquarinte"},"content":"        command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + OPTION_PET + \"  \" + NAME_DESC_NERO"},{"lineNumber":174,"author":{"gitID":"Aquarinte"},"content":"                + \"  \" +  SPECIES_DESC_NERO + \"  \" + BREED_DESC_NERO + \"  \" +  COLOUR_DESC_NERO + \"  \""},{"lineNumber":175,"author":{"gitID":"Aquarinte"},"content":"                + BLOODTYPE_DESC_NERO + \"  \" + OPTION_OWNER + \"  \" + NRIC_DESC_BOB;"},{"lineNumber":176,"author":{"gitID":"Aquarinte"},"content":"        assertCommandSuccess(command, toAddPet, bobNric);"},{"lineNumber":177,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":178,"author":{"gitID":"Aquarinte"},"content":"        /* Case: add a pet patient, missing tags -\u003e added */"},{"lineNumber":179,"author":{"gitID":"Aquarinte"},"content":"        assertCommandSuccess(KARUPIN, KARUPIN.getOwner());"},{"lineNumber":180,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":181,"author":{"gitID":"Aquarinte"},"content":"        //@author"},{"lineNumber":182,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":183,"author":{"gitID":"Aquarinte"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":184,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":185,"author":{"gitID":"Aquarinte"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":186,"author":{"gitID":"Aquarinte"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":187,"author":{"gitID":"Aquarinte"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":188,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":189,"author":{"gitID":"Aquarinte"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":190,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":191,"author":{"gitID":"Aquarinte"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":192,"author":{"gitID":"Aquarinte"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":193,"author":{"gitID":"Aquarinte"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":194,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":195,"author":{"gitID":"Aquarinte"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":196,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":197,"author":{"gitID":"Aquarinte"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":198,"author":{"gitID":"Aquarinte"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":199,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":200,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":201,"author":{"gitID":"Aquarinte"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":202,"author":{"gitID":"Aquarinte"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":203,"author":{"gitID":"Aquarinte"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":204,"author":{"gitID":"Aquarinte"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":205,"author":{"gitID":"Aquarinte"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":206,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":207,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":208,"author":{"gitID":"Aquarinte"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":209,"author":{"gitID":"Aquarinte"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":210,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_AMY;"},{"lineNumber":211,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_PERSON));"},{"lineNumber":212,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":213,"author":{"gitID":"Aquarinte"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":214,"author":{"gitID":"Aquarinte"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":215,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_AMY;"},{"lineNumber":216,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_PERSON));"},{"lineNumber":217,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":218,"author":{"gitID":"Aquarinte"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":219,"author":{"gitID":"Aquarinte"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":220,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_AMY;"},{"lineNumber":221,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_PERSON));"},{"lineNumber":222,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":223,"author":{"gitID":"Aquarinte"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":224,"author":{"gitID":"Aquarinte"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":225,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_AMY;"},{"lineNumber":226,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_PERSON));"},{"lineNumber":227,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":228,"author":{"gitID":"Aquarinte"},"content":"        //@@author Robert-Peng"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        /* Case: missing nric -\u003e rejected */"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":231,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_PERSON));"},{"lineNumber":233,"content":"        //@@author"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + INVALID_NAME_DESC + PHONE_DESC_AMY"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NRIC_DESC_AMY;"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_AMY + INVALID_PHONE_DESC"},{"lineNumber":246,"author":{"gitID":"-"},"content":"            + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NRIC_DESC_AMY;"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":251,"author":{"gitID":"-"},"content":"            + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY + NRIC_DESC_AMY;"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC + NRIC_DESC_AMY;"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"content":"        //@@author Robert-Peng"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        /* Case: invalid nric -\u003e rejected */"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":262,"author":{"gitID":"-"},"content":"            + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + INVALID_NRIC_DESC;"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Nric.MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":264,"content":"        //@@author"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":268,"author":{"gitID":"-"},"content":"            + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NRIC_DESC_AMY + INVALID_TAG_DESC;"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":281,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":284,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":285,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":288,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":291,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":293,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":294,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":298,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":300,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        } catch (DuplicateNricException e) {"},{"lineNumber":302,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd\u0027s NRIC already exists in the model.\");"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":304,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":307,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":310,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":311,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":312,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":313,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":314,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":315,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":316,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":317,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":318,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":319,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":320,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":321,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":322,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":323,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(PetPatient toAdd, Nric ownerNric) {"},{"lineNumber":324,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PetPatientUtil.getAddCommand(toAdd, ownerNric), toAdd, ownerNric);"},{"lineNumber":325,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":328,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(PetPatient, Nric)}. Executes {@code command}"},{"lineNumber":329,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":330,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(PetPatient, Nric)"},{"lineNumber":331,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":332,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, PetPatient toAdd, Nric ownerNric) {"},{"lineNumber":333,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":334,"author":{"gitID":"-"},"content":"        Person owner \u003d getModel().getPersonWithNric(ownerNric);"},{"lineNumber":335,"author":{"gitID":"-"},"content":"        String message \u003d \"New pet patient added: %1$s \\nunder owner: %2$s\";"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":338,"author":{"gitID":"-"},"content":"            expectedModel.addPetPatient(toAdd);"},{"lineNumber":339,"author":{"gitID":"-"},"content":"        } catch (DuplicatePetPatientException dpe) {"},{"lineNumber":340,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":341,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":342,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(message, toAdd, owner);"},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":345,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":348,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":349,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":350,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":351,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":352,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":353,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":354,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":355,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":356,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":357,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":358,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":359,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":360,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":361,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":362,"author":{"gitID":"-"},"content":""},{"lineNumber":363,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":364,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":365,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":366,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":367,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":368,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":369,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":370,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":371,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":372,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":373,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":374,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":375,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":376,"author":{"gitID":"-"},"content":""},{"lineNumber":377,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":378,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":379,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":380,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":381,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":382,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":383,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":3,"Aquarinte":62,"-":318}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"//import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"//import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"//import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.CalendarPanelHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.PetPatientListPanelHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"//import seedu.address.MainApp;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":49,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":50,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":51,"author":{"gitID":"-"},"content":" */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        //waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"Aquarinte"},"content":"    //@@author aquarinte"},{"lineNumber":104,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"Aquarinte"},"content":"     * Returns a command box with autocomplete function disabled."},{"lineNumber":106,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"Aquarinte"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":108,"author":{"gitID":"Aquarinte"},"content":"        mainWindowHandle.getCommandBox().disableAutocomplete();"},{"lineNumber":109,"author":{"gitID":"Aquarinte"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":110,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":112,"author":{"gitID":"Aquarinte"},"content":"    //@@author"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"content":"    //@@author Robert-Peng"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public PetPatientListPanelHandle getPetPatientListPanel() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPetPatientListPanel();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"content":"    //@@author"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    //    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    //        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    //    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"content":"    //@@author Robert-Peng"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public CalendarPanelHandle getCalendarPanel() {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCalendarPanel();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"content":"    //@@author"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":153,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        //waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":172,"author":{"gitID":"wynonaK"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" -o n/\" + keyword);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":186,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        //assertListMatching(getPetPatientListPanel(), expectedModel.getFilteredPetPatientList());"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        //getBrowserPanel().rememberUrl();"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        //assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":232,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        //assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":250,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        //assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":260,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":267,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":274,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":284,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":294,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":295,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":296,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":298,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":299,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":300,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(),"},{"lineNumber":301,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList());"},{"lineNumber":302,"author":{"gitID":"-"},"content":"            //assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE),"},{"lineNumber":303,"author":{"gitID":"-"},"content":"            // getBrowserPanel().getLoadedUrl());"},{"lineNumber":304,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":305,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":307,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":309,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":312,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":313,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":314,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":315,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":316,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":317,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":4,"Aquarinte":10,"wynonaK":1,"-":302}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class SelectCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":27,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the person list -\u003e selected */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the person list -\u003e selected */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"},{"lineNumber":57,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":85,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":89,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"                MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":117,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":4,"-":149}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PET_PATIENTS_LISTED_OVERVIEW;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":30,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":31,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" -o n/\" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":39,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":40,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/\" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/Carl\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/Benson Daniel\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/Daniel Benson\";"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/Daniel Benson Daniel\";"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" -fo 1\");"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/\" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/MeIeR\";"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/Mei\";"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/Meiers\";"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/Mark\";"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        /* Case: find phone number of person in address book -\u003e 0 persons found */"},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/\" + DANIEL.getPhone().value;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        /* Case: find address of person in address book -\u003e 0 persons found */"},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/\" + DANIEL.getAddress().value;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        /* Case: find tags of person in address book -\u003e 0 persons found */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":127,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/\" + tags.get(0).tagName;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":135,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/Daniel\";"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":142,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/\" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":149,"author":{"gitID":"wynonaK"},"content":"        command \u003d \"FiNd -o n/Meier\";"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":165,"author":{"gitID":"wynonaK"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size())"},{"lineNumber":166,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":167,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, expectedModel.getFilteredPetPatientList().size());"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":23,"-":170}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Medeina - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-F14-B2/main"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":18,"author":{"gitID":"-"},"content":"Welcome to Medeina! Medeina is a application designed to help veterinarians and their assistants to manage contacts and appointments. Medeina is a command-line based application, all actions can be done using only keyboard."},{"lineNumber":19,"author":{"gitID":"-"},"content":"This developer guide aims to help new developers to get started with Medeina, and also serves as a reference for even experienced Medeina contributors."},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"To successfully install and run Medeina, you\u0027ll need the following:"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":28,"author":{"gitID":"-"},"content":"+"},{"lineNumber":29,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":30,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":31,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":32,"author":{"gitID":"-"},"content":"+"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":37,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":38,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"To set up Medeina in your computer, follow these steps:"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":47,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":48,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":49,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":50,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":51,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":52,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":53,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":54,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":55,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"To check if the setup is successful:"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":62,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"Before you start contributing to Medeina, the following configurations are required:"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":73,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":74,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":77,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":92,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":97,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":104,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":109,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":112,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":117,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":127,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":132,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":133,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":134,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":139,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":144,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"The above diagram shows the relations between each subcomponents within the Logic component."},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":149,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":154,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":157,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":162,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":165,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":170,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"The following diagram displays the structure of the UI component."},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":175,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":186,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":187,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":190,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"The following diagram displays the structure of the Logic component."},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":195,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":196,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"The following diagram displays the structures of the commands in Logic component."},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":201,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":205,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":208,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":209,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":210,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":215,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":218,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":221,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":228,"author":{"gitID":"-"},"content":"* stores Medeina\u0027s data."},{"lineNumber":229,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":230,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":233,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":236,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":243,"author":{"gitID":"-"},"content":"* can save Medeina\u0027s Address Book data in xml format and read it back."},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":246,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":255,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":256,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of Medeina (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of Medeina before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":267,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":268,"author":{"gitID":"-"},"content":"----"},{"lineNumber":269,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":273,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"-"},"content":"}"},{"lineNumber":275,"author":{"gitID":"-"},"content":"----"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":278,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":279,"author":{"gitID":"-"},"content":"----"},{"lineNumber":280,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"-"},"content":"}"},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":293,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":294,"author":{"gitID":"-"},"content":"}"},{"lineNumber":295,"author":{"gitID":"-"},"content":"----"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in Medeina\u0027s address book. The current state of Medeina is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":308,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore Medeina to the state before the `add` command executed."},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":317,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores Medeina to the state after the command is executed)."},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":326,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":335,"author":{"gitID":"-"},"content":""},{"lineNumber":336,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":345,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":346,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":347,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":348,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":349,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire Medeina."},{"lineNumber":354,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":356,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":357,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":358,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":359,"author":{"gitID":"-"},"content":""},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":362,"author":{"gitID":"-"},"content":""},{"lineNumber":363,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies Medeina (`add`, `clear`, `edit`)."},{"lineNumber":364,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":365,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":366,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":367,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":368,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of Medeina * and not the view."},{"lineNumber":369,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":373,"author":{"gitID":"-"},"content":""},{"lineNumber":374,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":375,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":376,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":377,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":378,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":379,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":380,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":381,"author":{"gitID":"-"},"content":""},{"lineNumber":382,"author":{"gitID":"-"},"content":"// tag::addPetPatient[]"},{"lineNumber":383,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d Adding a Pet Patient"},{"lineNumber":384,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":385,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":386,"author":{"gitID":"chialejing"},"content":"Currently, adding of pet patients is achieved by `AddPetPatientCommand`. It allows the user to add the details of pet patients, and subsequently stores the details within the storage file."},{"lineNumber":387,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":388,"author":{"gitID":"chialejing"},"content":"The implementation of `AddPetPatientCommand` is rather similar to that of `AddCommand`."},{"lineNumber":389,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":390,"author":{"gitID":"chialejing"},"content":"[NOTE]"},{"lineNumber":391,"author":{"gitID":"chialejing"},"content":"`AddPetPatientCommand`, as well as `AddCommand`, extends `UndoableCommand`."},{"lineNumber":392,"author":{"gitID":"chialejing"},"content":"----"},{"lineNumber":393,"author":{"gitID":"chialejing"},"content":"public class AddPetPatientCommand extends UndoableCommand {"},{"lineNumber":394,"author":{"gitID":"chialejing"},"content":"\t// logic for AddPetPatientCommand"},{"lineNumber":395,"author":{"gitID":"chialejing"},"content":"}"},{"lineNumber":396,"author":{"gitID":"chialejing"},"content":"----"},{"lineNumber":397,"author":{"gitID":"chialejing"},"content":"This brings us to the next section on the design considerations of AddPetPatientCommand."},{"lineNumber":398,"author":{"gitID":"-"},"content":""},{"lineNumber":399,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":400,"author":{"gitID":"-"},"content":""},{"lineNumber":401,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of AddPetPatientCommand"},{"lineNumber":402,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":403,"author":{"gitID":"chialejing"},"content":"* **Alternative 1 (current choice):** The command extends `UndoableCommand`"},{"lineNumber":404,"author":{"gitID":"chialejing"},"content":"** Pros: We can make use of the undo / redo function that was previously implemented. This also allows our users to correct any mistakes that they might have made while keying in the information of the pet patients."},{"lineNumber":405,"author":{"gitID":"chialejing"},"content":"** Cons: Developers who join our team in the future may have trouble understanding the code base (since we have both `UndoableCommand` and `Command`)."},{"lineNumber":406,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":407,"author":{"gitID":"chialejing"},"content":"* **Alternative 2:** The command extends `Command` instead."},{"lineNumber":408,"author":{"gitID":"chialejing"},"content":"** Pros: We simplify the code base by removing the use of `UndoableCommand`."},{"lineNumber":409,"author":{"gitID":"chialejing"},"content":"** Cons: Users are unable to undo their mistakes. Instead, they will have to go through the hassle of editing / deleting pet patients to resolve the error on their part."},{"lineNumber":410,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":411,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d\u003d Current Limitations"},{"lineNumber":412,"author":{"gitID":"chialejing"},"content":"As of now, the linking of pet patients to their respective owners (and also appointments) has not been implemented."},{"lineNumber":413,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":414,"author":{"gitID":"chialejing"},"content":"The implementation of `PetPatient` tags (i.e. having a separate list of tags from `Person`) is currently ongoing; as such, there is no support for tagging of pet patients yet."},{"lineNumber":415,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":416,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d\u003d Future Work"},{"lineNumber":417,"author":{"gitID":"chialejing"},"content":"Future work on this feature will address the current limitations that we have."},{"lineNumber":418,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":419,"author":{"gitID":"chialejing"},"content":"Linking of pet patients to their respective owners and appointments will be implemented. Tagging of the pet patients will also be implemented, as this is crucial to the searching of medical history of pets for the user."},{"lineNumber":420,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":421,"author":{"gitID":"-"},"content":"// end::addPetPatient[]"},{"lineNumber":422,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":423,"author":{"gitID":"-"},"content":"// tag::commandsyntax[]"},{"lineNumber":424,"author":{"gitID":"-"},"content":""},{"lineNumber":425,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Display List of PetPatients"},{"lineNumber":426,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implemaentation"},{"lineNumber":427,"author":{"gitID":"-"},"content":"Since Veterinarians and their assistants have the need to view the PetPatients as a list and see how many PetPatients belong to the same Owner. It is necessary to implement the PetPatient List feature."},{"lineNumber":428,"author":{"gitID":"-"},"content":""},{"lineNumber":429,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Consideration"},{"lineNumber":430,"author":{"gitID":"-"},"content":"* **Alternative 1:** Use tab function to switch between PetPatientList and PersonList"},{"lineNumber":431,"author":{"gitID":"-"},"content":""},{"lineNumber":432,"author":{"gitID":"-"},"content":"** Pros: The UI will be neat to see, saves more space for calendar view"},{"lineNumber":433,"author":{"gitID":"-"},"content":"** Cons: The user will not be able to see both PetPatient and Owners at the same time."},{"lineNumber":434,"author":{"gitID":"-"},"content":""},{"lineNumber":435,"author":{"gitID":"-"},"content":"* **ALternative 2:** Implement another Panel to display PetPatients."},{"lineNumber":436,"author":{"gitID":"-"},"content":""},{"lineNumber":437,"author":{"gitID":"-"},"content":"** Pros: User will be able to see both lists at the same time"},{"lineNumber":438,"author":{"gitID":"-"},"content":"** Cons: Takes up more space, making it difficult to display appointments in the future."},{"lineNumber":439,"author":{"gitID":"-"},"content":""},{"lineNumber":440,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Limitations"},{"lineNumber":441,"author":{"gitID":"-"},"content":"More command and features relating to PetPatient List are to be properly developed, the tags of PetPatients are not properly organised."},{"lineNumber":442,"author":{"gitID":"-"},"content":""},{"lineNumber":443,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Future Work"},{"lineNumber":444,"author":{"gitID":"-"},"content":"Implement the corresponding Add, Delete, List commands for petPatients and decide on the tags to be used for petPatients."},{"lineNumber":445,"author":{"gitID":"-"},"content":""},{"lineNumber":446,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Show Appointments on calendar"},{"lineNumber":447,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":448,"author":{"gitID":"-"},"content":""},{"lineNumber":449,"author":{"gitID":"-"},"content":"Since veterinarians and their assistants have the need to constantly check their schedule for upcoming appointments, a calender feature is required to show future appointments."},{"lineNumber":450,"author":{"gitID":"-"},"content":""},{"lineNumber":451,"author":{"gitID":"-"},"content":"Third party API `CalendarFX` is used as a Java calendar frame to show Appointments."},{"lineNumber":452,"author":{"gitID":"-"},"content":""},{"lineNumber":453,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Consideration"},{"lineNumber":454,"author":{"gitID":"-"},"content":"* **Alternative 1:** Use `iCalendar` from Jfxtra library"},{"lineNumber":455,"author":{"gitID":"-"},"content":""},{"lineNumber":456,"author":{"gitID":"-"},"content":"** Pros: Easy to implement, convenient to use. Can easily import from Jfxtra library."},{"lineNumber":457,"author":{"gitID":"-"},"content":"** Cons: UI styles are limited, the API is limited;"},{"lineNumber":458,"author":{"gitID":"-"},"content":""},{"lineNumber":459,"author":{"gitID":"-"},"content":"* **Alternative 2 (current choice):** Implement CalendarFX API library."},{"lineNumber":460,"author":{"gitID":"-"},"content":"** Pros: Versatile APIs such as set style for each calendar, and much better looking UI than iCalendar."},{"lineNumber":461,"author":{"gitID":"-"},"content":"** Cons: Extra work required to integrate CalendarFX files into project, and may cause build problems if not implemented properly."},{"lineNumber":462,"author":{"gitID":"-"},"content":""},{"lineNumber":463,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Limitations"},{"lineNumber":464,"author":{"gitID":"-"},"content":""},{"lineNumber":465,"author":{"gitID":"-"},"content":"As of now, the appointment class is yet to be properly developed, thus we are not able to show appointments inside the calendar yet."},{"lineNumber":466,"author":{"gitID":"-"},"content":""},{"lineNumber":467,"author":{"gitID":"-"},"content":"Only the UI of CalendarFX is integrated to show calendar view."},{"lineNumber":468,"author":{"gitID":"-"},"content":""},{"lineNumber":469,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Future Work"},{"lineNumber":470,"author":{"gitID":"-"},"content":""},{"lineNumber":471,"author":{"gitID":"-"},"content":"After the appointment class being finished, we\u0027ll be able to implement `setAppointment` function in CalendarFX, the user will then be able to see future appointments in either All-day/weekly/monthly/yearly view."},{"lineNumber":472,"author":{"gitID":"-"},"content":""},{"lineNumber":473,"author":{"gitID":"-"},"content":"We may also make enhancements to the Medeina\u0027s UI such as changing theme colour to match the UI colour of CalendarFX."},{"lineNumber":474,"author":{"gitID":"-"},"content":""},{"lineNumber":475,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improvements to Command Syntax"},{"lineNumber":476,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":477,"author":{"gitID":"-"},"content":""},{"lineNumber":478,"author":{"gitID":"-"},"content":"Command syntax can be long and complicated as there is a lot of information required from the user for each of the three classes: `Person.java`, `PetPatient.java` and `Appointment.java`."},{"lineNumber":479,"author":{"gitID":"-"},"content":""},{"lineNumber":480,"author":{"gitID":"-"},"content":"`PetPatient` is dependent on `Person`, and `Appointment` is dependent on both `Person` and `PetPatient`."},{"lineNumber":481,"author":{"gitID":"-"},"content":""},{"lineNumber":482,"author":{"gitID":"-"},"content":"* Variations of the same type of command such as:"},{"lineNumber":483,"author":{"gitID":"-"},"content":"** **add** (Person), **add**PetPatient, **add**Appointment"},{"lineNumber":484,"author":{"gitID":"-"},"content":"** **find** by a persons\u0027s name / **find** by a pet\u0027s name, **find** by NRIC, **find** by phone number"},{"lineNumber":485,"author":{"gitID":"-"},"content":"** **edit** Person / **edit** Pet patient, **edit** Appointment"},{"lineNumber":486,"author":{"gitID":"-"},"content":""},{"lineNumber":487,"author":{"gitID":"-"},"content":"* Many prefixes required, for example:"},{"lineNumber":488,"author":{"gitID":"-"},"content":"** Person: n/NAME p/PHONE NUMBER e/EMAIL a/ADDRESS nr/NRIC [t/TAGS]..."},{"lineNumber":489,"author":{"gitID":"-"},"content":"** Pet patient: n/NAME s/SPECIES b/BREED c/COLOUR bt/BLOOD TYPE [t/TAGS]..."},{"lineNumber":490,"author":{"gitID":"-"},"content":""},{"lineNumber":491,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":492,"author":{"gitID":"-"},"content":""},{"lineNumber":493,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Consolidating similar commands"},{"lineNumber":494,"author":{"gitID":"-"},"content":""},{"lineNumber":495,"author":{"gitID":"-"},"content":"* Combining variations of the same type of command into a single command with parsing options"},{"lineNumber":496,"author":{"gitID":"-"},"content":"** **add Person** : add **-o** n/NAME p/PHONE NUMBER e/EMAIL a/ADDRESS nr/NRIC [t/TAGS]..."},{"lineNumber":497,"author":{"gitID":"-"},"content":"** **add Pet Patient** : add **-p** n/NAME s/SPECIES b/BREED c/COLOUR bt/BLOOD TYPE [t/TAGS]... **-o** [WHO IS THE OWNER]"},{"lineNumber":498,"author":{"gitID":"-"},"content":"** **add Appointment** : add **-a** d/DATE r/REMARK [t/TAGS]... **-o** [OWNER] -p [PET PATIENT INVOLVED]"},{"lineNumber":499,"author":{"gitID":"-"},"content":"** add **-o** [OWNER INFO] **-p** [PET INFO] **-a** [APPOINTMENT INFO]"},{"lineNumber":500,"author":{"gitID":"-"},"content":""},{"lineNumber":501,"author":{"gitID":"-"},"content":"Keeping to one main command is simpler and more user-friendly as compared to having variations of the same type of command. To reduce the amount of typing required, command syntax should be kept as compact as possible. Instead of having separate `add` commands for each of the 3 classes, combine them into a one-liner command to reduce typing redundant information from dependencies."},{"lineNumber":502,"author":{"gitID":"-"},"content":""},{"lineNumber":503,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Improving user-friendliness"},{"lineNumber":504,"author":{"gitID":"-"},"content":""},{"lineNumber":505,"author":{"gitID":"-"},"content":"* Command syntax highlighting"},{"lineNumber":506,"author":{"gitID":"-"},"content":"** Use different colours to highlight [COMMAND WORDS], [PARSING OPTIONS] and [USER INPUT] to improve readability for the user."},{"lineNumber":507,"author":{"gitID":"-"},"content":""},{"lineNumber":508,"author":{"gitID":"-"},"content":"image::autocomplete.png[width\u003d\"500\"]"},{"lineNumber":509,"author":{"gitID":"-"},"content":""},{"lineNumber":510,"author":{"gitID":"-"},"content":"* Command syntax auto-complete suggestions"},{"lineNumber":511,"author":{"gitID":"-"},"content":"** auto-complete suggestions of command words, options and prefixes shown on a ContextMenu."},{"lineNumber":512,"author":{"gitID":"-"},"content":"** User can traverse through the suggestions in the ContextMenu using kbd:[Up] and kbd:[Down], or kbd:[Tab]."},{"lineNumber":513,"author":{"gitID":"-"},"content":"** Press kbd:[Enter] to select the suggestion in the ContextMenu and the command box will be updated."},{"lineNumber":514,"author":{"gitID":"-"},"content":""},{"lineNumber":515,"author":{"gitID":"-"},"content":"// end::commandsyntax[]"},{"lineNumber":516,"author":{"gitID":"-"},"content":""},{"lineNumber":517,"author":{"gitID":"wynonaK"},"content":"// tag::addappointment[]"},{"lineNumber":518,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d Adding \u0026 Storing Appointments"},{"lineNumber":519,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":520,"author":{"gitID":"wynonaK"},"content":"Appointments can currently be added, and automatically stored in `addressbook.xml`. When a user calls a command i.e. `AddAppointmentCommand`, once in `Model` -\u003e `ModelManager` with `addAppointment(...)`, an `indicateAddressBookChanged()` event is raised to indicate that there are changes to be made to the storing `addressbook.xml` file."},{"lineNumber":521,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":522,"author":{"gitID":"wynonaK"},"content":"The `appointment` function works similarly to the `add` function for persons, except that it accepts 4 different fields: `o\\Owner`, `r\\Remark`, `d\\DateTime`, `t\\Type Of Appointment`."},{"lineNumber":523,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":524,"author":{"gitID":"wynonaK"},"content":"Appointments are stored in `addressbook.xml` under the `\u003cappointment\u003e \u003c/appointment\u003e` tags. The owner is stored under the `\u003cowner\u003e \u003c/owner\u003e` tags, remarks are stored under `\u003cremarks\u003e \u003c/remarks\u003e` tags, date and time is stored under the `\u003cdatetime\u003e \u003c/datetime\u003e` tags, and the type of appointment is stored under the `\u003ctype\u003e \u003c/type\u003e` tags."},{"lineNumber":525,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":526,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d\u003d Future Considerations"},{"lineNumber":527,"author":{"gitID":"wynonaK"},"content":"We can consider looking to check if a particular pet or owner exists before adding an appointment. As of now, there are no functions checking for the existence of a particular owner or pet before the appointment is added."},{"lineNumber":528,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":529,"author":{"gitID":"wynonaK"},"content":"Additionally, we can look to storing the appointments in a separate file, for instance `appointments.xml`. This will make the storage xml file much more cleaner. As of now, all the storing is done on only `addressbook.xml`, which may make `addressbook.xml` confusing. In addition, if there is a large amount of data, it may be too large to store into one file."},{"lineNumber":530,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":531,"author":{"gitID":"wynonaK"},"content":"As of now, Remarks cannot be null, though there may be a chance where there are no remarks. We can look to making it accept null, instead of writing a value such as `nil` to fill up the `requireNonNull(...)` component."},{"lineNumber":532,"author":{"gitID":"wynonaK"},"content":"//end::addappointment[]"},{"lineNumber":533,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":534,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":535,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":536,"author":{"gitID":"-"},"content":""},{"lineNumber":537,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":538,"author":{"gitID":"-"},"content":""},{"lineNumber":539,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":540,"author":{"gitID":"-"},"content":""},{"lineNumber":541,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":542,"author":{"gitID":"-"},"content":""},{"lineNumber":543,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":544,"author":{"gitID":"-"},"content":""},{"lineNumber":545,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":546,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":547,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":548,"author":{"gitID":"-"},"content":""},{"lineNumber":549,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":550,"author":{"gitID":"-"},"content":""},{"lineNumber":551,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":552,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":553,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":554,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":555,"author":{"gitID":"-"},"content":""},{"lineNumber":556,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":557,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":558,"author":{"gitID":"-"},"content":""},{"lineNumber":559,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":560,"author":{"gitID":"-"},"content":""},{"lineNumber":561,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":562,"author":{"gitID":"-"},"content":""},{"lineNumber":563,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":564,"author":{"gitID":"-"},"content":""},{"lineNumber":565,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":566,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":567,"author":{"gitID":"-"},"content":""},{"lineNumber":568,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":569,"author":{"gitID":"-"},"content":""},{"lineNumber":570,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":571,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":572,"author":{"gitID":"-"},"content":""},{"lineNumber":573,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":574,"author":{"gitID":"-"},"content":""},{"lineNumber":575,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":576,"author":{"gitID":"-"},"content":""},{"lineNumber":577,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":578,"author":{"gitID":"-"},"content":""},{"lineNumber":579,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":580,"author":{"gitID":"-"},"content":""},{"lineNumber":581,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":582,"author":{"gitID":"-"},"content":""},{"lineNumber":583,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":584,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":585,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":586,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":587,"author":{"gitID":"-"},"content":""},{"lineNumber":588,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":589,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":590,"author":{"gitID":"-"},"content":""},{"lineNumber":591,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":592,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":593,"author":{"gitID":"-"},"content":""},{"lineNumber":594,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":595,"author":{"gitID":"-"},"content":""},{"lineNumber":596,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":597,"author":{"gitID":"-"},"content":""},{"lineNumber":598,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":599,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":600,"author":{"gitID":"-"},"content":""},{"lineNumber":601,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":602,"author":{"gitID":"-"},"content":""},{"lineNumber":603,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":604,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":605,"author":{"gitID":"-"},"content":""},{"lineNumber":606,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":607,"author":{"gitID":"-"},"content":""},{"lineNumber":608,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":609,"author":{"gitID":"-"},"content":""},{"lineNumber":610,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":611,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":612,"author":{"gitID":"-"},"content":""},{"lineNumber":613,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":614,"author":{"gitID":"-"},"content":""},{"lineNumber":615,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":616,"author":{"gitID":"-"},"content":""},{"lineNumber":617,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":618,"author":{"gitID":"-"},"content":""},{"lineNumber":619,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":620,"author":{"gitID":"-"},"content":""},{"lineNumber":621,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":622,"author":{"gitID":"-"},"content":""},{"lineNumber":623,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":624,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":625,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":626,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":627,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":628,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":629,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":630,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":631,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":632,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":633,"author":{"gitID":"-"},"content":""},{"lineNumber":634,"author":{"gitID":"-"},"content":""},{"lineNumber":635,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":636,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":637,"author":{"gitID":"-"},"content":""},{"lineNumber":638,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":639,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":640,"author":{"gitID":"-"},"content":""},{"lineNumber":641,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":642,"author":{"gitID":"-"},"content":""},{"lineNumber":643,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":644,"author":{"gitID":"-"},"content":""},{"lineNumber":645,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":646,"author":{"gitID":"-"},"content":""},{"lineNumber":647,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":648,"author":{"gitID":"-"},"content":""},{"lineNumber":649,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":650,"author":{"gitID":"-"},"content":""},{"lineNumber":651,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":652,"author":{"gitID":"-"},"content":""},{"lineNumber":653,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":654,"author":{"gitID":"-"},"content":""},{"lineNumber":655,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":656,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":657,"author":{"gitID":"-"},"content":""},{"lineNumber":658,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":659,"author":{"gitID":"-"},"content":""},{"lineNumber":660,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":661,"author":{"gitID":"-"},"content":""},{"lineNumber":662,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":663,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":664,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":665,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":666,"author":{"gitID":"-"},"content":""},{"lineNumber":667,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":668,"author":{"gitID":"-"},"content":""},{"lineNumber":669,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Medeina depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":670,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":671,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":672,"author":{"gitID":"-"},"content":""},{"lineNumber":673,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":674,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":675,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":676,"author":{"gitID":"-"},"content":""},{"lineNumber":677,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":678,"author":{"gitID":"-"},"content":""},{"lineNumber":679,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":680,"author":{"gitID":"-"},"content":""},{"lineNumber":681,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":682,"author":{"gitID":"-"},"content":""},{"lineNumber":683,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":684,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":685,"author":{"gitID":"-"},"content":""},{"lineNumber":686,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":687,"author":{"gitID":"-"},"content":""},{"lineNumber":688,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":689,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":690,"author":{"gitID":"-"},"content":""},{"lineNumber":691,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":692,"author":{"gitID":"-"},"content":""},{"lineNumber":693,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":694,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":695,"author":{"gitID":"-"},"content":""},{"lineNumber":696,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":697,"author":{"gitID":"-"},"content":"+"},{"lineNumber":698,"author":{"gitID":"-"},"content":"****"},{"lineNumber":699,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":700,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":701,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":702,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":703,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":704,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":705,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":706,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":707,"author":{"gitID":"-"},"content":"****"},{"lineNumber":708,"author":{"gitID":"-"},"content":""},{"lineNumber":709,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":710,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":711,"author":{"gitID":"-"},"content":""},{"lineNumber":712,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":713,"author":{"gitID":"-"},"content":""},{"lineNumber":714,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":715,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":716,"author":{"gitID":"-"},"content":""},{"lineNumber":717,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in Medeina\u0027s address book."},{"lineNumber":718,"author":{"gitID":"-"},"content":"+"},{"lineNumber":719,"author":{"gitID":"-"},"content":"****"},{"lineNumber":720,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":721,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":722,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":723,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":724,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":725,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":726,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":727,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":728,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":729,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":730,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":731,"author":{"gitID":"-"},"content":"****"},{"lineNumber":732,"author":{"gitID":"-"},"content":""},{"lineNumber":733,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":734,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":735,"author":{"gitID":"-"},"content":""},{"lineNumber":736,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":737,"author":{"gitID":"-"},"content":""},{"lineNumber":738,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":739,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":740,"author":{"gitID":"-"},"content":""},{"lineNumber":741,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":742,"author":{"gitID":"-"},"content":"+"},{"lineNumber":743,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":744,"author":{"gitID":"-"},"content":"+"},{"lineNumber":745,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":746,"author":{"gitID":"-"},"content":"+"},{"lineNumber":747,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":748,"author":{"gitID":"-"},"content":"+"},{"lineNumber":749,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":750,"author":{"gitID":"-"},"content":"+"},{"lineNumber":751,"author":{"gitID":"-"},"content":"****"},{"lineNumber":752,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":753,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":754,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":755,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":756,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":757,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":758,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":759,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":760,"author":{"gitID":"-"},"content":"****"},{"lineNumber":761,"author":{"gitID":"-"},"content":""},{"lineNumber":762,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":763,"author":{"gitID":"-"},"content":"+"},{"lineNumber":764,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":765,"author":{"gitID":"-"},"content":"+"},{"lineNumber":766,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":767,"author":{"gitID":"-"},"content":"+"},{"lineNumber":768,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":769,"author":{"gitID":"-"},"content":"+"},{"lineNumber":770,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":771,"author":{"gitID":"-"},"content":"+"},{"lineNumber":772,"author":{"gitID":"-"},"content":"****"},{"lineNumber":773,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":774,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":775,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":776,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":777,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":778,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":779,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":780,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":781,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":782,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":783,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":784,"author":{"gitID":"-"},"content":"****"},{"lineNumber":785,"author":{"gitID":"-"},"content":""},{"lineNumber":786,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":787,"author":{"gitID":"-"},"content":"+"},{"lineNumber":788,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":789,"author":{"gitID":"-"},"content":"+"},{"lineNumber":790,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":791,"author":{"gitID":"-"},"content":"+"},{"lineNumber":792,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":793,"author":{"gitID":"-"},"content":"+"},{"lineNumber":794,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":795,"author":{"gitID":"-"},"content":"+"},{"lineNumber":796,"author":{"gitID":"-"},"content":"****"},{"lineNumber":797,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":798,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":799,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":800,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":801,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":802,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":803,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":804,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":805,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":806,"author":{"gitID":"-"},"content":"****"},{"lineNumber":807,"author":{"gitID":"-"},"content":""},{"lineNumber":808,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":809,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":810,"author":{"gitID":"-"},"content":""},{"lineNumber":811,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":812,"author":{"gitID":"-"},"content":""},{"lineNumber":813,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":814,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":815,"author":{"gitID":"-"},"content":""},{"lineNumber":816,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":817,"author":{"gitID":"-"},"content":"+"},{"lineNumber":818,"author":{"gitID":"-"},"content":"****"},{"lineNumber":819,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":820,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":821,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":822,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":823,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":824,"author":{"gitID":"-"},"content":"****"},{"lineNumber":825,"author":{"gitID":"-"},"content":""},{"lineNumber":826,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":827,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":828,"author":{"gitID":"-"},"content":""},{"lineNumber":829,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":830,"author":{"gitID":"-"},"content":""},{"lineNumber":831,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":832,"author":{"gitID":"-"},"content":""},{"lineNumber":833,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":834,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":835,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":836,"author":{"gitID":"-"},"content":""},{"lineNumber":837,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":838,"author":{"gitID":"-"},"content":""},{"lineNumber":839,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":840,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":841,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":842,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":843,"author":{"gitID":"-"},"content":""},{"lineNumber":844,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":845,"author":{"gitID":"-"},"content":""},{"lineNumber":846,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":847,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":848,"author":{"gitID":"-"},"content":""},{"lineNumber":849,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":850,"author":{"gitID":"-"},"content":""},{"lineNumber":851,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":852,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":853,"author":{"gitID":"-"},"content":""},{"lineNumber":854,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":855,"author":{"gitID":"-"},"content":""},{"lineNumber":856,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":857,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":858,"author":{"gitID":"-"},"content":""},{"lineNumber":859,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":860,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":861,"author":{"gitID":"-"},"content":""},{"lineNumber":862,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":863,"author":{"gitID":"-"},"content":""},{"lineNumber":864,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":865,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":866,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":867,"author":{"gitID":"-"},"content":""},{"lineNumber":868,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":869,"author":{"gitID":"-"},"content":""},{"lineNumber":870,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":871,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":872,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":873,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":874,"author":{"gitID":"-"},"content":""},{"lineNumber":875,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":876,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":877,"author":{"gitID":"-"},"content":""},{"lineNumber":878,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":879,"author":{"gitID":"-"},"content":""},{"lineNumber":880,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":881,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":882,"author":{"gitID":"-"},"content":""},{"lineNumber":883,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":884,"author":{"gitID":"-"},"content":""},{"lineNumber":885,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":886,"author":{"gitID":"-"},"content":""},{"lineNumber":887,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":888,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":889,"author":{"gitID":"-"},"content":""},{"lineNumber":890,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":891,"author":{"gitID":"-"},"content":""},{"lineNumber":892,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":893,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":894,"author":{"gitID":"-"},"content":""},{"lineNumber":895,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":896,"author":{"gitID":"-"},"content":""},{"lineNumber":897,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":898,"author":{"gitID":"-"},"content":""},{"lineNumber":899,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":900,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":901,"author":{"gitID":"-"},"content":""},{"lineNumber":902,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":903,"author":{"gitID":"-"},"content":""},{"lineNumber":904,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":905,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":906,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":907,"author":{"gitID":"-"},"content":""},{"lineNumber":908,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":909,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":910,"author":{"gitID":"-"},"content":""},{"lineNumber":911,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":912,"author":{"gitID":"-"},"content":""},{"lineNumber":913,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":914,"author":{"gitID":"-"},"content":""},{"lineNumber":915,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":916,"author":{"gitID":"-"},"content":""},{"lineNumber":917,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":918,"author":{"gitID":"-"},"content":""},{"lineNumber":919,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":920,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":921,"author":{"gitID":"-"},"content":""},{"lineNumber":922,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":923,"author":{"gitID":"-"},"content":""},{"lineNumber":924,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":925,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":926,"author":{"gitID":"-"},"content":""},{"lineNumber":927,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":928,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":929,"author":{"gitID":"-"},"content":""},{"lineNumber":930,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":931,"author":{"gitID":"-"},"content":""},{"lineNumber":932,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":933,"author":{"gitID":"-"},"content":""},{"lineNumber":934,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":935,"author":{"gitID":"-"},"content":""},{"lineNumber":936,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":937,"author":{"gitID":"-"},"content":""},{"lineNumber":938,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":939,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":940,"author":{"gitID":"-"},"content":""},{"lineNumber":941,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":942,"author":{"gitID":"-"},"content":""},{"lineNumber":943,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":944,"author":{"gitID":"-"},"content":""},{"lineNumber":945,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":946,"author":{"gitID":"-"},"content":""},{"lineNumber":947,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":948,"author":{"gitID":"-"},"content":""},{"lineNumber":949,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":950,"author":{"gitID":"-"},"content":""},{"lineNumber":951,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":952,"author":{"gitID":"-"},"content":""},{"lineNumber":953,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":954,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":955,"author":{"gitID":"-"},"content":""},{"lineNumber":956,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":957,"author":{"gitID":"-"},"content":""},{"lineNumber":958,"author":{"gitID":"wynonaK"},"content":"* tech-savvy veterinarians and their \u003c\u003cassistants, assistants\u003e\u003e"},{"lineNumber":959,"author":{"gitID":"wynonaK"},"content":"* can type relatively fast while maintaining accuracy"},{"lineNumber":960,"author":{"gitID":"wynonaK"},"content":"* requires using the desktop in the workplace"},{"lineNumber":961,"author":{"gitID":"wynonaK"},"content":"* requires \u003c\u003ccli, CLI\u003e\u003e applications for efficiency"},{"lineNumber":962,"author":{"gitID":"wynonaK"},"content":"* provide veterinary services to domestic animals in Singapore"},{"lineNumber":963,"author":{"gitID":"wynonaK"},"content":"* has to manage a significant number of \u003c\u003cpet_patients,pet patients\u003e\u003e"},{"lineNumber":964,"author":{"gitID":"wynonaK"},"content":"* requires the information kept to generally be non-volatile"},{"lineNumber":965,"author":{"gitID":"wynonaK"},"content":"* needs to search through amounts of data for information"},{"lineNumber":966,"author":{"gitID":"-"},"content":""},{"lineNumber":967,"author":{"gitID":"wynonaK"},"content":"*Value proposition*: all-in-one vet assistant app that can view and make appointments and search for information"},{"lineNumber":968,"author":{"gitID":"-"},"content":""},{"lineNumber":969,"author":{"gitID":"-"},"content":"*Feature contribution*:"},{"lineNumber":970,"author":{"gitID":"-"},"content":""},{"lineNumber":971,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%\",options\u003d\"header\",]"},{"lineNumber":972,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":973,"author":{"gitID":"-"},"content":"|Name |Major enhancement(s) |Minor enhancement(s)"},{"lineNumber":974,"author":{"gitID":"wynonaK"},"content":"|Jacqueline Cheong|"},{"lineNumber":975,"author":{"gitID":"-"},"content":"*Make command syntax more user friendly and closer to natural language*"},{"lineNumber":976,"author":{"gitID":"-"},"content":""},{"lineNumber":977,"author":{"gitID":"-"},"content":"To enhance user experience and usage efficiency by improving the command syntax to be more intuitive and simple to use |"},{"lineNumber":978,"author":{"gitID":"-"},"content":""},{"lineNumber":979,"author":{"gitID":"-"},"content":"*Add support to change theme*"},{"lineNumber":980,"author":{"gitID":"-"},"content":""},{"lineNumber":981,"author":{"gitID":"wynonaK"},"content":"This allows Vets to change the application\u0027s appearance to better suit their preferences and working environment (e.g. dark theme for night time)"},{"lineNumber":982,"author":{"gitID":"-"},"content":""},{"lineNumber":983,"author":{"gitID":"chialejing"},"content":"|Chia Le Jing|"},{"lineNumber":984,"author":{"gitID":"chialejing"},"content":"*PetPatient class and all its relevant features*"},{"lineNumber":985,"author":{"gitID":"-"},"content":""},{"lineNumber":986,"author":{"gitID":"chialejing"},"content":"Commands such as add, edit, delete, find. Also includes the storage of pet patient\u0027s data into the associated .xml file. |"},{"lineNumber":987,"author":{"gitID":"-"},"content":""},{"lineNumber":988,"author":{"gitID":"chialejing"},"content":"*Implement backup function for local databases and the cloud (for v2.0)*"},{"lineNumber":989,"author":{"gitID":"-"},"content":""},{"lineNumber":990,"author":{"gitID":"chialejing"},"content":"Allows local files to be backed up with the latest copy (in case of corruption of data). Also allows data to be backed up to the cloud for future use."},{"lineNumber":991,"author":{"gitID":"-"},"content":""},{"lineNumber":992,"author":{"gitID":"wynonaK"},"content":"|Wynona Kaan |"},{"lineNumber":993,"author":{"gitID":"wynonaK"},"content":"*Appointment class and all relevant features*"},{"lineNumber":994,"author":{"gitID":"-"},"content":""},{"lineNumber":995,"author":{"gitID":"wynonaK"},"content":"Commands such as add, remove, edit, find, as well as storage, for Vet and assistants, to handle appointments. |"},{"lineNumber":996,"author":{"gitID":"-"},"content":""},{"lineNumber":997,"author":{"gitID":"wynonaK"},"content":"*Remove tags from all person objects*"},{"lineNumber":998,"author":{"gitID":"-"},"content":""},{"lineNumber":999,"author":{"gitID":"wynonaK"},"content":"Allows for a particular tag to be removed from all objects, depending on what needs to be removed."},{"lineNumber":1000,"author":{"gitID":"-"},"content":""},{"lineNumber":1001,"author":{"gitID":"-"},"content":"|Peng Xuanchang |"},{"lineNumber":1002,"author":{"gitID":"-"},"content":"*Integrating CalenderFX as framework for Calender view*"},{"lineNumber":1003,"author":{"gitID":"-"},"content":""},{"lineNumber":1004,"author":{"gitID":"-"},"content":"Vets and their assistants will be able to see their appointments in calender view integrated in the software. |"},{"lineNumber":1005,"author":{"gitID":"-"},"content":""},{"lineNumber":1006,"author":{"gitID":"-"},"content":"*Add NRIC field in Owner’s profile*"},{"lineNumber":1007,"author":{"gitID":"-"},"content":""},{"lineNumber":1008,"author":{"gitID":"-"},"content":"The NRIC field will help the veterinarians and their assistants to better locate an owner using their unique ID."},{"lineNumber":1009,"author":{"gitID":"-"},"content":""},{"lineNumber":1010,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1011,"author":{"gitID":"-"},"content":""},{"lineNumber":1012,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1013,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1014,"author":{"gitID":"-"},"content":""},{"lineNumber":1015,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1016,"author":{"gitID":"-"},"content":""},{"lineNumber":1017,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1018,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1019,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1020,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget command syntax, or how to use the App"},{"lineNumber":1021,"author":{"gitID":"-"},"content":""},{"lineNumber":1022,"author":{"gitID":"-"},"content":"|`* * *` |user |add a pet patient |register its information"},{"lineNumber":1023,"author":{"gitID":"-"},"content":""},{"lineNumber":1024,"author":{"gitID":"-"},"content":"|`* * *` |user |find a pet patient by name |easily locate its information without having to go through a long list of pet patients"},{"lineNumber":1025,"author":{"gitID":"-"},"content":""},{"lineNumber":1026,"author":{"gitID":"-"},"content":"|`* * *` |user |add appointment |schedule meetings with pet patients and their owners"},{"lineNumber":1027,"author":{"gitID":"-"},"content":""},{"lineNumber":1028,"author":{"gitID":"-"},"content":"|`* * *` |user |edit pet owner\u0027s contact information |update any change in contact information (e.g. changed hand phone number, change of address)"},{"lineNumber":1029,"author":{"gitID":"-"},"content":""},{"lineNumber":1030,"author":{"gitID":"-"},"content":"|`* * *` |user |basic tags to be assigned automatically |type lesser (e.g. when adding a pet owner, the \"Person\" tag should be assigned by default)"},{"lineNumber":1031,"author":{"gitID":"-"},"content":""},{"lineNumber":1032,"author":{"gitID":"-"},"content":"|`* * *` |user |list out appointments for next day |prepare for the required procedures/diagnosis/consultation"},{"lineNumber":1033,"author":{"gitID":"-"},"content":""},{"lineNumber":1034,"author":{"gitID":"-"},"content":"|`* * *` |user |classify appointments by types |better organize a long list of appointments"},{"lineNumber":1035,"author":{"gitID":"-"},"content":""},{"lineNumber":1036,"author":{"gitID":"-"},"content":"|`* * *` |user |cancel an appointment |make space in schedule for other things"},{"lineNumber":1037,"author":{"gitID":"-"},"content":""},{"lineNumber":1038,"author":{"gitID":"-"},"content":"|`* * *` |user |see upcoming appointments |prepare/plan in advance"},{"lineNumber":1039,"author":{"gitID":"-"},"content":""},{"lineNumber":1040,"author":{"gitID":"-"},"content":"|`* * *` |user |see a list of today\u0027s appointment |check on today\u0027s schedule"},{"lineNumber":1041,"author":{"gitID":"-"},"content":""},{"lineNumber":1042,"author":{"gitID":"-"},"content":"|`* * *` |user |filter pet patients by species and blood type |contact them for blood donation during emergencies"},{"lineNumber":1043,"author":{"gitID":"-"},"content":""},{"lineNumber":1044,"author":{"gitID":"-"},"content":"|`* * *` |user |reschedule an appointment |make time for emergency situations"},{"lineNumber":1045,"author":{"gitID":"-"},"content":""},{"lineNumber":1046,"author":{"gitID":"-"},"content":"|`* * *` |user |search by pet owner\u0027s name |retrieve a list of pet patients under a particular owner"},{"lineNumber":1047,"author":{"gitID":"-"},"content":""},{"lineNumber":1048,"author":{"gitID":"-"},"content":"|`* * *` |user |add a pet owner |maintain contact information and register a pet patient under him or her"},{"lineNumber":1049,"author":{"gitID":"-"},"content":""},{"lineNumber":1050,"author":{"gitID":"-"},"content":"|`* * *` |user |add in owner details such as contact number |contact them when needed"},{"lineNumber":1051,"author":{"gitID":"-"},"content":""},{"lineNumber":1052,"author":{"gitID":"-"},"content":"|`* * *` |user |update pet patients\u0027 information |"},{"lineNumber":1053,"author":{"gitID":"-"},"content":""},{"lineNumber":1054,"author":{"gitID":"-"},"content":"|`* * *` |user |see pet owner\u0027s name when checking pet patients\u0027 profile |know who it belongs to"},{"lineNumber":1055,"author":{"gitID":"-"},"content":""},{"lineNumber":1056,"author":{"gitID":"-"},"content":"|`* * *` |user |delete a pet patient after certain period |remove entries that I no longer need"},{"lineNumber":1057,"author":{"gitID":"-"},"content":""},{"lineNumber":1058,"author":{"gitID":"-"},"content":"|`* * *` |user |have a simple and intuitive command line interface |maximize workflow efficiency"},{"lineNumber":1059,"author":{"gitID":"-"},"content":""},{"lineNumber":1060,"author":{"gitID":"-"},"content":"|`* *` |user |change the theme of the application |better suit my preference"},{"lineNumber":1061,"author":{"gitID":"-"},"content":""},{"lineNumber":1062,"author":{"gitID":"-"},"content":"|`* *` |user |log in with password |protect my pet patients\u0027 and their respective owners\u0027 information"},{"lineNumber":1063,"author":{"gitID":"-"},"content":""},{"lineNumber":1064,"author":{"gitID":"-"},"content":"|`* *` |user |update status of pet patient (living, deceased) |know the number of pets I am managing now"},{"lineNumber":1065,"author":{"gitID":"-"},"content":""},{"lineNumber":1066,"author":{"gitID":"-"},"content":"|`* *` |user |check who is my assistant for the day/particular pet patient |brief them in advance"},{"lineNumber":1067,"author":{"gitID":"-"},"content":""},{"lineNumber":1068,"author":{"gitID":"-"},"content":"|`* *` |user |check services consumed for a particular appointment |know what a pet patient has gone through"},{"lineNumber":1069,"author":{"gitID":"-"},"content":""},{"lineNumber":1070,"author":{"gitID":"-"},"content":"|`*` |user |create and modify tags |standardize tags used in the application"},{"lineNumber":1071,"author":{"gitID":"-"},"content":""},{"lineNumber":1072,"author":{"gitID":"-"},"content":"|`*` |user |have reminders sms sent to pet owners automatically 2 days before appointment|"},{"lineNumber":1073,"author":{"gitID":"-"},"content":""},{"lineNumber":1074,"author":{"gitID":"-"},"content":"|`*` |user |update my status |be recognized as an official vet after my training"},{"lineNumber":1075,"author":{"gitID":"-"},"content":""},{"lineNumber":1076,"author":{"gitID":"-"},"content":"|`*` |user |transfer a pet patient from my clinic to another in case of emergency|"},{"lineNumber":1077,"author":{"gitID":"-"},"content":""},{"lineNumber":1078,"author":{"gitID":"-"},"content":"|`*` |user |manage the \"rooms\" in hospital |make space for newly hospitalized pet patient"},{"lineNumber":1079,"author":{"gitID":"-"},"content":""},{"lineNumber":1080,"author":{"gitID":"-"},"content":"|`*` |user |search for a pet patient\u0027s medical history |know the next step of treatment"},{"lineNumber":1081,"author":{"gitID":"-"},"content":""},{"lineNumber":1082,"author":{"gitID":"-"},"content":"|`*` |user with many pet patients in the address book |sort pet patients by name |locate a pet patient easily"},{"lineNumber":1083,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1084,"author":{"gitID":"-"},"content":""},{"lineNumber":1085,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1086,"author":{"gitID":"-"},"content":""},{"lineNumber":1087,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1088,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1089,"author":{"gitID":"-"},"content":""},{"lineNumber":1090,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `Medeina` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1091,"author":{"gitID":"-"},"content":""},{"lineNumber":1092,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1093,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: View full details of an appointment"},{"lineNumber":1094,"author":{"gitID":"-"},"content":""},{"lineNumber":1095,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1096,"author":{"gitID":"-"},"content":""},{"lineNumber":1097,"author":{"gitID":"-"},"content":"1.  User requests to list appointments"},{"lineNumber":1098,"author":{"gitID":"-"},"content":"2.  Medeina shows a list of appointments for the current month"},{"lineNumber":1099,"author":{"gitID":"-"},"content":"3.  User requests to view a specific appointment in the list"},{"lineNumber":1100,"author":{"gitID":"-"},"content":"4.  Medeina shows the full details of the specified appointment"},{"lineNumber":1101,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1102,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1103,"author":{"gitID":"-"},"content":""},{"lineNumber":1104,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1105,"author":{"gitID":"-"},"content":""},{"lineNumber":1106,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1107,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1108,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1109,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1110,"author":{"gitID":"-"},"content":""},{"lineNumber":1111,"author":{"gitID":"-"},"content":"* 2b. To retrieve a list of all upcoming appointments, use the command \"list -a appointments\""},{"lineNumber":1112,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1113,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1114,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1115,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1116,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1117,"author":{"gitID":"-"},"content":"** 3a1. Medeina shows an error message."},{"lineNumber":1118,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1119,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1120,"author":{"gitID":"-"},"content":""},{"lineNumber":1121,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1122,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Update pet owner\u0027s contact information"},{"lineNumber":1123,"author":{"gitID":"-"},"content":""},{"lineNumber":1124,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1125,"author":{"gitID":"-"},"content":""},{"lineNumber":1126,"author":{"gitID":"-"},"content":"1.  User requests to find a pet patient with the name \"Joseph\""},{"lineNumber":1127,"author":{"gitID":"-"},"content":"2.  Medeina shows a list of pet patients with the name \"Joseph\""},{"lineNumber":1128,"author":{"gitID":"-"},"content":"3.  User requests to view contact information of a specific pet patient"},{"lineNumber":1129,"author":{"gitID":"-"},"content":"4.  Medeina shows the pet patient\u0027s owner\u0027s contact information"},{"lineNumber":1130,"author":{"gitID":"-"},"content":"5.  User requests to modify the pet patient\u0027s owner\u0027s contact information"},{"lineNumber":1131,"author":{"gitID":"-"},"content":"6.  Medeina shows the pet patient\u0027s updated contact information"},{"lineNumber":1132,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1133,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1134,"author":{"gitID":"-"},"content":""},{"lineNumber":1135,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1136,"author":{"gitID":"-"},"content":""},{"lineNumber":1137,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1138,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1139,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1140,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1141,"author":{"gitID":"-"},"content":""},{"lineNumber":1142,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1143,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1144,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1145,"author":{"gitID":"-"},"content":"** 3a1. Medeina shows an error message."},{"lineNumber":1146,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1147,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1148,"author":{"gitID":"-"},"content":""},{"lineNumber":1149,"author":{"gitID":"-"},"content":"* 5a. The given command is invalid."},{"lineNumber":1150,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1151,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1152,"author":{"gitID":"-"},"content":"** 5a1. Medeina shows the correct command usage to edit pet patient\u0027s information."},{"lineNumber":1153,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1154,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1155,"author":{"gitID":"-"},"content":""},{"lineNumber":1156,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1157,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Retrieve medical history of a pet patient"},{"lineNumber":1158,"author":{"gitID":"-"},"content":""},{"lineNumber":1159,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1160,"author":{"gitID":"-"},"content":""},{"lineNumber":1161,"author":{"gitID":"-"},"content":"1.  User requests to find a pet patient with the name \"Joseph\""},{"lineNumber":1162,"author":{"gitID":"-"},"content":"2.  Medeina shows a list of pet patients with the name \"Joseph\""},{"lineNumber":1163,"author":{"gitID":"-"},"content":"3.  User requests to view medical history of a specific pet patient"},{"lineNumber":1164,"author":{"gitID":"-"},"content":"4.  Medeina shows the pet patient\u0027s medical history"},{"lineNumber":1165,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1166,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1167,"author":{"gitID":"-"},"content":""},{"lineNumber":1168,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1169,"author":{"gitID":"-"},"content":""},{"lineNumber":1170,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1171,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1172,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1173,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1174,"author":{"gitID":"-"},"content":""},{"lineNumber":1175,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1176,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1177,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1178,"author":{"gitID":"-"},"content":"** 3a1. Medeina shows an error message."},{"lineNumber":1179,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1180,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1181,"author":{"gitID":"-"},"content":""},{"lineNumber":1182,"author":{"gitID":"-"},"content":"* 4a. No medical history (empty)."},{"lineNumber":1183,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1184,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1185,"author":{"gitID":"-"},"content":""},{"lineNumber":1186,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1187,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Retrieve information of a particular owner (contact details, pet patients owned by him/her, and appointments made)"},{"lineNumber":1188,"author":{"gitID":"-"},"content":""},{"lineNumber":1189,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1190,"author":{"gitID":"-"},"content":""},{"lineNumber":1191,"author":{"gitID":"-"},"content":"1.  User requests to find an owner named \"Mavis\""},{"lineNumber":1192,"author":{"gitID":"-"},"content":"2.  Medeina shows a list of owners with \"Mavis\" as part of their name"},{"lineNumber":1193,"author":{"gitID":"-"},"content":"3.  User requests to view information of a specific owner"},{"lineNumber":1194,"author":{"gitID":"-"},"content":"4.  Medeina shows information about the owner"},{"lineNumber":1195,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1196,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1197,"author":{"gitID":"-"},"content":""},{"lineNumber":1198,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1199,"author":{"gitID":"-"},"content":""},{"lineNumber":1200,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1201,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1202,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1203,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1204,"author":{"gitID":"-"},"content":""},{"lineNumber":1205,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1206,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1207,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1208,"author":{"gitID":"-"},"content":"** 3a1. Medeina shows an error message."},{"lineNumber":1209,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1210,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1211,"author":{"gitID":"-"},"content":""},{"lineNumber":1212,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1213,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Generate a pdf report of a pet patient\u0027s medical history and owner\u0027s contact information"},{"lineNumber":1214,"author":{"gitID":"-"},"content":""},{"lineNumber":1215,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1216,"author":{"gitID":"-"},"content":""},{"lineNumber":1217,"author":{"gitID":"-"},"content":"1.  User requests to find a pet patient with the name \"Joseph\""},{"lineNumber":1218,"author":{"gitID":"-"},"content":"2.  Medeina shows a list of pet patients with the name \"Joseph\""},{"lineNumber":1219,"author":{"gitID":"-"},"content":"3.  User requests for a pdf report of a specific pet patient on the list"},{"lineNumber":1220,"author":{"gitID":"-"},"content":"4.  Medeina generates a pdf report for the user"},{"lineNumber":1221,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1222,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1223,"author":{"gitID":"-"},"content":""},{"lineNumber":1224,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1225,"author":{"gitID":"-"},"content":""},{"lineNumber":1226,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1227,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1228,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1229,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1230,"author":{"gitID":"-"},"content":""},{"lineNumber":1231,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1232,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1233,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1234,"author":{"gitID":"-"},"content":"** 3a1. Medeina shows an error message."},{"lineNumber":1235,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1236,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1237,"author":{"gitID":"-"},"content":""},{"lineNumber":1238,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1239,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Generate a pdf report of a particular owner\u0027s full information e.g. contact details, list of pet patients under this owner and their medical histories"},{"lineNumber":1240,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1241,"author":{"gitID":"-"},"content":""},{"lineNumber":1242,"author":{"gitID":"-"},"content":"1.  User requests to find an owner with the name \"Mavis\""},{"lineNumber":1243,"author":{"gitID":"-"},"content":"2.  Medeina shows a list of owners with the name \"Mavis\""},{"lineNumber":1244,"author":{"gitID":"-"},"content":"3.  User requests for a pdf report of a specific owner on the list"},{"lineNumber":1245,"author":{"gitID":"-"},"content":"4.  Medeina generates a pdf report for the user"},{"lineNumber":1246,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1247,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1248,"author":{"gitID":"-"},"content":""},{"lineNumber":1249,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1250,"author":{"gitID":"-"},"content":""},{"lineNumber":1251,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1252,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1253,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1254,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1255,"author":{"gitID":"-"},"content":""},{"lineNumber":1256,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1257,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1258,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1259,"author":{"gitID":"-"},"content":"** 3a1. Medeina shows an error message."},{"lineNumber":1260,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1261,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1262,"author":{"gitID":"-"},"content":""},{"lineNumber":1263,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1264,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add tag(s) to a pet owner"},{"lineNumber":1265,"author":{"gitID":"-"},"content":""},{"lineNumber":1266,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1267,"author":{"gitID":"-"},"content":""},{"lineNumber":1268,"author":{"gitID":"-"},"content":"1.  User requests to find an owner with the name \"Mavis\""},{"lineNumber":1269,"author":{"gitID":"-"},"content":"2.  Medeina shows a list of owners with the name \"Mavis\""},{"lineNumber":1270,"author":{"gitID":"-"},"content":"3.  User requests to add tags to a specific owner on the list"},{"lineNumber":1271,"author":{"gitID":"-"},"content":"4.  Medeina shows updated owner information"},{"lineNumber":1272,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1273,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1274,"author":{"gitID":"-"},"content":""},{"lineNumber":1275,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1276,"author":{"gitID":"-"},"content":""},{"lineNumber":1277,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1278,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1279,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1280,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1281,"author":{"gitID":"-"},"content":""},{"lineNumber":1282,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1283,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1284,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1285,"author":{"gitID":"-"},"content":"** 3a1. Medeina shows an error message."},{"lineNumber":1286,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1287,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1288,"author":{"gitID":"-"},"content":""},{"lineNumber":1289,"author":{"gitID":"-"},"content":"* 3b. The given tag(s) is/are invalid."},{"lineNumber":1290,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1291,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1292,"author":{"gitID":"-"},"content":"** 3b1. Medeina shows a list of valid tags."},{"lineNumber":1293,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1294,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1295,"author":{"gitID":"-"},"content":""},{"lineNumber":1296,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1297,"author":{"gitID":"-"},"content":""},{"lineNumber":1298,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1299,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1300,"author":{"gitID":"-"},"content":""},{"lineNumber":1301,"author":{"gitID":"chialejing"},"content":".  The system should work on Windows, Linux and macOS as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1302,"author":{"gitID":"chialejing"},"content":".  A user (vet or vet assistant) with above average typing speed for regular English text (i.e. not code, not system administrative commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1303,"author":{"gitID":"chialejing"},"content":".  The system should be accessible, even without any Internet connection (or with poor Internet connection)."},{"lineNumber":1304,"author":{"gitID":"chialejing"},"content":".  The system should be able to hold the information of at least 1000 patients (pets) and their respective owners without noticeable sluggishness in performance for typical usage."},{"lineNumber":1305,"author":{"gitID":"chialejing"},"content":".  The system should be stable (runs without crashing, even for extended hours) and responsive (with a maximum lag of 2 seconds) due to the possibility of patient emergencies."},{"lineNumber":1306,"author":{"gitID":"chialejing"},"content":".  The system should be reliable and accurate (i.e. information keyed in is guaranteed to be saved, information retrieved is guaranteed to be accurate based on what was keyed in previously)."},{"lineNumber":1307,"author":{"gitID":"chialejing"},"content":".  The system must have sufficient security (such as password protection / encrypted storage file) to protect the confidentiality of the patients (pets) and their respective owners. This is also to ensure compliance with PDPA."},{"lineNumber":1308,"author":{"gitID":"chialejing"},"content":".  Patient\u0027s and owner\u0027s information should be easily and accurately backed up, with zero errors in the information."},{"lineNumber":1309,"author":{"gitID":"chialejing"},"content":".  Restoring patient\u0027s and their respective owner\u0027s information should be an easy process."},{"lineNumber":1310,"author":{"gitID":"chialejing"},"content":".  The system should have sufficient commands / functions to ensure that information can be maintained and managed easily. Basic operations such as add, delete, find, update must be included for patients and their respective owners."},{"lineNumber":1311,"author":{"gitID":"-"},"content":""},{"lineNumber":1312,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1313,"author":{"gitID":"-"},"content":""},{"lineNumber":1314,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1315,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1316,"author":{"gitID":"-"},"content":""},{"lineNumber":1317,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1318,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1319,"author":{"gitID":"-"},"content":""},{"lineNumber":1320,"author":{"gitID":"wynonaK"},"content":"[[assistants]] Assistants::"},{"lineNumber":1321,"author":{"gitID":"wynonaK"},"content":"People who help Veterinarians (receptionist, technicians etc.)"},{"lineNumber":1322,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1323,"author":{"gitID":"wynonaK"},"content":"[[cli]] CLI::"},{"lineNumber":1324,"author":{"gitID":"wynonaK"},"content":"Command Line Interface"},{"lineNumber":1325,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1326,"author":{"gitID":"wynonaK"},"content":"[[pet_patients]] Pet Patients::"},{"lineNumber":1327,"author":{"gitID":"wynonaK"},"content":"Domestic animals which seek veterinary services"},{"lineNumber":1328,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1329,"author":{"gitID":"-"},"content":""},{"lineNumber":1330,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1331,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1332,"author":{"gitID":"-"},"content":""},{"lineNumber":1333,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1334,"author":{"gitID":"-"},"content":""},{"lineNumber":1335,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1336,"author":{"gitID":"-"},"content":""},{"lineNumber":1337,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1338,"author":{"gitID":"-"},"content":""},{"lineNumber":1339,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1340,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1341,"author":{"gitID":"-"},"content":""},{"lineNumber":1342,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1343,"author":{"gitID":"-"},"content":""},{"lineNumber":1344,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1345,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1346,"author":{"gitID":"-"},"content":""},{"lineNumber":1347,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1348,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1349,"author":{"gitID":"-"},"content":""},{"lineNumber":1350,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1351,"author":{"gitID":"-"},"content":""},{"lineNumber":1352,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1353,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1354,"author":{"gitID":"-"},"content":""},{"lineNumber":1355,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1356,"author":{"gitID":"-"},"content":""},{"lineNumber":1357,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1358,"author":{"gitID":"-"},"content":""},{"lineNumber":1359,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1360,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1361,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1362,"author":{"gitID":"-"},"content":""},{"lineNumber":1363,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1364,"author":{"gitID":"-"},"content":""},{"lineNumber":1365,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1366,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1367,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1368,"author":{"gitID":"-"},"content":""},{"lineNumber":1369,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1370,"author":{"gitID":"-"},"content":""},{"lineNumber":1371,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1372,"author":{"gitID":"-"},"content":""},{"lineNumber":1373,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1374,"author":{"gitID":"-"},"content":""},{"lineNumber":1375,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1376,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1377,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1378,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1379,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1380,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1381,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1382,"author":{"gitID":"-"},"content":""},{"lineNumber":1383,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1384,"author":{"gitID":"-"},"content":""},{"lineNumber":1385,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1386,"author":{"gitID":"-"},"content":""},{"lineNumber":1387,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1388,"author":{"gitID":"-"},"content":""},{"lineNumber":1389,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1390,"author":{"gitID":"-"},"content":""},{"lineNumber":1391,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"chialejing":50,"wynonaK":41,"-":1300}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.PetPatientCardHandle;"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"import guitests.guihandles.PetPatientListPanelHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.ui.PersonCard;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedCard.getTags().forEach(tag -\u003e"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                assertEquals(expectedCard.getTagStyleClasses(tag),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                        actualCard.getTagStyleClasses(tag)));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTagsEqual(expectedPerson, actualCard);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"content":"    //@@author Robert-Peng"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPetPatient}."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPetPatient(PetPatient expectedPetPatient, PetPatientCardHandle actualCard) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertEquals(expectedPetPatient.getName().toString(), actualCard.getName());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertEquals(expectedPetPatient.getSpecies(), actualCard.getSpecies());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertEquals(expectedPetPatient.getBreed(), actualCard.getBreed());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertEquals(expectedPetPatient.getColour(), actualCard.getColour());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertEquals(expectedPetPatient.getBloodType(), actualCard.getBloodType());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertEquals(expectedPetPatient.getOwner().toString(), actualCard.getOwnerNric());"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        //assertTagsEqual(expectedPetPatient, actualCard);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"content":"    //@@author"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Returns the color style for {@code tagName}\u0027s label. The tag\u0027s color is determined by looking up the color"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * in {@code PersonCard#TAG_COLOR_STYLES}, using an index generated by the hash code of the tag\u0027s content."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Solution below adopted from :"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * https://github.com/se-edu/addressbook-level4/pull/798/commits/167b3d0b4f7ad34296d2fbf505f9ae71f983f53c"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @see PersonCard#getTagColorStyleFor(String)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private static String getTagColorStyleFor(String tagName) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        switch (tagName) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        case \"classmates\":"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        case \"owesMoney\":"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return \"teal\";"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        case \"colleagues\":"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        case \"neighbours\":"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            return \"yellow\";"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        case \"family\":"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        case \"friend\":"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            return \"orange\";"},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":"        case \"owner\":"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        case \"friends\":"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return \"brown\";"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        case \"husband\":"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            return \"grey\";"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"        case \"supplier\":"},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":"            return \"black\";"},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            fail(tagName + \" does not have a color assigned.\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            return \"\";"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * color."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private static void assertTagsEqual(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        List\u003cString\u003e expectedTags \u003d expectedPerson.getTags().stream()"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertEquals(expectedTags, actualCard.getTags());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        expectedTags.forEach(tag -\u003e"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)),"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                        actualCard.getTagStyleClasses(tag)));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"content":"    //@@author Robert-Peng"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * color."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    private static void assertTagsEqual(PetPatient expectedPetPatient, PetPatientCardHandle actualCard) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        List\u003cString\u003e expectedTags \u003d expectedPetPatient.getTags().stream()"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            .map(tag -\u003e tag.tagName).collect(Collectors.toList());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertEquals(expectedTags, actualCard.getTags());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        expectedTags.forEach(tag -\u003e"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)),"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                actualCard.getTagStyleClasses(tag)));"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"content":"    //@@author"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"content":"    //@@author Robert-Peng"},{"lineNumber":145,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"wynonaK"},"content":"     * Asserts that the list in {@code petPatientListPanelHandle} displays the details of {@code petPatient} correctly"},{"lineNumber":147,"author":{"gitID":"wynonaK"},"content":"     * and in the correct order."},{"lineNumber":148,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"wynonaK"},"content":"    public static void assertListMatching(PetPatientListPanelHandle petPatientListPanelHandle,"},{"lineNumber":150,"author":{"gitID":"wynonaK"},"content":"                                          PetPatient... petPatient) {"},{"lineNumber":151,"author":{"gitID":"wynonaK"},"content":"        for (int i \u003d 0; i \u003c petPatient.length; i++) {"},{"lineNumber":152,"author":{"gitID":"wynonaK"},"content":"            assertCardDisplaysPetPatient(petPatient[i], petPatientListPanelHandle.getPetPatientCardHandle(i));"},{"lineNumber":153,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":155,"content":"    //@@author"},{"lineNumber":156,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":167,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":6,"chialejing":1,"wynonaK":16,"-":156}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"Aquarinte"},"content":"    //@@author aquarinte"},{"lineNumber":161,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":162,"author":{"gitID":"Aquarinte"},"content":"    public void commandBox_autocompleteCommandWord() {"},{"lineNumber":163,"author":{"gitID":"Aquarinte"},"content":"        //add command"},{"lineNumber":164,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"a\", 1, \"add\");"},{"lineNumber":165,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\" \", 1, \"add\");"},{"lineNumber":166,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":167,"author":{"gitID":"Aquarinte"},"content":"        //clear command"},{"lineNumber":168,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"cl\", 1, \"clear\");"},{"lineNumber":169,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":170,"author":{"gitID":"Aquarinte"},"content":"        //delete command"},{"lineNumber":171,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"d\", 1, \"delete\");"},{"lineNumber":172,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":173,"author":{"gitID":"Aquarinte"},"content":"        //edit command"},{"lineNumber":174,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"e\", 1, \"edit\");"},{"lineNumber":175,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"ed\", 1, \"edit\");"},{"lineNumber":176,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":177,"author":{"gitID":"Aquarinte"},"content":"        //exit command"},{"lineNumber":178,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"e\", 2, \"exit\");"},{"lineNumber":179,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"ex\", 1, \"exit\");"},{"lineNumber":180,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":181,"author":{"gitID":"Aquarinte"},"content":"        //help command"},{"lineNumber":182,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"h\", 1, \"help\");"},{"lineNumber":183,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"he\", 1, \"help\");"},{"lineNumber":184,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"hel\", 1, \"help\");"},{"lineNumber":185,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":186,"author":{"gitID":"Aquarinte"},"content":"        //history command"},{"lineNumber":187,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"h\", 2, \"history\");"},{"lineNumber":188,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"hi\", 1, \"history\");"},{"lineNumber":189,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"hist\", 1, \"history\");"},{"lineNumber":190,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":191,"author":{"gitID":"Aquarinte"},"content":"        //list command"},{"lineNumber":192,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"l\", 1, \"list\");"},{"lineNumber":193,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":194,"author":{"gitID":"Aquarinte"},"content":"        //theme command"},{"lineNumber":195,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"t\", 1, \"theme\");"},{"lineNumber":196,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":197,"author":{"gitID":"Aquarinte"},"content":"        //undo"},{"lineNumber":198,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"u\", 1, \"undo\");"},{"lineNumber":199,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":200,"author":{"gitID":"Aquarinte"},"content":"        //redo"},{"lineNumber":201,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"r\", 1, \"redo\");"},{"lineNumber":202,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":204,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":205,"author":{"gitID":"Aquarinte"},"content":"    public void commandBox_autocompleteOption() {"},{"lineNumber":206,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"delete -\", 1, \"delete -a\");"},{"lineNumber":207,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -\", 2, \"add -o\");"},{"lineNumber":208,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"find -\", 3, \"find -p\");"},{"lineNumber":209,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":211,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":212,"author":{"gitID":"Aquarinte"},"content":"    public void commandBox_autocompletePrefix() {"},{"lineNumber":213,"author":{"gitID":"Aquarinte"},"content":"        // prefix n/"},{"lineNumber":214,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -o n\", 1, \"add -o n/\");"},{"lineNumber":215,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":216,"author":{"gitID":"Aquarinte"},"content":"        // prefix nr/"},{"lineNumber":217,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -o n\", 2, \"add -o nr/\");"},{"lineNumber":218,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -o nr\", 1, \"add -o nr/\");"},{"lineNumber":219,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":220,"author":{"gitID":"Aquarinte"},"content":"        //prefix b/"},{"lineNumber":221,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -p b\", 1, \"add -p b/\");"},{"lineNumber":222,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":223,"author":{"gitID":"Aquarinte"},"content":"        //prefix bt/"},{"lineNumber":224,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -p b\", 2, \"add -p bt/\");"},{"lineNumber":225,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":227,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":228,"author":{"gitID":"Aquarinte"},"content":"    public void commandBox_autocompleteNric() {"},{"lineNumber":229,"author":{"gitID":"Aquarinte"},"content":"        // autocomplete suggestions for nric for add command that follows \"-o nr/\""},{"lineNumber":230,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -o nr/\", 1, \"add -o nr/F0184556R\");"},{"lineNumber":231,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -o nr/F018\", 1, \"add -o nr/F0184556R\");"},{"lineNumber":232,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -o nr/\", 2, \"add -o nr/F2345678U\");"},{"lineNumber":233,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -o nr/S\", 1, \"add -o nr/S0123456Q\");"},{"lineNumber":234,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":235,"author":{"gitID":"Aquarinte"},"content":"        // no nric autocomplete suggestion if add command does not have \"-o nr/\""},{"lineNumber":236,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -p nr/S\", 1, \"add -p nr/S\");"},{"lineNumber":237,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -a nr/F\", 1, \"add -a nr/F\");"},{"lineNumber":238,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":239,"author":{"gitID":"Aquarinte"},"content":"        // autocomplete suggestions for nric for \"edit -p\" command"},{"lineNumber":240,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"edit -p nr/\", 1, \"edit -p nr/F0184556R\");"},{"lineNumber":241,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"edit -p nr/F018\", 1, \"edit -p nr/F0184556R\");"},{"lineNumber":242,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"edit -p nr/\", 2, \"edit -p nr/F2345678U\");"},{"lineNumber":243,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"edit -p nr/S\", 1, \"edit -p nr/S0123456Q\");"},{"lineNumber":244,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":245,"author":{"gitID":"Aquarinte"},"content":"        // no nric autocomplete suggestion if edit command does not start with \"edit -p\""},{"lineNumber":246,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"edit -o nr/\", 1, \"edit -o nr/\");"},{"lineNumber":247,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"edit -o nr/S\", 1, \"edit -o nr/S\");"},{"lineNumber":248,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":249,"author":{"gitID":"Aquarinte"},"content":"        // autocomplete suggestions for nric for \"find -o\" command"},{"lineNumber":250,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"find -o nr/\", 1, \"find -o nr/F0184556R\");"},{"lineNumber":251,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"find -o nr/\", 3, \"find -o nr/G1111111B\");"},{"lineNumber":252,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"find -o nr/T\", 3, \"find -o nr/T0120956W\");"},{"lineNumber":253,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"find -o nr/T0\", 2, \"find -o nr/T0123456L\");"},{"lineNumber":254,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":255,"author":{"gitID":"Aquarinte"},"content":"        // no nric autocomplete suggestion if edit command does not start with \"find -o\""},{"lineNumber":256,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"find -p nr/T0\", 2, \"find -p nr/T0\");"},{"lineNumber":257,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"find -a nr/S\", 2, \"find -a nr/S\");"},{"lineNumber":258,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":260,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":261,"author":{"gitID":"Aquarinte"},"content":"    public void commandBox_autocompleteTag() {"},{"lineNumber":262,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add t/\", 1, \"add t/Depression\");"},{"lineNumber":263,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add t/F\", 1, \"add t/friends\");"},{"lineNumber":264,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add t/\", 2, \"add t/Test\");"},{"lineNumber":265,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add t/ow\", 2, \"add t/owesMoney\");"},{"lineNumber":266,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":268,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":269,"author":{"gitID":"Aquarinte"},"content":"     * Checks that {@code userInput} with the {@code numOfTabs} to select an option on autocomplete\u0027s context menu"},{"lineNumber":270,"author":{"gitID":"Aquarinte"},"content":"     * will result in {@code actualCommand}."},{"lineNumber":271,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":272,"author":{"gitID":"Aquarinte"},"content":"    private void testAutocompleteForUserInput(String userInput, int numOfTabs, String actualCommand) {"},{"lineNumber":273,"author":{"gitID":"Aquarinte"},"content":"        commandBoxHandle.setText(userInput);"},{"lineNumber":274,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":275,"author":{"gitID":"Aquarinte"},"content":"        while (numOfTabs \u003e 0) {"},{"lineNumber":276,"author":{"gitID":"Aquarinte"},"content":"            guiRobot.push(KeyCode.TAB);"},{"lineNumber":277,"author":{"gitID":"Aquarinte"},"content":"            numOfTabs--;"},{"lineNumber":278,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":279,"author":{"gitID":"Aquarinte"},"content":"        guiRobot.push(KeyCode.ENTER);"},{"lineNumber":280,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":281,"author":{"gitID":"Aquarinte"},"content":"        assertEquals(actualCommand, commandBoxHandle.getInput());"},{"lineNumber":282,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":124,"-":159}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"        String defaultConfigAsString \u003d \"App title : Medeina\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":1,"-":31}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"        String deleteCommand \u003d \"delete -o 9\";"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        logic.getFilteredPersonList().remove(0);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     *      - {@code expectedModel}\u0027s address book was saved to the storage file."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":118,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":3,"-":121}},{"path":"src/test/java/seedu/address/ui/PetPatientCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPetPatient;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.PetPatientCardHandle;"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PetPatientBuilder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"content":"//@@author Robert-Peng"},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Test class for PetPatientCard"},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class PetPatientCardTest extends GuiUnitTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private PetPatient petPatient;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private PetPatientCard petPatientCard;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        petPatient \u003d new PetPatientBuilder().build();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        petPatientCard \u003d new PetPatientCard(petPatient, 1);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void display_checkDetails_displayedCorrectly() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(petPatientCard);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertCardDisplay(petPatientCard, petPatient, 1);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void equals_sameNameSameIndex_returnTrue() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        PetPatientCard copy \u003d new PetPatientCard(petPatient, 1);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertTrue(petPatientCard.equals(copy));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void equals_checkNull_returnFalse() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(petPatientCard.equals(null));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void equals_samePetPatientCard_returnTrue() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(petPatientCard.equals(petPatientCard));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void equals_differentPetPatientSameIndex_returnFalse() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        PetPatient differentPetPatient \u003d new PetPatientBuilder().withName(\"differentName\").build();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertFalse(petPatientCard.equals((new PetPatientCard(differentPetPatient, 1))));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void equals_samePetPatientDifferentIndex_returnFalse() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertFalse(petPatientCard.equals(new PetPatientCard(petPatient, 2)));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"      * Asserts that {@code petpatientCard} displays the details of {@code expectedpetPatient} correctly and matches"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * {@code expectedId}."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void assertCardDisplay(PetPatientCard petPatientCard, PetPatient expectedPetPatient, int expectedId) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        PetPatientCardHandle petPatientCardHandle \u003d new PetPatientCardHandle(petPatientCard.getRoot());"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // verify id is displayed correctly"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", petPatientCardHandle.getId());"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // verify petpatient details are displayed correctly"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCardDisplaysPetPatient(expectedPetPatient, petPatientCardHandle);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"chialejing":1,"-":77}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_OWNER;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":67,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":70,"author":{"gitID":"chialejing"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \""},{"lineNumber":71,"author":{"gitID":"chialejing"},"content":"                + OPTION_OWNER + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":72,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                + \" \" + NRIC_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                .withNric(VALID_NRIC_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":88,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":92,"author":{"gitID":"chialejing"},"content":"        command \u003d EditCommand.COMMAND_WORD + OPTION_OWNER + \" \""},{"lineNumber":93,"author":{"gitID":"chialejing"},"content":"                + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":99,"author":{"gitID":"chialejing"},"content":"        command \u003d EditCommand.COMMAND_WORD + OPTION_OWNER + \" \""},{"lineNumber":100,"author":{"gitID":"chialejing"},"content":"                + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":107,"author":{"gitID":"chialejing"},"content":"        command \u003d EditCommand.COMMAND_WORD + OPTION_OWNER + \" \""},{"lineNumber":108,"author":{"gitID":"chialejing"},"content":"                + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":118,"author":{"gitID":"chialejing"},"content":"        command \u003d EditCommand.COMMAND_WORD + OPTION_OWNER + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":124,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":125,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":128,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":129,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_OWNER + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":136,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":137,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":141,"author":{"gitID":"chialejing"},"content":"        command \u003d EditCommand.COMMAND_WORD + OPTION_OWNER + \" \""},{"lineNumber":142,"author":{"gitID":"chialejing"},"content":"                + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":143,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + NRIC_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":151,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_OWNER + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":155,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_OWNER + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":156,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":160,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":161,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_OWNER + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":166,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_OWNER + NAME_DESC_BOB,"},{"lineNumber":167,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":170,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_OWNER + \" \""},{"lineNumber":171,"author":{"gitID":"chialejing"},"content":"                + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":172,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":175,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_OWNER + \" \""},{"lineNumber":176,"author":{"gitID":"chialejing"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":180,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_OWNER + \" \""},{"lineNumber":181,"author":{"gitID":"chialejing"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":185,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_OWNER + \" \""},{"lineNumber":186,"author":{"gitID":"chialejing"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"},{"lineNumber":187,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":190,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_OWNER + \" \""},{"lineNumber":191,"author":{"gitID":"chialejing"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"},{"lineNumber":192,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"content":"        //@@author Robert-Peng"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        /* Case: invalid nric -\u003e rejected */"},{"lineNumber":196,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_OWNER + \" \""},{"lineNumber":197,"author":{"gitID":"chialejing"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + INVALID_NRIC_DESC,"},{"lineNumber":198,"author":{"gitID":"-"},"content":"                Nric.MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":199,"content":"        //@@author"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":202,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_OWNER + \" \""},{"lineNumber":203,"author":{"gitID":"chialejing"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":204,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":211,"author":{"gitID":"chialejing"},"content":"        command \u003d EditCommand.COMMAND_WORD + OPTION_OWNER + \" \" + index.getOneBased()"},{"lineNumber":212,"author":{"gitID":"chialejing"},"content":"                + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":213,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":217,"author":{"gitID":"chialejing"},"content":"        command \u003d EditCommand.COMMAND_WORD + OPTION_OWNER + \" \" + index.getOneBased()"},{"lineNumber":218,"author":{"gitID":"chialejing"},"content":"                + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":219,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":242,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":246,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":250,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":254,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":280,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":281,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":287,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":289,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":295,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":296,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":297,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":298,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":299,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":300,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":301,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":302,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":303,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":304,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":305,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":309,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":310,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":311,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":312,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":313,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":314,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":2,"chialejing":35,"wynonaK":2,"-":275}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"        assertParseFailure(parser, \"     \","},{"lineNumber":17,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":1,"-":19}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_OWNER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalThemes.DARK;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void parseCommand_addAlias() throws Exception {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommandAlias(person));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void parseCommand_clearAlias() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"    public void parseCommand_deleteAlias_forcePerson() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"                DeleteCommand.COMMAND_ALIAS + \" -fo \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"        assertEquals(new DeleteCommand(4, INDEX_FIRST_PERSON), command);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"    public void parseCommand_delete_forcePerson() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"                DeleteCommand.COMMAND_WORD + \" -fo \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"        assertEquals(new DeleteCommand(4, INDEX_FIRST_PERSON), command);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parseCommand_editAlias() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":91,"author":{"gitID":"chialejing"},"content":"                + OPTION_OWNER + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":100,"author":{"gitID":"chialejing"},"content":"                + OPTION_OWNER + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void parseCommand_exitAlias() throws Exception {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS) instanceof ExitCommand);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS + \" 3\") instanceof ExitCommand);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void parseCommand_findAlias() throws Exception {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":119,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":120,"author":{"gitID":"wynonaK"},"content":"        assertTrue(parser.parseCommand(FindCommand.COMMAND_ALIAS + \" -o n/\""},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":"                + keywords.stream().collect(Collectors.joining(\" \"))) instanceof FindCommand);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":127,"author":{"gitID":"wynonaK"},"content":"        assertTrue(parser.parseCommand(FindCommand.COMMAND_WORD + \" -o n/\""},{"lineNumber":128,"author":{"gitID":"wynonaK"},"content":"                + keywords.stream().collect(Collectors.joining(\" \"))) instanceof FindCommand);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public void parseCommand_helpAlias() throws Exception {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS) instanceof HelpCommand);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS + \" 3\") instanceof HelpCommand);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public void parseCommand_historyAlias() throws Exception {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public void parseCommand_listAlias() throws Exception {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    public void parseCommand_selectAlias() throws Exception {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":184,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":191,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    public void parseCommand_changeTheme() throws Exception {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        ChangeThemeCommand command \u003d (ChangeThemeCommand) parser.parseCommand("},{"lineNumber":236,"author":{"gitID":"-"},"content":"                ChangeThemeCommand.COMMAND_WORD + \" dark\");"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertEquals(new ChangeThemeCommand(DARK), command);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":3,"wynonaK":11,"-":225}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitID":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class DeleteCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"        assertParseSuccess(parser, \"-fo 1\", new DeleteCommand(4, INDEX_FIRST_PERSON));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":1,"-":31}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_OWNER;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":65,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":71,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":74,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":77,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":80,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":85,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"1\""},{"lineNumber":86,"author":{"gitID":"chialejing"},"content":"                + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":87,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"1\""},{"lineNumber":88,"author":{"gitID":"chialejing"},"content":"                + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":89,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"1\""},{"lineNumber":90,"author":{"gitID":"chialejing"},"content":"                + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"},{"lineNumber":91,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"1\""},{"lineNumber":92,"author":{"gitID":"chialejing"},"content":"                + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"},{"lineNumber":93,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"1\""},{"lineNumber":94,"author":{"gitID":"chialejing"},"content":"                + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":97,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"1\""},{"lineNumber":98,"author":{"gitID":"chialejing"},"content":"                + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":102,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"1\""},{"lineNumber":103,"author":{"gitID":"chialejing"},"content":"                + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":107,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"1\""},{"lineNumber":108,"author":{"gitID":"chialejing"},"content":"                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":109,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"1\""},{"lineNumber":110,"author":{"gitID":"chialejing"},"content":"                + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"1\""},{"lineNumber":112,"author":{"gitID":"chialejing"},"content":"                + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":115,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"1\""},{"lineNumber":116,"author":{"gitID":"chialejing"},"content":"                + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY"},{"lineNumber":117,"author":{"gitID":"chialejing"},"content":"                + VALID_PHONE_AMY, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":123,"author":{"gitID":"chialejing"},"content":"        String userInput \u003d OPTION_OWNER + targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":137,"author":{"gitID":"chialejing"},"content":"        String userInput \u003d OPTION_OWNER + targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":150,"author":{"gitID":"chialejing"},"content":"        String userInput \u003d OPTION_OWNER + targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":156,"author":{"gitID":"chialejing"},"content":"        userInput \u003d OPTION_OWNER + targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // email"},{"lineNumber":162,"author":{"gitID":"chialejing"},"content":"        userInput \u003d OPTION_OWNER + targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // address"},{"lineNumber":168,"author":{"gitID":"chialejing"},"content":"        userInput \u003d OPTION_OWNER + targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":174,"author":{"gitID":"chialejing"},"content":"        userInput \u003d OPTION_OWNER + targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":183,"author":{"gitID":"chialejing"},"content":"        String userInput \u003d OPTION_OWNER + targetIndex.getOneBased()  + PHONE_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":184,"author":{"gitID":"chialejing"},"content":"                + EMAIL_DESC_AMY + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":185,"author":{"gitID":"chialejing"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":188,"author":{"gitID":"chialejing"},"content":"                .withEmail(VALID_EMAIL_BOB)"},{"lineNumber":189,"author":{"gitID":"chialejing"},"content":"                .withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":190,"author":{"gitID":"chialejing"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":191,"author":{"gitID":"-"},"content":"                .build();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":201,"author":{"gitID":"chialejing"},"content":"        String userInput \u003d OPTION_OWNER + targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":207,"author":{"gitID":"chialejing"},"content":"        userInput \u003d OPTION_OWNER + targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":208,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":210,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":218,"author":{"gitID":"chialejing"},"content":"        String userInput \u003d OPTION_OWNER + targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":47,"-":178}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_JOKER;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_NERO;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BREED_DESC_JOKER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BREED_DESC_NERO;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.COLOUR_DESC_JOKER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.COLOUR_DESC_NERO;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_ONE;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_TWO;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_OPTION;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_REMARK_DESC;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_JOKER;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_NERO;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_CHARLIE;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_FION;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_APPOINTMENT;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_OWNER;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_PET;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_ONE;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_TWO;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SPECIES_DESC_JOKER;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SPECIES_DESC_NERO;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CHECKUP;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_DEPRESSION;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FIV;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_VACCINATION;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_JOKER;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BREED_JOKER;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOUR_JOKER;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_ONE;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_JOKER;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_FION;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_ONE;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIES_JOKER;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CHECKUP;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FIV;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Remark;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":85,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PetPatientBuilder;"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void parse_allPersonFieldsPresent_success() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                .withNric(VALID_NRIC_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser,"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                OPTION_OWNER + NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withNric(VALID_NRIC_BOB)"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public void parse_optionalPersonFieldsMissing_success() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withNric(VALID_NRIC_AMY).withTags().build();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, OPTION_OWNER + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + NRIC_DESC_AMY, new AddCommand(expectedPerson));"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public void parse_compulsoryPersonFieldMissing_failure() {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_PERSON);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + NRIC_DESC_BOB, expectedMessage);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + NRIC_DESC_BOB, expectedMessage);"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB"},{"lineNumber":156,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + NRIC_DESC_BOB, expectedMessage);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":160,"author":{"gitID":"-"},"content":"                + VALID_ADDRESS_BOB + NRIC_DESC_BOB, expectedMessage);"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                + VALID_ADDRESS_BOB + VALID_NRIC_BOB, expectedMessage);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    public void parse_invalidPersonValue_failure() {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            + INVALID_ADDRESS_DESC + NRIC_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        // invalid nric"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":191,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + INVALID_NRIC_DESC + TAG_DESC_HUSBAND"},{"lineNumber":192,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND, Nric.MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            + ADDRESS_DESC_BOB + NRIC_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":200,"author":{"gitID":"-"},"content":"                + INVALID_ADDRESS_DESC + NRIC_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":204,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":205,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_PERSON));"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"Aquarinte"},"content":"    //@@author aquarinte"},{"lineNumber":209,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":210,"author":{"gitID":"Aquarinte"},"content":"    public void parse_allPetPatientFieldsPresent_success() {"},{"lineNumber":211,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":212,"author":{"gitID":"Aquarinte"},"content":"        PetPatient expectedPetPatient \u003d new PetPatientBuilder().withName(VALID_NAME_JOKER)"},{"lineNumber":213,"author":{"gitID":"Aquarinte"},"content":"                .withSpecies(VALID_SPECIES_JOKER).withBreed(VALID_BREED_JOKER).withColour(VALID_COLOUR_JOKER)"},{"lineNumber":214,"author":{"gitID":"Aquarinte"},"content":"                .withBloodType(VALID_BLOODTYPE_JOKER).withTags(VALID_TAG_FIV).withOwnerNric(VALID_NRIC_FION).build();"},{"lineNumber":215,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":216,"author":{"gitID":"Aquarinte"},"content":"        Nric fion \u003d new Nric(VALID_NRIC_FION);"},{"lineNumber":217,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":218,"author":{"gitID":"Aquarinte"},"content":"        // whitespace only preamble"},{"lineNumber":219,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + OPTION_PET + NAME_DESC_JOKER + SPECIES_DESC_JOKER"},{"lineNumber":220,"author":{"gitID":"Aquarinte"},"content":"                + BREED_DESC_JOKER + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + TAG_DESC_FIV + OPTION_OWNER"},{"lineNumber":221,"author":{"gitID":"Aquarinte"},"content":"                        + NRIC_DESC_FION, new AddCommand(expectedPetPatient, fion));"},{"lineNumber":222,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":223,"author":{"gitID":"Aquarinte"},"content":"        // multiple names - last name accepted"},{"lineNumber":224,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser, OPTION_PET + NAME_DESC_NERO + NAME_DESC_JOKER + SPECIES_DESC_JOKER"},{"lineNumber":225,"author":{"gitID":"Aquarinte"},"content":"                        + BREED_DESC_JOKER + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + TAG_DESC_FIV + OPTION_OWNER"},{"lineNumber":226,"author":{"gitID":"Aquarinte"},"content":"                        + NRIC_DESC_FION, new AddCommand(expectedPetPatient, fion));"},{"lineNumber":227,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":228,"author":{"gitID":"Aquarinte"},"content":"        // multiple species - last species accepted"},{"lineNumber":229,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser, OPTION_PET + NAME_DESC_JOKER + SPECIES_DESC_NERO + SPECIES_DESC_JOKER"},{"lineNumber":230,"author":{"gitID":"Aquarinte"},"content":"                        + BREED_DESC_JOKER + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + TAG_DESC_FIV + OPTION_OWNER"},{"lineNumber":231,"author":{"gitID":"Aquarinte"},"content":"                        + NRIC_DESC_FION, new AddCommand(expectedPetPatient, fion));"},{"lineNumber":232,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":233,"author":{"gitID":"Aquarinte"},"content":"        // multiple breed - last breed accepted"},{"lineNumber":234,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser, OPTION_PET + NAME_DESC_JOKER + SPECIES_DESC_JOKER + BREED_DESC_NERO"},{"lineNumber":235,"author":{"gitID":"Aquarinte"},"content":"                        + BREED_DESC_JOKER + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + TAG_DESC_FIV + OPTION_OWNER"},{"lineNumber":236,"author":{"gitID":"Aquarinte"},"content":"                        + NRIC_DESC_FION, new AddCommand(expectedPetPatient, fion));"},{"lineNumber":237,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":238,"author":{"gitID":"Aquarinte"},"content":"        // multiple colour - last colour accepted"},{"lineNumber":239,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser, OPTION_PET + NAME_DESC_JOKER + SPECIES_DESC_JOKER + BREED_DESC_JOKER"},{"lineNumber":240,"author":{"gitID":"Aquarinte"},"content":"                        + COLOUR_DESC_NERO + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + TAG_DESC_FIV + OPTION_OWNER"},{"lineNumber":241,"author":{"gitID":"Aquarinte"},"content":"                        + NRIC_DESC_FION, new AddCommand(expectedPetPatient, fion));"},{"lineNumber":242,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":243,"author":{"gitID":"Aquarinte"},"content":"        // multiple blood type - last blood type accepted"},{"lineNumber":244,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser, OPTION_PET + NAME_DESC_JOKER + SPECIES_DESC_JOKER + BREED_DESC_JOKER"},{"lineNumber":245,"author":{"gitID":"Aquarinte"},"content":"                        + COLOUR_DESC_JOKER + BLOODTYPE_DESC_NERO + BLOODTYPE_DESC_JOKER + TAG_DESC_FIV + OPTION_OWNER"},{"lineNumber":246,"author":{"gitID":"Aquarinte"},"content":"                        + NRIC_DESC_FION, new AddCommand(expectedPetPatient, fion));"},{"lineNumber":247,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":248,"author":{"gitID":"Aquarinte"},"content":"        // multiple tags - all accepted"},{"lineNumber":249,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser, OPTION_PET + NAME_DESC_JOKER + SPECIES_DESC_JOKER + BREED_DESC_JOKER"},{"lineNumber":250,"author":{"gitID":"Aquarinte"},"content":"                + COLOUR_DESC_JOKER + BLOODTYPE_DESC_NERO + BLOODTYPE_DESC_JOKER + TAG_DESC_FIV + TAG_DESC_DEPRESSION"},{"lineNumber":251,"author":{"gitID":"Aquarinte"},"content":"                + OPTION_OWNER + NRIC_DESC_FION, new AddCommand(expectedPetPatient, fion));"},{"lineNumber":252,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":254,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":255,"author":{"gitID":"Aquarinte"},"content":"    public void parse_optionalPetPatientFieldsMissing_success() {"},{"lineNumber":256,"author":{"gitID":"Aquarinte"},"content":"        // zero tags"},{"lineNumber":257,"author":{"gitID":"Aquarinte"},"content":"        PetPatient expectedPetPatient \u003d new PetPatientBuilder().withName(VALID_NAME_JOKER)"},{"lineNumber":258,"author":{"gitID":"Aquarinte"},"content":"                .withSpecies(VALID_SPECIES_JOKER).withBreed(VALID_BREED_JOKER).withColour(VALID_COLOUR_JOKER)"},{"lineNumber":259,"author":{"gitID":"Aquarinte"},"content":"                .withBloodType(VALID_BLOODTYPE_JOKER).withOwnerNric(VALID_NRIC_FION).build();"},{"lineNumber":260,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":261,"author":{"gitID":"Aquarinte"},"content":"        Nric fion \u003d new Nric(VALID_NRIC_FION);"},{"lineNumber":262,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":263,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser, OPTION_PET + NAME_DESC_JOKER + SPECIES_DESC_JOKER"},{"lineNumber":264,"author":{"gitID":"Aquarinte"},"content":"                + BREED_DESC_JOKER + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + OPTION_OWNER"},{"lineNumber":265,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_FION, new AddCommand(expectedPetPatient, fion));"},{"lineNumber":266,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":268,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":269,"author":{"gitID":"Aquarinte"},"content":"    public void parse_compulsoryPetPatientFieldMissing_failure() {"},{"lineNumber":270,"author":{"gitID":"Aquarinte"},"content":"        String invalidPetPatient \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_PETPATIENT);"},{"lineNumber":271,"author":{"gitID":"Aquarinte"},"content":"        String invalidAddCommand \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":272,"author":{"gitID":"Aquarinte"},"content":"        String missingNricPrefix \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":273,"author":{"gitID":"Aquarinte"},"content":"                AddCommand.MESSAGE_MISSING_NRIC_PREFIX);"},{"lineNumber":274,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":275,"author":{"gitID":"Aquarinte"},"content":"        // missing name prefix"},{"lineNumber":276,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_PET + VALID_NAME_JOKER + SPECIES_DESC_JOKER"},{"lineNumber":277,"author":{"gitID":"Aquarinte"},"content":"                + BREED_DESC_JOKER + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + OPTION_OWNER"},{"lineNumber":278,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_FION, invalidPetPatient);"},{"lineNumber":279,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":280,"author":{"gitID":"Aquarinte"},"content":"        // missing species prefix"},{"lineNumber":281,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_PET + NAME_DESC_JOKER + VALID_SPECIES_JOKER"},{"lineNumber":282,"author":{"gitID":"Aquarinte"},"content":"                + BREED_DESC_JOKER + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + OPTION_OWNER"},{"lineNumber":283,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_FION, invalidPetPatient);"},{"lineNumber":284,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":285,"author":{"gitID":"Aquarinte"},"content":"        // missing breed prefix"},{"lineNumber":286,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_PET + NAME_DESC_JOKER + SPECIES_DESC_JOKER"},{"lineNumber":287,"author":{"gitID":"Aquarinte"},"content":"                + VALID_BREED_JOKER + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + OPTION_OWNER"},{"lineNumber":288,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_FION, invalidPetPatient);"},{"lineNumber":289,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":290,"author":{"gitID":"Aquarinte"},"content":"        // missing colour prefix"},{"lineNumber":291,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_PET + NAME_DESC_JOKER + SPECIES_DESC_JOKER"},{"lineNumber":292,"author":{"gitID":"Aquarinte"},"content":"                + BREED_DESC_JOKER + VALID_COLOUR_JOKER + BLOODTYPE_DESC_JOKER + OPTION_OWNER"},{"lineNumber":293,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_FION, invalidPetPatient);"},{"lineNumber":294,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":295,"author":{"gitID":"Aquarinte"},"content":"        // missing blood type prefix"},{"lineNumber":296,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_PET + NAME_DESC_JOKER + SPECIES_DESC_JOKER"},{"lineNumber":297,"author":{"gitID":"Aquarinte"},"content":"                + BREED_DESC_JOKER + COLOUR_DESC_JOKER + VALID_BLOODTYPE_JOKER + OPTION_OWNER"},{"lineNumber":298,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_FION, invalidPetPatient);"},{"lineNumber":299,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":300,"author":{"gitID":"Aquarinte"},"content":"        // missing nric prefix"},{"lineNumber":301,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_PET + NAME_DESC_JOKER + SPECIES_DESC_JOKER"},{"lineNumber":302,"author":{"gitID":"Aquarinte"},"content":"                + BREED_DESC_JOKER + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + OPTION_OWNER"},{"lineNumber":303,"author":{"gitID":"Aquarinte"},"content":"                + VALID_NRIC_FION, missingNricPrefix);"},{"lineNumber":304,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":305,"author":{"gitID":"Aquarinte"},"content":"        // missing all pet patient prefixes"},{"lineNumber":306,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_PET + VALID_NAME_JOKER + VALID_SPECIES_JOKER"},{"lineNumber":307,"author":{"gitID":"Aquarinte"},"content":"                + VALID_BREED_JOKER + VALID_COLOUR_JOKER + VALID_BLOODTYPE_JOKER + OPTION_OWNER"},{"lineNumber":308,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_FION, invalidPetPatient);"},{"lineNumber":309,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":310,"author":{"gitID":"Aquarinte"},"content":"        // missing all prefixes - only missing nric prefix reported"},{"lineNumber":311,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_PET + VALID_NAME_JOKER + VALID_SPECIES_JOKER"},{"lineNumber":312,"author":{"gitID":"Aquarinte"},"content":"                + VALID_BREED_JOKER + VALID_COLOUR_JOKER + VALID_BLOODTYPE_JOKER + OPTION_OWNER"},{"lineNumber":313,"author":{"gitID":"Aquarinte"},"content":"                + VALID_NRIC_FION, missingNricPrefix);"},{"lineNumber":314,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":315,"author":{"gitID":"Aquarinte"},"content":"        // missing options"},{"lineNumber":316,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, NAME_DESC_JOKER + SPECIES_DESC_JOKER"},{"lineNumber":317,"author":{"gitID":"Aquarinte"},"content":"                + BREED_DESC_JOKER + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + NRIC_DESC_FION,"},{"lineNumber":318,"author":{"gitID":"Aquarinte"},"content":"                invalidAddCommand);"},{"lineNumber":319,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":320,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":321,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":322,"author":{"gitID":"Aquarinte"},"content":"    public void parse_invalidPetPatientValue_failure() {"},{"lineNumber":323,"author":{"gitID":"Aquarinte"},"content":"        // invalid name"},{"lineNumber":324,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_PET + INVALID_NAME_DESC + SPECIES_DESC_JOKER"},{"lineNumber":325,"author":{"gitID":"Aquarinte"},"content":"                + BREED_DESC_JOKER + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + OPTION_OWNER"},{"lineNumber":326,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_FION, PetPatientName.MESSAGE_PET_NAME_CONSTRAINTS);"},{"lineNumber":327,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":328,"author":{"gitID":"Aquarinte"},"content":"        // invalid nric"},{"lineNumber":329,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_PET + NAME_DESC_JOKER + SPECIES_DESC_JOKER"},{"lineNumber":330,"author":{"gitID":"Aquarinte"},"content":"                + BREED_DESC_JOKER + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + OPTION_OWNER"},{"lineNumber":331,"author":{"gitID":"Aquarinte"},"content":"                + INVALID_NRIC_DESC, Nric.MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":332,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":333,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":334,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":335,"author":{"gitID":"Aquarinte"},"content":"    public void parse_allAppointmentFieldsPresent_success() {"},{"lineNumber":336,"author":{"gitID":"Aquarinte"},"content":"        Appointment appt \u003d new AppointmentBuilder().withDateTime(VALID_DATE_ONE).withRemark(VALID_REMARK_ONE)"},{"lineNumber":337,"author":{"gitID":"Aquarinte"},"content":"                .withAppointmentTags(VALID_TAG_CHECKUP).withOwnerNric(VALID_NRIC_FION)"},{"lineNumber":338,"author":{"gitID":"Aquarinte"},"content":"                .withPetPatientName(VALID_NAME_JOKER).build();"},{"lineNumber":339,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":340,"author":{"gitID":"Aquarinte"},"content":"        Nric fion \u003d new Nric(VALID_NRIC_FION);"},{"lineNumber":341,"author":{"gitID":"Aquarinte"},"content":"        PetPatientName joker \u003d new PetPatientName(VALID_NAME_JOKER);"},{"lineNumber":342,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":343,"author":{"gitID":"Aquarinte"},"content":"        // whitespace only preamble"},{"lineNumber":344,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + OPTION_APPOINTMENT + DATE_DESC_ONE + REMARK_DESC_ONE"},{"lineNumber":345,"author":{"gitID":"Aquarinte"},"content":"                + TAG_DESC_CHECKUP + OPTION_OWNER + NRIC_DESC_FION + OPTION_PET + NAME_DESC_JOKER,"},{"lineNumber":346,"author":{"gitID":"Aquarinte"},"content":"                new AddCommand(appt, fion, joker));"},{"lineNumber":347,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":348,"author":{"gitID":"Aquarinte"},"content":"        // multiple date time - last one is accepted"},{"lineNumber":349,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser,  OPTION_APPOINTMENT + DATE_DESC_TWO + DATE_DESC_ONE + REMARK_DESC_ONE"},{"lineNumber":350,"author":{"gitID":"Aquarinte"},"content":"                        + TAG_DESC_CHECKUP + OPTION_OWNER + NRIC_DESC_FION + OPTION_PET + NAME_DESC_JOKER,"},{"lineNumber":351,"author":{"gitID":"Aquarinte"},"content":"                new AddCommand(appt, fion, joker));"},{"lineNumber":352,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":353,"author":{"gitID":"Aquarinte"},"content":"        // multiple remarks - last one is accepted"},{"lineNumber":354,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser,  OPTION_APPOINTMENT + DATE_DESC_ONE + REMARK_DESC_TWO + REMARK_DESC_ONE"},{"lineNumber":355,"author":{"gitID":"Aquarinte"},"content":"                        + TAG_DESC_CHECKUP + OPTION_OWNER + NRIC_DESC_FION + OPTION_PET + NAME_DESC_JOKER,"},{"lineNumber":356,"author":{"gitID":"Aquarinte"},"content":"                new AddCommand(appt, fion, joker));"},{"lineNumber":357,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":358,"author":{"gitID":"Aquarinte"},"content":"        // multiple tags - all accepted"},{"lineNumber":359,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser,  OPTION_APPOINTMENT + DATE_DESC_ONE + REMARK_DESC_ONE + TAG_DESC_VACCINATION"},{"lineNumber":360,"author":{"gitID":"Aquarinte"},"content":"                        + TAG_DESC_CHECKUP + OPTION_OWNER + NRIC_DESC_FION + OPTION_PET + NAME_DESC_JOKER,"},{"lineNumber":361,"author":{"gitID":"Aquarinte"},"content":"                new AddCommand(appt, fion, joker));"},{"lineNumber":362,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":363,"author":{"gitID":"Aquarinte"},"content":"        // multiple nric - last one is accepted"},{"lineNumber":364,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser,  OPTION_APPOINTMENT + DATE_DESC_ONE + REMARK_DESC_ONE"},{"lineNumber":365,"author":{"gitID":"Aquarinte"},"content":"                        + TAG_DESC_CHECKUP + OPTION_OWNER + NRIC_DESC_CHARLIE + NRIC_DESC_FION + OPTION_PET"},{"lineNumber":366,"author":{"gitID":"Aquarinte"},"content":"                        + NAME_DESC_JOKER, new AddCommand(appt, fion, joker));"},{"lineNumber":367,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":368,"author":{"gitID":"Aquarinte"},"content":"        // multiple pet name - last one is accepted"},{"lineNumber":369,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser,  OPTION_APPOINTMENT + DATE_DESC_ONE + REMARK_DESC_ONE"},{"lineNumber":370,"author":{"gitID":"Aquarinte"},"content":"                + TAG_DESC_CHECKUP + OPTION_OWNER + NRIC_DESC_FION + OPTION_PET"},{"lineNumber":371,"author":{"gitID":"Aquarinte"},"content":"                + NAME_DESC_NERO + NAME_DESC_JOKER, new AddCommand(appt, fion, joker));"},{"lineNumber":372,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":373,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":374,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":375,"author":{"gitID":"Aquarinte"},"content":"    public void parse_compulsoryAppointmentFieldMissing_failure() {"},{"lineNumber":376,"author":{"gitID":"Aquarinte"},"content":"        String invalidAppt \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_APPOINTMENT);"},{"lineNumber":377,"author":{"gitID":"Aquarinte"},"content":"        String invalidCommand \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":378,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":379,"author":{"gitID":"Aquarinte"},"content":"        // missing date time prefix"},{"lineNumber":380,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + VALID_DATE_ONE + REMARK_DESC_ONE + TAG_DESC_CHECKUP"},{"lineNumber":381,"author":{"gitID":"Aquarinte"},"content":"                + OPTION_OWNER + NRIC_DESC_FION + OPTION_PET + NAME_DESC_JOKER, invalidAppt);"},{"lineNumber":382,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":383,"author":{"gitID":"Aquarinte"},"content":"        // missing remark prefix"},{"lineNumber":384,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + DATE_DESC_ONE + VALID_REMARK_ONE + TAG_DESC_CHECKUP"},{"lineNumber":385,"author":{"gitID":"Aquarinte"},"content":"                + OPTION_OWNER + NRIC_DESC_FION + OPTION_PET + NAME_DESC_JOKER, invalidAppt);"},{"lineNumber":386,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":387,"author":{"gitID":"Aquarinte"},"content":"        // missing tag prefix"},{"lineNumber":388,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + DATE_DESC_ONE + REMARK_DESC_ONE + VALID_TAG_CHECKUP"},{"lineNumber":389,"author":{"gitID":"Aquarinte"},"content":"                + OPTION_OWNER + NRIC_DESC_FION + OPTION_PET + NAME_DESC_JOKER, invalidAppt);"},{"lineNumber":390,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":391,"author":{"gitID":"Aquarinte"},"content":"        // missing options"},{"lineNumber":392,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, DATE_DESC_ONE + REMARK_DESC_ONE + TAG_DESC_CHECKUP + NRIC_DESC_FION"},{"lineNumber":393,"author":{"gitID":"Aquarinte"},"content":"                + NAME_DESC_JOKER, invalidCommand);"},{"lineNumber":394,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":395,"author":{"gitID":"Aquarinte"},"content":"        // missing -o, -p"},{"lineNumber":396,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + VALID_DATE_ONE + REMARK_DESC_ONE + TAG_DESC_CHECKUP,"},{"lineNumber":397,"author":{"gitID":"Aquarinte"},"content":"                invalidCommand);"},{"lineNumber":398,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":399,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":400,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":401,"author":{"gitID":"Aquarinte"},"content":"    public void parse_invalidAppointmentValue_failure() {"},{"lineNumber":402,"author":{"gitID":"Aquarinte"},"content":"        // invalid remark"},{"lineNumber":403,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + DATE_DESC_ONE + INVALID_REMARK_DESC + TAG_DESC_CHECKUP"},{"lineNumber":404,"author":{"gitID":"Aquarinte"},"content":"                + OPTION_OWNER + NRIC_DESC_FION + OPTION_PET + NAME_DESC_JOKER, Remark.MESSAGE_REMARK_CONSTRAINTS);"},{"lineNumber":405,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":406,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":407,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":408,"author":{"gitID":"Aquarinte"},"content":"    public void parse_invalidCommandOption_failure() {"},{"lineNumber":409,"author":{"gitID":"Aquarinte"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":410,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":411,"author":{"gitID":"Aquarinte"},"content":"        // invalid option"},{"lineNumber":412,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, INVALID_OPTION + NAME_DESC_JOKER + SPECIES_DESC_JOKER"},{"lineNumber":413,"author":{"gitID":"Aquarinte"},"content":"                + BREED_DESC_JOKER + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + OPTION_OWNER"},{"lineNumber":414,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_FION, expectedMessage);"},{"lineNumber":415,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":416,"author":{"gitID":"Aquarinte"},"content":"        // wrong order: -a, -p, -o"},{"lineNumber":417,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + DATE_DESC_ONE + REMARK_DESC_ONE + TAG_DESC_CHECKUP"},{"lineNumber":418,"author":{"gitID":"Aquarinte"},"content":"                        + OPTION_PET + NAME_DESC_JOKER + SPECIES_DESC_JOKER + BREED_DESC_JOKER + COLOUR_DESC_JOKER"},{"lineNumber":419,"author":{"gitID":"Aquarinte"},"content":"                        + BLOODTYPE_DESC_JOKER + OPTION_OWNER + NRIC_DESC_FION, expectedMessage);"},{"lineNumber":420,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":421,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":422,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":215,"chialejing":1,"-":206}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"import seedu.address.testutil.TypicalAppointments;"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"import seedu.address.testutil.TypicalPetPatients;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"    public void executeDeleteOwner_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteOwnerCommand(INDEX_FIRST_PERSON);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"    public void executeDeleteForceOwner_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":"        model.addPetPatient(TypicalPetPatients.JOKER);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteForceOwnerCommand(INDEX_FIRST_PERSON);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"    public void executeDeletePetPatient_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"        model.addPetPatient(TypicalPetPatients.JEWEL);"},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":"        model.addPetPatient(TypicalPetPatients.JOKER);"},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"        PetPatient petPatientToDelete \u003d model.getFilteredPetPatientList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeletePetPatientCommand(INDEX_FIRST_PERSON);"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PET_PATIENT_SUCCESS, petPatientToDelete);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"        expectedModel.deletePetPatient(petPatientToDelete);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"    public void executeDeleteForcePetPatient_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"        model.addPetPatient(TypicalPetPatients.JEWEL);"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"        model.addPetPatient(TypicalPetPatients.JOKER);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        model.addAppointment(TypicalAppointments.BENSON_APP);"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"        PetPatient petPatientToDelete \u003d model.getFilteredPetPatientList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteForcePetPatientCommand(INDEX_FIRST_PERSON);"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PET_PATIENT_SUCCESS, petPatientToDelete);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":"        expectedModel.deletePetPatient(petPatientToDelete);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"    public void executeDeleteAppointment_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":"        model.addPetPatient(TypicalPetPatients.JEWEL);"},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":"        model.addPetPatient(TypicalPetPatients.JOKER);"},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":"        model.addAppointment(TypicalAppointments.ALICE_APP);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        model.addAppointment(TypicalAppointments.BENSON_APP);"},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":"        Appointment appointmentToDelete \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":103,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteAppointmentCommand(INDEX_FIRST_PERSON);"},{"lineNumber":104,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_APPOINTMENT_SUCCESS, appointmentToDelete);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":108,"author":{"gitID":"wynonaK"},"content":"        expectedModel.deleteAppointment(appointmentToDelete);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"wynonaK"},"content":"    public void executeDeleteOwner_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteOwnerCommand(outOfBoundIndex);"},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":119,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"wynonaK"},"content":"    public void executeDeleteForceOwner_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":124,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteForceOwnerCommand(outOfBoundIndex);"},{"lineNumber":125,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":126,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":127,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":129,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"wynonaK"},"content":"    public void executeDeletePetPatient_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":131,"author":{"gitID":"wynonaK"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPetPatientList().size() + 1);"},{"lineNumber":132,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeletePetPatientCommand(outOfBoundIndex);"},{"lineNumber":133,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":134,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":135,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":137,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"wynonaK"},"content":"    public void executeDeleteForcePetPatient_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":139,"author":{"gitID":"wynonaK"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPetPatientList().size() + 1);"},{"lineNumber":140,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteForcePetPatientCommand(outOfBoundIndex);"},{"lineNumber":141,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":142,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":143,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":145,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"wynonaK"},"content":"    public void executeDeleteAppointment_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":147,"author":{"gitID":"wynonaK"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAppointmentList().size() + 1);"},{"lineNumber":148,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteAppointmentCommand(outOfBoundIndex);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":158,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteOwnerCommand(INDEX_FIRST_PERSON);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteOwnerCommand(outOfBoundIndex);"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":188,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteOwnerCommand(INDEX_FIRST_PERSON);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        // delete -\u003e first person deleted"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person deleted again"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":209,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteOwnerCommand(outOfBoundIndex);"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":212,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * 1. Deletes a {@code Person} from a filtered list."},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * 2. Undo the deletion."},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."},{"lineNumber":225,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":231,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteOwnerCommand(INDEX_FIRST_PERSON);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        // redo -\u003e deletes same second person in unfiltered person list"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":251,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteFirstCommand \u003d prepareDeleteOwnerCommand(INDEX_FIRST_PERSON);"},{"lineNumber":252,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteSecondCommand \u003d prepareDeleteOwnerCommand(INDEX_SECOND_PERSON);"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":258,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d prepareDeleteOwnerCommand(INDEX_FIRST_PERSON);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":277,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":278,"author":{"gitID":"wynonaK"},"content":"    private DeleteCommand prepareDeleteOwnerCommand(Index index) {"},{"lineNumber":279,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(1, index);"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":285,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":286,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":287,"author":{"gitID":"wynonaK"},"content":"    private DeleteCommand prepareDeleteForceOwnerCommand(Index index) {"},{"lineNumber":288,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(4, index);"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":294,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":295,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":296,"author":{"gitID":"wynonaK"},"content":"    private DeleteCommand prepareDeletePetPatientCommand(Index index) {"},{"lineNumber":297,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(2, index);"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":300,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":303,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":304,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":305,"author":{"gitID":"wynonaK"},"content":"    private DeleteCommand prepareDeleteForcePetPatientCommand(Index index) {"},{"lineNumber":306,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(5, index);"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":309,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":312,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":313,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":314,"author":{"gitID":"wynonaK"},"content":"    private DeleteCommand prepareDeleteAppointmentCommand(Index index) {"},{"lineNumber":315,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(3, index);"},{"lineNumber":316,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":317,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":318,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":321,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":322,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":323,"author":{"gitID":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":324,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":327,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":328,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":1,"wynonaK":88,"-":239}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_CHARLIE;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_NERO;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BREED_NERO;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOUR_NERO;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_ONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_CHARLIE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CHARLIE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_NERO;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_CHARLIE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_DION;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_CHARLIE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_ONE;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIES_NERO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CHECKUP;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PetPatientBuilder;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"Aquarinte"},"content":"//@@author aquarinte"},{"lineNumber":39,"author":{"gitID":"Aquarinte"},"content":"/**"},{"lineNumber":40,"author":{"gitID":"Aquarinte"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":41,"author":{"gitID":"Aquarinte"},"content":" */"},{"lineNumber":42,"author":{"gitID":"Aquarinte"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":43,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":44,"author":{"gitID":"Aquarinte"},"content":"    private final String messageAddpetpatient \u003d \"New pet patient added: %1$s \\nunder owner: %2$s\";"},{"lineNumber":45,"author":{"gitID":"Aquarinte"},"content":"    private final String messageAddappointment \u003d \"New appointment made: %1$s\\nunder owner: %2$s\\nfor pet patient: %3$s\";"},{"lineNumber":46,"author":{"gitID":"Aquarinte"},"content":"    private final String messageAddall \u003d \"New person added: %1$s\\nNew pet patient added: %2$s\\n\""},{"lineNumber":47,"author":{"gitID":"Aquarinte"},"content":"            + \"New appointment made: %3$s\";"},{"lineNumber":48,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":49,"author":{"gitID":"Aquarinte"},"content":"    private Model model;"},{"lineNumber":50,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":51,"author":{"gitID":"Aquarinte"},"content":"    @Before"},{"lineNumber":52,"author":{"gitID":"Aquarinte"},"content":"    public void setUp() {"},{"lineNumber":53,"author":{"gitID":"Aquarinte"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":54,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":56,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"Aquarinte"},"content":"    public void execute_newPerson_success() throws Exception {"},{"lineNumber":58,"author":{"gitID":"Aquarinte"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":59,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":60,"author":{"gitID":"Aquarinte"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":61,"author":{"gitID":"Aquarinte"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":62,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":63,"author":{"gitID":"Aquarinte"},"content":"        assertCommandSuccess(prepareCommand(validPerson, model), model,"},{"lineNumber":64,"author":{"gitID":"Aquarinte"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"},{"lineNumber":65,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":67,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"Aquarinte"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":69,"author":{"gitID":"Aquarinte"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":70,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(prepareCommand(personInList, model), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":71,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":73,"author":{"gitID":"Aquarinte"},"content":"    //@@author aquarinte"},{"lineNumber":74,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"Aquarinte"},"content":"    public void execute_duplicateNric_throwsCommandException() {"},{"lineNumber":76,"author":{"gitID":"Aquarinte"},"content":"        Nric nric \u003d model.getAddressBook().getPersonList().get(0).getNric();"},{"lineNumber":77,"author":{"gitID":"Aquarinte"},"content":"        Person duplicateNric \u003d new PersonBuilder().withName(\"Red\").withPhone(\"90002134\").withEmail(\"red@gmail.com\")"},{"lineNumber":78,"author":{"gitID":"Aquarinte"},"content":"                .withAddress(\"24 Pallet Town\").withNric(nric.toString()).build();"},{"lineNumber":79,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(prepareCommand(duplicateNric, model), model, AddCommand.MESSAGE_DUPLICATE_NRIC);"},{"lineNumber":80,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":82,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"Aquarinte"},"content":"    public void execute_newPetPatient_success() throws Exception {"},{"lineNumber":84,"author":{"gitID":"Aquarinte"},"content":"        Person validPerson \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":85,"author":{"gitID":"Aquarinte"},"content":"        PetPatient validPetPatient \u003d new PetPatientBuilder().withOwnerNric(validPerson.getNric().toString()).build();"},{"lineNumber":86,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":87,"author":{"gitID":"Aquarinte"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":88,"author":{"gitID":"Aquarinte"},"content":"        expectedModel.addPetPatient(validPetPatient);"},{"lineNumber":89,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":90,"author":{"gitID":"Aquarinte"},"content":"        assertCommandSuccess(prepareCommand(validPetPatient, validPerson.getNric(), model), model,"},{"lineNumber":91,"author":{"gitID":"Aquarinte"},"content":"                String.format(messageAddpetpatient, validPetPatient, validPerson), expectedModel);"},{"lineNumber":92,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":94,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"Aquarinte"},"content":"    public void execute_duplicatePetPatient_throwsCommandException() {"},{"lineNumber":96,"author":{"gitID":"Aquarinte"},"content":"        PetPatient duplicate \u003d model.getAddressBook().getPetPatientList().get(0);"},{"lineNumber":97,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(prepareCommand(duplicate, duplicate.getOwner(), model),"},{"lineNumber":98,"author":{"gitID":"Aquarinte"},"content":"                model, AddCommand.MESSAGE_DUPLICATE_PET_PATIENT);"},{"lineNumber":99,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":101,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"Aquarinte"},"content":"    public void execute_newPetPatientWithNricDoesNotExist_throwsCommandException() {"},{"lineNumber":103,"author":{"gitID":"Aquarinte"},"content":"        // Nric does not exists in address book"},{"lineNumber":104,"author":{"gitID":"Aquarinte"},"content":"        String nricDoesNotExist \u003d VALID_NRIC_DION;"},{"lineNumber":105,"author":{"gitID":"Aquarinte"},"content":"        PetPatient validPetPatient \u003d new PetPatientBuilder().withOwnerNric(nricDoesNotExist).build();"},{"lineNumber":106,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":107,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(prepareCommand(validPetPatient, validPetPatient.getOwner(), model),"},{"lineNumber":108,"author":{"gitID":"Aquarinte"},"content":"                model, AddCommand.MESSAGE_INVALID_NRIC);"},{"lineNumber":109,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":111,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"Aquarinte"},"content":"    public void execute_newAppointment_success() throws Exception {"},{"lineNumber":113,"author":{"gitID":"Aquarinte"},"content":"        PetPatient existing \u003d model.getAddressBook().getPetPatientList().get(0);"},{"lineNumber":114,"author":{"gitID":"Aquarinte"},"content":"        Person owner \u003d model.getPersonWithNric(existing.getOwner());"},{"lineNumber":115,"author":{"gitID":"Aquarinte"},"content":"        Appointment appt \u003d new AppointmentBuilder().withOwnerNric(owner.getNric().toString())"},{"lineNumber":116,"author":{"gitID":"Aquarinte"},"content":"                .withPetPatientName(existing.getName().toString()).build();"},{"lineNumber":117,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":118,"author":{"gitID":"Aquarinte"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":119,"author":{"gitID":"Aquarinte"},"content":"        expectedModel.addAppointment(appt);"},{"lineNumber":120,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":121,"author":{"gitID":"Aquarinte"},"content":"        assertCommandSuccess(prepareCommand(appt, existing.getOwner(), existing.getName(), model), model,"},{"lineNumber":122,"author":{"gitID":"Aquarinte"},"content":"                String.format(messageAddappointment, appt, owner, existing), expectedModel);"},{"lineNumber":123,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":125,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"Aquarinte"},"content":"    public void execute_newAppointmentWithNricDoesNotExists_throwsCommandException() {"},{"lineNumber":127,"author":{"gitID":"Aquarinte"},"content":"        String nricDoesNotExist \u003d VALID_NRIC_DION;"},{"lineNumber":128,"author":{"gitID":"Aquarinte"},"content":"        String petPatientNameExists \u003d model.getAddressBook().getPetPatientList().get(0).getName().toString();"},{"lineNumber":129,"author":{"gitID":"Aquarinte"},"content":"        Appointment validAppt \u003d new AppointmentBuilder().withOwnerNric(nricDoesNotExist)"},{"lineNumber":130,"author":{"gitID":"Aquarinte"},"content":"                .withPetPatientName(petPatientNameExists).build();"},{"lineNumber":131,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":132,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(prepareCommand(validAppt, validAppt.getOwnerNric(), validAppt.getPetPatientName(), model),"},{"lineNumber":133,"author":{"gitID":"Aquarinte"},"content":"                model, AddCommand.MESSAGE_INVALID_NRIC);"},{"lineNumber":134,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":136,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"Aquarinte"},"content":"    public void execute_newAppointmentWithPetPatientNameDoesNotExists_throwsCommandException() {"},{"lineNumber":138,"author":{"gitID":"Aquarinte"},"content":"        String petNameDoesNotExist \u003d VALID_NAME_NERO;"},{"lineNumber":139,"author":{"gitID":"Aquarinte"},"content":"        String ownerNricExists \u003d model.getAddressBook().getPersonList().get(0).getNric().toString();"},{"lineNumber":140,"author":{"gitID":"Aquarinte"},"content":"        Appointment validAppt \u003d new AppointmentBuilder().withOwnerNric(ownerNricExists)"},{"lineNumber":141,"author":{"gitID":"Aquarinte"},"content":"                .withPetPatientName(petNameDoesNotExist).build();"},{"lineNumber":142,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":143,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(prepareCommand(validAppt, validAppt.getOwnerNric(), validAppt.getPetPatientName(), model),"},{"lineNumber":144,"author":{"gitID":"Aquarinte"},"content":"                model, AddCommand.MESSAGE_INVALID_PET_PATIENT);"},{"lineNumber":145,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":147,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":148,"author":{"gitID":"Aquarinte"},"content":"    public void execute_duplicateAppointment_throwsCommandException() {"},{"lineNumber":149,"author":{"gitID":"Aquarinte"},"content":"        Appointment duplicate \u003d model.getAddressBook().getAppointmentList().get(0);"},{"lineNumber":150,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(prepareCommand(duplicate, duplicate.getOwnerNric(), duplicate.getPetPatientName(), model),"},{"lineNumber":151,"author":{"gitID":"Aquarinte"},"content":"                model, AddCommand.MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":152,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":154,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":155,"author":{"gitID":"Aquarinte"},"content":"    public void execute_duplicateDateTimeAppointment_throwsCommandException() {"},{"lineNumber":156,"author":{"gitID":"Aquarinte"},"content":"        PetPatient existing \u003d model.getAddressBook().getPetPatientList().get(0);"},{"lineNumber":157,"author":{"gitID":"Aquarinte"},"content":"        Person owner \u003d model.getPersonWithNric(existing.getOwner());"},{"lineNumber":158,"author":{"gitID":"Aquarinte"},"content":"        String dupDateTime \u003d model.getAddressBook().getAppointmentList().get(0).getFormattedLocalDateTime();"},{"lineNumber":159,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":160,"author":{"gitID":"Aquarinte"},"content":"        Appointment appt \u003d new AppointmentBuilder().withRemark(VALID_REMARK_ONE).withDateTime(dupDateTime)"},{"lineNumber":161,"author":{"gitID":"Aquarinte"},"content":"                .withAppointmentTags(VALID_TAG_CHECKUP).withOwnerNric(owner.getNric().toString())"},{"lineNumber":162,"author":{"gitID":"Aquarinte"},"content":"                .withPetPatientName(existing.getName().toString()).build();"},{"lineNumber":163,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":164,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(prepareCommand(appt, owner.getNric(), existing.getName(), model),"},{"lineNumber":165,"author":{"gitID":"Aquarinte"},"content":"                model, AddCommand.MESSAGE_DUPLICATE_DATETIME);"},{"lineNumber":166,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":168,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":169,"author":{"gitID":"Aquarinte"},"content":"    public void execute_addAllNew_success() throws Exception {"},{"lineNumber":170,"author":{"gitID":"Aquarinte"},"content":"        Person newPerson \u003d new PersonBuilder().withName(VALID_NAME_CHARLIE).withPhone(VALID_PHONE_CHARLIE)"},{"lineNumber":171,"author":{"gitID":"Aquarinte"},"content":"                .withEmail(VALID_EMAIL_CHARLIE).withAddress(VALID_ADDRESS_CHARLIE).withNric(VALID_NRIC_CHARLIE).build();"},{"lineNumber":172,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":173,"author":{"gitID":"Aquarinte"},"content":"        PetPatient newPetPatient \u003d new PetPatientBuilder().withName(VALID_NAME_NERO).withSpecies(VALID_SPECIES_NERO)"},{"lineNumber":174,"author":{"gitID":"Aquarinte"},"content":"                .withBreed(VALID_BREED_NERO).withColour(VALID_COLOUR_NERO).withBloodType(VALID_BLOODTYPE_NERO)"},{"lineNumber":175,"author":{"gitID":"Aquarinte"},"content":"                .withOwnerNric(newPerson.getNric().toString()).build();"},{"lineNumber":176,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":177,"author":{"gitID":"Aquarinte"},"content":"        Appointment newAppt \u003d new AppointmentBuilder().withDateTime(VALID_DATE_ONE).withRemark(VALID_REMARK_ONE)"},{"lineNumber":178,"author":{"gitID":"Aquarinte"},"content":"                .withAppointmentTags(VALID_TAG_CHECKUP).withOwnerNric(newPerson.getNric().toString())"},{"lineNumber":179,"author":{"gitID":"Aquarinte"},"content":"                .withPetPatientName(newPetPatient.getName().toString()).build();"},{"lineNumber":180,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":181,"author":{"gitID":"Aquarinte"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":182,"author":{"gitID":"Aquarinte"},"content":"        expectedModel.addPerson(newPerson);"},{"lineNumber":183,"author":{"gitID":"Aquarinte"},"content":"        expectedModel.addPetPatient(newPetPatient);"},{"lineNumber":184,"author":{"gitID":"Aquarinte"},"content":"        expectedModel.addAppointment(newAppt);"},{"lineNumber":185,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":186,"author":{"gitID":"Aquarinte"},"content":"        assertCommandSuccess(prepareCommand(newPerson, newPetPatient, newAppt, model), model,"},{"lineNumber":187,"author":{"gitID":"Aquarinte"},"content":"                String.format(messageAddall, newPerson, newPetPatient, newAppt), expectedModel);"},{"lineNumber":188,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":190,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"Aquarinte"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code person} into the {@code model}."},{"lineNumber":192,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"Aquarinte"},"content":"    private AddCommand prepareCommand(Person person, Model model) {"},{"lineNumber":194,"author":{"gitID":"Aquarinte"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":195,"author":{"gitID":"Aquarinte"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":196,"author":{"gitID":"Aquarinte"},"content":"        return command;"},{"lineNumber":197,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":199,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"Aquarinte"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code petpatient} into the {@code model}."},{"lineNumber":201,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"Aquarinte"},"content":"    private AddCommand prepareCommand(PetPatient petPatient, Nric ownerNric, Model model) {"},{"lineNumber":203,"author":{"gitID":"Aquarinte"},"content":"        AddCommand command \u003d new AddCommand(petPatient, ownerNric);"},{"lineNumber":204,"author":{"gitID":"Aquarinte"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":205,"author":{"gitID":"Aquarinte"},"content":"        return command;"},{"lineNumber":206,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":208,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"Aquarinte"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code appointment} into the {@code model}."},{"lineNumber":210,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"Aquarinte"},"content":"    private AddCommand prepareCommand(Appointment appt, Nric ownerNric, PetPatientName petPatientName, Model model) {"},{"lineNumber":212,"author":{"gitID":"Aquarinte"},"content":"        AddCommand command \u003d new AddCommand(appt, ownerNric, petPatientName);"},{"lineNumber":213,"author":{"gitID":"Aquarinte"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":214,"author":{"gitID":"Aquarinte"},"content":"        return command;"},{"lineNumber":215,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":217,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":218,"author":{"gitID":"Aquarinte"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code person}, {@code petpatient} and"},{"lineNumber":219,"author":{"gitID":"Aquarinte"},"content":"     * {@code appointment} into the {@code model}."},{"lineNumber":220,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":221,"author":{"gitID":"Aquarinte"},"content":"    private AddCommand prepareCommand(Person person, PetPatient petPatient, Appointment appt, Model model) {"},{"lineNumber":222,"author":{"gitID":"Aquarinte"},"content":"        AddCommand command \u003d new AddCommand(person, petPatient, appt);"},{"lineNumber":223,"author":{"gitID":"Aquarinte"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":224,"author":{"gitID":"Aquarinte"},"content":"        return command;"},{"lineNumber":225,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":189,"-":37}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UndoCommandTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(4, INDEX_FIRST_PERSON);"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(4, INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void execute() throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":39,"author":{"gitID":"-"},"content":"                Arrays.asList(deleteCommandOne, deleteCommandTwo), Collections.emptyList());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        deleteCommandOne.execute();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        deleteCommandTwo.execute();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":2,"-":55}},{"path":"src/test/java/seedu/address/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.exceptions.PetDependencyNotEmptyException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // undo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void redo() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // redo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Deletes the first person in the model\u0027s filtered list."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            Person personToDelete \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"                model.deletePerson(personToDelete);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                fail(\"Impossible: personToDelete was retrieved from model.\");"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"            } catch (PetDependencyNotEmptyException e) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                fail(\"Impossible: personToDelete was retrieved from model.\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":3,"-":68}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PET_PATIENTS_LISTED_OVERVIEW;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"import java.util.function.Predicate;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class FindCommandTest {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"        Predicate\u003cPerson\u003e firstPredicate \u003d forPerson -\u003e Collections.singletonList(\"first\")"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"                .stream().anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(forPerson.getName().fullName, keyword));"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"        Predicate\u003cPerson\u003e secondPredicate \u003d forPerson -\u003e Collections.singletonList(\"second\")"},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"                .stream().anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(forPerson.getName().fullName, keyword));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"    public void execute_zeroKeywords_noPersonFound() throws CommandException {"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0)"},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 0);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\" \");"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() throws CommandException {"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3)"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 0);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\"Kurz Elle Kunz\");"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private FindCommand prepareCommand(String userInput) {"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"        Predicate\u003cPerson\u003e predicate \u003d forPerson -\u003e Arrays.asList(userInput.split(\"\\\\s+\"))"},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"                .stream().anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(forPerson.getName().fullName, keyword));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        FindCommand command \u003d"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":"                new FindCommand(predicate);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":"    private void assertCommandSuccess(FindCommand command, String expectedMessage, List\u003cPerson\u003e expectedList)"},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":"            throws CommandException {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":20,"-":88}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class RedoCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(4, INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(4, INDEX_SECOND_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        deleteCommandOne.preprocessUndoableCommand();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        deleteCommandTwo.preprocessUndoableCommand();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void execute() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":42,"author":{"gitID":"-"},"content":"                Collections.emptyList(), Arrays.asList(deleteCommandTwo, deleteCommandOne));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":2,"-":56}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BREED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOUR;"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIES;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"import java.util.function.Predicate;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.exceptions.PetDependencyNotEmptyException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    // Person: Amy"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_NRIC_AMY \u003d \"G1078999P\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String NRIC_DESC_AMY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_AMY;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    // Person: Bob"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String VALID_NRIC_BOB \u003d \"S7895666N\";"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String NRIC_DESC_BOB \u003d \" \" + PREFIX_NRIC + VALID_NRIC_BOB;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    // Person: Charlie"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_CHARLIE \u003d \"Charlie Brown\";"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_CHARLIE \u003d \"94127890\";"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_CHARLIE \u003d \"charliebrown@gmail.com\";"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_CHARLIE \u003d \"Chocolate Factory Avenue\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String VALID_NRIC_CHARLIE \u003d \"S1078899P\";"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_CHARLIE \u003d \" \" + PREFIX_NAME + VALID_NAME_CHARLIE;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_CHARLIE \u003d \" \" + PREFIX_PHONE + VALID_PHONE_CHARLIE;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_CHARLIE \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_CHARLIE;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_CHARLIE \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_CHARLIE;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final String NRIC_DESC_CHARLIE \u003d \" \" + PREFIX_NRIC + VALID_NRIC_CHARLIE;"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    // More Nrics"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static final String VALID_NRIC_DION \u003d \"T1115666G\";"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static final String NRIC_DESC_DION \u003d \" \" + PREFIX_NRIC + VALID_NRIC_DION;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static final String VALID_NRIC_ELIAS \u003d \"G3338999P\";"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static final String NRIC_DESC_ELIAS \u003d \" \" + PREFIX_NRIC + VALID_NRIC_ELIAS;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static final String VALID_NRIC_FION \u003d \"S2225666N\";"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static final String NRIC_DESC_FION \u003d \" \" + PREFIX_NRIC + VALID_NRIC_FION;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public static final String VALID_NRIC_JOHNNY \u003d \"S9622444T\";"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static final String NRIC_DESC_JOHNNY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_JOHNNY;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public static final String VALID_NRIC_TIMMY \u003d \"S9277432G\";"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public static final String NRIC_DESC_TIMMY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_TIMMY;"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    // Tags"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":"    public static final String VALID_TAG_UNUSED \u003d \"unused\";"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FIV \u003d \"Fiv\";"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FIV \u003d \" \" + PREFIX_TAG + VALID_TAG_FIV;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_DEPRESSION \u003d \"Depression\";"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_DEPRESSION \u003d \" \" + PREFIX_TAG + VALID_TAG_DEPRESSION;"},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":"    public static final String VALID_TAG_CHECKUP \u003d \"checkup\";"},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":"    public static final String TAG_DESC_CHECKUP \u003d \" \" + PREFIX_TAG + VALID_TAG_CHECKUP;"},{"lineNumber":101,"author":{"gitID":"wynonaK"},"content":"    public static final String VALID_TAG_VACCINATION \u003d \"vaccination\";"},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":"    public static final String TAG_DESC_VACCINATION \u003d \" \" + PREFIX_TAG + VALID_TAG_VACCINATION;"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    // Remarks"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public static final String VALID_REMARK_ONE \u003d \"Persistent diarrhoea\";"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public static final String REMARK_DESC_ONE \u003d \" \" + PREFIX_REMARK + VALID_REMARK_ONE;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static final String VALID_REMARK_TWO \u003d \"old age\";"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public static final String REMARK_DESC_TWO \u003d \" \" + PREFIX_REMARK + VALID_REMARK_TWO;"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    // Date Time for appointments"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public static final String VALID_DATE_ONE \u003d \"2018-06-17 11:30\";"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public static final String DATE_DESC_ONE \u003d \" \" + PREFIX_DATE + VALID_DATE_ONE;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public static final String VALID_DATE_TWO \u003d \"2018-07-05 16:30\";"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public static final String DATE_DESC_TWO \u003d \" \" + PREFIX_DATE + VALID_DATE_TWO;"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    // PetPatient: Joker"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_JOKER \u003d \"Joker\";"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public static final String VALID_SPECIES_JOKER \u003d \"cat\";"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public static final String VALID_BREED_JOKER \u003d \"domestic shorthair\";"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public static final String VALID_COLOUR_JOKER \u003d \"brown and white\";"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public static final String VALID_BLOODTYPE_JOKER \u003d \"O\";"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_JOKER \u003d \" \" + PREFIX_NAME + VALID_NAME_JOKER;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public static final String SPECIES_DESC_JOKER \u003d \" \" + PREFIX_SPECIES + VALID_SPECIES_JOKER;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public static final String BREED_DESC_JOKER \u003d \" \" + PREFIX_BREED + VALID_BREED_JOKER;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public static final String COLOUR_DESC_JOKER \u003d \" \" + PREFIX_COLOUR + VALID_COLOUR_JOKER;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public static final String BLOODTYPE_DESC_JOKER \u003d \" \" + PREFIX_BLOODTYPE + VALID_BLOODTYPE_JOKER;"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    // PetPatient: Nero"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_NERO \u003d \"Nero\";"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public static final String VALID_SPECIES_NERO \u003d \"cat\";"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public static final String VALID_BREED_NERO \u003d \"British Shorthair\";"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public static final String VALID_COLOUR_NERO \u003d \"Blue\";"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public static final String VALID_BLOODTYPE_NERO \u003d \"AB\";"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_NERO \u003d \" \" + PREFIX_NAME + VALID_NAME_NERO;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public static final String SPECIES_DESC_NERO \u003d \" \" + PREFIX_SPECIES + VALID_SPECIES_NERO;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public static final String BREED_DESC_NERO \u003d \" \" + PREFIX_BREED + VALID_BREED_NERO;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public static final String COLOUR_DESC_NERO \u003d \" \" + PREFIX_COLOUR + VALID_COLOUR_NERO;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public static final String BLOODTYPE_DESC_NERO \u003d \" \" + PREFIX_BLOODTYPE + VALID_BLOODTYPE_NERO;"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    // options"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public static final String OPTION_OWNER \u003d \" -o\";"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public static final String OPTION_PET \u003d \" -p\";"},{"lineNumber":144,"author":{"gitID":"chialejing"},"content":"    public static final String OPTION_APPOINTMENT \u003d \" -a\";"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    // themes"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public static final String VALID_THEME_PATH_LIGHT \u003d \"/view/LightTheme.css\";"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public static final String VALID_THEME_PATH_DARK \u003d \"/view/DarkTheme.css\";"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    // invalids"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public static final String INVALID_NRIC \u003d \"\u00262345678M\"; // \u0027\u0026\u0027 not allowed in NRIC"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public static final String INVALID_NRIC_DESC \u003d \" \" + PREFIX_NRIC + \"\u00262345678M\"; // \u0027\u0026\u0027 not allowed in NRIC"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public static final String INVALID_OWNER_DESC \u003d \" \" + PREFIX_NRIC + \"S000000000T\"; // invalid Nric"},{"lineNumber":159,"author":{"gitID":"wynonaK"},"content":"    public static final String INVALID_REMARK_DESC \u003d \" \" + PREFIX_REMARK; //empty string not allowed for remark"},{"lineNumber":160,"author":{"gitID":"wynonaK"},"content":"    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"twelvemarchtwozerooneeight\"; //follows format"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    public static final String INVALID_THEME_PINK \u003d \"pink\";"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public static final String INVALID_THEME_LIGHTT \u003d \"lightt\";"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public static final String INVALID_OPTION \u003d \" -z\";"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":174,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                .withNric(VALID_NRIC_AMY)"},{"lineNumber":176,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                .withNric(VALID_NRIC_BOB)"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":208,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":224,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":230,"author":{"gitID":"wynonaK"},"content":"        Predicate\u003cPerson\u003e namePredicate \u003d currPerson -\u003e Arrays.asList(splitName[0]).stream()"},{"lineNumber":231,"author":{"gitID":"wynonaK"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(currPerson.getName().fullName, keyword));"},{"lineNumber":232,"author":{"gitID":"wynonaK"},"content":"        model.updateFilteredPersonList(namePredicate);"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":239,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":246,"author":{"gitID":"wynonaK"},"content":"        } catch (PetDependencyNotEmptyException e) {"},{"lineNumber":247,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"Dependency still exists!\");"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":253,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":262,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":1,"wynonaK":17,"-":250}},{"path":"src/test/java/seedu/address/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased()),"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":2,"-":139}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"chialejing"},"content":"import java.time.LocalDateTime;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateDateTimeException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicateNricException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.exceptions.DuplicatePetPatientException;"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PetPatientBuilder;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalAppointments;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPetPatients;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"Aquarinte"},"content":"//@@author aquarinte"},{"lineNumber":45,"author":{"gitID":"Aquarinte"},"content":"public class AddCommandTest {"},{"lineNumber":46,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":47,"author":{"gitID":"Aquarinte"},"content":"    @Rule"},{"lineNumber":48,"author":{"gitID":"Aquarinte"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":49,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":50,"author":{"gitID":"Aquarinte"},"content":"    private final String messageAddpetpatient \u003d \"New pet patient added: %1$s \\nunder owner: %2$s\";"},{"lineNumber":51,"author":{"gitID":"Aquarinte"},"content":"    private final String messageAddappointment \u003d \"New appointment made: %1$s\\nunder owner: %2$s\\nfor pet patient: %3$s\";"},{"lineNumber":52,"author":{"gitID":"Aquarinte"},"content":"    private final String messageAddall \u003d \"New person added: %1$s\\nNew pet patient added: %2$s\\n\""},{"lineNumber":53,"author":{"gitID":"Aquarinte"},"content":"            + \"New appointment made: %3$s\";"},{"lineNumber":54,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":55,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"Aquarinte"},"content":"    public void constructor_nullPersonPetPatientAppointment_throwsNullPointerException() {"},{"lineNumber":57,"author":{"gitID":"Aquarinte"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":58,"author":{"gitID":"Aquarinte"},"content":"        new AddCommand((Person) null, (PetPatient) null, (Appointment) null);"},{"lineNumber":59,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":61,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"Aquarinte"},"content":"    public void constructor_nullAppointmentNricPetPatientName_throwsNullPointerException() {"},{"lineNumber":63,"author":{"gitID":"Aquarinte"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":64,"author":{"gitID":"Aquarinte"},"content":"        new AddCommand((Appointment) null, (Nric) null, (PetPatientName) null);"},{"lineNumber":65,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":67,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"Aquarinte"},"content":"    public void constructor_nullPetPatientNric_throwsNullPointerException() {"},{"lineNumber":69,"author":{"gitID":"Aquarinte"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":70,"author":{"gitID":"Aquarinte"},"content":"        new AddCommand((PetPatient) null, (Nric) null);"},{"lineNumber":71,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":73,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"Aquarinte"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":75,"author":{"gitID":"Aquarinte"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":76,"author":{"gitID":"Aquarinte"},"content":"        new AddCommand((Person) null);"},{"lineNumber":77,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":79,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"Aquarinte"},"content":"    public void execute_objectsAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":81,"author":{"gitID":"Aquarinte"},"content":"        ModelStubAcceptingAllAdded modelStub \u003d new ModelStubAcceptingAllAdded();"},{"lineNumber":82,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":83,"author":{"gitID":"Aquarinte"},"content":"        //add a new person (a)"},{"lineNumber":84,"author":{"gitID":"Aquarinte"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":85,"author":{"gitID":"Aquarinte"},"content":"        CommandResult resultToAddPerson \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":86,"author":{"gitID":"Aquarinte"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), resultToAddPerson.feedbackToUser);"},{"lineNumber":87,"author":{"gitID":"Aquarinte"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":88,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":89,"author":{"gitID":"Aquarinte"},"content":"        //add a new pet patient (b) under person (a)"},{"lineNumber":90,"author":{"gitID":"Aquarinte"},"content":"        PetPatient validPetPatient \u003d new PetPatientBuilder().build();"},{"lineNumber":91,"author":{"gitID":"Aquarinte"},"content":"        CommandResult resultToAddPetPatient \u003d getAddCommandForPetPatient(validPetPatient, validPerson.getNric(),"},{"lineNumber":92,"author":{"gitID":"Aquarinte"},"content":"                modelStub).execute();"},{"lineNumber":93,"author":{"gitID":"Aquarinte"},"content":"        assertEquals(String.format(messageAddpetpatient, validPetPatient, validPerson),"},{"lineNumber":94,"author":{"gitID":"Aquarinte"},"content":"                resultToAddPetPatient.feedbackToUser);"},{"lineNumber":95,"author":{"gitID":"Aquarinte"},"content":"        assertEquals(Arrays.asList(validPetPatient), modelStub.petPatientsAdded);"},{"lineNumber":96,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":97,"author":{"gitID":"Aquarinte"},"content":"        //add a new appt for pet patient (b) under person (a)"},{"lineNumber":98,"author":{"gitID":"Aquarinte"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().build();"},{"lineNumber":99,"author":{"gitID":"Aquarinte"},"content":"        CommandResult resultToAddAppointment \u003d getAddCommandForAppointment(validAppointment, validPerson.getNric(),"},{"lineNumber":100,"author":{"gitID":"Aquarinte"},"content":"                validPetPatient.getName(), modelStub).execute();"},{"lineNumber":101,"author":{"gitID":"Aquarinte"},"content":"        assertEquals(String.format(messageAddappointment, validAppointment, validPerson, validPetPatient),"},{"lineNumber":102,"author":{"gitID":"Aquarinte"},"content":"                resultToAddAppointment.feedbackToUser);"},{"lineNumber":103,"author":{"gitID":"Aquarinte"},"content":"        assertEquals(Arrays.asList(validAppointment), modelStub.appointmentsAdded);"},{"lineNumber":104,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":105,"author":{"gitID":"Aquarinte"},"content":"        //add new person, new pet patient and new appointment"},{"lineNumber":106,"author":{"gitID":"Aquarinte"},"content":"        Person newPerson \u003d TypicalPersons.BENSON;"},{"lineNumber":107,"author":{"gitID":"Aquarinte"},"content":"        PetPatient newPetPatient \u003d TypicalPetPatients.JEWEL;"},{"lineNumber":108,"author":{"gitID":"Aquarinte"},"content":"        Appointment newAppt \u003d TypicalAppointments.BENSON_APP;"},{"lineNumber":109,"author":{"gitID":"Aquarinte"},"content":"        CommandResult resultToAddAll \u003d getAddCommandForNewPersonPetPatientAppointment(newPerson, newPetPatient, newAppt,"},{"lineNumber":110,"author":{"gitID":"Aquarinte"},"content":"                modelStub).execute();"},{"lineNumber":111,"author":{"gitID":"Aquarinte"},"content":"        assertEquals(String.format(messageAddall, newPerson, newPetPatient, newAppt), resultToAddAll.feedbackToUser);"},{"lineNumber":112,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":114,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"Aquarinte"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":116,"author":{"gitID":"Aquarinte"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":117,"author":{"gitID":"Aquarinte"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":118,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":119,"author":{"gitID":"Aquarinte"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":120,"author":{"gitID":"Aquarinte"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":121,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":122,"author":{"gitID":"Aquarinte"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":123,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":125,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"Aquarinte"},"content":"    public void execute_duplicateNric_throwsCommandException() throws Exception {"},{"lineNumber":127,"author":{"gitID":"Aquarinte"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateNricException();"},{"lineNumber":128,"author":{"gitID":"Aquarinte"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":129,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":130,"author":{"gitID":"Aquarinte"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":131,"author":{"gitID":"Aquarinte"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_NRIC);"},{"lineNumber":132,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":133,"author":{"gitID":"Aquarinte"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":134,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":136,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"Aquarinte"},"content":"    public void execute_duplicatePetPatient_throwsCommandException() throws Exception {"},{"lineNumber":138,"author":{"gitID":"Aquarinte"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePetPatientException();"},{"lineNumber":139,"author":{"gitID":"Aquarinte"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":140,"author":{"gitID":"Aquarinte"},"content":"        PetPatient validPetPatient \u003d new PetPatientBuilder().build();"},{"lineNumber":141,"author":{"gitID":"Aquarinte"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().build();"},{"lineNumber":142,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":143,"author":{"gitID":"Aquarinte"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":144,"author":{"gitID":"Aquarinte"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PET_PATIENT);"},{"lineNumber":145,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":146,"author":{"gitID":"Aquarinte"},"content":"        getAddCommandForNewPersonPetPatientAppointment(validPerson, validPetPatient, validAppointment,"},{"lineNumber":147,"author":{"gitID":"Aquarinte"},"content":"                modelStub).execute();"},{"lineNumber":148,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":150,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"Aquarinte"},"content":"    public void execute_duplicateAppointment_throwsCommandException() throws Exception {"},{"lineNumber":152,"author":{"gitID":"Aquarinte"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateAppointmentException();"},{"lineNumber":153,"author":{"gitID":"Aquarinte"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":154,"author":{"gitID":"Aquarinte"},"content":"        PetPatient validPetPatient \u003d new PetPatientBuilder().build();"},{"lineNumber":155,"author":{"gitID":"Aquarinte"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().build();"},{"lineNumber":156,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":157,"author":{"gitID":"Aquarinte"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":158,"author":{"gitID":"Aquarinte"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":159,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":160,"author":{"gitID":"Aquarinte"},"content":"        getAddCommandForNewPersonPetPatientAppointment(validPerson, validPetPatient, validAppointment,"},{"lineNumber":161,"author":{"gitID":"Aquarinte"},"content":"                modelStub).execute();"},{"lineNumber":162,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":164,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":165,"author":{"gitID":"Aquarinte"},"content":"    public void execute_duplicateAppointmentDateTime_throwsCommandException() throws Exception {"},{"lineNumber":166,"author":{"gitID":"Aquarinte"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateDateTimeException();"},{"lineNumber":167,"author":{"gitID":"Aquarinte"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":168,"author":{"gitID":"Aquarinte"},"content":"        PetPatient validPetPatient \u003d new PetPatientBuilder().build();"},{"lineNumber":169,"author":{"gitID":"Aquarinte"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().build();"},{"lineNumber":170,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":171,"author":{"gitID":"Aquarinte"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":172,"author":{"gitID":"Aquarinte"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_DATETIME);"},{"lineNumber":173,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":174,"author":{"gitID":"Aquarinte"},"content":"        getAddCommandForNewPersonPetPatientAppointment(validPerson, validPetPatient, validAppointment,"},{"lineNumber":175,"author":{"gitID":"Aquarinte"},"content":"                modelStub).execute();"},{"lineNumber":176,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":178,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":179,"author":{"gitID":"Aquarinte"},"content":"    public void equals() {"},{"lineNumber":180,"author":{"gitID":"Aquarinte"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":181,"author":{"gitID":"Aquarinte"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").withNric(\"T0011223G\").build();"},{"lineNumber":182,"author":{"gitID":"Aquarinte"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":183,"author":{"gitID":"Aquarinte"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":184,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":185,"author":{"gitID":"Aquarinte"},"content":"        PetPatient joseph \u003d new PetPatientBuilder().build();"},{"lineNumber":186,"author":{"gitID":"Aquarinte"},"content":"        PetPatient tia \u003d new PetPatientBuilder().withName(\"Tia\").build();"},{"lineNumber":187,"author":{"gitID":"Aquarinte"},"content":"        AddCommand addJosephCommand \u003d new AddCommand(joseph, alice.getNric());"},{"lineNumber":188,"author":{"gitID":"Aquarinte"},"content":"        AddCommand addTiaCommand \u003d new AddCommand(tia, bob.getNric());"},{"lineNumber":189,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":190,"author":{"gitID":"Aquarinte"},"content":"        Appointment appt \u003d new AppointmentBuilder().build();"},{"lineNumber":191,"author":{"gitID":"Aquarinte"},"content":"        Appointment appt2 \u003d new AppointmentBuilder().withDateTime(\"2018-11-11 15:30\").build();"},{"lineNumber":192,"author":{"gitID":"Aquarinte"},"content":"        AddCommand addApptCommand \u003d new AddCommand(appt, alice.getNric(), joseph.getName());"},{"lineNumber":193,"author":{"gitID":"Aquarinte"},"content":"        AddCommand addAppt2Command \u003d new AddCommand(appt2, bob.getNric(), tia.getName());"},{"lineNumber":194,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":195,"author":{"gitID":"Aquarinte"},"content":"        AddCommand addAllCommand \u003d new AddCommand(alice, joseph, appt);"},{"lineNumber":196,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":197,"author":{"gitID":"Aquarinte"},"content":"        // same object -\u003e returns true"},{"lineNumber":198,"author":{"gitID":"Aquarinte"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":199,"author":{"gitID":"Aquarinte"},"content":"        assertTrue(addJosephCommand.equals(addJosephCommand));"},{"lineNumber":200,"author":{"gitID":"Aquarinte"},"content":"        assertTrue(addApptCommand.equals(addApptCommand));"},{"lineNumber":201,"author":{"gitID":"Aquarinte"},"content":"        assertTrue(addAllCommand.equals(addAllCommand));"},{"lineNumber":202,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":203,"author":{"gitID":"Aquarinte"},"content":"        // same values -\u003e returns true"},{"lineNumber":204,"author":{"gitID":"Aquarinte"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":205,"author":{"gitID":"Aquarinte"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":206,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":207,"author":{"gitID":"Aquarinte"},"content":"        AddCommand addJosephCommandCopy \u003d new AddCommand(joseph, alice.getNric());"},{"lineNumber":208,"author":{"gitID":"Aquarinte"},"content":"        assertTrue(addJosephCommand.equals(addJosephCommandCopy));"},{"lineNumber":209,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":210,"author":{"gitID":"Aquarinte"},"content":"        AddCommand addApptCommandCopy \u003d new AddCommand(appt, alice.getNric(), joseph.getName());"},{"lineNumber":211,"author":{"gitID":"Aquarinte"},"content":"        assertTrue(addApptCommand.equals(addApptCommandCopy));"},{"lineNumber":212,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":213,"author":{"gitID":"Aquarinte"},"content":"        AddCommand addAllCommandCopy \u003d new AddCommand(alice, joseph, appt);"},{"lineNumber":214,"author":{"gitID":"Aquarinte"},"content":"        assertTrue(addAllCommand.equals(addAllCommandCopy));"},{"lineNumber":215,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":216,"author":{"gitID":"Aquarinte"},"content":"        // different types -\u003e returns false"},{"lineNumber":217,"author":{"gitID":"Aquarinte"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":218,"author":{"gitID":"Aquarinte"},"content":"        assertFalse(addJosephCommand.equals(2));"},{"lineNumber":219,"author":{"gitID":"Aquarinte"},"content":"        assertFalse(addApptCommand.equals(new AppointmentBuilder().build()));"},{"lineNumber":220,"author":{"gitID":"Aquarinte"},"content":"        assertFalse(addAllCommand.equals(\"hello\"));"},{"lineNumber":221,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":222,"author":{"gitID":"Aquarinte"},"content":"        // null -\u003e returns false"},{"lineNumber":223,"author":{"gitID":"Aquarinte"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":224,"author":{"gitID":"Aquarinte"},"content":"        assertFalse(addJosephCommand.equals(null));"},{"lineNumber":225,"author":{"gitID":"Aquarinte"},"content":"        assertFalse(addApptCommand.equals(null));"},{"lineNumber":226,"author":{"gitID":"Aquarinte"},"content":"        assertFalse(addAllCommand.equals(null));"},{"lineNumber":227,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":228,"author":{"gitID":"Aquarinte"},"content":"        // different person/pet patient/appointment -\u003e returns false"},{"lineNumber":229,"author":{"gitID":"Aquarinte"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":230,"author":{"gitID":"Aquarinte"},"content":"        assertFalse(addJosephCommand.equals(addTiaCommand));"},{"lineNumber":231,"author":{"gitID":"Aquarinte"},"content":"        assertFalse(addApptCommand.equals(addAppt2Command));"},{"lineNumber":232,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":233,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":235,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"Aquarinte"},"content":"     * Generates a new AddCommand with the details of the given person, pet patient and appointment."},{"lineNumber":237,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"Aquarinte"},"content":"    private AddCommand getAddCommandForNewPersonPetPatientAppointment(Person person, PetPatient petPatient,"},{"lineNumber":239,"author":{"gitID":"Aquarinte"},"content":"                                                                      Appointment appt, Model model) {"},{"lineNumber":240,"author":{"gitID":"Aquarinte"},"content":"        AddCommand command \u003d new AddCommand(person, petPatient, appt);"},{"lineNumber":241,"author":{"gitID":"Aquarinte"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":242,"author":{"gitID":"Aquarinte"},"content":"        return command;"},{"lineNumber":243,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":245,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":246,"author":{"gitID":"Aquarinte"},"content":"     * Generates a new AddCommand with the details of the given appointment, owner\u0027s nric and pet patient name."},{"lineNumber":247,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":248,"author":{"gitID":"Aquarinte"},"content":"    private AddCommand getAddCommandForAppointment(Appointment appt, Nric ownerNric, PetPatientName petPatientName,"},{"lineNumber":249,"author":{"gitID":"Aquarinte"},"content":"                                                   Model model) {"},{"lineNumber":250,"author":{"gitID":"Aquarinte"},"content":"        AddCommand command \u003d new AddCommand(appt, ownerNric, petPatientName);"},{"lineNumber":251,"author":{"gitID":"Aquarinte"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":252,"author":{"gitID":"Aquarinte"},"content":"        return command;"},{"lineNumber":253,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":255,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":256,"author":{"gitID":"Aquarinte"},"content":"     * Generates a new AddCommand with the details of the given pet patient and owner\u0027s nric."},{"lineNumber":257,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":258,"author":{"gitID":"Aquarinte"},"content":"    private AddCommand getAddCommandForPetPatient(PetPatient petPatient, Nric ownerNric, Model model) {"},{"lineNumber":259,"author":{"gitID":"Aquarinte"},"content":"        AddCommand command \u003d new AddCommand(petPatient, ownerNric);"},{"lineNumber":260,"author":{"gitID":"Aquarinte"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":261,"author":{"gitID":"Aquarinte"},"content":"        return command;"},{"lineNumber":262,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":264,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":265,"author":{"gitID":"Aquarinte"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":266,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":267,"author":{"gitID":"Aquarinte"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":268,"author":{"gitID":"Aquarinte"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":269,"author":{"gitID":"Aquarinte"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":270,"author":{"gitID":"Aquarinte"},"content":"        return command;"},{"lineNumber":271,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":273,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":274,"author":{"gitID":"Aquarinte"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":275,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":276,"author":{"gitID":"Aquarinte"},"content":"    private class ModelStub implements Model {"},{"lineNumber":277,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":278,"author":{"gitID":"Aquarinte"},"content":"        public void addPerson(Person person) throws DuplicatePersonException, DuplicateNricException {"},{"lineNumber":279,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":280,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":281,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":282,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":283,"author":{"gitID":"Aquarinte"},"content":"        public Person getPersonWithNric(Nric nric) {"},{"lineNumber":284,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":285,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":286,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":287,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":288,"author":{"gitID":"Aquarinte"},"content":"        public void addPetPatient(PetPatient petPatient) throws DuplicatePetPatientException {"},{"lineNumber":289,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":290,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":291,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":292,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":293,"author":{"gitID":"Aquarinte"},"content":"        public PetPatient getPetPatientWithNricAndName(Nric nric, PetPatientName petPatientName) {"},{"lineNumber":294,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":295,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":296,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":297,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":298,"author":{"gitID":"Aquarinte"},"content":"        public void deletePetPatient(PetPatient target) {"},{"lineNumber":299,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":300,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":301,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":302,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":303,"author":{"gitID":"Aquarinte"},"content":"        public List\u003cPetPatient\u003e deletePetPatientDependencies(Person key) {"},{"lineNumber":304,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":305,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":306,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":307,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":308,"author":{"gitID":"Aquarinte"},"content":"        public List\u003cAppointment\u003e deleteAppointmentDependencies(PetPatient target) {"},{"lineNumber":309,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":310,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":311,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":312,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":313,"author":{"gitID":"Aquarinte"},"content":"        public void addAppointment(Appointment appointment) throws DuplicateAppointmentException,"},{"lineNumber":314,"author":{"gitID":"Aquarinte"},"content":"                DuplicateDateTimeException {"},{"lineNumber":315,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":316,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":317,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":318,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":319,"author":{"gitID":"Aquarinte"},"content":"        public void deleteAppointment(Appointment target) {"},{"lineNumber":320,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":321,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":322,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":323,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":324,"author":{"gitID":"Aquarinte"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":325,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":326,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":327,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":328,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":329,"author":{"gitID":"Aquarinte"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":330,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":331,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":332,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":333,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":334,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":335,"author":{"gitID":"Aquarinte"},"content":"        public void deletePerson(Person target) {"},{"lineNumber":336,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":337,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":338,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":339,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":340,"author":{"gitID":"Aquarinte"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":341,"author":{"gitID":"Aquarinte"},"content":"                throws DuplicatePersonException {"},{"lineNumber":342,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":343,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":344,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":345,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":346,"author":{"gitID":"Aquarinte"},"content":"        public void updatePetPatient(PetPatient target, PetPatient editedPetPatient)"},{"lineNumber":347,"author":{"gitID":"Aquarinte"},"content":"                throws DuplicatePetPatientException {"},{"lineNumber":348,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":349,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":350,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":351,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":352,"author":{"gitID":"Aquarinte"},"content":"        public void updateAppointment(Appointment target, Appointment editedAppointment)"},{"lineNumber":353,"author":{"gitID":"Aquarinte"},"content":"                throws DuplicateAppointmentException {"},{"lineNumber":354,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":355,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":356,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":357,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":358,"author":{"gitID":"Aquarinte"},"content":"        public ArrayList\u003cPetPatient\u003e getPetPatientsWithNric(Nric ownerNric) {"},{"lineNumber":359,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":360,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":361,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":362,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":363,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":364,"author":{"gitID":"Aquarinte"},"content":"        public ArrayList\u003cAppointment\u003e getAppointmentsWithNric(Nric ownerNric) {"},{"lineNumber":365,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":366,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":367,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":368,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":369,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":370,"author":{"gitID":"Aquarinte"},"content":"        public ArrayList\u003cAppointment\u003e getAppointmentsWithNricAndPetName(Nric ownerNric, PetPatientName petPatientName) {"},{"lineNumber":371,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":372,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":373,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":374,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":375,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":376,"author":{"gitID":"Aquarinte"},"content":"        public Appointment getClashingAppointment(LocalDateTime dateTime) {"},{"lineNumber":377,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":378,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":379,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":380,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":381,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":382,"author":{"gitID":"Aquarinte"},"content":"        public void deleteTag(Tag tag) {"},{"lineNumber":383,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":384,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":385,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":386,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":387,"author":{"gitID":"Aquarinte"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":388,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":389,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":390,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":391,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":392,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":393,"author":{"gitID":"Aquarinte"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":394,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":395,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":396,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":397,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":398,"author":{"gitID":"Aquarinte"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":399,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":400,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":401,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":402,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":403,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":404,"author":{"gitID":"Aquarinte"},"content":"        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"},{"lineNumber":405,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":406,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":407,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":408,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":409,"author":{"gitID":"Aquarinte"},"content":"        public ObservableList\u003cPetPatient\u003e getFilteredPetPatientList() {"},{"lineNumber":410,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":411,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":412,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":413,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":414,"author":{"gitID":"Aquarinte"},"content":"        public void updateFilteredPetPatientList(Predicate\u003cPetPatient\u003e predicate) {"},{"lineNumber":415,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":416,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":417,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":418,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":419,"author":{"gitID":"Aquarinte"},"content":"        public List\u003cTag\u003e getTagList() {"},{"lineNumber":420,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":421,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":422,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":423,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":424,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":425,"author":{"gitID":"Aquarinte"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":426,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":427,"author":{"gitID":"Aquarinte"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":428,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":429,"author":{"gitID":"Aquarinte"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":430,"author":{"gitID":"Aquarinte"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":431,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":432,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":433,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":434,"author":{"gitID":"Aquarinte"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":435,"author":{"gitID":"Aquarinte"},"content":"            return new AddressBook();"},{"lineNumber":436,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":437,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":438,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":439,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":440,"author":{"gitID":"Aquarinte"},"content":"     * A Model stub that always throw a DuplicateNricException when trying to add a person."},{"lineNumber":441,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":442,"author":{"gitID":"Aquarinte"},"content":"    private class ModelStubThrowingDuplicateNricException extends ModelStub {"},{"lineNumber":443,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":444,"author":{"gitID":"Aquarinte"},"content":"        public void addPerson(Person person) throws DuplicateNricException {"},{"lineNumber":445,"author":{"gitID":"Aquarinte"},"content":"            throw new DuplicateNricException();"},{"lineNumber":446,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":447,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":448,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":449,"author":{"gitID":"Aquarinte"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":450,"author":{"gitID":"Aquarinte"},"content":"            return new AddressBook();"},{"lineNumber":451,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":452,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":453,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":454,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":455,"author":{"gitID":"Aquarinte"},"content":"     * A Model stub that always throw a DuplicatePetPatientException when trying to add a pet patient."},{"lineNumber":456,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":457,"author":{"gitID":"Aquarinte"},"content":"    private class ModelStubThrowingDuplicatePetPatientException extends ModelStub {"},{"lineNumber":458,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":459,"author":{"gitID":"Aquarinte"},"content":"        public void addPerson(Person person) {"},{"lineNumber":460,"author":{"gitID":"Aquarinte"},"content":"            //do nothing"},{"lineNumber":461,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":462,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":463,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":464,"author":{"gitID":"Aquarinte"},"content":"        public void addPetPatient(PetPatient petPatient) throws DuplicatePetPatientException {"},{"lineNumber":465,"author":{"gitID":"Aquarinte"},"content":"            throw new DuplicatePetPatientException();"},{"lineNumber":466,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":467,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":468,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":469,"author":{"gitID":"Aquarinte"},"content":"        public void addAppointment(Appointment appt) {"},{"lineNumber":470,"author":{"gitID":"Aquarinte"},"content":"            //do nothing"},{"lineNumber":471,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":472,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":473,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":474,"author":{"gitID":"Aquarinte"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":475,"author":{"gitID":"Aquarinte"},"content":"            return new AddressBook();"},{"lineNumber":476,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":477,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":478,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":479,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":480,"author":{"gitID":"Aquarinte"},"content":"     * A Model stub that always throw a DuplicateAppointmentException when trying to add an appointment."},{"lineNumber":481,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":482,"author":{"gitID":"Aquarinte"},"content":"    private class ModelStubThrowingDuplicateAppointmentException extends ModelStub {"},{"lineNumber":483,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":484,"author":{"gitID":"Aquarinte"},"content":"        public void addPerson(Person person) {"},{"lineNumber":485,"author":{"gitID":"Aquarinte"},"content":"            //do nothing"},{"lineNumber":486,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":487,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":488,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":489,"author":{"gitID":"Aquarinte"},"content":"        public void addPetPatient(PetPatient petPatient) {"},{"lineNumber":490,"author":{"gitID":"Aquarinte"},"content":"            //do nothing"},{"lineNumber":491,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":492,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":493,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":494,"author":{"gitID":"Aquarinte"},"content":"        public void addAppointment(Appointment appt) throws DuplicateAppointmentException {"},{"lineNumber":495,"author":{"gitID":"Aquarinte"},"content":"            throw new DuplicateAppointmentException();"},{"lineNumber":496,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":497,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":498,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":499,"author":{"gitID":"Aquarinte"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":500,"author":{"gitID":"Aquarinte"},"content":"            return new AddressBook();"},{"lineNumber":501,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":502,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":503,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":504,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":505,"author":{"gitID":"Aquarinte"},"content":"     * A Model stub that always throw a DuplicateDateTimeException when trying to add an appointment."},{"lineNumber":506,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":507,"author":{"gitID":"Aquarinte"},"content":"    private class ModelStubThrowingDuplicateDateTimeException extends ModelStub {"},{"lineNumber":508,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":509,"author":{"gitID":"Aquarinte"},"content":"        public void addPerson(Person person) {"},{"lineNumber":510,"author":{"gitID":"Aquarinte"},"content":"            //do nothing"},{"lineNumber":511,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":512,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":513,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":514,"author":{"gitID":"Aquarinte"},"content":"        public void addPetPatient(PetPatient petPatient) {"},{"lineNumber":515,"author":{"gitID":"Aquarinte"},"content":"            //do nothing"},{"lineNumber":516,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":517,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":518,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":519,"author":{"gitID":"Aquarinte"},"content":"        public void addAppointment(Appointment appt) throws DuplicateDateTimeException {"},{"lineNumber":520,"author":{"gitID":"Aquarinte"},"content":"            throw new DuplicateDateTimeException();"},{"lineNumber":521,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":522,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":523,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":524,"author":{"gitID":"Aquarinte"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":525,"author":{"gitID":"Aquarinte"},"content":"            return new AddressBook();"},{"lineNumber":526,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":527,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":528,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":529,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":530,"author":{"gitID":"Aquarinte"},"content":"     * A Model stub that always accept the persons, pet patients and appointments being added."},{"lineNumber":531,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":532,"author":{"gitID":"Aquarinte"},"content":"    private class ModelStubAcceptingAllAdded extends ModelStub {"},{"lineNumber":533,"author":{"gitID":"Aquarinte"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":534,"author":{"gitID":"Aquarinte"},"content":"        final ArrayList\u003cPetPatient\u003e petPatientsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":535,"author":{"gitID":"Aquarinte"},"content":"        final ArrayList\u003cAppointment\u003e appointmentsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":536,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":537,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":538,"author":{"gitID":"Aquarinte"},"content":"        public void addPerson(Person person) throws DuplicatePersonException, DuplicateNricException {"},{"lineNumber":539,"author":{"gitID":"Aquarinte"},"content":"            requireNonNull(person);"},{"lineNumber":540,"author":{"gitID":"Aquarinte"},"content":"            personsAdded.add(person);"},{"lineNumber":541,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":542,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":543,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":544,"author":{"gitID":"Aquarinte"},"content":"        public Person getPersonWithNric(Nric nric) {"},{"lineNumber":545,"author":{"gitID":"Aquarinte"},"content":"            for (Person p : personsAdded) {"},{"lineNumber":546,"author":{"gitID":"Aquarinte"},"content":"                if (p.getNric().equals(nric)) {"},{"lineNumber":547,"author":{"gitID":"Aquarinte"},"content":"                    return p;"},{"lineNumber":548,"author":{"gitID":"Aquarinte"},"content":"                }"},{"lineNumber":549,"author":{"gitID":"Aquarinte"},"content":"            }"},{"lineNumber":550,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":551,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":552,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":553,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":554,"author":{"gitID":"Aquarinte"},"content":"        public void addPetPatient(PetPatient petPatient) throws DuplicatePetPatientException {"},{"lineNumber":555,"author":{"gitID":"Aquarinte"},"content":"            requireNonNull(petPatient);"},{"lineNumber":556,"author":{"gitID":"Aquarinte"},"content":"            petPatientsAdded.add(petPatient);"},{"lineNumber":557,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":558,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":559,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":560,"author":{"gitID":"Aquarinte"},"content":"        public PetPatient getPetPatientWithNricAndName(Nric nric, PetPatientName petPatientName) {"},{"lineNumber":561,"author":{"gitID":"Aquarinte"},"content":"            for (PetPatient p : petPatientsAdded) {"},{"lineNumber":562,"author":{"gitID":"Aquarinte"},"content":"                if (p.getOwner().equals(nric) \u0026\u0026 p.getName().equals(petPatientName)) {"},{"lineNumber":563,"author":{"gitID":"Aquarinte"},"content":"                    return p;"},{"lineNumber":564,"author":{"gitID":"Aquarinte"},"content":"                }"},{"lineNumber":565,"author":{"gitID":"Aquarinte"},"content":"            }"},{"lineNumber":566,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":567,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":568,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":569,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":570,"author":{"gitID":"Aquarinte"},"content":"        public void addAppointment(Appointment appt) throws DuplicateAppointmentException, DuplicateDateTimeException {"},{"lineNumber":571,"author":{"gitID":"Aquarinte"},"content":"            requireNonNull(appt);"},{"lineNumber":572,"author":{"gitID":"Aquarinte"},"content":"            appointmentsAdded.add(appt);"},{"lineNumber":573,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":574,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":575,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":576,"author":{"gitID":"Aquarinte"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":577,"author":{"gitID":"Aquarinte"},"content":"            return new AddressBook();"},{"lineNumber":578,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":579,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":580,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":581,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":538,"chialejing":3,"wynonaK":4,"-":36}},{"path":"src/test/java/seedu/address/model/appointment/RemarkTest.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"public class RemarkTest {"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Remark(null));"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"    public void constructor_invalidRemark_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"        String invalidRemark \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Remark(invalidRemark));"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"    public void isValidRemark() {"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"        // null remark"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Remark.isValidRemark(null));"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"        // invalid remarks"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"        assertFalse(Remark.isValidRemark(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"        assertFalse(Remark.isValidRemark(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"        // valid remarks"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"        assertTrue(Remark.isValidRemark(\"Might need a house visit.\"));"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"        assertTrue(Remark.isValidRemark(\"-\")); // one character"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"        assertTrue(Remark.isValidRemark(\"Might need a house visit, and medication.\")); // long address"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":32,"-":6}},{"path":"src/test/java/seedu/address/model/appointment/UniqueAppointmentListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"public class UniqueAppointmentListTest {"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"    @Rule"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":"        UniqueAppointmentList uniquePersonList \u003d new UniqueAppointmentList();"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"        uniquePersonList.asObservableList().remove(0);"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":14,"-":4}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedAppointmentTest.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"wynonaK"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.storage.XmlAdaptedAppointment.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.testutil.TypicalAppointments.ALICE_APP;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Remark;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"public class XmlAdaptedAppointmentTest {"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"    private static final String INVALID_OWNER_NRIC \u003d \"S012345AB\";"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"    private static final String INVALID_PET_PATIENT_NAME \u003d \"L@osai\";"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"    private static final String INVALID_REMARK \u003d \" \";"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"    private static final String INVALID_DATETIME \u003d \"MAAAY 2018 8PM\";"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"    private static final String INVALID_APPOINTMENT_TAG \u003d \"#checkup\";"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"    private static final String VALID_OWNER_NRIC \u003d ALICE_APP.getOwnerNric().toString();"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"    private static final String VALID_PET_PATIENT_NAME \u003d ALICE_APP.getPetPatientName().toString();"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"    private static final String VALID_REMARK \u003d ALICE_APP.getRemark().toString();"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"    private static final String VALID_DATETIME \u003d ALICE_APP.getFormattedLocalDateTime();"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_APPOINTMENT_TAGS \u003d ALICE_APP.getAppointmentTags().stream()"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"            .collect(Collectors.toList());"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"    public void toModelType_validAppointmentDetails_returnsAppointment() throws Exception {"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"        XmlAdaptedAppointment appointment \u003d new XmlAdaptedAppointment(ALICE_APP);"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"        assertEquals(ALICE_APP, appointment.toModelType());"},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"    public void toModelType_invalidOwnerNric_throwsIllegalValueException() {"},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"                new XmlAdaptedAppointment("},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"                        INVALID_OWNER_NRIC,"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"                        VALID_PET_PATIENT_NAME,"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"                        VALID_REMARK,"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"                        VALID_DATETIME,"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":"                        VALID_APPOINTMENT_TAGS);"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d Nric.MESSAGE_NRIC_CONSTRAINTS;"},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"    public void toModelType_nullOwnerNric_throwsIllegalValueException() {"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"                new XmlAdaptedAppointment("},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"                        null,"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"                        VALID_PET_PATIENT_NAME,"},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"                        VALID_REMARK,"},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"                        VALID_DATETIME,"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"                        VALID_APPOINTMENT_TAGS);"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());"},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"    public void toModelType_invalidPetName_throwsIllegalValueException() {"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":"                new XmlAdaptedAppointment("},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"                        VALID_OWNER_NRIC,"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"                        INVALID_PET_PATIENT_NAME,"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"                        VALID_REMARK,"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"                        VALID_DATETIME,"},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"                        VALID_APPOINTMENT_TAGS);"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d PetPatientName.MESSAGE_PET_NAME_CONSTRAINTS;"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"    public void toModelType_nullPetName_throwsIllegalValueException() {"},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"                new XmlAdaptedAppointment("},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"                        VALID_OWNER_NRIC,"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"                        null,"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":"                        VALID_REMARK,"},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":"                        VALID_DATETIME,"},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":"                        VALID_APPOINTMENT_TAGS);"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, PetPatientName.class.getSimpleName());"},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":"    public void toModelType_invalidRemark_throwsIllegalValueException() {"},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":"                new XmlAdaptedAppointment("},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":"                        VALID_OWNER_NRIC,"},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":"                        VALID_PET_PATIENT_NAME,"},{"lineNumber":101,"author":{"gitID":"wynonaK"},"content":"                        INVALID_REMARK,"},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":"                        VALID_DATETIME,"},{"lineNumber":103,"author":{"gitID":"wynonaK"},"content":"                        VALID_APPOINTMENT_TAGS);"},{"lineNumber":104,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d Remark.MESSAGE_REMARK_CONSTRAINTS;"},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":106,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":108,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"wynonaK"},"content":"    public void toModelType_nullRemark_throwsIllegalValueException() {"},{"lineNumber":110,"author":{"gitID":"wynonaK"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":"                new XmlAdaptedAppointment("},{"lineNumber":112,"author":{"gitID":"wynonaK"},"content":"                        VALID_OWNER_NRIC,"},{"lineNumber":113,"author":{"gitID":"wynonaK"},"content":"                        VALID_PET_PATIENT_NAME,"},{"lineNumber":114,"author":{"gitID":"wynonaK"},"content":"                        null,"},{"lineNumber":115,"author":{"gitID":"wynonaK"},"content":"                        VALID_DATETIME,"},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":"                        VALID_APPOINTMENT_TAGS);"},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName());"},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":119,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"wynonaK"},"content":"    public void toModelType_invalidDateTime_throwsIllegalValueException() {"},{"lineNumber":123,"author":{"gitID":"wynonaK"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":124,"author":{"gitID":"wynonaK"},"content":"                new XmlAdaptedAppointment(VALID_OWNER_NRIC,"},{"lineNumber":125,"author":{"gitID":"wynonaK"},"content":"                        VALID_PET_PATIENT_NAME,"},{"lineNumber":126,"author":{"gitID":"wynonaK"},"content":"                        VALID_REMARK,"},{"lineNumber":127,"author":{"gitID":"wynonaK"},"content":"                        INVALID_DATETIME,"},{"lineNumber":128,"author":{"gitID":"wynonaK"},"content":"                        VALID_APPOINTMENT_TAGS);"},{"lineNumber":129,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d \"Please follow the format of yyyy-MM-dd HH:mm\";"},{"lineNumber":130,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":131,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":133,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"wynonaK"},"content":"    public void toModelType_nullDateTime_throwsIllegalValueException() {"},{"lineNumber":135,"author":{"gitID":"wynonaK"},"content":"        XmlAdaptedAppointment appointment \u003d new XmlAdaptedAppointment(VALID_OWNER_NRIC,"},{"lineNumber":136,"author":{"gitID":"wynonaK"},"content":"                VALID_PET_PATIENT_NAME,"},{"lineNumber":137,"author":{"gitID":"wynonaK"},"content":"                VALID_REMARK,"},{"lineNumber":138,"author":{"gitID":"wynonaK"},"content":"                null,"},{"lineNumber":139,"author":{"gitID":"wynonaK"},"content":"                VALID_APPOINTMENT_TAGS);"},{"lineNumber":140,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, LocalDateTime.class.getSimpleName());"},{"lineNumber":141,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":142,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":144,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"wynonaK"},"content":"    public void toModelType_invalidType_throwsIllegalValueException() {"},{"lineNumber":146,"author":{"gitID":"wynonaK"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_APPOINTMENT_TAGS);"},{"lineNumber":147,"author":{"gitID":"wynonaK"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_APPOINTMENT_TAG));"},{"lineNumber":148,"author":{"gitID":"wynonaK"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":149,"author":{"gitID":"wynonaK"},"content":"                new XmlAdaptedAppointment(VALID_OWNER_NRIC,"},{"lineNumber":150,"author":{"gitID":"wynonaK"},"content":"                        VALID_PET_PATIENT_NAME,"},{"lineNumber":151,"author":{"gitID":"wynonaK"},"content":"                        VALID_REMARK,"},{"lineNumber":152,"author":{"gitID":"wynonaK"},"content":"                        VALID_DATETIME,"},{"lineNumber":153,"author":{"gitID":"wynonaK"},"content":"                        invalidTags);"},{"lineNumber":154,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, appointment::toModelType);"},{"lineNumber":155,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":157,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"chialejing":1,"wynonaK":148,"-":8}},{"path":"src/test/java/seedu/address/model/petpatient/PetPatientNameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.model.petpatient;"},{"lineNumber":2,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":3,"author":{"gitID":"chialejing"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"chialejing"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"public class PetPatientNameTest {"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new PetPatientName(null));"},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new PetPatientName(invalidName));"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"    public void isValidName() {"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"        // null name"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e PetPatientName.isValidName(null));"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"        // invalid name"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"        assertFalse(PetPatientName.isValidName(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"        assertFalse(PetPatientName.isValidName(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"        assertFalse(PetPatientName.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"        assertFalse(PetPatientName.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"        // valid name"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"        assertTrue(PetPatientName.isValidName(\"joker the second\")); // alphabets only"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"        assertTrue(PetPatientName.isValidName(\"12345\")); // numbers only"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"        assertTrue(PetPatientName.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"        assertTrue(PetPatientName.isValidName(\"Aye Captain\")); // with capital letters"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"        assertTrue(PetPatientName.isValidName(\"Aye Captain Howdy There Jr 2nd\")); // long names"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":36,"-":5}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.testutil.TypicalAppointments.ALICE_APP;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"        assertEquals(Collections.emptyList(), addressBook.getAppointmentList());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"        List\u003cAppointment\u003e newAppointments \u003d Arrays.asList(ALICE_APP);"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"        List\u003cTag\u003e newAppointmentTags \u003d new ArrayList\u003c\u003e(ALICE_APP.getAppointmentTags());"},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags, newAppointments, newAppointmentTags);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"    // Reused from https://github.com/se-edu/addressbook-level4/pull/790/files with minor modifications"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"    public void removeUnusedTag_addressBookUnchanged() throws Exception {"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"        AddressBook addressBookAmyBob \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"        addressBookAmyBob.removeTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":"        AddressBook addressBookExpected \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"        //should be equal as unused tag removed"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"        assertEquals(addressBookExpected, addressBookAmyBob);"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":"    // Reused from https://github.com/se-edu/addressbook-level4/pull/790/files with minor modifications"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":"    public void removeTag_multiplePersons_addressBookChanged() throws Exception {"},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"        AddressBook addressBookAmyBob \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":"        addressBookAmyBob.removeTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":"        AddressBook addressBookAfterChange \u003d"},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":"                new AddressBookBuilder().withPerson(amyWithoutFriendTag).withPerson(bobWithoutFriendTag).build();"},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":101,"author":{"gitID":"wynonaK"},"content":"        assertEquals(addressBookAfterChange, addressBookAmyBob);"},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":"        private final ObservableList\u003cAppointment\u003e appointments \u003d FXCollections.observableArrayList();"},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":"        private final ObservableList\u003cTag\u003e appointmentTags \u003d FXCollections.observableArrayList();"},{"lineNumber":118,"author":{"gitID":"chialejing"},"content":"        private final ObservableList\u003cPetPatient\u003e petPatients \u003d FXCollections.observableArrayList();"},{"lineNumber":119,"author":{"gitID":"chialejing"},"content":"        private final ObservableList\u003cTag\u003e petPatientTags \u003d FXCollections.observableArrayList();"},{"lineNumber":120,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags,"},{"lineNumber":122,"author":{"gitID":"wynonaK"},"content":"                        Collection\u003cAppointment\u003e appointments, Collection\u003c? extends Tag\u003e appointmentTags) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":125,"author":{"gitID":"wynonaK"},"content":"            this.appointments.setAll(appointments);"},{"lineNumber":126,"author":{"gitID":"wynonaK"},"content":"            this.appointmentTags.setAll(appointmentTags);"},{"lineNumber":127,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":139,"author":{"gitID":"wynonaK"},"content":"        @Override"},{"lineNumber":140,"author":{"gitID":"wynonaK"},"content":"        public ObservableList\u003cAppointment\u003e getAppointmentList() {"},{"lineNumber":141,"author":{"gitID":"wynonaK"},"content":"            return appointments;"},{"lineNumber":142,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":144,"author":{"gitID":"chialejing"},"content":"        @Override"},{"lineNumber":145,"author":{"gitID":"chialejing"},"content":"        public ObservableList\u003cPetPatient\u003e getPetPatientList() {"},{"lineNumber":146,"author":{"gitID":"chialejing"},"content":"            return petPatients;"},{"lineNumber":147,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":7,"wynonaK":52,"-":91}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"import java.util.function.Predicate;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"    public void getFilteredPetPatientList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":"        modelManager.getFilteredPetPatientList().remove(0);"},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"    public void getFilteredAppointmentList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"        modelManager.getFilteredAppointmentList().remove(0);"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"    // Reused from https://github.com/se-edu/addressbook-level4/pull/790/files with minor modifications"},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"    public void deleteUnusedTag_modelUnchanged() throws Exception {"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"        //unused tag removed, should remain the same"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"    // Reused from https://github.com/se-edu/addressbook-level4/pull/790/files with minor modifications"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":"    public void deleteTag_multiplePersons_modelChanged() throws Exception {"},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"        AddressBook addressBookAfterChange \u003d"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"                new AddressBookBuilder().withPerson(amyWithoutFriendTag).withPerson(bobWithoutFriendTag).build();"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"        ModelManager modelManagerAfterChange \u003d new ModelManager(addressBookAfterChange, userPrefs);"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"        assertTrue(modelManager.equals(modelManagerAfterChange));"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":109,"author":{"gitID":"wynonaK"},"content":"        Predicate\u003cPerson\u003e namePredicate \u003d  person -\u003e Arrays.stream(keywords)"},{"lineNumber":110,"author":{"gitID":"wynonaK"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":"        modelManager.updateFilteredPersonList(namePredicate);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":45,"-":77}},{"path":"src/test/java/seedu/address/testutil/TypicalAppointments.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"public class TypicalAppointments {"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"    public static final Appointment ALICE_APP \u003d new AppointmentBuilder()"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"            .withOwnerNric(TypicalPersons.ALICE.getNric().toString())"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"            .withPetPatientName(TypicalPetPatients.JEWEL.getName().toString())"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"            .withRemark(\"Requires Home Visit\")"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"            .withDateTime(\"2018-05-28 12:30\")"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"            .withAppointmentTags(\"checkup\").build();"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"    public static final Appointment BENSON_APP \u003d new AppointmentBuilder()"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"            .withOwnerNric(TypicalPersons.BENSON.getNric().toString())"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"            .withPetPatientName(TypicalPetPatients.JOKER.getName().toString())"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"            .withRemark(\"May require isolation\")"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"            .withDateTime(\"2018-04-22 14:30\")"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"            .withAppointmentTags(\"vaccination\").build();"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"    private TypicalAppointments() {} // prevents instantiation"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"    public static List\u003cAppointment\u003e getTypicalAppointments() {"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE_APP, BENSON_APP));"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":29,"-":4}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicateNricException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\").withNric(\"G1111111B\")"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .withNric(\"S0123456Q\")"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withNric(\"F2345678U\").build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withNric(\"T0123456L\").build();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withNric(\"T0120956W\").build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withNric(\"S0156956W\").build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withNric(\"F0184556R\").build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withNric(\"G0380956E\").build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withNric(\"G0508956T\").build();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            .withNric(VALID_NRIC_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            .withNric(VALID_NRIC_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            } catch (DuplicateNricException e) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"Cannot have duplicate NRIC\");"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"    public static List\u003cPerson\u003e getTypicalPersonsForDelete() {"},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BOB));"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":4,"-":88}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPetPatientTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"chialejing"},"content":"import static seedu.address.storage.XmlAdaptedPetPatient.MISSING_BLOODTYPE_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"chialejing"},"content":"import static seedu.address.storage.XmlAdaptedPetPatient.MISSING_BREED_FIELD_MESSAGE_FORMAT;"},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":"import static seedu.address.storage.XmlAdaptedPetPatient.MISSING_COLOUR_FIELD_MESSAGE_FORMAT;"},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":"import static seedu.address.storage.XmlAdaptedPetPatient.MISSING_NAME_FIELD_MESSAGE_FORMAT;"},{"lineNumber":8,"author":{"gitID":"chialejing"},"content":"import static seedu.address.storage.XmlAdaptedPetPatient.MISSING_OWNER_FIELD_MESSAGE_FORMAT;"},{"lineNumber":9,"author":{"gitID":"chialejing"},"content":"import static seedu.address.storage.XmlAdaptedPetPatient.MISSING_SPECIES_FIELD_MESSAGE_FORMAT;"},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":"import static seedu.address.testutil.TypicalPetPatients.JEWEL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":"public class XmlAdaptedPetPatientTest {"},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"    private static final String INVALID_NAME \u003d \"H@zel\";"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"    private static final String EMPTY_FIELD \u003d \"\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"    private static final String VALID_NAME \u003d JEWEL.getName().toString();"},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"    private static final String VALID_SPECIES \u003d JEWEL.getSpecies();"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"    private static final String VALID_BREED \u003d JEWEL.getBreed();"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"    private static final String VALID_COLOUR \u003d JEWEL.getColour();"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"    private static final String VALID_BLOODTYPE \u003d JEWEL.getBloodType();"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"    private static final String VALID_OWNER \u003d JEWEL.getOwner().toString();"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d JEWEL.getTags().stream()"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"    public void toModelType_validPetPatientDetails_returnsPetPatient() throws Exception {"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"        XmlAdaptedPetPatient petPatient \u003d new XmlAdaptedPetPatient(JEWEL);"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"        assertEquals(JEWEL, petPatient.toModelType());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"        XmlAdaptedPetPatient petPatient \u003d new XmlAdaptedPetPatient("},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"                INVALID_NAME,"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":"                VALID_SPECIES,"},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"                VALID_BREED,"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"                VALID_COLOUR,"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"                VALID_BLOODTYPE,"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"                VALID_OWNER,"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":"                VALID_TAGS"},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":"        String expectedMessage \u003d PetPatientName.MESSAGE_PET_NAME_CONSTRAINTS;"},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, petPatient::toModelType);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":"        XmlAdaptedPetPatient petPatient \u003d new XmlAdaptedPetPatient("},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":"                null,"},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":"                VALID_SPECIES,"},{"lineNumber":63,"author":{"gitID":"chialejing"},"content":"                VALID_BREED,"},{"lineNumber":64,"author":{"gitID":"chialejing"},"content":"                VALID_COLOUR,"},{"lineNumber":65,"author":{"gitID":"chialejing"},"content":"                VALID_BLOODTYPE,"},{"lineNumber":66,"author":{"gitID":"chialejing"},"content":"                VALID_OWNER,"},{"lineNumber":67,"author":{"gitID":"chialejing"},"content":"                VALID_TAGS"},{"lineNumber":68,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":69,"author":{"gitID":"chialejing"},"content":"        String expectedMessage \u003d String.format("},{"lineNumber":70,"author":{"gitID":"chialejing"},"content":"                MISSING_NAME_FIELD_MESSAGE_FORMAT,"},{"lineNumber":71,"author":{"gitID":"chialejing"},"content":"                PetPatientName.class.getSimpleName()"},{"lineNumber":72,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":73,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, petPatient::toModelType);"},{"lineNumber":74,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":76,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"chialejing"},"content":"    public void toModelType_nullSpecies_throwsIllegalValueException() {"},{"lineNumber":78,"author":{"gitID":"chialejing"},"content":"        XmlAdaptedPetPatient petPatient \u003d new XmlAdaptedPetPatient("},{"lineNumber":79,"author":{"gitID":"chialejing"},"content":"                VALID_NAME,"},{"lineNumber":80,"author":{"gitID":"chialejing"},"content":"                null,"},{"lineNumber":81,"author":{"gitID":"chialejing"},"content":"                VALID_BREED,"},{"lineNumber":82,"author":{"gitID":"chialejing"},"content":"                VALID_COLOUR,"},{"lineNumber":83,"author":{"gitID":"chialejing"},"content":"                VALID_BLOODTYPE,"},{"lineNumber":84,"author":{"gitID":"chialejing"},"content":"                VALID_OWNER,"},{"lineNumber":85,"author":{"gitID":"chialejing"},"content":"                VALID_TAGS"},{"lineNumber":86,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":87,"author":{"gitID":"chialejing"},"content":"        String expectedMessage \u003d String.format("},{"lineNumber":88,"author":{"gitID":"chialejing"},"content":"                MISSING_SPECIES_FIELD_MESSAGE_FORMAT,"},{"lineNumber":89,"author":{"gitID":"chialejing"},"content":"                PetPatientName.class.getSimpleName()"},{"lineNumber":90,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":91,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, petPatient::toModelType);"},{"lineNumber":92,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":94,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"chialejing"},"content":"    public void toModelType_nullBreed_throwsIllegalValueException() {"},{"lineNumber":96,"author":{"gitID":"chialejing"},"content":"        XmlAdaptedPetPatient petPatient \u003d new XmlAdaptedPetPatient("},{"lineNumber":97,"author":{"gitID":"chialejing"},"content":"                VALID_NAME,"},{"lineNumber":98,"author":{"gitID":"chialejing"},"content":"                VALID_SPECIES,"},{"lineNumber":99,"author":{"gitID":"chialejing"},"content":"                null,"},{"lineNumber":100,"author":{"gitID":"chialejing"},"content":"                VALID_COLOUR,"},{"lineNumber":101,"author":{"gitID":"chialejing"},"content":"                VALID_BLOODTYPE,"},{"lineNumber":102,"author":{"gitID":"chialejing"},"content":"                VALID_OWNER,"},{"lineNumber":103,"author":{"gitID":"chialejing"},"content":"                VALID_TAGS"},{"lineNumber":104,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":105,"author":{"gitID":"chialejing"},"content":"        String expectedMessage \u003d String.format("},{"lineNumber":106,"author":{"gitID":"chialejing"},"content":"                MISSING_BREED_FIELD_MESSAGE_FORMAT,"},{"lineNumber":107,"author":{"gitID":"chialejing"},"content":"                PetPatientName.class.getSimpleName()"},{"lineNumber":108,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":109,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, petPatient::toModelType);"},{"lineNumber":110,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":112,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"chialejing"},"content":"    public void toModelType_nullColour_throwsIllegalValueException() {"},{"lineNumber":114,"author":{"gitID":"chialejing"},"content":"        XmlAdaptedPetPatient petPatient \u003d new XmlAdaptedPetPatient("},{"lineNumber":115,"author":{"gitID":"chialejing"},"content":"                VALID_NAME,"},{"lineNumber":116,"author":{"gitID":"chialejing"},"content":"                VALID_SPECIES,"},{"lineNumber":117,"author":{"gitID":"chialejing"},"content":"                VALID_BREED,"},{"lineNumber":118,"author":{"gitID":"chialejing"},"content":"                null,"},{"lineNumber":119,"author":{"gitID":"chialejing"},"content":"                VALID_BLOODTYPE,"},{"lineNumber":120,"author":{"gitID":"chialejing"},"content":"                VALID_OWNER,"},{"lineNumber":121,"author":{"gitID":"chialejing"},"content":"                VALID_TAGS"},{"lineNumber":122,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":123,"author":{"gitID":"chialejing"},"content":"        String expectedMessage \u003d String.format("},{"lineNumber":124,"author":{"gitID":"chialejing"},"content":"                MISSING_COLOUR_FIELD_MESSAGE_FORMAT,"},{"lineNumber":125,"author":{"gitID":"chialejing"},"content":"                PetPatientName.class.getSimpleName()"},{"lineNumber":126,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":127,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, petPatient::toModelType);"},{"lineNumber":128,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":130,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"chialejing"},"content":"    public void toModelType_nullBloodType_throwsIllegalValueException() {"},{"lineNumber":132,"author":{"gitID":"chialejing"},"content":"        XmlAdaptedPetPatient petPatient \u003d new XmlAdaptedPetPatient("},{"lineNumber":133,"author":{"gitID":"chialejing"},"content":"                VALID_NAME,"},{"lineNumber":134,"author":{"gitID":"chialejing"},"content":"                VALID_SPECIES,"},{"lineNumber":135,"author":{"gitID":"chialejing"},"content":"                VALID_BREED,"},{"lineNumber":136,"author":{"gitID":"chialejing"},"content":"                VALID_COLOUR,"},{"lineNumber":137,"author":{"gitID":"chialejing"},"content":"                null,"},{"lineNumber":138,"author":{"gitID":"chialejing"},"content":"                VALID_OWNER,"},{"lineNumber":139,"author":{"gitID":"chialejing"},"content":"                VALID_TAGS"},{"lineNumber":140,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":141,"author":{"gitID":"chialejing"},"content":"        String expectedMessage \u003d String.format("},{"lineNumber":142,"author":{"gitID":"chialejing"},"content":"                MISSING_BLOODTYPE_FIELD_MESSAGE_FORMAT,"},{"lineNumber":143,"author":{"gitID":"chialejing"},"content":"                PetPatientName.class.getSimpleName()"},{"lineNumber":144,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":145,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, petPatient::toModelType);"},{"lineNumber":146,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":148,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":149,"author":{"gitID":"chialejing"},"content":"    public void toModelType_nullOwner_throwsIllegalValueException() {"},{"lineNumber":150,"author":{"gitID":"chialejing"},"content":"        XmlAdaptedPetPatient petPatient \u003d new XmlAdaptedPetPatient("},{"lineNumber":151,"author":{"gitID":"chialejing"},"content":"                VALID_NAME,"},{"lineNumber":152,"author":{"gitID":"chialejing"},"content":"                VALID_SPECIES,"},{"lineNumber":153,"author":{"gitID":"chialejing"},"content":"                VALID_BREED,"},{"lineNumber":154,"author":{"gitID":"chialejing"},"content":"                VALID_COLOUR,"},{"lineNumber":155,"author":{"gitID":"chialejing"},"content":"                VALID_BLOODTYPE,"},{"lineNumber":156,"author":{"gitID":"chialejing"},"content":"                null,"},{"lineNumber":157,"author":{"gitID":"chialejing"},"content":"                VALID_TAGS"},{"lineNumber":158,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":159,"author":{"gitID":"chialejing"},"content":"        String expectedMessage \u003d String.format("},{"lineNumber":160,"author":{"gitID":"chialejing"},"content":"                MISSING_OWNER_FIELD_MESSAGE_FORMAT,"},{"lineNumber":161,"author":{"gitID":"chialejing"},"content":"                PetPatientName.class.getSimpleName()"},{"lineNumber":162,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":163,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, petPatient::toModelType);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":170,"author":{"gitID":"chialejing"},"content":"        XmlAdaptedPetPatient petPatient \u003d new XmlAdaptedPetPatient("},{"lineNumber":171,"author":{"gitID":"chialejing"},"content":"                VALID_NAME,"},{"lineNumber":172,"author":{"gitID":"chialejing"},"content":"                VALID_SPECIES,"},{"lineNumber":173,"author":{"gitID":"chialejing"},"content":"                VALID_BREED,"},{"lineNumber":174,"author":{"gitID":"chialejing"},"content":"                VALID_COLOUR,"},{"lineNumber":175,"author":{"gitID":"chialejing"},"content":"                VALID_BLOODTYPE,"},{"lineNumber":176,"author":{"gitID":"chialejing"},"content":"                VALID_OWNER,"},{"lineNumber":177,"author":{"gitID":"chialejing"},"content":"                invalidTags"},{"lineNumber":178,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":179,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalValueException.class, petPatient::toModelType);"},{"lineNumber":180,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":150,"-":31}},{"path":"src/test/java/seedu/address/testutil/AppointmentUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":" * A utility class for Appointment."},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"public class AppointmentUtil {"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"     * Returns the part of command string for the given {@code appointment}\u0027s details."},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"    public static String getAppointmentDetails(Appointment appointment) {"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"        sb.append(PREFIX_NRIC + appointment.getOwnerNric().toString() + \" \");"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"        sb.append(PREFIX_NAME + appointment.getPetPatientName().toString() + \" \");"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"        sb.append(PREFIX_REMARK + appointment.getRemark().value + \" \");"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"        sb.append(PREFIX_DATE + appointment.getFormattedLocalDateTime() + \" \");"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"        appointment.getAppointmentTags().stream().forEach("},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"        );"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"        return sb.toString();"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":29,"-":1}},{"path":"src/test/java/seedu/address/testutil/TypicalPetPatients.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_NERO;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BREED_NERO;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOUR_NERO;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_NERO;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIES_NERO;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":" * A utility class containing a list of {@code PetPatient} objects to be used in tests."},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"public class TypicalPetPatients {"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"    // Pet patient with tags"},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":"    public static final PetPatient JEWEL \u003d new PetPatientBuilder()"},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"            .withName(\"Jewel\")"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"            .withSpecies(\"Cat\")"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"            .withBreed(\"Persian Ragdoll\")"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"            .withColour(\"Calico\")"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"            .withBloodType(\"AB\")"},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"            .withOwnerNric(TypicalPersons.ALICE.getNric().toString())"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"            .withTags(\"Depression\", \"Test\").build();"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"    // Pet patient with no tags"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"    public static final PetPatient JOKER \u003d new PetPatientBuilder()"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"            .withName(\"Joker\")"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"            .withSpecies(\"Cat\")"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"            .withBreed(\"Domestic Shorthair\")"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"            .withColour(\"Brown and White\")"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"            .withBloodType(\"O\")"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"            .withOwnerNric(TypicalPersons.BENSON.getNric().toString())"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"            .withTags(new String[]{}).build();"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"    // Manually added"},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":"    public static final PetPatient KARUPIN \u003d new PetPatientBuilder()"},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":"            .withName(\"Karupin\")"},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"            .withSpecies(\"Cat\")"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"            .withBreed(\"Himalayan\")"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"            .withColour(\"Sealpoint\")"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":"            .withBloodType(\"AB\")"},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"            .withOwnerNric(TypicalPersons.HOON.getNric().toString())"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"            .withTags(new String[]{}).build();"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"    // Manually added - Pet Patient\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":"    public static final PetPatient NERO \u003d new PetPatientBuilder()"},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"            .withName(VALID_NAME_NERO)"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":"            .withSpecies(VALID_SPECIES_NERO)"},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"            .withBreed(VALID_BREED_NERO)"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":"            .withColour(VALID_COLOUR_NERO)"},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"            .withBloodType(VALID_BLOODTYPE_NERO)"},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":"            .withOwnerNric(VALID_NRIC_BOB)"},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"            .withTags(new String[]{}).build();"},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":"    private TypicalPetPatients() {}"},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":63,"author":{"gitID":"chialejing"},"content":"    public static List\u003cPetPatient\u003e getTypicalPetPatients() {"},{"lineNumber":64,"author":{"gitID":"chialejing"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(JOKER, JEWEL));"},{"lineNumber":65,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":52,"-":14}},{"path":"src/test/java/seedu/address/testutil/PetPatientBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":8,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":9,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":" * A utility class to help with building PetPatient objects."},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"public class PetPatientBuilder {"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"    public static final String DEFAULT_NAME \u003d \"Joseph\";"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"    public static final String DEFAULT_SPECIES \u003d \"Cat\";"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"    public static final String DEFAULT_BREED \u003d \"Persian Ragdoll\";"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"    public static final String DEFAULT_COLOUR \u003d \"Brown\";"},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":"    public static final String DEFAULT_BLOODTYPE \u003d \"AB\";"},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"    public static final String DEFAULT_OWNER \u003d \"G1234567B\";"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"    public static final String DEFAULT_TAGS \u003d \"Injured\";"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"    private PetPatientName name;"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"    private String species;"},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"    private String breed;"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"    private String colour;"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"    private String bloodType;"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"    private Nric ownerNric;"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"    public PetPatientBuilder() {"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"        name \u003d new PetPatientName(DEFAULT_NAME);"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"        species \u003d DEFAULT_SPECIES;"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"        breed \u003d DEFAULT_BREED;"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"        colour \u003d DEFAULT_COLOUR;"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"        bloodType \u003d DEFAULT_BLOODTYPE;"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"        ownerNric \u003d new Nric(DEFAULT_OWNER);"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"     * Initializes the PetPatientBuilder with the data of {@code petPatientToCopy}."},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":"    public PetPatientBuilder(PetPatient petPatientToCopy) {"},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"        name \u003d petPatientToCopy.getName();"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"        species \u003d petPatientToCopy.getSpecies();"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"        breed \u003d petPatientToCopy.getBreed();"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"        colour \u003d petPatientToCopy.getColour();"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":"        bloodType \u003d petPatientToCopy.getBloodType();"},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"        ownerNric \u003d petPatientToCopy.getOwner();"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":"        tags \u003d new HashSet\u003c\u003e(petPatientToCopy.getTags());"},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":"     * Sets the {@code PetPatientName} of the {@code PetPatient} that we are building."},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":"    public PetPatientBuilder withName(String name) {"},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":"        this.name \u003d new PetPatientName(name);"},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":"        return this;"},{"lineNumber":63,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":65,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"chialejing"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code PetPatient} that we are building."},{"lineNumber":67,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"chialejing"},"content":"    public PetPatientBuilder withTags(String ... tags) {"},{"lineNumber":69,"author":{"gitID":"chialejing"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":70,"author":{"gitID":"chialejing"},"content":"        return this;"},{"lineNumber":71,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":73,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"chialejing"},"content":"     * Sets the species of the {@code PetPatient} that we are building."},{"lineNumber":75,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"chialejing"},"content":"    public PetPatientBuilder withSpecies(String species) {"},{"lineNumber":77,"author":{"gitID":"chialejing"},"content":"        this.species \u003d species;"},{"lineNumber":78,"author":{"gitID":"chialejing"},"content":"        return this;"},{"lineNumber":79,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":81,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"chialejing"},"content":"     * Sets the breed of the {@code PetPatient} that we are building."},{"lineNumber":83,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"chialejing"},"content":"    public PetPatientBuilder withBreed(String breed) {"},{"lineNumber":85,"author":{"gitID":"chialejing"},"content":"        this.breed \u003d breed;"},{"lineNumber":86,"author":{"gitID":"chialejing"},"content":"        return this;"},{"lineNumber":87,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":89,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"chialejing"},"content":"     * Sets the colour of the {@code PetPatient} that we are building."},{"lineNumber":91,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"chialejing"},"content":"    public PetPatientBuilder withColour(String colour) {"},{"lineNumber":93,"author":{"gitID":"chialejing"},"content":"        this.colour \u003d colour;"},{"lineNumber":94,"author":{"gitID":"chialejing"},"content":"        return this;"},{"lineNumber":95,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":97,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"chialejing"},"content":"     * Sets the blood type of the {@code PetPatient} that we are building."},{"lineNumber":99,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"chialejing"},"content":"    public PetPatientBuilder withBloodType(String bloodType) {"},{"lineNumber":101,"author":{"gitID":"chialejing"},"content":"        this.bloodType \u003d bloodType;"},{"lineNumber":102,"author":{"gitID":"chialejing"},"content":"        return this;"},{"lineNumber":103,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":105,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"chialejing"},"content":"     * Sets the {@code Nric} of the {@code PetPatient} that we are building."},{"lineNumber":107,"author":{"gitID":"chialejing"},"content":"     * @param nric"},{"lineNumber":108,"author":{"gitID":"chialejing"},"content":"     * @return"},{"lineNumber":109,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"chialejing"},"content":"    public PetPatientBuilder withOwnerNric(String nric) {"},{"lineNumber":111,"author":{"gitID":"chialejing"},"content":"        this.ownerNric \u003d new Nric(nric);"},{"lineNumber":112,"author":{"gitID":"chialejing"},"content":"        return this;"},{"lineNumber":113,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":115,"author":{"gitID":"chialejing"},"content":"    public PetPatient build() {"},{"lineNumber":116,"author":{"gitID":"chialejing"},"content":"        return new PetPatient(name, species, breed, colour, bloodType, ownerNric, tags);"},{"lineNumber":117,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":119,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":113,"-":6}},{"path":"src/test/java/seedu/address/testutil/AppointmentBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"wynonaK"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Remark;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":" * A utility class to help with building Appointment Objects."},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"public class AppointmentBuilder {"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"    public static final String DEFAULT_OWNER_NRIC \u003d \"S1012341B\";"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"    public static final String DEFAULT_PET_PATIENT_NAME \u003d \"Joker\";"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"    public static final String DEFAULT_REMARK \u003d \"Requires home visit\";"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"    public static final String DEFAULT_DATE \u003d \"2018-12-31 12:30\";"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"    public static final String DEFAULT_APPOINTMENT_TAG \u003d \"surgery\";"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"    private Nric ownerNric;"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"    private PetPatientName petPatientName;"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"    private Remark remark;"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"    private LocalDateTime localDateTime;"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"    private Set\u003cTag\u003e appointmentTags;"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"    public AppointmentBuilder() {"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"        ownerNric \u003d new Nric(DEFAULT_OWNER_NRIC);"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"        petPatientName \u003d new PetPatientName(DEFAULT_PET_PATIENT_NAME);"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"        remark \u003d new Remark(DEFAULT_REMARK);"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"        localDateTime \u003d LocalDateTime.parse(DEFAULT_DATE, formatter);"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"        appointmentTags \u003d SampleDataUtil.getTagSet(DEFAULT_APPOINTMENT_TAG);"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":"     * Initializes the AppointmentBuilder with the data of {@code appointmentToCopy}."},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"    public AppointmentBuilder(Appointment appointmentToCopy) {"},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"        ownerNric \u003d appointmentToCopy.getOwnerNric();"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"        petPatientName \u003d appointmentToCopy.getPetPatientName();"},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"        remark \u003d appointmentToCopy.getRemark();"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"        localDateTime \u003d appointmentToCopy.getDateTime();"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"        appointmentTags \u003d new HashSet\u003c\u003e(appointmentToCopy.getAppointmentTags());"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":"     * Sets the {@code Nric} of the person of the {@code Appointment} that we are building."},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"    public AppointmentBuilder withOwnerNric(String ownerNric) {"},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"        this.ownerNric \u003d new Nric(ownerNric);"},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"        return this;"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"     * Sets the {@code PetPatientName} of the pet of the {@code Appointment} that we are building."},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"    public AppointmentBuilder withPetPatientName(String petPatientName) {"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"        this.petPatientName \u003d new PetPatientName(petPatientName);"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"     * Parses the {@code appointmentTags} into a {@code Set\u003cTag\u003e}"},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"     * and set it to the {@code Appointment} that we are building."},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":"    public AppointmentBuilder withAppointmentTags(String ... appointmentTags) {"},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"        this.appointmentTags \u003d SampleDataUtil.getTagSet(appointmentTags);"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"        return this;"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"     * Sets the {@code Remark} of the {@code Appointment} that we are building."},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"    public AppointmentBuilder withRemark(String remark) {"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"        this.remark \u003d new Remark(remark);"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"        return this;"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"     * Sets the {@code DateTime} of the {@code Appointment} that we are building."},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":"    public AppointmentBuilder withDateTime(String stringDateTime) {"},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(stringDateTime, formatter);"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":"        this.localDateTime \u003d dateTime;"},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":"        return this;"},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":"    public Appointment build() {"},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":"        return new Appointment(ownerNric, petPatientName, remark, localDateTime, appointmentTags);"},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"chialejing":1,"wynonaK":93,"-":4}},{"path":"src/test/java/guitests/guihandles/CommandBoxHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * A handle to the {@code CommandBox} in the GUI."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class CommandBoxHandle extends NodeHandle\u003cTextField\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_INPUT_FIELD_ID \u003d \"#commandTextField\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public CommandBoxHandle(TextField commandBoxNode) {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        super(commandBoxNode);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns the text in the command box."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public String getInput() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return getRootNode().getText();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Enters the given command in the Command Box and presses enter."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @return true if the command succeeded, false otherwise."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public boolean run(String command) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        click();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e getRootNode().setText(command));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        guiRobot.type(KeyCode.ENTER);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return !getStyleClass().contains(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Returns the list of style classes present in the command box."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public ObservableList\u003cString\u003e getStyleClass() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return getRootNode().getStyleClass();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"Aquarinte"},"content":"    //@@author aquarinte"},{"lineNumber":48,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"Aquarinte"},"content":"     * Type text into the command box and set caret at the end of text."},{"lineNumber":50,"author":{"gitID":"Aquarinte"},"content":"     * Overwrite previous input."},{"lineNumber":51,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"Aquarinte"},"content":"    public void setText(String input) {"},{"lineNumber":53,"author":{"gitID":"Aquarinte"},"content":"        guiRobot.interact(() -\u003e getRootNode().setText(input));"},{"lineNumber":54,"author":{"gitID":"Aquarinte"},"content":"        guiRobot.interact(() -\u003e getRootNode().positionCaret(getInput().length()));"},{"lineNumber":55,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":57,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"Aquarinte"},"content":"     * Insert text into command box."},{"lineNumber":59,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"Aquarinte"},"content":"    public void insertText(String input) {"},{"lineNumber":61,"author":{"gitID":"Aquarinte"},"content":"        int caretPos \u003d getRootNode().getCaretPosition();"},{"lineNumber":62,"author":{"gitID":"Aquarinte"},"content":"        guiRobot.interact(() -\u003e getRootNode().insertText(caretPos, input));"},{"lineNumber":63,"author":{"gitID":"Aquarinte"},"content":"        guiRobot.interact(() -\u003e getRootNode().positionCaret(getInput().length()));"},{"lineNumber":64,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":66,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"Aquarinte"},"content":"     * Remove change listener for autocomplete,"},{"lineNumber":68,"author":{"gitID":"Aquarinte"},"content":"     * so that it will not interfere with JUnit System Tests."},{"lineNumber":69,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"Aquarinte"},"content":"    public void disableAutocomplete() {"},{"lineNumber":71,"author":{"gitID":"Aquarinte"},"content":"        getRootNode().textProperty().removeListener(CommandBox.getAutocompleteListener());"},{"lineNumber":72,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":27,"-":46}},{"path":"src/test/java/seedu/address/testutil/PetPatientUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_OWNER;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_PET;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BREED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOUR;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIES;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"Aquarinte"},"content":"//@@author aquarinte"},{"lineNumber":18,"author":{"gitID":"Aquarinte"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"Aquarinte"},"content":" * A utility class for Pet Patient."},{"lineNumber":20,"author":{"gitID":"Aquarinte"},"content":" */"},{"lineNumber":21,"author":{"gitID":"Aquarinte"},"content":"public class PetPatientUtil {"},{"lineNumber":22,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"Aquarinte"},"content":"     * Returns an add command string for adding the {@code petpatient}."},{"lineNumber":24,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"Aquarinte"},"content":"    public static String getAddCommand(PetPatient petPatient, Nric ownerNric) {"},{"lineNumber":26,"author":{"gitID":"Aquarinte"},"content":"        return AddCommand.COMMAND_WORD + OPTION_PET + \" \" + getPetPatientDetails(petPatient)"},{"lineNumber":27,"author":{"gitID":"Aquarinte"},"content":"                + OPTION_OWNER + \" \" + PREFIX_NRIC + ownerNric.toString();"},{"lineNumber":28,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":30,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"Aquarinte"},"content":"     * Returns an add command string for adding the {@code petpatient}."},{"lineNumber":32,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"Aquarinte"},"content":"    public static String getAddCommandAlias(PetPatient petPatient, Nric ownerNric) {"},{"lineNumber":34,"author":{"gitID":"Aquarinte"},"content":"        return AddCommand.COMMAND_ALIAS + \" \" + OPTION_PET + \" \" + getPetPatientDetails(petPatient)"},{"lineNumber":35,"author":{"gitID":"Aquarinte"},"content":"                + \" \" + OPTION_OWNER + \" \" + PREFIX_NRIC + ownerNric.toString();"},{"lineNumber":36,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":38,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"Aquarinte"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":40,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"Aquarinte"},"content":"    public static String getPetPatientDetails(PetPatient petPatient) {"},{"lineNumber":42,"author":{"gitID":"Aquarinte"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":43,"author":{"gitID":"Aquarinte"},"content":"        sb.append(PREFIX_NAME + petPatient.getName().fullName + \" \");"},{"lineNumber":44,"author":{"gitID":"Aquarinte"},"content":"        sb.append(PREFIX_SPECIES + petPatient.getSpecies() + \" \");"},{"lineNumber":45,"author":{"gitID":"Aquarinte"},"content":"        sb.append(PREFIX_BREED + petPatient.getBreed() + \" \");"},{"lineNumber":46,"author":{"gitID":"Aquarinte"},"content":"        sb.append(PREFIX_COLOUR + petPatient.getColour() + \" \");"},{"lineNumber":47,"author":{"gitID":"Aquarinte"},"content":"        sb.append(PREFIX_BLOODTYPE + petPatient.getBloodType() + \" \");"},{"lineNumber":48,"author":{"gitID":"Aquarinte"},"content":"        petPatient.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"},{"lineNumber":49,"author":{"gitID":"Aquarinte"},"content":"        return sb.toString();"},{"lineNumber":50,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":35,"chialejing":2,"-":14}},{"path":"src/main/java/seedu/address/ui/PetPatientListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PetPatientPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"content":"//@@author Robert-Peng"},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Panel containing list of PetPatients"},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class PetPatientListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PetPatientListPanel.fxml\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PetPatientListPanel.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private ListView\u003cPetPatientCard\u003e petPatientListView;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public PetPatientListPanel(ObservableList\u003cPetPatient\u003e petPatientList) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        setConnections(petPatientList);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private void setConnections(ObservableList\u003cPetPatient\u003e petPatientList) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        ObservableList\u003cPetPatientCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":39,"author":{"gitID":"-"},"content":"            petPatientList, (petPatient) -\u003e new PetPatientCard(petPatient, petPatientList.indexOf(petPatient) + 1));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        petPatientListView.setItems(mappedList);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        petPatientListView.setCellFactory(listView -\u003e new PetPatientListViewCell());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        petPatientListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                if (newValue !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                    logger.fine(\"Selection in petPatient list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    raise(new PetPatientPanelSelectionChangedEvent(newValue));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            });"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Scrolls to the {@code PetPatientCard} at the {@code index} and selects it."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            petPatientListView.scrollTo(index);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            petPatientListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PetPatientCard}."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    class PetPatientListViewCell extends ListCell\u003cPetPatientCard\u003e {"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        protected void updateItem(PetPatientCard petPatient, boolean empty) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            super.updateItem(petPatient, empty);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"            if (empty || petPatient \u003d\u003d null) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                setGraphic(null);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                setText(null);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                setGraphic(petPatient.getRoot());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"chialejing":1,"-":87}},{"path":"src/test/java/seedu/address/testutil/TypicalAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateDateTimeException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicateNricException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.exceptions.DuplicatePetPatientException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A utility class that contains an {@code AddressBook} object to be used in tests."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class TypicalAddressBook {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons, typical pet patients and typical appointments."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        for (Person person : TypicalPersons.getTypicalPersons()) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible.\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            } catch (DuplicateNricException e) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"Cannot have duplicate NRIC.\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        for (PetPatient petPatient : TypicalPetPatients.getTypicalPetPatients()) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                ab.addPetPatient(petPatient);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            } catch (DuplicatePetPatientException e) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"Duplicate pet patient.\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        for (Appointment appt : TypicalAppointments.getTypicalAppointments()) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                ab.addAppointment(appt);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            } catch (DuplicateAppointmentException e) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"Duplicate appointment.\");"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            } catch (DuplicateDateTimeException e) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"Duplicate date time.\");"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":2,"wynonaK":2,"-":47}},{"path":"src/main/java/seedu/address/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/pawprint.png\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        //Set the application icon."},{"lineNumber":52,"author":{"gitID":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        //mainWindow.releaseResources();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                event.exception);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":1,"-":119}},{"path":"src/main/java/seedu/address/ui/PetPatientCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"content":"//@@author Robert-Peng"},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * AN UI component that displays the information of a {@code PetPatient}"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class PetPatientCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PetPatientListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String[] TAG_COLOR_STYLES \u003d"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        {\"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\", \"pink\","},{"lineNumber":19,"author":{"gitID":"-"},"content":"            \"black\", \"grey\"};"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final PetPatient petPatient;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Label species;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Label breed;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Label colour;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Label bloodType;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label ownerNric;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public PetPatientCard(PetPatient petPatient, int displayedIndex) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.petPatient \u003d petPatient;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        name.setText(petPatient.getName().toString());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        species.setText(petPatient.getSpecies());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        breed.setText(petPatient.getBreed());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        colour.setText(petPatient.getColour());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        bloodType.setText(petPatient.getBloodType());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        ownerNric.setText(petPatient.getOwner().toString());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        createTags(petPatient);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Returns the color style for {@code tagName}\u0027s label."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Solution below adopted from :"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * https://github.com/se-edu/addressbook-level4/pull/798/commits/167b3d0b4f7ad34296d2fbf505f9ae71f983f53c"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private String getTagColorStyleFor(String tagName) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // we use the hash code of the tag name to generate a random color, so that the color remain consistent"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // between different runs of the program while still making it random enough between tags."},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Creates the tag labels for {@code PetPatient}."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void createTags(PetPatient petPatient) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        petPatient.getTags().forEach(tag -\u003e {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        if (!(other instanceof PetPatientCard)) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        PetPatientCard card \u003d (PetPatientCard) other;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            \u0026\u0026 petPatient.equals(card.petPatient);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"chialejing":1,"-":92}},{"path":"src/main/java/seedu/address/ui/Autocomplete.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Aquarinte"},"content":"//@@author aquarinte"},{"lineNumber":10,"author":{"gitID":"Aquarinte"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Aquarinte"},"content":" * Handles case-insensitive autocompletion of command input such as command word, options, prefixes"},{"lineNumber":12,"author":{"gitID":"Aquarinte"},"content":" * and also some user input parameters: Nric, pet patient name and tag."},{"lineNumber":13,"author":{"gitID":"Aquarinte"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Aquarinte"},"content":"public class Autocomplete {"},{"lineNumber":15,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":16,"author":{"gitID":"Aquarinte"},"content":"    private static Autocomplete instance;"},{"lineNumber":17,"author":{"gitID":"Aquarinte"},"content":"    private Logic logic;"},{"lineNumber":18,"author":{"gitID":"Aquarinte"},"content":"    private String targetWord;"},{"lineNumber":19,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":20,"author":{"gitID":"Aquarinte"},"content":"    public static Autocomplete getInstance() {"},{"lineNumber":21,"author":{"gitID":"Aquarinte"},"content":"        if (instance \u003d\u003d null) {"},{"lineNumber":22,"author":{"gitID":"Aquarinte"},"content":"            instance \u003d new Autocomplete();"},{"lineNumber":23,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":24,"author":{"gitID":"Aquarinte"},"content":"        return instance;"},{"lineNumber":25,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":27,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"Aquarinte"},"content":"     * Find suggestions for current user-input in commandTextField."},{"lineNumber":29,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"Aquarinte"},"content":"    public List\u003cString\u003e getSuggestions(Logic logic, TextField commandTextField) {"},{"lineNumber":31,"author":{"gitID":"Aquarinte"},"content":"        this.logic \u003d logic;"},{"lineNumber":32,"author":{"gitID":"Aquarinte"},"content":"        String userInput \u003d commandTextField.getText().trim();"},{"lineNumber":33,"author":{"gitID":"Aquarinte"},"content":"        String[] words \u003d userInput.split(\" \");"},{"lineNumber":34,"author":{"gitID":"Aquarinte"},"content":"        targetWord \u003d words[words.length - 1].toLowerCase();"},{"lineNumber":35,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":36,"author":{"gitID":"Aquarinte"},"content":"        if (words.length \u003d\u003d 1) {"},{"lineNumber":37,"author":{"gitID":"Aquarinte"},"content":"            return suggestCommandWords();"},{"lineNumber":38,"author":{"gitID":"Aquarinte"},"content":"        } else {"},{"lineNumber":39,"author":{"gitID":"Aquarinte"},"content":"            if (addReferenceOwnerNric(words) || editPetPatientOwnerNric(words) || findByPersonNric(words)) {"},{"lineNumber":40,"author":{"gitID":"Aquarinte"},"content":"                return suggestNrics();"},{"lineNumber":41,"author":{"gitID":"Aquarinte"},"content":"            }"},{"lineNumber":42,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":43,"author":{"gitID":"Aquarinte"},"content":"            if (words[words.length - 2].equals(\"-p\") \u0026\u0026 targetWord.startsWith(\"n/\")) {"},{"lineNumber":44,"author":{"gitID":"Aquarinte"},"content":"                return suggestPetPatientNames();"},{"lineNumber":45,"author":{"gitID":"Aquarinte"},"content":"            }"},{"lineNumber":46,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":47,"author":{"gitID":"Aquarinte"},"content":"            if (targetWord.startsWith(\"t/\")) {"},{"lineNumber":48,"author":{"gitID":"Aquarinte"},"content":"                return suggestTagNames();"},{"lineNumber":49,"author":{"gitID":"Aquarinte"},"content":"            }"},{"lineNumber":50,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":51,"author":{"gitID":"Aquarinte"},"content":"            if (targetWord.startsWith(\"-\")) {"},{"lineNumber":52,"author":{"gitID":"Aquarinte"},"content":"                return suggestOptions();"},{"lineNumber":53,"author":{"gitID":"Aquarinte"},"content":"            }"},{"lineNumber":54,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":55,"author":{"gitID":"Aquarinte"},"content":"            return suggestPrefixes();"},{"lineNumber":56,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":59,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"Aquarinte"},"content":"     * Checks if command input is the \"add\" command, and whether it has the form \"-o nr/\" at the end."},{"lineNumber":61,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"Aquarinte"},"content":"    private boolean addReferenceOwnerNric(String[] words) {"},{"lineNumber":63,"author":{"gitID":"Aquarinte"},"content":"        if (words[0].equals(\"add\") \u0026\u0026 words[words.length - 2].equals(\"-o\") \u0026\u0026 targetWord.startsWith(\"nr/\")) {"},{"lineNumber":64,"author":{"gitID":"Aquarinte"},"content":"            return true;"},{"lineNumber":65,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"Aquarinte"},"content":"        return false;"},{"lineNumber":67,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":69,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"Aquarinte"},"content":"     * Checks if command input is the \"edit -p\" command, with the last word starting with \"nr/\"."},{"lineNumber":71,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"Aquarinte"},"content":"    private boolean editPetPatientOwnerNric(String[] words) {"},{"lineNumber":73,"author":{"gitID":"Aquarinte"},"content":"        if (words[0].equals(\"edit\") \u0026\u0026 words[1].equals(\"-p\") \u0026\u0026 targetWord.startsWith(\"nr/\")) {"},{"lineNumber":74,"author":{"gitID":"Aquarinte"},"content":"            return true;"},{"lineNumber":75,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"Aquarinte"},"content":"        return false;"},{"lineNumber":77,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":79,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"Aquarinte"},"content":"     * Checks if command input is the \"edit -p\" command, with the last word starting with \"nr/\"."},{"lineNumber":81,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"Aquarinte"},"content":"    private boolean findByPersonNric(String[] words) {"},{"lineNumber":83,"author":{"gitID":"Aquarinte"},"content":"        if (words[0].equals(\"find\") \u0026\u0026 words[1].equals(\"-o\") \u0026\u0026 targetWord.startsWith(\"nr/\")) {"},{"lineNumber":84,"author":{"gitID":"Aquarinte"},"content":"            return true;"},{"lineNumber":85,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"Aquarinte"},"content":"        return false;"},{"lineNumber":87,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":89,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"Aquarinte"},"content":"     * Returns a sorted list of suggestions for tags."},{"lineNumber":91,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"Aquarinte"},"content":"    private List\u003cString\u003e suggestTagNames() {"},{"lineNumber":93,"author":{"gitID":"Aquarinte"},"content":"        if (targetWord.equals(\"t/\")) {"},{"lineNumber":94,"author":{"gitID":"Aquarinte"},"content":"            List\u003cString\u003e suggestions \u003d logic.getAllTagNames().stream()"},{"lineNumber":95,"author":{"gitID":"Aquarinte"},"content":"                    .sorted()"},{"lineNumber":96,"author":{"gitID":"Aquarinte"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":97,"author":{"gitID":"Aquarinte"},"content":"            return suggestions;"},{"lineNumber":98,"author":{"gitID":"Aquarinte"},"content":"        } else {"},{"lineNumber":99,"author":{"gitID":"Aquarinte"},"content":"            String[] splitByPrefix \u003d targetWord.split(\"/\");"},{"lineNumber":100,"author":{"gitID":"Aquarinte"},"content":"            String targetTag \u003d splitByPrefix[1];"},{"lineNumber":101,"author":{"gitID":"Aquarinte"},"content":"            List\u003cString\u003e suggestions \u003d logic.getAllTagNames().stream()"},{"lineNumber":102,"author":{"gitID":"Aquarinte"},"content":"                    .filter(t -\u003e t.toLowerCase().startsWith(targetTag) \u0026\u0026 !t.toLowerCase().equals(targetTag))"},{"lineNumber":103,"author":{"gitID":"Aquarinte"},"content":"                    .sorted()"},{"lineNumber":104,"author":{"gitID":"Aquarinte"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":105,"author":{"gitID":"Aquarinte"},"content":"            return suggestions;"},{"lineNumber":106,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":109,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"Aquarinte"},"content":"     * Returns a sorted list of suggestions for pet patient names."},{"lineNumber":111,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"Aquarinte"},"content":"    private List\u003cString\u003e suggestPetPatientNames() {"},{"lineNumber":113,"author":{"gitID":"Aquarinte"},"content":"        if (targetWord.equals(\"n/\")) {"},{"lineNumber":114,"author":{"gitID":"Aquarinte"},"content":"            List\u003cString\u003e suggestions \u003d logic.getAllPetPatientNames().stream()"},{"lineNumber":115,"author":{"gitID":"Aquarinte"},"content":"                    .sorted()"},{"lineNumber":116,"author":{"gitID":"Aquarinte"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":117,"author":{"gitID":"Aquarinte"},"content":"            return suggestions;"},{"lineNumber":118,"author":{"gitID":"Aquarinte"},"content":"        } else {"},{"lineNumber":119,"author":{"gitID":"Aquarinte"},"content":"            String[] splitByPrefix \u003d targetWord.split(\"/\");"},{"lineNumber":120,"author":{"gitID":"Aquarinte"},"content":"            String targetPetName \u003d splitByPrefix[1];"},{"lineNumber":121,"author":{"gitID":"Aquarinte"},"content":"            List\u003cString\u003e suggestions \u003d logic.getAllPetPatientNames().stream()"},{"lineNumber":122,"author":{"gitID":"Aquarinte"},"content":"                    .filter(pn -\u003e pn.startsWith(targetPetName) \u0026\u0026 !pn.equals(targetPetName))"},{"lineNumber":123,"author":{"gitID":"Aquarinte"},"content":"                    .sorted()"},{"lineNumber":124,"author":{"gitID":"Aquarinte"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":125,"author":{"gitID":"Aquarinte"},"content":"            return suggestions;"},{"lineNumber":126,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":129,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"Aquarinte"},"content":"     * Returns a sorted list of suggestions for Nric."},{"lineNumber":131,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"Aquarinte"},"content":"    private List\u003cString\u003e suggestNrics() {"},{"lineNumber":133,"author":{"gitID":"Aquarinte"},"content":"        if (targetWord.equals(\"nr/\")) {"},{"lineNumber":134,"author":{"gitID":"Aquarinte"},"content":"            List\u003cString\u003e suggestions \u003d logic.getAllNric().stream()"},{"lineNumber":135,"author":{"gitID":"Aquarinte"},"content":"                    .sorted()"},{"lineNumber":136,"author":{"gitID":"Aquarinte"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":137,"author":{"gitID":"Aquarinte"},"content":"            return suggestions;"},{"lineNumber":138,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":139,"author":{"gitID":"Aquarinte"},"content":"        } else {"},{"lineNumber":140,"author":{"gitID":"Aquarinte"},"content":"            String[] splitByPrefix \u003d targetWord.split(\"/\");"},{"lineNumber":141,"author":{"gitID":"Aquarinte"},"content":"            String targetNric \u003d splitByPrefix[1].toUpperCase();"},{"lineNumber":142,"author":{"gitID":"Aquarinte"},"content":"            List\u003cString\u003e suggestions \u003d logic.getAllNric().stream()"},{"lineNumber":143,"author":{"gitID":"Aquarinte"},"content":"                    .filter(n -\u003e n.startsWith(targetNric))"},{"lineNumber":144,"author":{"gitID":"Aquarinte"},"content":"                    .sorted()"},{"lineNumber":145,"author":{"gitID":"Aquarinte"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":146,"author":{"gitID":"Aquarinte"},"content":"            return suggestions;"},{"lineNumber":147,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":150,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"Aquarinte"},"content":"     * Returns a sorted list of suggestions for prefixes."},{"lineNumber":152,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"Aquarinte"},"content":"    private List\u003cString\u003e suggestPrefixes() {"},{"lineNumber":154,"author":{"gitID":"Aquarinte"},"content":"        List\u003cString\u003e suggestions \u003d logic.getAllPrefixes().stream()"},{"lineNumber":155,"author":{"gitID":"Aquarinte"},"content":"                .filter(p -\u003e p.startsWith(targetWord) \u0026\u0026 !p.equals(targetWord))"},{"lineNumber":156,"author":{"gitID":"Aquarinte"},"content":"                .sorted()"},{"lineNumber":157,"author":{"gitID":"Aquarinte"},"content":"                .collect(Collectors.toList());"},{"lineNumber":158,"author":{"gitID":"Aquarinte"},"content":"        return suggestions;"},{"lineNumber":159,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":161,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"Aquarinte"},"content":"     * Returns a sorted list of suggestions for options."},{"lineNumber":163,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"Aquarinte"},"content":"    private List\u003cString\u003e suggestOptions() {"},{"lineNumber":165,"author":{"gitID":"Aquarinte"},"content":"        List\u003cString\u003e suggestions \u003d logic.getAllOptions().stream()"},{"lineNumber":166,"author":{"gitID":"Aquarinte"},"content":"                .filter(o -\u003e o.startsWith(targetWord) \u0026\u0026 !o.equals(targetWord))"},{"lineNumber":167,"author":{"gitID":"Aquarinte"},"content":"                .sorted()"},{"lineNumber":168,"author":{"gitID":"Aquarinte"},"content":"                .collect(Collectors.toList());"},{"lineNumber":169,"author":{"gitID":"Aquarinte"},"content":"        return suggestions;"},{"lineNumber":170,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":172,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"Aquarinte"},"content":"     * Returns a sorted list of suggestions for command words."},{"lineNumber":174,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"Aquarinte"},"content":"    private List\u003cString\u003e suggestCommandWords() {"},{"lineNumber":176,"author":{"gitID":"Aquarinte"},"content":"        List\u003cString\u003e suggestions \u003d logic.getAllCommandWords().stream()"},{"lineNumber":177,"author":{"gitID":"Aquarinte"},"content":"                .filter(c -\u003e c.startsWith(targetWord) \u0026\u0026 !c.equals(targetWord))"},{"lineNumber":178,"author":{"gitID":"Aquarinte"},"content":"                .sorted()"},{"lineNumber":179,"author":{"gitID":"Aquarinte"},"content":"                .collect(Collectors.toList());"},{"lineNumber":180,"author":{"gitID":"Aquarinte"},"content":"        return suggestions;"},{"lineNumber":181,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":174,"-":8}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"//import com.calendarfx.view.CalendarView;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ChangeThemeRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private CalendarWindow calendarWindow;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    //private BrowserPanel browserPanel;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private PetPatientListPanel petPatientListPanel;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private StackPane calendarPlaceholder;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private StackPane petPatientListPanelPlaceholder;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":100,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":101,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":102,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":103,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":104,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":105,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":106,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":107,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":108,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":109,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":110,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":111,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":112,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":113,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        //browserPanel \u003d new BrowserPanel();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        calendarWindow \u003d new CalendarWindow(logic.getFilteredAppointmentList());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        this.calendarPlaceholder.getChildren().add(calendarWindow.getRoot());"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        petPatientListPanel \u003d new PetPatientListPanel(logic.getFilteredPetPatientList());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        petPatientListPanelPlaceholder.getChildren().add(petPatientListPanel.getRoot());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":171,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    /*void releaseResources() {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }*/"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"Aquarinte"},"content":"    //@@author aquarinte"},{"lineNumber":211,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"Aquarinte"},"content":"     * Change the theme of the application"},{"lineNumber":213,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":215,"author":{"gitID":"Aquarinte"},"content":"    @Subscribe"},{"lineNumber":216,"author":{"gitID":"Aquarinte"},"content":"    public void handleChangeThemeEvent(ChangeThemeRequestEvent event) {"},{"lineNumber":217,"author":{"gitID":"Aquarinte"},"content":"        String style \u003d this.getClass().getResource(event.theme.getThemePath()).toExternalForm();"},{"lineNumber":218,"author":{"gitID":"Aquarinte"},"content":"        if (!isCurrentStyleSheet(style)) {"},{"lineNumber":219,"author":{"gitID":"Aquarinte"},"content":"            changeStyleSheet(style);"},{"lineNumber":220,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":223,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":224,"author":{"gitID":"Aquarinte"},"content":"     * Returns true if none of the current stylesheets contains {@code String} theme"},{"lineNumber":225,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"Aquarinte"},"content":"    public Boolean isCurrentStyleSheet(String theme) {"},{"lineNumber":227,"author":{"gitID":"Aquarinte"},"content":"        if (getRoot().getScene().getStylesheets().contains(theme)) {"},{"lineNumber":228,"author":{"gitID":"Aquarinte"},"content":"            return true;"},{"lineNumber":229,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"Aquarinte"},"content":"        return false;"},{"lineNumber":231,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":233,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":234,"author":{"gitID":"Aquarinte"},"content":"     * Removes all existing stylesheets and add the given {@code String} theme to style sheets"},{"lineNumber":235,"author":{"gitID":"Aquarinte"},"content":"     * Re-add Extensions.css to style sheets."},{"lineNumber":236,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":237,"author":{"gitID":"Aquarinte"},"content":"    public void changeStyleSheet(String theme) {"},{"lineNumber":238,"author":{"gitID":"Aquarinte"},"content":"        String extensions \u003d this.getClass().getResource(\"/view/Extensions.css\").toExternalForm();"},{"lineNumber":239,"author":{"gitID":"Aquarinte"},"content":"        getRoot().getScene().getStylesheets().clear(); //removes all style sheets"},{"lineNumber":240,"author":{"gitID":"Aquarinte"},"content":"        getRoot().getScene().getStylesheets().add(theme);"},{"lineNumber":241,"author":{"gitID":"Aquarinte"},"content":"        getRoot().getScene().getStylesheets().add(extensions); //re-add Extensions.css"},{"lineNumber":242,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":34,"-":209}},{"path":"src/main/java/seedu/address/ui/CalendarWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.Duration;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.time.LocalTime;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"//import com.calendarfx.model.CalendarEvent;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Entry;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Interval;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import com.calendarfx.view.CalendarView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"//import javafx.event.EventHandler;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"//import javafx.application.Application;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"//import javafx.application.Platform;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"//import javafx.scene.Scene;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"//import javafx.stage.Stage;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"//import java.time.Duration;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"//import java.time.LocalDateTime;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"//import java.time.ZoneId;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"//import seedu.address.MainApp;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"//import seedu.address.commons.core.LogsCenter;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"//import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"content":"//@@author Robert-Peng"},{"lineNumber":41,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":42,"author":{"gitID":"-"},"content":" * Implement CalendarView from CalendarFX to show appointments"},{"lineNumber":43,"author":{"gitID":"-"},"content":" */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"public class CalendarWindow extends UiPart\u003cRegion\u003e {"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"CalendarPanel.fxml\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private  ObservableList\u003cAppointment\u003e appointmentList;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private Calendar calendar;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private CalendarView calendarView;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @param OwnerList"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public CalendarWindow(ObservableList\u003cAppointment\u003e appointmentList) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        super(DEFAULT_PAGE);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.appointmentList \u003d appointmentList;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        calendarView \u003d new CalendarView();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        setTime();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        setCalendar();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        disableViews();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private void setTime() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        calendarView.setRequestedTime(LocalTime.now());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        calendarView.setToday(LocalDate.now());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        calendarView.setTime(LocalTime.now());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Creates a new a calendar"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private void setCalendar() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        setTime();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        calendarView.getCalendarSources().clear();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        CalendarSource calendarSource \u003d new CalendarSource(\"Appointments\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        int styleNumber \u003d 0;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        int appointmentCounter \u003d 0;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        for (Appointment appointment : appointmentList) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            Calendar calendar \u003d createCalendar(styleNumber, appointment);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            calendarSource.getCalendars().add(calendar);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"            LocalDateTime ldt \u003d appointment.getDateTime();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            Entry entry \u003d new Entry (++appointmentCounter + \". \" + appointment.getPetPatientName().toString());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            entry.setInterval(new Interval(ldt, ldt.plusMinutes(30)));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"            styleNumber++;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            styleNumber \u003d styleNumber % 7;"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"            calendar.addEntry(entry);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        calendarView.getCalendarSources().add(calendarSource);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * @param styleNumber"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * @param appointment"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * @return a calendar with given info and corresponding style"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    private Calendar createCalendar(int styleNumber, Appointment appointment) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Calendar calendar \u003d new Calendar(appointment.getPetPatientName().toString());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        calendar.setStyle(Calendar.Style.getStyle(styleNumber));"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        calendar.setLookAheadDuration(Duration.ofDays(365));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        calendar.setLookBackDuration(Duration.ofDays(365));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return calendar;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * close unwanted UI components"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private void disableViews() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        calendarView.setShowAddCalendarButton(false);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        calendarView.setShowSearchField(false);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        calendarView.setShowSearchResultsTray(false);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        calendarView.setShowPrintButton(false);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        calendarView.setShowSourceTrayButton(false);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        calendarView.showDayPage();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public CalendarView getRoot() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return this.calendarView;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"}"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"null":1,"wynonaK":1,"-":136}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"    private String appTitle \u003d \"Medeina\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":1,"-":71}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_INVALID_DISPLAYED_INDEX \u003d \"The index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_DEPENDENCIES_EXIST \u003d \"Relevant dependencies still exist!\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_INVALID_PET_PATIENT_DISPLAYED_INDEX \u003d \"The pet patient index \""},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"            + \"provided is invalid\";"},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX \u003d \"The appointment index \""},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":"            + \"provided is invalid\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_PET_PATIENTS_LISTED_OVERVIEW \u003d \"%1$d pet patients listed!\";"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"chialejing":4,"wynonaK":4,"-":12}},{"path":"src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/** Indicates the AddressBook in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"-"},"content":"public class AddressBookChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public final ReadOnlyAddressBook data;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"        return \"number of persons \" + data.getPersonList().size()"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"                + \", number of tags \" + data.getTagList().size()"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"                + \", number of appointments \" + data.getAppointmentList().size()"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"                + \", number of pet patients \" + data.getPetPatientList().size();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":3,"wynonaK":1,"-":18}},{"path":"src/test/java/guitests/guihandles/PetPatientListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.ui.PetPatientCard;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"content":"//@@author Robert-Peng"},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Provides a handle for {@code PetPatientListPanel} containing the list of {@code PetPatientCard}."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class PetPatientListPanelHandle extends NodeHandle\u003cListView\u003cPetPatientCard\u003e\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String PETPATIENT_LIST_VIEW_ID \u003d \"#petPatientListView\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private Optional\u003cPetPatientCard\u003e lastRememberedSelectedPetPatientCard;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public PetPatientListPanelHandle(ListView\u003cPetPatientCard\u003e petPatientListPanelNode) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        super(petPatientListPanelNode);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Returns a handle to the selected {@code PetPatientCardHandle}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * A maximum of 1 item can be selected at any time."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @throws AssertionError if no card is selected, or more than 1 card is selected."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public PetPatientCardHandle getHandleToSelectedCard() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        List\u003cPetPatientCard\u003e petPatientList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        if (petPatientList.size() !\u003d 1) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"PetPatient list size expected 1.\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return new PetPatientCardHandle(petPatientList.get(0).getRoot());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Returns the index of the selected card."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public int getSelectedCardIndex() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Returns true if a card is currently selected."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean isAnyCardSelected() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        List\u003cPetPatientCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        if (selectedCardsList.size() \u003e 1) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Card list size expected 0 or 1.\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return !selectedCardsList.isEmpty();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Navigates the listview to display and select the petPatient."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void navigateToCard(PetPatient petPatient) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        List\u003cPetPatientCard\u003e cards \u003d getRootNode().getItems();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Optional\u003cPetPatientCard\u003e matchingCard \u003d cards.stream().filter("},{"lineNumber":64,"author":{"gitID":"-"},"content":"            card -\u003e card.petPatient.equals(petPatient)).findFirst();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"PetPatient does not exist.\");"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Returns the petPatient card handle of a petPatient associated with the {@code index} in the list."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public PetPatientCardHandle getPetPatientCardHandle(int index) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return getPetPatientCardHandle(getRootNode().getItems().get(index).petPatient);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Returns the {@code PetPatientCardHandle} of the specified {@code petPatient} in the list."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public PetPatientCardHandle getPetPatientCardHandle(PetPatient petPatient) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Optional\u003cPetPatientCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            .filter(card -\u003e card.petPatient.equals(petPatient))"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            .map(card -\u003e new PetPatientCardHandle(card.getRoot()))"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            .findFirst();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"PetPatient does not exist.\"));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Selects the {@code PetPatientCard} at {@code index} in the list."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void select(int index) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        getRootNode().getSelectionModel().select(index);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Remembers the selected {@code PetPatientCard} in the list."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void rememberSelectedPetPatientCard() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        List\u003cPetPatientCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            lastRememberedSelectedPetPatientCard \u003d Optional.empty();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            lastRememberedSelectedPetPatientCard \u003d Optional.of(selectedItems.get(0));"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Returns true if the selected {@code PetPatientCard} is different from the value remembered by the most recent"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * {@code rememberSelectedPetPatientCard()} call."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public boolean isSelectedPetPatientCardChanged() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        List\u003cPetPatientCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            return lastRememberedSelectedPetPatientCard.isPresent();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            return !lastRememberedSelectedPetPatientCard.isPresent()"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                || !lastRememberedSelectedPetPatientCard.get().equals(selectedItems.get(0));"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Returns the size of the list."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public int getListSize() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        return getRootNode().getItems().size();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"chialejing":1,"-":135}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of petPatients */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    ObservableList\u003cPetPatient\u003e getFilteredPetPatientList();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of Appointments */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /** Returns a set of all command words */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    Set\u003cString\u003e getAllCommandWords();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /** Returns a set of all prefixes */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    Set\u003cString\u003e getAllPrefixes();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /** Returns a set of all options used in command syntax */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    Set\u003cString\u003e getAllOptions();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /** Returns a set of all Nric found in model*/"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    Set\u003cString\u003e getAllNric();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /** Returns a set of all pet patient names found in model*/"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    Set\u003cString\u003e getAllPetPatientNames();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /** Returns a set of all tag names found in model*/"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    Set\u003cString\u003e getAllTagNames();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":1,"wynonaK":1,"-":53}},{"path":"src/main/java/seedu/address/commons/events/ui/ChangeThemeRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.theme.Theme;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Aquarinte"},"content":"//@@author aquarinte"},{"lineNumber":7,"author":{"gitID":"Aquarinte"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"Aquarinte"},"content":" * Indicates a request to change Medeina\u0027s theme"},{"lineNumber":9,"author":{"gitID":"Aquarinte"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Aquarinte"},"content":"public class ChangeThemeRequestEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"Aquarinte"},"content":"    public final Theme theme;"},{"lineNumber":12,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":13,"author":{"gitID":"Aquarinte"},"content":"    public ChangeThemeRequestEvent(Theme theme) {"},{"lineNumber":14,"author":{"gitID":"Aquarinte"},"content":"        this.theme \u003d theme;"},{"lineNumber":15,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":17,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"Aquarinte"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"Aquarinte"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":16,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/DeleteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import java.util.regex.Matcher;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import java.util.regex.Pattern;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":" * Parses input arguments and creates a new DeleteCommand object"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"    private static final Pattern DELETE_COMMAND_FORMAT_OWNER \u003d Pattern.compile(\"-(o)+(?\u003cindex\u003e.*)\");"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"    private static final Pattern DELETE_COMMAND_FORMAT_PET_PATIENT \u003d Pattern.compile(\"-(p)+(?\u003cindex\u003e.*)\");"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"    private static final Pattern DELETE_COMMAND_FORMAT_APPOINTMENT \u003d Pattern.compile(\"-(a)+(?\u003cindex\u003e.*)\");"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"    private static final Pattern DELETE_COMMAND_FORMAT_FORCE_OWNER \u003d Pattern.compile(\"-(fo)+(?\u003cindex\u003e.*)\");"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"    private static final Pattern DELETE_COMMAND_FORMAT_FORCE_PET_PATIENT \u003d Pattern.compile(\"-(fp)+(?\u003cindex\u003e.*)\");"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"     * and returns an DeleteCommand object for execution."},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"     * type changes depending on what pattern it matches"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"    public DeleteCommand parse(String args) throws ParseException {"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"        final Matcher matcherForOwner \u003d DELETE_COMMAND_FORMAT_OWNER.matcher(trimmedArgs);"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"        if (matcherForOwner.matches()) {"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"            try {"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"                int type \u003d 1;"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"                Index index \u003d ParserUtil.parseIndex(matcherForOwner.group(\"index\"));"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"                return new DeleteCommand(type, index);"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"            } catch (IllegalValueException ive) {"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"                throw new ParseException("},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE_OWNER));"},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"        final Matcher matcherForPetPatient \u003d DELETE_COMMAND_FORMAT_PET_PATIENT.matcher(trimmedArgs);"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"        if (matcherForPetPatient.matches()) {"},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"            try {"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"                int type \u003d 2;"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"                Index index \u003d ParserUtil.parseIndex(matcherForPetPatient.group(\"index\"));"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"                return new DeleteCommand(type, index);"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":"            } catch (IllegalValueException ive) {"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"                throw new ParseException("},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE_PET_PATIENT));"},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"        final Matcher matcherForAppointment \u003d DELETE_COMMAND_FORMAT_APPOINTMENT.matcher(trimmedArgs);"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"        if (matcherForAppointment.matches()) {"},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"            try {"},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"                int type \u003d 3;"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"                Index index \u003d ParserUtil.parseIndex(matcherForAppointment.group(\"index\"));"},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"                return new DeleteCommand(type, index);"},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"            } catch (IllegalValueException ive) {"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"                throw new ParseException("},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE_APPOINTMENT));"},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"        final Matcher matcherForForceOwner \u003d DELETE_COMMAND_FORMAT_FORCE_OWNER.matcher(trimmedArgs);"},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"        if (matcherForForceOwner.matches()) {"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":"            try {"},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":"                int type \u003d 4;"},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"                Index index \u003d ParserUtil.parseIndex(matcherForForceOwner.group(\"index\"));"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"                return new DeleteCommand(type, index);"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"            } catch (IllegalValueException ive) {"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"                throw new ParseException("},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE_FORCE_OWNER));"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"        final Matcher matcherForForcePetPatient \u003d DELETE_COMMAND_FORMAT_FORCE_PET_PATIENT.matcher(trimmedArgs);"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"        if (matcherForForcePetPatient.matches()) {"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"            try {"},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":"                int type \u003d 5;"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"                Index index \u003d ParserUtil.parseIndex(matcherForForcePetPatient.group(\"index\"));"},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"                return new DeleteCommand(type, index);"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"            } catch (IllegalValueException ive) {"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":"                throw new ParseException("},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE_FORCE_PET_PATIENT));"},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":86,"-":9}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BREED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOUR;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIES;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Remark;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"Aquarinte"},"content":"//@@author aquarinte"},{"lineNumber":39,"author":{"gitID":"Aquarinte"},"content":"/**"},{"lineNumber":40,"author":{"gitID":"Aquarinte"},"content":" * Parses input arguments and creates a new AddCommand object."},{"lineNumber":41,"author":{"gitID":"Aquarinte"},"content":" */"},{"lineNumber":42,"author":{"gitID":"Aquarinte"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":43,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":44,"author":{"gitID":"Aquarinte"},"content":"    private static final Pattern ADD_COMMAND_FORMAT_OWNER_ONLY \u003d Pattern.compile(\"-(o)+(?\u003cownerInfo\u003e.*)\");"},{"lineNumber":45,"author":{"gitID":"Aquarinte"},"content":"    private static final Pattern ADD_COMMAND_FORMAT_ALL_NEW \u003d Pattern.compile(\"-(o)+(?\u003cownerInfo\u003e.*)\""},{"lineNumber":46,"author":{"gitID":"Aquarinte"},"content":"            + \"-(p)+(?\u003cpetInfo\u003e.*)-(a)+(?\u003capptInfo\u003e.*)\");"},{"lineNumber":47,"author":{"gitID":"Aquarinte"},"content":"    private static final Pattern ADD_COMMAND_FORMAT_NEW_PET_EXISTING_OWNER \u003d Pattern.compile(\"-(p)+(?\u003cpetInfo\u003e.*)\""},{"lineNumber":48,"author":{"gitID":"Aquarinte"},"content":"            + \"-(o)+(?\u003cownerNric\u003e.*)\");"},{"lineNumber":49,"author":{"gitID":"Aquarinte"},"content":"    private static final Pattern ADD_COMMAND_FORMAT_NEW_APPT_EXISTING_OWNER_PET \u003d Pattern.compile(\"-(a)+(?\u003capptInfo\u003e.*)\""},{"lineNumber":50,"author":{"gitID":"Aquarinte"},"content":"            + \"-(o)(?\u003cownerNric\u003e.*)\" + \"-(p)+(?\u003cpetName\u003e.*)\");"},{"lineNumber":51,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":52,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"Aquarinte"},"content":"     * Parses the given {@code String} of arguments in the context of the Person class"},{"lineNumber":54,"author":{"gitID":"Aquarinte"},"content":"     * and returns an Person object."},{"lineNumber":55,"author":{"gitID":"Aquarinte"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":56,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"Aquarinte"},"content":"    public Person parsePerson(String ownerInfo) throws ParseException {"},{"lineNumber":58,"author":{"gitID":"Aquarinte"},"content":"        ArgumentMultimap argMultimapOwner \u003d"},{"lineNumber":59,"author":{"gitID":"Aquarinte"},"content":"                ArgumentTokenizer.tokenize(ownerInfo, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":60,"author":{"gitID":"Aquarinte"},"content":"                        PREFIX_ADDRESS, PREFIX_NRIC, PREFIX_TAG);"},{"lineNumber":61,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":62,"author":{"gitID":"Aquarinte"},"content":"        if (!arePrefixesPresent(argMultimapOwner, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_NRIC)"},{"lineNumber":63,"author":{"gitID":"Aquarinte"},"content":"                || !argMultimapOwner.getPreamble().isEmpty()) {"},{"lineNumber":64,"author":{"gitID":"Aquarinte"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_PERSON));"},{"lineNumber":65,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":67,"author":{"gitID":"Aquarinte"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"Aquarinte"},"content":"            Name ownerName \u003d ParserUtil.parseName(argMultimapOwner.getValue(PREFIX_NAME)).get();"},{"lineNumber":69,"author":{"gitID":"Aquarinte"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimapOwner.getValue(PREFIX_PHONE)).get();"},{"lineNumber":70,"author":{"gitID":"Aquarinte"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimapOwner.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":71,"author":{"gitID":"Aquarinte"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimapOwner.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":72,"author":{"gitID":"Aquarinte"},"content":"            Nric nric \u003d ParserUtil.parseNric(argMultimapOwner.getValue(PREFIX_NRIC)).get();"},{"lineNumber":73,"author":{"gitID":"Aquarinte"},"content":"            Set\u003cTag\u003e ownerTagList \u003d ParserUtil.parseTags(argMultimapOwner.getAllValues(PREFIX_TAG));"},{"lineNumber":74,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":75,"author":{"gitID":"Aquarinte"},"content":"            Person owner \u003d new Person(ownerName, phone, email, address, nric, ownerTagList);"},{"lineNumber":76,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":77,"author":{"gitID":"Aquarinte"},"content":"            return owner;"},{"lineNumber":78,"author":{"gitID":"Aquarinte"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":79,"author":{"gitID":"Aquarinte"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":80,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":83,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"Aquarinte"},"content":"     * Parses the given {@code String} of arguments in the context of the Appointment class"},{"lineNumber":85,"author":{"gitID":"Aquarinte"},"content":"     * and returns an Appointment object."},{"lineNumber":86,"author":{"gitID":"Aquarinte"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":87,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"Aquarinte"},"content":"    public Appointment parseAppointment(String apptInfo) throws ParseException {"},{"lineNumber":89,"author":{"gitID":"Aquarinte"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":90,"author":{"gitID":"Aquarinte"},"content":"                ArgumentTokenizer.tokenize(apptInfo, PREFIX_DATE, PREFIX_REMARK, PREFIX_TAG);"},{"lineNumber":91,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":92,"author":{"gitID":"Aquarinte"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_REMARK, PREFIX_TAG)"},{"lineNumber":93,"author":{"gitID":"Aquarinte"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":94,"author":{"gitID":"Aquarinte"},"content":"            throw new ParseException("},{"lineNumber":95,"author":{"gitID":"Aquarinte"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_APPOINTMENT));"},{"lineNumber":96,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":98,"author":{"gitID":"Aquarinte"},"content":"        try {"},{"lineNumber":99,"author":{"gitID":"Aquarinte"},"content":"            LocalDateTime localDateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATE)).get();"},{"lineNumber":100,"author":{"gitID":"Aquarinte"},"content":"            Remark remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK)).get();"},{"lineNumber":101,"author":{"gitID":"Aquarinte"},"content":"            Set\u003cTag\u003e type \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":102,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":103,"author":{"gitID":"Aquarinte"},"content":"            Appointment appointment \u003d new Appointment(remark, localDateTime, type);"},{"lineNumber":104,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":105,"author":{"gitID":"Aquarinte"},"content":"            return appointment;"},{"lineNumber":106,"author":{"gitID":"Aquarinte"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":107,"author":{"gitID":"Aquarinte"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":108,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":111,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"Aquarinte"},"content":"     * Parses the given {@code String} of arguments in the context of the PetPatient class"},{"lineNumber":113,"author":{"gitID":"Aquarinte"},"content":"     * and returns an PetPatient object."},{"lineNumber":114,"author":{"gitID":"Aquarinte"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":115,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"Aquarinte"},"content":"    public PetPatient parsePetPatient(String petInfo) throws ParseException {"},{"lineNumber":117,"author":{"gitID":"Aquarinte"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":118,"author":{"gitID":"Aquarinte"},"content":"                ArgumentTokenizer.tokenize(petInfo, PREFIX_NAME, PREFIX_SPECIES, PREFIX_BREED, PREFIX_COLOUR,"},{"lineNumber":119,"author":{"gitID":"Aquarinte"},"content":"                        PREFIX_BLOODTYPE, PREFIX_TAG);"},{"lineNumber":120,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":121,"author":{"gitID":"Aquarinte"},"content":"        if (!arePrefixesPresent("},{"lineNumber":122,"author":{"gitID":"Aquarinte"},"content":"                argMultimap, PREFIX_NAME, PREFIX_BREED, PREFIX_SPECIES, PREFIX_COLOUR, PREFIX_BLOODTYPE)"},{"lineNumber":123,"author":{"gitID":"Aquarinte"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":124,"author":{"gitID":"Aquarinte"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_PETPATIENT));"},{"lineNumber":125,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":127,"author":{"gitID":"Aquarinte"},"content":"        try {"},{"lineNumber":128,"author":{"gitID":"Aquarinte"},"content":"            PetPatientName name \u003d ParserUtil.parsePetPatientName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":129,"author":{"gitID":"Aquarinte"},"content":"            String species \u003d ParserUtil.parseSpecies(argMultimap.getValue(PREFIX_SPECIES)).get();"},{"lineNumber":130,"author":{"gitID":"Aquarinte"},"content":"            String breed \u003d ParserUtil.parseBreed(argMultimap.getValue(PREFIX_BREED)).get();"},{"lineNumber":131,"author":{"gitID":"Aquarinte"},"content":"            String color \u003d ParserUtil.parseColour(argMultimap.getValue(PREFIX_COLOUR)).get();"},{"lineNumber":132,"author":{"gitID":"Aquarinte"},"content":"            String bloodType \u003d ParserUtil.parseBloodType(argMultimap.getValue(PREFIX_BLOODTYPE)).get();"},{"lineNumber":133,"author":{"gitID":"Aquarinte"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":134,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":135,"author":{"gitID":"Aquarinte"},"content":"            PetPatient petPatient \u003d new PetPatient(name, species, breed, color, bloodType, tagList);"},{"lineNumber":136,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":137,"author":{"gitID":"Aquarinte"},"content":"            return petPatient;"},{"lineNumber":138,"author":{"gitID":"Aquarinte"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":139,"author":{"gitID":"Aquarinte"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":140,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":143,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"Aquarinte"},"content":"     * Parses the given {@code String} of arguments in the context of the Nric class"},{"lineNumber":145,"author":{"gitID":"Aquarinte"},"content":"     * and returns a Nric object."},{"lineNumber":146,"author":{"gitID":"Aquarinte"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":147,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"Aquarinte"},"content":"    public Nric parseNric(String nric) throws ParseException {"},{"lineNumber":149,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":150,"author":{"gitID":"Aquarinte"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(nric, PREFIX_NRIC);"},{"lineNumber":151,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":152,"author":{"gitID":"Aquarinte"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NRIC) || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":153,"author":{"gitID":"Aquarinte"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":154,"author":{"gitID":"Aquarinte"},"content":"                    \"Missing prefix \\\"nr/\\\" for NRIC after -o option\"));"},{"lineNumber":155,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":157,"author":{"gitID":"Aquarinte"},"content":"        try {"},{"lineNumber":158,"author":{"gitID":"Aquarinte"},"content":"            Nric validNric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC)).get();"},{"lineNumber":159,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":160,"author":{"gitID":"Aquarinte"},"content":"            return validNric;"},{"lineNumber":161,"author":{"gitID":"Aquarinte"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":162,"author":{"gitID":"Aquarinte"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":163,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":166,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"Aquarinte"},"content":"     * Parses the given {@code String} of arguments in the context of the PetPatientName class"},{"lineNumber":168,"author":{"gitID":"Aquarinte"},"content":"     * and returns a PetPatientName object."},{"lineNumber":169,"author":{"gitID":"Aquarinte"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":170,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"Aquarinte"},"content":"    public PetPatientName parsePetPatientName(String petName) throws ParseException {"},{"lineNumber":172,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":173,"author":{"gitID":"Aquarinte"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(petName, PREFIX_NAME);"},{"lineNumber":174,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":175,"author":{"gitID":"Aquarinte"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME) || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":176,"author":{"gitID":"Aquarinte"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":177,"author":{"gitID":"Aquarinte"},"content":"                    AddCommand.MESSAGE_MISSING_NRIC_PREFIX));"},{"lineNumber":178,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":180,"author":{"gitID":"Aquarinte"},"content":"        try {"},{"lineNumber":181,"author":{"gitID":"Aquarinte"},"content":"            PetPatientName petPatientName \u003d ParserUtil.parsePetPatientName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":182,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":183,"author":{"gitID":"Aquarinte"},"content":"            return petPatientName;"},{"lineNumber":184,"author":{"gitID":"Aquarinte"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":185,"author":{"gitID":"Aquarinte"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":186,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":189,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"Aquarinte"},"content":"     * Parses the given {@code String} of arguments in the context of AddCommand"},{"lineNumber":191,"author":{"gitID":"Aquarinte"},"content":"     * and returns an AddCommand object."},{"lineNumber":192,"author":{"gitID":"Aquarinte"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":193,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"Aquarinte"},"content":"    private AddCommand createNewOwnerPetAppt(String ownerInfo, String petInfo, String apptInfo)"},{"lineNumber":195,"author":{"gitID":"Aquarinte"},"content":"            throws ParseException {"},{"lineNumber":196,"author":{"gitID":"Aquarinte"},"content":"        Person owner \u003d parsePerson(ownerInfo);"},{"lineNumber":197,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":198,"author":{"gitID":"Aquarinte"},"content":"        PetPatient petPatient \u003d parsePetPatient(petInfo);"},{"lineNumber":199,"author":{"gitID":"Aquarinte"},"content":"        petPatient.setOwnerNric(owner.getNric());"},{"lineNumber":200,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":201,"author":{"gitID":"Aquarinte"},"content":"        Appointment appt \u003d parseAppointment(apptInfo);"},{"lineNumber":202,"author":{"gitID":"Aquarinte"},"content":"        appt.setOwnerNric(owner.getNric());"},{"lineNumber":203,"author":{"gitID":"Aquarinte"},"content":"        appt.setPetPatientName(petPatient.getName());"},{"lineNumber":204,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":205,"author":{"gitID":"Aquarinte"},"content":"        return new AddCommand(owner, petPatient, appt);"},{"lineNumber":206,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":208,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"Aquarinte"},"content":"     * Parses the given {@code String} of arguments in the context of AddCommand"},{"lineNumber":210,"author":{"gitID":"Aquarinte"},"content":"     * and returns an AddCommand object."},{"lineNumber":211,"author":{"gitID":"Aquarinte"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":212,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"Aquarinte"},"content":"    private AddCommand createNewApptforExistingOwnerAndPet(String apptInfo, String ownerNric, String petName)"},{"lineNumber":214,"author":{"gitID":"Aquarinte"},"content":"            throws ParseException {"},{"lineNumber":215,"author":{"gitID":"Aquarinte"},"content":"        Nric nric \u003d parseNric(ownerNric);"},{"lineNumber":216,"author":{"gitID":"Aquarinte"},"content":"        PetPatientName petPatientName \u003d parsePetPatientName(petName);"},{"lineNumber":217,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":218,"author":{"gitID":"Aquarinte"},"content":"        Appointment appt \u003d parseAppointment(apptInfo);"},{"lineNumber":219,"author":{"gitID":"Aquarinte"},"content":"        appt.setOwnerNric(nric);"},{"lineNumber":220,"author":{"gitID":"Aquarinte"},"content":"        appt.setPetPatientName(petPatientName);"},{"lineNumber":221,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":222,"author":{"gitID":"Aquarinte"},"content":"        return new AddCommand(appt, nric, petPatientName);"},{"lineNumber":223,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":225,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"Aquarinte"},"content":"     * Parses the given {@code String} of arguments in the context of AddCommand"},{"lineNumber":227,"author":{"gitID":"Aquarinte"},"content":"     * and returns an AddCommand object."},{"lineNumber":228,"author":{"gitID":"Aquarinte"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":229,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"Aquarinte"},"content":"    private AddCommand createNewPetForExistingPerson(String petInfo, String ownerNric) throws ParseException {"},{"lineNumber":231,"author":{"gitID":"Aquarinte"},"content":"        Nric nric \u003d parseNric(ownerNric);"},{"lineNumber":232,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":233,"author":{"gitID":"Aquarinte"},"content":"        PetPatient petPatient \u003d parsePetPatient(petInfo);"},{"lineNumber":234,"author":{"gitID":"Aquarinte"},"content":"        petPatient.setOwnerNric(nric);"},{"lineNumber":235,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":236,"author":{"gitID":"Aquarinte"},"content":"        return new AddCommand(petPatient, nric);"},{"lineNumber":237,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":239,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":240,"author":{"gitID":"Aquarinte"},"content":"     * Parses the given {@code String} of arguments in the context of AddCommand"},{"lineNumber":241,"author":{"gitID":"Aquarinte"},"content":"     * and returns an AddCommand object."},{"lineNumber":242,"author":{"gitID":"Aquarinte"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":243,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":244,"author":{"gitID":"Aquarinte"},"content":"    private AddCommand parseNewOwnerOnly(String ownerInfo) throws ParseException {"},{"lineNumber":245,"author":{"gitID":"Aquarinte"},"content":"        Person owner \u003d parsePerson(ownerInfo);"},{"lineNumber":246,"author":{"gitID":"Aquarinte"},"content":"        return new AddCommand(owner);"},{"lineNumber":247,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":249,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"Aquarinte"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":251,"author":{"gitID":"Aquarinte"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":252,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"Aquarinte"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":254,"author":{"gitID":"Aquarinte"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":255,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":257,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":258,"author":{"gitID":"Aquarinte"},"content":"     * Parses the given {@code String} of arguments in the context of AddCommand"},{"lineNumber":259,"author":{"gitID":"Aquarinte"},"content":"     * and returns an AddCommand object."},{"lineNumber":260,"author":{"gitID":"Aquarinte"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":261,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":262,"author":{"gitID":"Aquarinte"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":263,"author":{"gitID":"Aquarinte"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":264,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":265,"author":{"gitID":"Aquarinte"},"content":"        //to add a new person (owner), new pet patient, and a new appointment"},{"lineNumber":266,"author":{"gitID":"Aquarinte"},"content":"        final Matcher matcherForAllNew \u003d ADD_COMMAND_FORMAT_ALL_NEW.matcher(trimmedArgs);"},{"lineNumber":267,"author":{"gitID":"Aquarinte"},"content":"        if (matcherForAllNew.matches()) {"},{"lineNumber":268,"author":{"gitID":"Aquarinte"},"content":"            String ownerInfo \u003d matcherForAllNew.group(\"ownerInfo\");"},{"lineNumber":269,"author":{"gitID":"Aquarinte"},"content":"            String petInfo \u003d matcherForAllNew.group(\"petInfo\");"},{"lineNumber":270,"author":{"gitID":"Aquarinte"},"content":"            String apptInfo \u003d matcherForAllNew.group(\"apptInfo\");"},{"lineNumber":271,"author":{"gitID":"Aquarinte"},"content":"            return createNewOwnerPetAppt(ownerInfo, petInfo, apptInfo);"},{"lineNumber":272,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":273,"author":{"gitID":"Aquarinte"},"content":"        //add a new appointment for existing person and pet patient"},{"lineNumber":274,"author":{"gitID":"Aquarinte"},"content":"        final Matcher matcherForNewAppt \u003d ADD_COMMAND_FORMAT_NEW_APPT_EXISTING_OWNER_PET.matcher(trimmedArgs);"},{"lineNumber":275,"author":{"gitID":"Aquarinte"},"content":"        if (matcherForNewAppt.matches()) {"},{"lineNumber":276,"author":{"gitID":"Aquarinte"},"content":"            String apptInfo \u003d matcherForNewAppt.group(\"apptInfo\");"},{"lineNumber":277,"author":{"gitID":"Aquarinte"},"content":"            String ownerNric \u003d matcherForNewAppt.group(\"ownerNric\");"},{"lineNumber":278,"author":{"gitID":"Aquarinte"},"content":"            String petName \u003d matcherForNewAppt.group(\"petName\");"},{"lineNumber":279,"author":{"gitID":"Aquarinte"},"content":"            return createNewApptforExistingOwnerAndPet(apptInfo, ownerNric, petName);"},{"lineNumber":280,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":281,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":282,"author":{"gitID":"Aquarinte"},"content":"        //add a new patient to an existing owner"},{"lineNumber":283,"author":{"gitID":"Aquarinte"},"content":"        final Matcher matcherForNewPet \u003d ADD_COMMAND_FORMAT_NEW_PET_EXISTING_OWNER.matcher(trimmedArgs);"},{"lineNumber":284,"author":{"gitID":"Aquarinte"},"content":"        if (matcherForNewPet.matches()) {"},{"lineNumber":285,"author":{"gitID":"Aquarinte"},"content":"            String petInfo \u003d matcherForNewPet.group(\"petInfo\");"},{"lineNumber":286,"author":{"gitID":"Aquarinte"},"content":"            String ownerNric \u003d matcherForNewPet.group(\"ownerNric\");"},{"lineNumber":287,"author":{"gitID":"Aquarinte"},"content":"            return createNewPetForExistingPerson(petInfo, ownerNric);"},{"lineNumber":288,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":289,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":290,"author":{"gitID":"Aquarinte"},"content":"        //add a new person"},{"lineNumber":291,"author":{"gitID":"Aquarinte"},"content":"        final Matcher matcherForNewPerson \u003d ADD_COMMAND_FORMAT_OWNER_ONLY.matcher(trimmedArgs);"},{"lineNumber":292,"author":{"gitID":"Aquarinte"},"content":"        if (matcherForNewPerson.matches()) {"},{"lineNumber":293,"author":{"gitID":"Aquarinte"},"content":"            String ownerInfo \u003d matcherForNewPerson.group(\"ownerInfo\");"},{"lineNumber":294,"author":{"gitID":"Aquarinte"},"content":"            return parseNewOwnerOnly(ownerInfo);"},{"lineNumber":295,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":296,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":297,"author":{"gitID":"Aquarinte"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":298,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":299,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":300,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":301,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":264,"chialejing":2,"wynonaK":2,"-":33}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"nr/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_SPECIES \u003d new Prefix(\"s/\");"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_BREED \u003d new Prefix(\"b/\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_COLOUR \u003d new Prefix(\"c/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_BLOODTYPE \u003d new Prefix(\"bt/\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":2,"-":20}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BREED;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOUR;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIES;"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"import java.util.function.Predicate;"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":"import java.util.regex.Matcher;"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"import java.util.regex.Pattern;"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"import java.util.stream.Stream;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"//@@Author wynonaK"},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"    private static final Pattern FIND_COMMAND_FORMAT_OWNER \u003d Pattern.compile(\"-(o)+(?\u003cpersonInfo\u003e.*)\");"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"    private static final Pattern FIND_COMMAND_FORMAT_PET_PATIENT \u003d Pattern.compile(\"-(p)+(?\u003cpetPatientInfo\u003e.*)\");"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"     * and returns an FindCommand object for execution. Currently acceptable formats are:"},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"     * find -o n/ nr/ t/ (inclusive of individual and all combinations)"},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":"     * find -p n/ s/ b/ c/ bt/ t/ (inclusive of individual and all combinations)"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":51,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"        final Matcher matcherForPerson \u003d FIND_COMMAND_FORMAT_OWNER.matcher(trimmedArgs);"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"        final Matcher matcherForPetPatient \u003d FIND_COMMAND_FORMAT_PET_PATIENT.matcher(trimmedArgs);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"        // Eind-owner related, else find-pet related, else error"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"        if (matcherForPerson.matches()) {"},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"            String personInfo \u003d matcherForPerson.group(\"personInfo\");"},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"            return parsePerson(personInfo);"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"        } else if (matcherForPetPatient.matches()) {"},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"            String petPatientInfo \u003d matcherForPetPatient.group(\"petPatientInfo\");"},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"            return parsePetPatient(petPatientInfo);"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"        } else {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":66,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":"     * Parses {@code personInfo} to find out what the user is parsing to find."},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":"     * @throws ParseException if the {@code personInfo} cannot be identified to a known prefix."},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"    private FindCommand parsePerson(String personInfo) throws ParseException {"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"        ArgumentMultimap argMultimapOwner \u003d"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"                ArgumentTokenizer.tokenize(personInfo, PREFIX_NAME, PREFIX_NRIC, PREFIX_TAG);"},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"        if ((!arePrefixesPresent(argMultimapOwner, PREFIX_NAME)"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 !arePrefixesPresent(argMultimapOwner, PREFIX_NRIC)"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 !arePrefixesPresent(argMultimapOwner, PREFIX_TAG))) {"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"                    \"Unknown prefix parameters!\"));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":"        Predicate\u003cPerson\u003e finalPredicate \u003d null;"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"        if ((arePrefixesPresent(argMultimapOwner, PREFIX_NAME))) {"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"            String[] nameKeywords \u003d getNameKeyword(argMultimapOwner);"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":"            Predicate\u003cPerson\u003e namePredicate \u003d  person -\u003e Arrays.stream(nameKeywords)"},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":"            finalPredicate \u003d namePredicate;"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"        if ((arePrefixesPresent(argMultimapOwner, PREFIX_NRIC))) {"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":"            String[] nricKeywords \u003d getNricKeyword(argMultimapOwner);"},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":"            Predicate\u003cPerson\u003e  nricPredicate \u003d person -\u003e Arrays.stream(nricKeywords)"},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getNric().toString(), keyword));"},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"            if (finalPredicate \u003d\u003d null) {"},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":"                finalPredicate \u003d nricPredicate;"},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":"            } else {"},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":"                finalPredicate \u003d finalPredicate.and(nricPredicate);"},{"lineNumber":101,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":104,"author":{"gitID":"wynonaK"},"content":"        if ((arePrefixesPresent(argMultimapOwner, PREFIX_TAG))) {"},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":"            String[] tagKeywords \u003d getTagKeyword(argMultimapOwner);"},{"lineNumber":106,"author":{"gitID":"wynonaK"},"content":"            Predicate\u003cPerson\u003e tagPredicate \u003d person -\u003e Arrays.stream(tagKeywords)"},{"lineNumber":107,"author":{"gitID":"wynonaK"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getTagString(), keyword));"},{"lineNumber":108,"author":{"gitID":"wynonaK"},"content":"            if (finalPredicate \u003d\u003d null) {"},{"lineNumber":109,"author":{"gitID":"wynonaK"},"content":"                finalPredicate \u003d tagPredicate;"},{"lineNumber":110,"author":{"gitID":"wynonaK"},"content":"            } else {"},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":"                finalPredicate \u003d finalPredicate.and(tagPredicate);"},{"lineNumber":112,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":113,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":115,"author":{"gitID":"wynonaK"},"content":"        return new FindCommand(finalPredicate);"},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"wynonaK"},"content":"     * Gets the nric keywords from {@code argMultimapOwner}."},{"lineNumber":120,"author":{"gitID":"wynonaK"},"content":"     * @throws ParseException if there is an illegal value found."},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"wynonaK"},"content":"    private String[] getTagKeyword(ArgumentMultimap argMultimapOwner) throws ParseException {"},{"lineNumber":123,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":124,"author":{"gitID":"wynonaK"},"content":"            String tagWithoutPrefix \u003d argMultimapOwner.getAllValues(PREFIX_TAG).get(0);"},{"lineNumber":125,"author":{"gitID":"wynonaK"},"content":"            String[] tagKeywords \u003d tagWithoutPrefix.trim().split(\"\\\\s+\");"},{"lineNumber":126,"author":{"gitID":"wynonaK"},"content":"            for (String tagKeyword : tagKeywords) {"},{"lineNumber":127,"author":{"gitID":"wynonaK"},"content":"                Tag tag \u003d ParserUtil.parseTag(tagKeyword);"},{"lineNumber":128,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":129,"author":{"gitID":"wynonaK"},"content":"            return tagKeywords;"},{"lineNumber":130,"author":{"gitID":"wynonaK"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":131,"author":{"gitID":"wynonaK"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":132,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":135,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"wynonaK"},"content":"     * Gets the nric keywords from {@code argMultimapOwner}."},{"lineNumber":137,"author":{"gitID":"wynonaK"},"content":"     * @throws ParseException if there is an illegal value found."},{"lineNumber":138,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"wynonaK"},"content":"    private String[] getNricKeyword(ArgumentMultimap argMultimapOwner) throws ParseException {"},{"lineNumber":140,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"wynonaK"},"content":"            String nricWithoutPrefix \u003d argMultimapOwner.getAllValues(PREFIX_NRIC).get(0);"},{"lineNumber":142,"author":{"gitID":"wynonaK"},"content":"            String[] nricKeywords \u003d nricWithoutPrefix.trim().split(\"\\\\s+\");"},{"lineNumber":143,"author":{"gitID":"wynonaK"},"content":"            for (String nricKeyword : nricKeywords) {"},{"lineNumber":144,"author":{"gitID":"wynonaK"},"content":"                Nric nric \u003d ParserUtil.parseNric(nricKeyword);"},{"lineNumber":145,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":146,"author":{"gitID":"wynonaK"},"content":"            return nricKeywords;"},{"lineNumber":147,"author":{"gitID":"wynonaK"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":148,"author":{"gitID":"wynonaK"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":149,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":152,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"wynonaK"},"content":"     * Gets the name keywords from {@code argMultimapOwner}."},{"lineNumber":154,"author":{"gitID":"wynonaK"},"content":"     * @throws ParseException if there is an illegal value found."},{"lineNumber":155,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"wynonaK"},"content":"    private String[] getNameKeyword(ArgumentMultimap argMultimapOwner) throws ParseException {"},{"lineNumber":157,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":158,"author":{"gitID":"wynonaK"},"content":"            String nameWithoutPrefix \u003d argMultimapOwner.getAllValues(PREFIX_NAME).get(0);"},{"lineNumber":159,"author":{"gitID":"wynonaK"},"content":"            String[] nameKeywords \u003d nameWithoutPrefix.trim().split(\"\\\\s+\");"},{"lineNumber":160,"author":{"gitID":"wynonaK"},"content":"            for (String nameKeyword : nameKeywords) {"},{"lineNumber":161,"author":{"gitID":"wynonaK"},"content":"                Name name \u003d ParserUtil.parseName(nameKeyword);"},{"lineNumber":162,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":163,"author":{"gitID":"wynonaK"},"content":"            return nameKeywords;"},{"lineNumber":164,"author":{"gitID":"wynonaK"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":165,"author":{"gitID":"wynonaK"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":166,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":169,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"wynonaK"},"content":"     * Gets the name keywords from {@code argMultimapPetPatient}."},{"lineNumber":171,"author":{"gitID":"wynonaK"},"content":"     * @throws ParseException if there is an illegal value found."},{"lineNumber":172,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"wynonaK"},"content":"    private String[] getPetPatientNameKeyword(ArgumentMultimap argMultimapPetPatient) throws ParseException {"},{"lineNumber":174,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":175,"author":{"gitID":"wynonaK"},"content":"            String nameWithoutPrefix \u003d argMultimapPetPatient.getAllValues(PREFIX_NAME).get(0);"},{"lineNumber":176,"author":{"gitID":"wynonaK"},"content":"            String[] nameKeywords \u003d nameWithoutPrefix.trim().split(\"\\\\s+\");"},{"lineNumber":177,"author":{"gitID":"wynonaK"},"content":"            for (String nameKeyword : nameKeywords) {"},{"lineNumber":178,"author":{"gitID":"wynonaK"},"content":"                PetPatientName name \u003d ParserUtil.parsePetPatientName(nameKeyword);"},{"lineNumber":179,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":180,"author":{"gitID":"wynonaK"},"content":"            return nameKeywords;"},{"lineNumber":181,"author":{"gitID":"wynonaK"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":182,"author":{"gitID":"wynonaK"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":183,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":186,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"wynonaK"},"content":"     * Gets the keywords from {@code argMultimapPetPatient} with {@code prefix}."},{"lineNumber":188,"author":{"gitID":"wynonaK"},"content":"     * @throws ParseException if there is an illegal value found."},{"lineNumber":189,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"wynonaK"},"content":"    private String[] getStringKeyword(ArgumentMultimap argMultimapPetPatient, Prefix prefix) throws ParseException {"},{"lineNumber":191,"author":{"gitID":"wynonaK"},"content":"        String stringWithoutPrefix \u003d argMultimapPetPatient.getAllValues(prefix).get(0);"},{"lineNumber":192,"author":{"gitID":"wynonaK"},"content":"        if (stringWithoutPrefix.equals(\"\")) {"},{"lineNumber":193,"author":{"gitID":"wynonaK"},"content":"            throw new ParseException(\"Invalid keyword parameters!\");"},{"lineNumber":194,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"wynonaK"},"content":"        return stringWithoutPrefix.trim().split(\"\\\\s+\");"},{"lineNumber":196,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":198,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"wynonaK"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":200,"author":{"gitID":"wynonaK"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":201,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"wynonaK"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":203,"author":{"gitID":"wynonaK"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":204,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":206,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"wynonaK"},"content":"     * Parses {@code petPatientInfo} to find out what the user is parsing to find."},{"lineNumber":208,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"wynonaK"},"content":"    private FindCommand parsePetPatient(String petPatientInfo) throws ParseException, IllegalArgumentException {"},{"lineNumber":210,"author":{"gitID":"wynonaK"},"content":"        ArgumentMultimap argMultimapPetPatient \u003d"},{"lineNumber":211,"author":{"gitID":"wynonaK"},"content":"                ArgumentTokenizer.tokenize(petPatientInfo, PREFIX_NAME, PREFIX_SPECIES, PREFIX_BREED,"},{"lineNumber":212,"author":{"gitID":"wynonaK"},"content":"                        PREFIX_COLOUR, PREFIX_BLOODTYPE, PREFIX_TAG);"},{"lineNumber":213,"author":{"gitID":"wynonaK"},"content":"        if ((!arePrefixesPresent(argMultimapPetPatient, PREFIX_NAME)"},{"lineNumber":214,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 !arePrefixesPresent(argMultimapPetPatient, PREFIX_SPECIES)"},{"lineNumber":215,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 !arePrefixesPresent(argMultimapPetPatient, PREFIX_BREED)"},{"lineNumber":216,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 !arePrefixesPresent(argMultimapPetPatient, PREFIX_COLOUR)"},{"lineNumber":217,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 !arePrefixesPresent(argMultimapPetPatient, PREFIX_BLOODTYPE)"},{"lineNumber":218,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 !arePrefixesPresent(argMultimapPetPatient, PREFIX_TAG))) {"},{"lineNumber":219,"author":{"gitID":"wynonaK"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":220,"author":{"gitID":"wynonaK"},"content":"                    \"Unknown prefix parameters!\"));"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"wynonaK"},"content":"        Predicate\u003cPetPatient\u003e finalPredicate \u003d null;"},{"lineNumber":224,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":225,"author":{"gitID":"wynonaK"},"content":"        if ((arePrefixesPresent(argMultimapPetPatient, PREFIX_NAME))) {"},{"lineNumber":226,"author":{"gitID":"wynonaK"},"content":"            String[] nameKeywords \u003d getPetPatientNameKeyword(argMultimapPetPatient);"},{"lineNumber":227,"author":{"gitID":"wynonaK"},"content":"            Predicate\u003cPetPatient\u003e namePredicate \u003d  petPatient -\u003e Arrays.stream(nameKeywords)"},{"lineNumber":228,"author":{"gitID":"wynonaK"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(petPatient.getName().fullName, keyword));"},{"lineNumber":229,"author":{"gitID":"wynonaK"},"content":"            finalPredicate \u003d namePredicate;"},{"lineNumber":230,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":232,"author":{"gitID":"wynonaK"},"content":"        if ((arePrefixesPresent(argMultimapPetPatient, PREFIX_SPECIES))) {"},{"lineNumber":233,"author":{"gitID":"wynonaK"},"content":"            String[] stringKeywords \u003d getStringKeyword(argMultimapPetPatient, PREFIX_SPECIES);"},{"lineNumber":234,"author":{"gitID":"wynonaK"},"content":"            Predicate\u003cPetPatient\u003e stringPredicate \u003d  petPatient -\u003e Arrays.stream(stringKeywords)"},{"lineNumber":235,"author":{"gitID":"wynonaK"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(petPatient.getSpecies(), keyword));"},{"lineNumber":236,"author":{"gitID":"wynonaK"},"content":"            if (finalPredicate \u003d\u003d null) {"},{"lineNumber":237,"author":{"gitID":"wynonaK"},"content":"                finalPredicate \u003d stringPredicate;"},{"lineNumber":238,"author":{"gitID":"wynonaK"},"content":"            } else {"},{"lineNumber":239,"author":{"gitID":"wynonaK"},"content":"                finalPredicate \u003d finalPredicate.and(stringPredicate);"},{"lineNumber":240,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":241,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":243,"author":{"gitID":"wynonaK"},"content":"        if ((arePrefixesPresent(argMultimapPetPatient, PREFIX_BREED))) {"},{"lineNumber":244,"author":{"gitID":"wynonaK"},"content":"            String[] stringKeywords \u003d getStringKeyword(argMultimapPetPatient, PREFIX_BREED);"},{"lineNumber":245,"author":{"gitID":"wynonaK"},"content":"            Predicate\u003cPetPatient\u003e stringPredicate \u003d  petPatient -\u003e Arrays.stream(stringKeywords)"},{"lineNumber":246,"author":{"gitID":"wynonaK"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(petPatient.getBreed(), keyword));"},{"lineNumber":247,"author":{"gitID":"wynonaK"},"content":"            if (finalPredicate \u003d\u003d null) {"},{"lineNumber":248,"author":{"gitID":"wynonaK"},"content":"                finalPredicate \u003d stringPredicate;"},{"lineNumber":249,"author":{"gitID":"wynonaK"},"content":"            } else {"},{"lineNumber":250,"author":{"gitID":"wynonaK"},"content":"                finalPredicate \u003d finalPredicate.and(stringPredicate);"},{"lineNumber":251,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":252,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":253,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":254,"author":{"gitID":"wynonaK"},"content":"        if ((arePrefixesPresent(argMultimapPetPatient, PREFIX_COLOUR))) {"},{"lineNumber":255,"author":{"gitID":"wynonaK"},"content":"            String[] stringKeywords \u003d getStringKeyword(argMultimapPetPatient, PREFIX_COLOUR);"},{"lineNumber":256,"author":{"gitID":"wynonaK"},"content":"            Predicate\u003cPetPatient\u003e stringPredicate \u003d  petPatient -\u003e Arrays.stream(stringKeywords)"},{"lineNumber":257,"author":{"gitID":"wynonaK"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(petPatient.getColour(), keyword));"},{"lineNumber":258,"author":{"gitID":"wynonaK"},"content":"            if (finalPredicate \u003d\u003d null) {"},{"lineNumber":259,"author":{"gitID":"wynonaK"},"content":"                finalPredicate \u003d stringPredicate;"},{"lineNumber":260,"author":{"gitID":"wynonaK"},"content":"            } else {"},{"lineNumber":261,"author":{"gitID":"wynonaK"},"content":"                finalPredicate \u003d finalPredicate.and(stringPredicate);"},{"lineNumber":262,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":263,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":264,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":265,"author":{"gitID":"wynonaK"},"content":"        if ((arePrefixesPresent(argMultimapPetPatient, PREFIX_BLOODTYPE))) {"},{"lineNumber":266,"author":{"gitID":"wynonaK"},"content":"            String[] stringKeywords \u003d getStringKeyword(argMultimapPetPatient, PREFIX_BLOODTYPE);"},{"lineNumber":267,"author":{"gitID":"wynonaK"},"content":"            Predicate\u003cPetPatient\u003e stringPredicate \u003d  petPatient -\u003e Arrays.stream(stringKeywords)"},{"lineNumber":268,"author":{"gitID":"wynonaK"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(petPatient.getBloodType(), keyword));"},{"lineNumber":269,"author":{"gitID":"wynonaK"},"content":"            if (finalPredicate \u003d\u003d null) {"},{"lineNumber":270,"author":{"gitID":"wynonaK"},"content":"                finalPredicate \u003d stringPredicate;"},{"lineNumber":271,"author":{"gitID":"wynonaK"},"content":"            } else {"},{"lineNumber":272,"author":{"gitID":"wynonaK"},"content":"                finalPredicate \u003d finalPredicate.and(stringPredicate);"},{"lineNumber":273,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":274,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":275,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":276,"author":{"gitID":"wynonaK"},"content":"        if ((arePrefixesPresent(argMultimapPetPatient, PREFIX_TAG))) {"},{"lineNumber":277,"author":{"gitID":"wynonaK"},"content":"            String[] tagKeywords \u003d getTagKeyword(argMultimapPetPatient);"},{"lineNumber":278,"author":{"gitID":"wynonaK"},"content":"            Predicate\u003cPetPatient\u003e tagPredicate \u003d petPatient -\u003e Arrays.stream(tagKeywords)"},{"lineNumber":279,"author":{"gitID":"wynonaK"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(petPatient.getTagString(), keyword));"},{"lineNumber":280,"author":{"gitID":"wynonaK"},"content":"            if (finalPredicate \u003d\u003d null) {"},{"lineNumber":281,"author":{"gitID":"wynonaK"},"content":"                finalPredicate \u003d tagPredicate;"},{"lineNumber":282,"author":{"gitID":"wynonaK"},"content":"            } else {"},{"lineNumber":283,"author":{"gitID":"wynonaK"},"content":"                finalPredicate \u003d finalPredicate.and(tagPredicate);"},{"lineNumber":284,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":285,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":286,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":287,"author":{"gitID":"wynonaK"},"content":"        return new FindCommand(finalPredicate, 2); //because of JVM problem"},{"lineNumber":288,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":251,"-":38}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Remark;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":27,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * First character of each word will be set to upper case."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * All other characters will be set to lower case."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        String[] wordsInName \u003d trimmedName.split(\" \");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        String formattedName \u003d \"\";"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        for (String n : wordsInName) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            formattedName +\u003d n.substring(0, 1).toUpperCase() + n.substring(1).toLowerCase() + \" \";"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return new Name(formattedName.trim());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"wynonaK"},"content":"    //@@author wynonaK"},{"lineNumber":131,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"wynonaK"},"content":"     * Parses a {@code String remark} into an {@code Remark}."},{"lineNumber":133,"author":{"gitID":"wynonaK"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":134,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":135,"author":{"gitID":"wynonaK"},"content":"     * @throws IllegalValueException if the given {@code remark} is invalid."},{"lineNumber":136,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"wynonaK"},"content":"    public static Remark parseRemark(String remark) throws IllegalValueException {"},{"lineNumber":138,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(remark);"},{"lineNumber":139,"author":{"gitID":"wynonaK"},"content":"        String trimmedRemark \u003d remark.trim();"},{"lineNumber":140,"author":{"gitID":"wynonaK"},"content":"        if (!Remark.isValidRemark(trimmedRemark)) {"},{"lineNumber":141,"author":{"gitID":"wynonaK"},"content":"            throw new IllegalValueException(Remark.MESSAGE_REMARK_CONSTRAINTS);"},{"lineNumber":142,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"wynonaK"},"content":"        return new Remark(trimmedRemark);"},{"lineNumber":144,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":146,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"wynonaK"},"content":"     * Parses a {@code Optional\u003cString\u003e remark} into an {@code Optional\u003cRemark\u003e} if {@code remark} is present."},{"lineNumber":148,"author":{"gitID":"wynonaK"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":149,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"wynonaK"},"content":"    public static Optional\u003cRemark\u003e parseRemark(Optional\u003cString\u003e remark) throws IllegalValueException {"},{"lineNumber":151,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(remark);"},{"lineNumber":152,"author":{"gitID":"wynonaK"},"content":"        return remark.isPresent() ? Optional.of(parseRemark(remark.get())) : Optional.empty();"},{"lineNumber":153,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":155,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"wynonaK"},"content":"     * Parses a {@code String dateTime} into an {@code LocalDateTime} object."},{"lineNumber":157,"author":{"gitID":"wynonaK"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":158,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":159,"author":{"gitID":"wynonaK"},"content":"     * @throws IllegalValueException if the given {@code dateTime} is invalid."},{"lineNumber":160,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"wynonaK"},"content":"    public static LocalDateTime parseDateTime(String dateTime) throws IllegalValueException {"},{"lineNumber":162,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(dateTime);"},{"lineNumber":163,"author":{"gitID":"wynonaK"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":164,"author":{"gitID":"wynonaK"},"content":"        LocalDateTime localDateTime \u003d null;"},{"lineNumber":165,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":166,"author":{"gitID":"wynonaK"},"content":"            localDateTime \u003d LocalDateTime.parse(dateTime, formatter);"},{"lineNumber":167,"author":{"gitID":"wynonaK"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":168,"author":{"gitID":"wynonaK"},"content":"            throw new IllegalValueException(\"Please follow the format of yyyy-MM-dd HH:mm\");"},{"lineNumber":169,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"wynonaK"},"content":"        return localDateTime;"},{"lineNumber":171,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":173,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"wynonaK"},"content":"     * Parses {@code Optional\u003cString\u003e dateTime} into an {@code Optional\u003cLocalDatetime\u003e} if {@code dateTime} is present."},{"lineNumber":175,"author":{"gitID":"wynonaK"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":176,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"wynonaK"},"content":"    public static Optional\u003cLocalDateTime\u003e parseDateTime(Optional\u003cString\u003e dateTime) throws IllegalValueException {"},{"lineNumber":178,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(dateTime);"},{"lineNumber":179,"author":{"gitID":"wynonaK"},"content":"        return dateTime.isPresent() ? Optional.of(parseDateTime(dateTime.get())) : Optional.empty();"},{"lineNumber":180,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":182,"author":{"gitID":"wynonaK"},"content":"    //@@author"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * Leading and trailing whitesp                                                                aces will be trimmed."},{"lineNumber":186,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * Parses a {@code String nric} into a {@code NRIC}."},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * @param nric"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * @return"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    public static Nric parseNric(String nric) throws IllegalValueException {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        requireNonNull(nric);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        String trimmedNric \u003d nric.trim();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        if (!Nric.isValidNric(trimmedNric)) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Nric.MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        return new Nric(trimmedNric);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e nric} into an {@code Optional\u003cNRIC\u003e} if {@code nric} is present."},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * @param nric"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * @return"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    public static Optional\u003cNric\u003e parseNric(Optional\u003cString\u003e nric) throws IllegalValueException {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        requireNonNull(nric);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        return nric.isPresent() ? Optional.of(parseNric(nric.get())) : Optional.empty();"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":238,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":240,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":252,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":262,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"chialejing"},"content":"     * Parses a {@code String name} into a {@code PetPatientName}."},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * First character of each word will be set to upper case."},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * All other characters will be set to lower case."},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":268,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":269,"author":{"gitID":"chialejing"},"content":"    public static PetPatientName parsePetPatientName(String name) throws IllegalValueException {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":272,"author":{"gitID":"chialejing"},"content":"        if (!PetPatientName.isValidName(trimmedName)) {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(PetPatientName.MESSAGE_PET_NAME_CONSTRAINTS);"},{"lineNumber":274,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        String[] wordsInName \u003d trimmedName.split(\" \");"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        String formattedName \u003d \"\";"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        for (String n : wordsInName) {"},{"lineNumber":278,"author":{"gitID":"-"},"content":"            formattedName +\u003d n.substring(0, 1).toUpperCase() + n.substring(1).toLowerCase() + \" \";"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        return new PetPatientName(formattedName.trim());"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":284,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":285,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":286,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":287,"author":{"gitID":"chialejing"},"content":"    public static Optional\u003cPetPatientName\u003e parsePetPatientName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":288,"author":{"gitID":"chialejing"},"content":"        requireNonNull(name);"},{"lineNumber":289,"author":{"gitID":"chialejing"},"content":"        return name.isPresent() ? Optional.of(parsePetPatientName(name.get())) : Optional.empty();"},{"lineNumber":290,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":292,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":293,"author":{"gitID":"chialejing"},"content":"     * Parses a {@code String species} into a {@code String}."},{"lineNumber":294,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":295,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":296,"author":{"gitID":"chialejing"},"content":"    public static String parseSpecies(String species) {"},{"lineNumber":297,"author":{"gitID":"chialejing"},"content":"        requireNonNull(species);"},{"lineNumber":298,"author":{"gitID":"chialejing"},"content":"        String trimmedSpecies \u003d species.trim();"},{"lineNumber":299,"author":{"gitID":"chialejing"},"content":"        // check for valid species incomplete"},{"lineNumber":300,"author":{"gitID":"chialejing"},"content":"        return trimmedSpecies;"},{"lineNumber":301,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":302,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":303,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":304,"author":{"gitID":"chialejing"},"content":"     * Parses a {@code Optional\u003cString\u003e species} into an {@code Optional\u003cString\u003e} if {@code species} is present."},{"lineNumber":305,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":306,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":307,"author":{"gitID":"chialejing"},"content":"    public static Optional\u003cString\u003e parseSpecies(Optional\u003cString\u003e species) throws IllegalValueException {"},{"lineNumber":308,"author":{"gitID":"chialejing"},"content":"        requireNonNull(species);"},{"lineNumber":309,"author":{"gitID":"chialejing"},"content":"        return species.isPresent() ? Optional.of(parseSpecies(species.get())) : Optional.empty();"},{"lineNumber":310,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":311,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":312,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":313,"author":{"gitID":"chialejing"},"content":"     * Parses a {@code String breed} into a {@code String}."},{"lineNumber":314,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":315,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":316,"author":{"gitID":"chialejing"},"content":"    public static String parseBreed(String breed) {"},{"lineNumber":317,"author":{"gitID":"chialejing"},"content":"        requireNonNull(breed);"},{"lineNumber":318,"author":{"gitID":"chialejing"},"content":"        String trimmedBreed \u003d breed.trim();"},{"lineNumber":319,"author":{"gitID":"chialejing"},"content":"        // check for valid breed incomplete"},{"lineNumber":320,"author":{"gitID":"chialejing"},"content":"        return trimmedBreed;"},{"lineNumber":321,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":322,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":323,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":324,"author":{"gitID":"chialejing"},"content":"     * Parses a {@code Optional\u003cString\u003e breed} into an {@code Optional\u003cString\u003e} if {@code breed} is present."},{"lineNumber":325,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":326,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":327,"author":{"gitID":"chialejing"},"content":"    public static Optional\u003cString\u003e parseBreed(Optional\u003cString\u003e breed) throws IllegalValueException {"},{"lineNumber":328,"author":{"gitID":"chialejing"},"content":"        requireNonNull(breed);"},{"lineNumber":329,"author":{"gitID":"chialejing"},"content":"        return breed.isPresent() ? Optional.of(parseBreed(breed.get())) : Optional.empty();"},{"lineNumber":330,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":331,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":332,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":333,"author":{"gitID":"chialejing"},"content":"     * Parses a {@code String colour} into a {@code String}."},{"lineNumber":334,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":335,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":336,"author":{"gitID":"chialejing"},"content":"    public static String parseColour(String colour) {"},{"lineNumber":337,"author":{"gitID":"chialejing"},"content":"        requireNonNull(colour);"},{"lineNumber":338,"author":{"gitID":"chialejing"},"content":"        String trimmedColour \u003d colour.trim();"},{"lineNumber":339,"author":{"gitID":"chialejing"},"content":"        // check for valid colour incomplete"},{"lineNumber":340,"author":{"gitID":"chialejing"},"content":"        return trimmedColour;"},{"lineNumber":341,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":342,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":343,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":344,"author":{"gitID":"chialejing"},"content":"     * Parses a {@code Optional\u003cString\u003e colour} into an {@code Optional\u003cString\u003e} if {@code colour} is present."},{"lineNumber":345,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":346,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":347,"author":{"gitID":"chialejing"},"content":"    public static Optional\u003cString\u003e parseColour(Optional\u003cString\u003e colour) throws IllegalValueException {"},{"lineNumber":348,"author":{"gitID":"chialejing"},"content":"        requireNonNull(colour);"},{"lineNumber":349,"author":{"gitID":"chialejing"},"content":"        return colour.isPresent() ? Optional.of(parseColour(colour.get())) : Optional.empty();"},{"lineNumber":350,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":351,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":352,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":353,"author":{"gitID":"chialejing"},"content":"     * Parses a {@code String bloodType} into a {@code String}."},{"lineNumber":354,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":355,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":356,"author":{"gitID":"chialejing"},"content":"    public static String parseBloodType(String bloodType) {"},{"lineNumber":357,"author":{"gitID":"chialejing"},"content":"        requireNonNull(bloodType);"},{"lineNumber":358,"author":{"gitID":"chialejing"},"content":"        String trimmedBloodType \u003d bloodType.trim();"},{"lineNumber":359,"author":{"gitID":"chialejing"},"content":"        // check for valid blood type incomplete"},{"lineNumber":360,"author":{"gitID":"chialejing"},"content":"        return trimmedBloodType;"},{"lineNumber":361,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":362,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":363,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":364,"author":{"gitID":"chialejing"},"content":"     * Parses a {@code Optional\u003cString\u003e bloodType} into an {@code Optional\u003cString\u003e} if {@code bloodType} is present."},{"lineNumber":365,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":366,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":367,"author":{"gitID":"chialejing"},"content":"    public static Optional\u003cString\u003e parseBloodType(Optional\u003cString\u003e bloodType) throws IllegalValueException {"},{"lineNumber":368,"author":{"gitID":"chialejing"},"content":"        requireNonNull(bloodType);"},{"lineNumber":369,"author":{"gitID":"chialejing"},"content":"        return bloodType.isPresent() ? Optional.of(parseBloodType(bloodType.get())) : Optional.empty();"},{"lineNumber":370,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":371,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":79,"wynonaK":57,"-":235}},{"path":"src/main/java/seedu/address/logic/CommandSyntaxWords.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BREED;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOUR;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIES;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"Aquarinte"},"content":"//@@author aquarinte"},{"lineNumber":34,"author":{"gitID":"Aquarinte"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"Aquarinte"},"content":" * Stores all command syntax used in Medeina: command words, prefixes and options."},{"lineNumber":36,"author":{"gitID":"Aquarinte"},"content":" */"},{"lineNumber":37,"author":{"gitID":"Aquarinte"},"content":"public class CommandSyntaxWords {"},{"lineNumber":38,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":39,"author":{"gitID":"Aquarinte"},"content":"    private static CommandSyntaxWords instance;"},{"lineNumber":40,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":41,"author":{"gitID":"Aquarinte"},"content":"    private static final Set\u003cString\u003e commandWords \u003d Stream.of("},{"lineNumber":42,"author":{"gitID":"Aquarinte"},"content":"            AddCommand.COMMAND_WORD, EditCommand.COMMAND_WORD, DeleteCommand.COMMAND_WORD, ListCommand.COMMAND_WORD,"},{"lineNumber":43,"author":{"gitID":"Aquarinte"},"content":"            FindCommand.COMMAND_WORD, ChangeThemeCommand.COMMAND_WORD, ClearCommand.COMMAND_WORD,"},{"lineNumber":44,"author":{"gitID":"Aquarinte"},"content":"            HelpCommand.COMMAND_WORD, ExitCommand.COMMAND_WORD, RedoCommand.COMMAND_WORD, UndoCommand.COMMAND_WORD,"},{"lineNumber":45,"author":{"gitID":"Aquarinte"},"content":"            HistoryCommand.COMMAND_WORD).collect(Collectors.toSet());"},{"lineNumber":46,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":47,"author":{"gitID":"Aquarinte"},"content":"    private static final Set\u003cString\u003e prefixes \u003d Stream.of("},{"lineNumber":48,"author":{"gitID":"Aquarinte"},"content":"            PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_NRIC, PREFIX_BREED, PREFIX_SPECIES,"},{"lineNumber":49,"author":{"gitID":"Aquarinte"},"content":"            PREFIX_COLOUR, PREFIX_BLOODTYPE, PREFIX_DATE, PREFIX_REMARK, PREFIX_TAG)"},{"lineNumber":50,"author":{"gitID":"Aquarinte"},"content":"            .map(p -\u003e p.toString())"},{"lineNumber":51,"author":{"gitID":"Aquarinte"},"content":"            .collect(Collectors.toSet());"},{"lineNumber":52,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":53,"author":{"gitID":"Aquarinte"},"content":"    private static final Set\u003cString\u003e options \u003d Stream.of(\"-o\", \"-p\", \"-a\").collect(Collectors.toSet());"},{"lineNumber":54,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":55,"author":{"gitID":"Aquarinte"},"content":"    public static CommandSyntaxWords getInstance() {"},{"lineNumber":56,"author":{"gitID":"Aquarinte"},"content":"        if (instance \u003d\u003d null) {"},{"lineNumber":57,"author":{"gitID":"Aquarinte"},"content":"            instance \u003d new CommandSyntaxWords();"},{"lineNumber":58,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"Aquarinte"},"content":"        return instance;"},{"lineNumber":60,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":62,"author":{"gitID":"Aquarinte"},"content":"    public Set\u003cString\u003e getCommandWords() {"},{"lineNumber":63,"author":{"gitID":"Aquarinte"},"content":"        return commandWords;"},{"lineNumber":64,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":66,"author":{"gitID":"Aquarinte"},"content":"    public Set\u003cString\u003e getPrefixes() {"},{"lineNumber":67,"author":{"gitID":"Aquarinte"},"content":"        return prefixes;"},{"lineNumber":68,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":70,"author":{"gitID":"Aquarinte"},"content":"    public Set\u003cString\u003e getOptions() {"},{"lineNumber":71,"author":{"gitID":"Aquarinte"},"content":"        return options;"},{"lineNumber":72,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":41,"-":32}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.AppointmentDependencyNotEmptyException;"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.exceptions.PetDependencyNotEmptyException;"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.exceptions.PetPatientNotFoundException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":" * Deletes a person, pet patient or appointment from the address book."},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"            + \" -[f]o/-[f]p/-a\""},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"            + \": Deletes the person/pet/appointment identified by the index number used in the last listing.\\n\""},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"            + \"Additional -[f] options indicates forcefully deleting object and all related dependencies.\\n\""},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"            + \"Parameters: INDEX (must be a positive integer, must not be invalid)\\n\""},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"            + \"Example: \" + COMMAND_WORD + \" -o 1\";"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_USAGE_OWNER \u003d COMMAND_WORD"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"            + \" -o\""},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"            + \"Parameters: INDEX (must be a positive integer, must not be invalid)\\n\""},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"            + \"Example: \" + COMMAND_WORD + \" -o 1\";"},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_USAGE_PET_PATIENT \u003d COMMAND_WORD"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"            + \" -p\""},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"            + \": Deletes the pet patient identified by the index number used in the last pet patient listing.\\n\""},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"            + \"Parameters: INDEX (must be a positive integer, must not be invalid)\\n\""},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"            + \"Example: \" + COMMAND_WORD + \" -p 1\";"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_USAGE_APPOINTMENT \u003d COMMAND_WORD"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"            + \" -a\""},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":"            + \": Deletes the appointment identified by the index number used in the last appointment listing.\\n\""},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"            + \"Parameters: INDEX (must be a positive integer, must not be invalid)\\n\""},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":"            + \"Example: \" + COMMAND_WORD + \" -a 1\";"},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_USAGE_FORCE_OWNER \u003d COMMAND_WORD"},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"            + \" -fo\""},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"            + \": Forcefully deletes the person and all related dependencies \""},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"            + \"identified by the index number used in the last person listing.\\n\""},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"            + \"Example: \" + COMMAND_WORD + \" -fo 1\";"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_USAGE_FORCE_PET_PATIENT \u003d COMMAND_WORD"},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"            + \" -fp\""},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"            + \": Forcefully deletes the pet and all related dependencies \""},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"            + \"identified by the index number used in the last person listing.\\n\""},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"            + \"Parameters: INDEX (must be a positive integer, must not be invalid)\\n\""},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"            + \"Example: \" + COMMAND_WORD + \" -fp 1\";"},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_DELETE_PET_PATIENT_SUCCESS \u003d \"Deleted Pet Patient: %1$s\";"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_DELETE_APPOINTMENT_SUCCESS \u003d \"Deleted Appointment: %1$s\";"},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"    private final Index targetIndex;"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"    private final int type;"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"    private Person personToDelete;"},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"    private PetPatient petPatientToDelete;"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"    private Appointment appointmentToDelete;"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"    public DeleteCommand(int type, Index targetIndex) {"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"        this.type \u003d type;"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(model);"},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":"            switch (type) {"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":"            case 1: return deletePerson();"},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":"            case 2: return deletePetPatient();"},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"            case 3: return deleteAppointment();"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":"            case 4: return deleteForcePerson();"},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":"            case 5: return deleteForcePetPatient();"},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":"            default:"},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"                throw new CommandException(MESSAGE_USAGE);"},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":"        } catch (PetDependencyNotEmptyException e) {"},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":"            throw new CommandException(Messages.MESSAGE_DEPENDENCIES_EXIST);"},{"lineNumber":101,"author":{"gitID":"wynonaK"},"content":"        } catch (AppointmentDependencyNotEmptyException e) {"},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":"            throw new CommandException(Messages.MESSAGE_DEPENDENCIES_EXIST);"},{"lineNumber":103,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"wynonaK"},"content":"     * Deletes {@code personToDelete} from the address book."},{"lineNumber":107,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"wynonaK"},"content":"    private CommandResult deletePerson() throws PetDependencyNotEmptyException {"},{"lineNumber":109,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":110,"author":{"gitID":"wynonaK"},"content":"            requireNonNull(personToDelete);"},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":112,"author":{"gitID":"wynonaK"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":113,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":114,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":119,"author":{"gitID":"wynonaK"},"content":"    private void getPersonToDelete() throws CommandException {"},{"lineNumber":120,"author":{"gitID":"wynonaK"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":122,"author":{"gitID":"wynonaK"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":123,"author":{"gitID":"wynonaK"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":124,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":126,"author":{"gitID":"wynonaK"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":127,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":129,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"wynonaK"},"content":"     * Deletes the pet patient {@code petPatientToDelete} from the address book."},{"lineNumber":131,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"wynonaK"},"content":"    private CommandResult deletePetPatient() throws AppointmentDependencyNotEmptyException {"},{"lineNumber":133,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":134,"author":{"gitID":"wynonaK"},"content":"            requireNonNull(petPatientToDelete);"},{"lineNumber":135,"author":{"gitID":"wynonaK"},"content":"            model.deletePetPatient(petPatientToDelete);"},{"lineNumber":136,"author":{"gitID":"wynonaK"},"content":"        } catch (PetPatientNotFoundException ppnfe) {"},{"lineNumber":137,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"The target pet cannot be missing\");"},{"lineNumber":138,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":140,"author":{"gitID":"wynonaK"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PET_PATIENT_SUCCESS, petPatientToDelete));"},{"lineNumber":141,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":143,"author":{"gitID":"wynonaK"},"content":"    private void getPetPatientToDelete() throws CommandException {"},{"lineNumber":144,"author":{"gitID":"wynonaK"},"content":"        List\u003cPetPatient\u003e lastShownList \u003d model.getFilteredPetPatientList();"},{"lineNumber":145,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":146,"author":{"gitID":"wynonaK"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":147,"author":{"gitID":"wynonaK"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":148,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":150,"author":{"gitID":"wynonaK"},"content":"        petPatientToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":151,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"wynonaK"},"content":"     * Deletes the appointment {@code appointmentToDelete} from the address book."},{"lineNumber":154,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"wynonaK"},"content":"    private CommandResult deleteAppointment() {"},{"lineNumber":156,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":157,"author":{"gitID":"wynonaK"},"content":"            requireNonNull(appointmentToDelete);"},{"lineNumber":158,"author":{"gitID":"wynonaK"},"content":"            model.deleteAppointment(appointmentToDelete);"},{"lineNumber":159,"author":{"gitID":"wynonaK"},"content":"        } catch (AppointmentNotFoundException anfe) {"},{"lineNumber":160,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"The target appointment cannot be missing\");"},{"lineNumber":161,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":163,"author":{"gitID":"wynonaK"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_APPOINTMENT_SUCCESS, appointmentToDelete));"},{"lineNumber":164,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":166,"author":{"gitID":"wynonaK"},"content":"    private void getAppointmentToDelete() throws CommandException {"},{"lineNumber":167,"author":{"gitID":"wynonaK"},"content":"        List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();"},{"lineNumber":168,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":169,"author":{"gitID":"wynonaK"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":170,"author":{"gitID":"wynonaK"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":171,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":173,"author":{"gitID":"wynonaK"},"content":"        appointmentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":174,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":176,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"wynonaK"},"content":"     * Forcefully deletes {@code personToDelete} from the address book."},{"lineNumber":178,"author":{"gitID":"wynonaK"},"content":"     * All related dependencies (pet patients, appointments) will be deleted as well."},{"lineNumber":179,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"wynonaK"},"content":"    private CommandResult deleteForcePerson() {"},{"lineNumber":181,"author":{"gitID":"wynonaK"},"content":"        String deleteDependenciesList \u003d \"\";"},{"lineNumber":182,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":183,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":184,"author":{"gitID":"wynonaK"},"content":"            requireNonNull(personToDelete);"},{"lineNumber":185,"author":{"gitID":"wynonaK"},"content":"            List\u003cPetPatient\u003e petPatientsDeleted \u003d model.deletePetPatientDependencies(personToDelete);"},{"lineNumber":186,"author":{"gitID":"wynonaK"},"content":"            List\u003cAppointment\u003e appointmentsDeleted \u003d new ArrayList\u003c\u003e();"},{"lineNumber":187,"author":{"gitID":"wynonaK"},"content":"            for (PetPatient pp : petPatientsDeleted) {"},{"lineNumber":188,"author":{"gitID":"wynonaK"},"content":"                System.out.println(pp.getName());"},{"lineNumber":189,"author":{"gitID":"wynonaK"},"content":"                appointmentsDeleted.addAll(model.deleteAppointmentDependencies(pp));"},{"lineNumber":190,"author":{"gitID":"wynonaK"},"content":"                deleteDependenciesList +\u003d \"\\n\" + (String.format(MESSAGE_DELETE_PET_PATIENT_SUCCESS, pp));"},{"lineNumber":191,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":192,"author":{"gitID":"wynonaK"},"content":"            for (Appointment appointment : appointmentsDeleted) {"},{"lineNumber":193,"author":{"gitID":"wynonaK"},"content":"                deleteDependenciesList +\u003d \"\\n\" + (String.format(MESSAGE_DELETE_APPOINTMENT_SUCCESS, appointment));"},{"lineNumber":194,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":195,"author":{"gitID":"wynonaK"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":196,"author":{"gitID":"wynonaK"},"content":"        } catch (PersonNotFoundException e) {"},{"lineNumber":197,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":198,"author":{"gitID":"wynonaK"},"content":"        } catch (PetDependencyNotEmptyException e) {"},{"lineNumber":199,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"Pet dependencies still exist!\");"},{"lineNumber":200,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":202,"author":{"gitID":"wynonaK"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete)"},{"lineNumber":203,"author":{"gitID":"wynonaK"},"content":"                + deleteDependenciesList);"},{"lineNumber":204,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":206,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"wynonaK"},"content":"     * Forcefully deletes {@code petPatientToDelete} from the address book."},{"lineNumber":208,"author":{"gitID":"wynonaK"},"content":"     * All related dependencies (appointments) will be deleted as well."},{"lineNumber":209,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"wynonaK"},"content":"    private CommandResult deleteForcePetPatient() {"},{"lineNumber":211,"author":{"gitID":"wynonaK"},"content":"        String deleteDependenciesList \u003d \"\";"},{"lineNumber":212,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":213,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":214,"author":{"gitID":"wynonaK"},"content":"            requireNonNull(petPatientToDelete);"},{"lineNumber":215,"author":{"gitID":"wynonaK"},"content":"            List\u003cAppointment\u003e appointmentDependenciesDeleted \u003d model.deleteAppointmentDependencies(petPatientToDelete);"},{"lineNumber":216,"author":{"gitID":"wynonaK"},"content":"            for (Appointment appointment : appointmentDependenciesDeleted) {"},{"lineNumber":217,"author":{"gitID":"wynonaK"},"content":"                deleteDependenciesList +\u003d \"\\n\" + (String.format(MESSAGE_DELETE_APPOINTMENT_SUCCESS, appointment));"},{"lineNumber":218,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":219,"author":{"gitID":"wynonaK"},"content":"            model.deletePetPatient(petPatientToDelete);"},{"lineNumber":220,"author":{"gitID":"wynonaK"},"content":"        } catch (PetPatientNotFoundException ppnfe) {"},{"lineNumber":221,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"The target pet cannot be missing\");"},{"lineNumber":222,"author":{"gitID":"wynonaK"},"content":"        }  catch (AppointmentDependencyNotEmptyException e) {"},{"lineNumber":223,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"Appointment dependencies still exist!\");"},{"lineNumber":224,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":225,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":226,"author":{"gitID":"wynonaK"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PET_PATIENT_SUCCESS, petPatientToDelete)"},{"lineNumber":227,"author":{"gitID":"wynonaK"},"content":"                + deleteDependenciesList);"},{"lineNumber":228,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":230,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":231,"author":{"gitID":"wynonaK"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":232,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":233,"author":{"gitID":"wynonaK"},"content":"            switch (type) {"},{"lineNumber":234,"author":{"gitID":"wynonaK"},"content":"            case 1: getPersonToDelete();"},{"lineNumber":235,"author":{"gitID":"wynonaK"},"content":"                break;"},{"lineNumber":236,"author":{"gitID":"wynonaK"},"content":"            case 2: getPetPatientToDelete();"},{"lineNumber":237,"author":{"gitID":"wynonaK"},"content":"                break;"},{"lineNumber":238,"author":{"gitID":"wynonaK"},"content":"            case 3: getAppointmentToDelete();"},{"lineNumber":239,"author":{"gitID":"wynonaK"},"content":"                break;"},{"lineNumber":240,"author":{"gitID":"wynonaK"},"content":"            case 4: getPersonToDelete();"},{"lineNumber":241,"author":{"gitID":"wynonaK"},"content":"                break;"},{"lineNumber":242,"author":{"gitID":"wynonaK"},"content":"            case 5: getPetPatientToDelete();"},{"lineNumber":243,"author":{"gitID":"wynonaK"},"content":"                break;"},{"lineNumber":244,"author":{"gitID":"wynonaK"},"content":"            default:"},{"lineNumber":245,"author":{"gitID":"wynonaK"},"content":"                throw new CommandException(MESSAGE_USAGE);"},{"lineNumber":246,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":247,"author":{"gitID":"wynonaK"},"content":"        } catch (CommandException e) {"},{"lineNumber":248,"author":{"gitID":"wynonaK"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":249,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":250,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":252,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":253,"author":{"gitID":"wynonaK"},"content":"    public boolean equals(Object other) {"},{"lineNumber":254,"author":{"gitID":"wynonaK"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":255,"author":{"gitID":"wynonaK"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":256,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":257,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"},{"lineNumber":258,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"chialejing":1,"wynonaK":245,"-":13}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public abstract class Command {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    protected UndoRedoStack undoRedoStack;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of persons."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @return summary message for persons displayed"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static String getMessageForPersonListShownSummary(int displaySize) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of pet patients."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @return summary message for persons displayed"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"    public static String getMessageForPetPatientListShownSummary(int displaySize) {"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"        return String.format(Messages.MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public abstract CommandResult execute() throws CommandException;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * access to the dependencies."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":6,"-":47}},{"path":"src/main/java/seedu/address/logic/commands/ChangeThemeCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ChangeThemeRequestEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.theme.Theme;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Aquarinte"},"content":"//@@author aquarinte"},{"lineNumber":10,"author":{"gitID":"Aquarinte"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Aquarinte"},"content":" * Change the theme of Medeina"},{"lineNumber":12,"author":{"gitID":"Aquarinte"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Aquarinte"},"content":"public class ChangeThemeCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"Aquarinte"},"content":"    public static final String COMMAND_WORD \u003d \"theme\";"},{"lineNumber":15,"author":{"gitID":"Aquarinte"},"content":"    public static final String COMMAND_ALIAS \u003d \"t\";"},{"lineNumber":16,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":17,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Change Medeina\u0027s theme to the\""},{"lineNumber":18,"author":{"gitID":"Aquarinte"},"content":"            + \"specified theme name (case-insensitive)\\n\""},{"lineNumber":19,"author":{"gitID":"Aquarinte"},"content":"            + \"Parameters: THEME NAME\\n\""},{"lineNumber":20,"author":{"gitID":"Aquarinte"},"content":"            + \"Example: \" + COMMAND_WORD + \" light\";"},{"lineNumber":21,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":22,"author":{"gitID":"Aquarinte"},"content":"    private String result;"},{"lineNumber":23,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":24,"author":{"gitID":"Aquarinte"},"content":"    private final Theme theme;"},{"lineNumber":25,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":26,"author":{"gitID":"Aquarinte"},"content":"    public ChangeThemeCommand(Theme theme) {"},{"lineNumber":27,"author":{"gitID":"Aquarinte"},"content":"        requireNonNull(theme);"},{"lineNumber":28,"author":{"gitID":"Aquarinte"},"content":"        this.theme \u003d theme;"},{"lineNumber":29,"author":{"gitID":"Aquarinte"},"content":"        result \u003d \"Current theme: \" + theme.getThemeName();"},{"lineNumber":30,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":32,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"Aquarinte"},"content":"    public CommandResult execute() {"},{"lineNumber":34,"author":{"gitID":"Aquarinte"},"content":"        EventsCenter.getInstance().post(new ChangeThemeRequestEvent(theme));"},{"lineNumber":35,"author":{"gitID":"Aquarinte"},"content":"        return new CommandResult(result);"},{"lineNumber":36,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":38,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"Aquarinte"},"content":"    public boolean equals(Object other) {"},{"lineNumber":40,"author":{"gitID":"Aquarinte"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":41,"author":{"gitID":"Aquarinte"},"content":"                || (other instanceof ChangeThemeCommand // instanceof handles nulls"},{"lineNumber":42,"author":{"gitID":"Aquarinte"},"content":"                \u0026\u0026 theme.equals(((ChangeThemeCommand) other).theme));"},{"lineNumber":43,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":36,"-":8}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BREED;"},{"lineNumber":8,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOUR;"},{"lineNumber":9,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIES;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"import java.util.regex.Matcher;"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"import java.util.regex.Pattern;"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"import seedu.address.logic.commands.EditCommand.EditAppointmentDescriptor;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"import seedu.address.logic.commands.EditCommand.EditPetPatientDescriptor;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"    private static final Pattern EDIT_COMMAND_FORMAT_PERSON \u003d Pattern.compile(\"-(o)+(?\u003cpersonInfo\u003e.*)\");"},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":"    private static final Pattern EDIT_COMMAND_FORMAT_PET_PATIENT \u003d Pattern.compile(\"-(p)+(?\u003cpetPatientInfo\u003e.*)\");"},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":"    private static final Pattern EDIT_COMMAND_FORMAT_APPOINTMENT \u003d Pattern.compile(\"-(a)+(?\u003cappointmentInfo\u003e.*)\");"},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"     * Parses the different types of Objects (Person, PetPatient or Appointment) based on whether user has"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":"     * provided \"-o\", \"-p\" or \"-a\" in the command"},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"     * @param args String to parse"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"     * @return EditCommand object to edit the object"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"     * @throws ParseException if invalid format is detected"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"        // Edit existing person"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":"        final Matcher matcherForPerson \u003d EDIT_COMMAND_FORMAT_PERSON.matcher(trimmedArgs);"},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"        if (matcherForPerson.matches()) {"},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":"            String personInfo \u003d matcherForPerson.group(\"personInfo\");"},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"            return parsePerson(personInfo);"},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":"        // Edit existing pet patient"},{"lineNumber":63,"author":{"gitID":"chialejing"},"content":"        final Matcher matcherForPetPatient \u003d EDIT_COMMAND_FORMAT_PET_PATIENT.matcher(trimmedArgs);"},{"lineNumber":64,"author":{"gitID":"chialejing"},"content":"        if (matcherForPetPatient.matches()) {"},{"lineNumber":65,"author":{"gitID":"chialejing"},"content":"            String petPatientInfo \u003d matcherForPetPatient.group(\"petPatientInfo\");"},{"lineNumber":66,"author":{"gitID":"chialejing"},"content":"            return parsePetPatient(petPatientInfo);"},{"lineNumber":67,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":69,"author":{"gitID":"chialejing"},"content":"        // Edit existing appointment"},{"lineNumber":70,"author":{"gitID":"chialejing"},"content":"        final Matcher matcherForAppointment \u003d EDIT_COMMAND_FORMAT_APPOINTMENT.matcher(trimmedArgs);"},{"lineNumber":71,"author":{"gitID":"chialejing"},"content":"        if (matcherForAppointment.matches()) {"},{"lineNumber":72,"author":{"gitID":"chialejing"},"content":"            String appointmentInfo \u003d matcherForAppointment.group(\"appointmentInfo\");"},{"lineNumber":73,"author":{"gitID":"chialejing"},"content":"            return parseAppointment(appointmentInfo);"},{"lineNumber":74,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":76,"author":{"gitID":"chialejing"},"content":"        // throws exception for invalid format"},{"lineNumber":77,"author":{"gitID":"chialejing"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":80,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"chialejing"},"content":"     * Parses the given {@code personInfo} of arguments in the context of the EditCommand"},{"lineNumber":82,"author":{"gitID":"chialejing"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":83,"author":{"gitID":"chialejing"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":84,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"chialejing"},"content":"    public EditCommand parsePerson(String personInfo) throws ParseException {"},{"lineNumber":86,"author":{"gitID":"chialejing"},"content":"        requireNonNull(personInfo);"},{"lineNumber":87,"author":{"gitID":"chialejing"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":88,"author":{"gitID":"chialejing"},"content":"                ArgumentTokenizer.tokenize(personInfo, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":89,"author":{"gitID":"chialejing"},"content":"                    PREFIX_ADDRESS, PREFIX_NRIC, PREFIX_TAG);"},{"lineNumber":90,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":91,"author":{"gitID":"chialejing"},"content":"        Index index;"},{"lineNumber":92,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":93,"author":{"gitID":"chialejing"},"content":"        try {"},{"lineNumber":94,"author":{"gitID":"chialejing"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":95,"author":{"gitID":"chialejing"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":96,"author":{"gitID":"chialejing"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":97,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":99,"author":{"gitID":"chialejing"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":100,"author":{"gitID":"chialejing"},"content":"        try {"},{"lineNumber":101,"author":{"gitID":"chialejing"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":102,"author":{"gitID":"chialejing"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":103,"author":{"gitID":"chialejing"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":104,"author":{"gitID":"chialejing"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":105,"author":{"gitID":"chialejing"},"content":"            ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC)).ifPresent(editPersonDescriptor::setNric);"},{"lineNumber":106,"author":{"gitID":"chialejing"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":107,"author":{"gitID":"chialejing"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":108,"author":{"gitID":"chialejing"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":109,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":111,"author":{"gitID":"chialejing"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":112,"author":{"gitID":"chialejing"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":113,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":115,"author":{"gitID":"chialejing"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":116,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":118,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"chialejing"},"content":"     * Parses the given {@code petPatientInfo} of arguments in the context of the EditCommand"},{"lineNumber":120,"author":{"gitID":"chialejing"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":121,"author":{"gitID":"chialejing"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":122,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"chialejing"},"content":"    public EditCommand parsePetPatient(String petPatientInfo) throws ParseException {"},{"lineNumber":124,"author":{"gitID":"chialejing"},"content":"        requireNonNull(petPatientInfo);"},{"lineNumber":125,"author":{"gitID":"chialejing"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":126,"author":{"gitID":"chialejing"},"content":"                ArgumentTokenizer.tokenize(petPatientInfo, PREFIX_NAME, PREFIX_SPECIES, PREFIX_BREED,"},{"lineNumber":127,"author":{"gitID":"chialejing"},"content":"                        PREFIX_COLOUR, PREFIX_BLOODTYPE, PREFIX_NRIC, PREFIX_TAG);"},{"lineNumber":128,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":129,"author":{"gitID":"chialejing"},"content":"        Index index;"},{"lineNumber":130,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":131,"author":{"gitID":"chialejing"},"content":"        try {"},{"lineNumber":132,"author":{"gitID":"chialejing"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":133,"author":{"gitID":"chialejing"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":134,"author":{"gitID":"chialejing"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":135,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":137,"author":{"gitID":"chialejing"},"content":"        EditPetPatientDescriptor editPetPatientDescriptor \u003d new EditPetPatientDescriptor();"},{"lineNumber":138,"author":{"gitID":"chialejing"},"content":"        try {"},{"lineNumber":139,"author":{"gitID":"chialejing"},"content":"            ParserUtil.parsePetPatientName(argMultimap.getValue(PREFIX_NAME))"},{"lineNumber":140,"author":{"gitID":"chialejing"},"content":"                    .ifPresent(editPetPatientDescriptor::setName);"},{"lineNumber":141,"author":{"gitID":"chialejing"},"content":"            ParserUtil.parseSpecies(argMultimap.getValue(PREFIX_SPECIES))"},{"lineNumber":142,"author":{"gitID":"chialejing"},"content":"                    .ifPresent(editPetPatientDescriptor::setSpecies);"},{"lineNumber":143,"author":{"gitID":"chialejing"},"content":"            ParserUtil.parseBreed(argMultimap.getValue(PREFIX_BREED))"},{"lineNumber":144,"author":{"gitID":"chialejing"},"content":"                    .ifPresent(editPetPatientDescriptor::setBreed);"},{"lineNumber":145,"author":{"gitID":"chialejing"},"content":"            ParserUtil.parseColour(argMultimap.getValue(PREFIX_COLOUR))"},{"lineNumber":146,"author":{"gitID":"chialejing"},"content":"                    .ifPresent(editPetPatientDescriptor::setColour);"},{"lineNumber":147,"author":{"gitID":"chialejing"},"content":"            ParserUtil.parseBloodType(argMultimap.getValue(PREFIX_BLOODTYPE))"},{"lineNumber":148,"author":{"gitID":"chialejing"},"content":"                    .ifPresent(editPetPatientDescriptor::setBloodType);"},{"lineNumber":149,"author":{"gitID":"chialejing"},"content":"            ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC))"},{"lineNumber":150,"author":{"gitID":"chialejing"},"content":"                    .ifPresent(editPetPatientDescriptor::setOwnerNric);"},{"lineNumber":151,"author":{"gitID":"chialejing"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG))"},{"lineNumber":152,"author":{"gitID":"chialejing"},"content":"                    .ifPresent(editPetPatientDescriptor::setTags);"},{"lineNumber":153,"author":{"gitID":"chialejing"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":154,"author":{"gitID":"chialejing"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":155,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":157,"author":{"gitID":"chialejing"},"content":"        if (!editPetPatientDescriptor.isAnyFieldEdited()) {"},{"lineNumber":158,"author":{"gitID":"chialejing"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":159,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":161,"author":{"gitID":"chialejing"},"content":"        return new EditCommand(index, editPetPatientDescriptor);"},{"lineNumber":162,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":164,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"chialejing"},"content":"     * Parses the given {@code appointmentInfo} of arguments in the context of the EditCommand"},{"lineNumber":166,"author":{"gitID":"chialejing"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":167,"author":{"gitID":"chialejing"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":168,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"chialejing"},"content":"    public EditCommand parseAppointment(String appointmentInfo) throws ParseException {"},{"lineNumber":170,"author":{"gitID":"chialejing"},"content":"        requireNonNull(appointmentInfo);"},{"lineNumber":171,"author":{"gitID":"chialejing"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":172,"author":{"gitID":"chialejing"},"content":"                ArgumentTokenizer.tokenize(appointmentInfo, PREFIX_DATE, PREFIX_REMARK, PREFIX_TAG);"},{"lineNumber":173,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":174,"author":{"gitID":"chialejing"},"content":"        Index index;"},{"lineNumber":175,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":176,"author":{"gitID":"chialejing"},"content":"        try {"},{"lineNumber":177,"author":{"gitID":"chialejing"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":178,"author":{"gitID":"chialejing"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":179,"author":{"gitID":"chialejing"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":180,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":182,"author":{"gitID":"chialejing"},"content":"        EditAppointmentDescriptor editAppointmentDescriptor \u003d new EditAppointmentDescriptor();"},{"lineNumber":183,"author":{"gitID":"chialejing"},"content":"        try {"},{"lineNumber":184,"author":{"gitID":"chialejing"},"content":"            // ParserUtil.parsePetPatientName(argMultimap.getValue(PREFIX_NAME))"},{"lineNumber":185,"author":{"gitID":"chialejing"},"content":"            //        .ifPresent(editAppointmentDescriptor::setPetPatientName);"},{"lineNumber":186,"author":{"gitID":"chialejing"},"content":"            ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATE))"},{"lineNumber":187,"author":{"gitID":"chialejing"},"content":"                    .ifPresent(editAppointmentDescriptor::setLocalDateTime);"},{"lineNumber":188,"author":{"gitID":"chialejing"},"content":"            ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK))"},{"lineNumber":189,"author":{"gitID":"chialejing"},"content":"                    .ifPresent(editAppointmentDescriptor::setRemark);"},{"lineNumber":190,"author":{"gitID":"chialejing"},"content":"            //ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC))"},{"lineNumber":191,"author":{"gitID":"chialejing"},"content":"            //        .ifPresent(editAppointmentDescriptor::setOwnerNric);"},{"lineNumber":192,"author":{"gitID":"chialejing"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG))"},{"lineNumber":193,"author":{"gitID":"chialejing"},"content":"                    .ifPresent(editAppointmentDescriptor::setTags);"},{"lineNumber":194,"author":{"gitID":"chialejing"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":195,"author":{"gitID":"chialejing"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":196,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":198,"author":{"gitID":"chialejing"},"content":"        if (!editAppointmentDescriptor.isAnyFieldEdited()) {"},{"lineNumber":199,"author":{"gitID":"chialejing"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":200,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":202,"author":{"gitID":"chialejing"},"content":"        return new EditCommand(index, editAppointmentDescriptor);    }"},{"lineNumber":203,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":204,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"chialejing"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":206,"author":{"gitID":"chialejing"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":207,"author":{"gitID":"chialejing"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":208,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"chialejing"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":210,"author":{"gitID":"chialejing"},"content":"        assert tags !\u003d null;"},{"lineNumber":211,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":212,"author":{"gitID":"chialejing"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":213,"author":{"gitID":"chialejing"},"content":"            return Optional.empty();"},{"lineNumber":214,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"chialejing"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":216,"author":{"gitID":"chialejing"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":217,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":219,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":196,"-":23}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BREED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOUR;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIES;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateDateTimeException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicateNricException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.exceptions.DuplicatePetPatientException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"Aquarinte"},"content":"//@@author aquarinte"},{"lineNumber":30,"author":{"gitID":"Aquarinte"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"Aquarinte"},"content":" * Adds a Person, Petpatient and/or Appointment to the address book."},{"lineNumber":32,"author":{"gitID":"Aquarinte"},"content":" */"},{"lineNumber":33,"author":{"gitID":"Aquarinte"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":34,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":35,"author":{"gitID":"Aquarinte"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":36,"author":{"gitID":"Aquarinte"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":37,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":38,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_USAGE \u003d \"To add a new person: \""},{"lineNumber":39,"author":{"gitID":"Aquarinte"},"content":"            + COMMAND_WORD + \" -o \" + PREFIX_NAME + \"NAME \""},{"lineNumber":40,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":41,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":42,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":43,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_NRIC + \"NRIC \""},{"lineNumber":44,"author":{"gitID":"Aquarinte"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":45,"author":{"gitID":"Aquarinte"},"content":"            + \"To add a new pet patient: \""},{"lineNumber":46,"author":{"gitID":"Aquarinte"},"content":"            + COMMAND_WORD + \" -p \" + PREFIX_NAME + \"NAME \""},{"lineNumber":47,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_SPECIES + \"SPECIES \""},{"lineNumber":48,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_BREED + \"BREED \""},{"lineNumber":49,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_COLOUR + \"COLOUR \""},{"lineNumber":50,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_BLOODTYPE + \"BLOOD_TYPE \""},{"lineNumber":51,"author":{"gitID":"Aquarinte"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]... -o \" + PREFIX_NRIC + \"OWNER_NRIC\\n\""},{"lineNumber":52,"author":{"gitID":"Aquarinte"},"content":"            + \"To add a new appointment: \""},{"lineNumber":53,"author":{"gitID":"Aquarinte"},"content":"            + COMMAND_WORD + \" -a \" + PREFIX_DATE + \"DATE \""},{"lineNumber":54,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_REMARK + \"REMARK \""},{"lineNumber":55,"author":{"gitID":"Aquarinte"},"content":"            + \"[\" + PREFIX_TAG + \"TYPE OF APPOINTMENT]... -o \" + PREFIX_NRIC + \"OWNER_NRIC -p \""},{"lineNumber":56,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_NAME + \" PET_NAME\\n\""},{"lineNumber":57,"author":{"gitID":"Aquarinte"},"content":"            + \"To add all new: \" + COMMAND_WORD + \" -o \" + PREFIX_NAME + \"OWNER_NAME \""},{"lineNumber":58,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":59,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":60,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":61,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_NRIC + \"NRIC \""},{"lineNumber":62,"author":{"gitID":"Aquarinte"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]... -p \" + PREFIX_NAME + \"PET_NAME \""},{"lineNumber":63,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_SPECIES + \"SPECIES \""},{"lineNumber":64,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_BREED + \"BREED \""},{"lineNumber":65,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_COLOUR + \"COLOUR \""},{"lineNumber":66,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_BLOODTYPE + \"BLOOD_TYPE \""},{"lineNumber":67,"author":{"gitID":"Aquarinte"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]... -a \"  + PREFIX_DATE + \"DATE \""},{"lineNumber":68,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_REMARK + \"REMARK \""},{"lineNumber":69,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_TAG + \"TYPE OF APPOINTMENT...\";"},{"lineNumber":70,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":71,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_PERSON \u003d \"Option -o : Person details. \""},{"lineNumber":72,"author":{"gitID":"Aquarinte"},"content":"            + \"Parameters: \""},{"lineNumber":73,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":74,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":75,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":76,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":77,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_NRIC + \"NRIC \""},{"lineNumber":78,"author":{"gitID":"Aquarinte"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":79,"author":{"gitID":"Aquarinte"},"content":"            + \"Example: \" + \"-o \""},{"lineNumber":80,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":81,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":82,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":83,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":84,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_NRIC + \"S1234567Q \""},{"lineNumber":85,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_TAG + \"medical supplier\";"},{"lineNumber":86,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":87,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_APPOINTMENT \u003d \"Option -a : Appointment details. \""},{"lineNumber":88,"author":{"gitID":"Aquarinte"},"content":"            + \"Parameters: \""},{"lineNumber":89,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_DATE + \"DATE \""},{"lineNumber":90,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_REMARK + \"REMARK \""},{"lineNumber":91,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_TAG + \"TYPE OF APPOINTMENT...\\n\""},{"lineNumber":92,"author":{"gitID":"Aquarinte"},"content":"            + \"Example: \" + \"-a \""},{"lineNumber":93,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_DATE + \"2018-12-31 12:30 \""},{"lineNumber":94,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_REMARK + \"nil \""},{"lineNumber":95,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_TAG + \"checkup \""},{"lineNumber":96,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_TAG + \"vaccination\";"},{"lineNumber":97,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":98,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_PETPATIENT \u003d COMMAND_WORD + \" -p : Pet Patient details. \""},{"lineNumber":99,"author":{"gitID":"Aquarinte"},"content":"            + \"Parameters: \""},{"lineNumber":100,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":101,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_SPECIES + \"SPECIES \""},{"lineNumber":102,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_BREED + \"BREED \""},{"lineNumber":103,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_COLOUR + \"COLOUR \""},{"lineNumber":104,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_BLOODTYPE + \"BLOOD_TYPE \""},{"lineNumber":105,"author":{"gitID":"Aquarinte"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":106,"author":{"gitID":"Aquarinte"},"content":"            + \"Example: \" + \"-p \""},{"lineNumber":107,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_NAME + \"Jewel \""},{"lineNumber":108,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_SPECIES + \"Cat \""},{"lineNumber":109,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_BREED + \"Persian Ragdoll \""},{"lineNumber":110,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_COLOUR + \"Calico \""},{"lineNumber":111,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_BLOODTYPE + \"AB\";"},{"lineNumber":112,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":113,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\\n\";"},{"lineNumber":114,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in Medeina.\";"},{"lineNumber":115,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_DUPLICATE_NRIC \u003d \"This is already someone with this NRIC.\";"},{"lineNumber":116,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"This particular appointment already exists in Medeina.\";"},{"lineNumber":117,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_DUPLICATE_DATETIME \u003d \"This date time is already taken by another appointment.\";"},{"lineNumber":118,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_DUPLICATE_PET_PATIENT \u003d \"This pet patient already exists in Medeina\";"},{"lineNumber":119,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_INVALID_NRIC \u003d \"The specified NRIC does not belong to anyone in Medeina.\""},{"lineNumber":120,"author":{"gitID":"Aquarinte"},"content":"            + \" Please add a new person.\";"},{"lineNumber":121,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_MISSING_NRIC_PREFIX \u003d \"Missing prefix \\\"nr/\\\" for NRIC after -o option\";"},{"lineNumber":122,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_INVALID_PET_PATIENT \u003d \"The specified pet cannot be found under the specified \""},{"lineNumber":123,"author":{"gitID":"Aquarinte"},"content":"            + \"owner in Medeina. Please add a new pet patient.\";"},{"lineNumber":124,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":125,"author":{"gitID":"Aquarinte"},"content":"    private Person person;"},{"lineNumber":126,"author":{"gitID":"Aquarinte"},"content":"    private PetPatient petPatient;"},{"lineNumber":127,"author":{"gitID":"Aquarinte"},"content":"    private Appointment appt;"},{"lineNumber":128,"author":{"gitID":"Aquarinte"},"content":"    private Nric ownerNric;"},{"lineNumber":129,"author":{"gitID":"Aquarinte"},"content":"    private PetPatientName petPatientName;"},{"lineNumber":130,"author":{"gitID":"Aquarinte"},"content":"    private int type;"},{"lineNumber":131,"author":{"gitID":"Aquarinte"},"content":"    private String message \u003d \"New person added: %1$s\\n\";"},{"lineNumber":132,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":133,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"Aquarinte"},"content":"     * Creates an AddCommand to add the specified {@code Person} and {@code PetPatient} and {@code Appointment}."},{"lineNumber":135,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"Aquarinte"},"content":"    public AddCommand(Person person, PetPatient petPatient, Appointment appt) {"},{"lineNumber":137,"author":{"gitID":"Aquarinte"},"content":"        requireNonNull(person);"},{"lineNumber":138,"author":{"gitID":"Aquarinte"},"content":"        requireNonNull(petPatient);"},{"lineNumber":139,"author":{"gitID":"Aquarinte"},"content":"        requireNonNull(appt);"},{"lineNumber":140,"author":{"gitID":"Aquarinte"},"content":"        this.person \u003d person;"},{"lineNumber":141,"author":{"gitID":"Aquarinte"},"content":"        this.petPatient \u003d petPatient;"},{"lineNumber":142,"author":{"gitID":"Aquarinte"},"content":"        this.appt \u003d appt;"},{"lineNumber":143,"author":{"gitID":"Aquarinte"},"content":"        type \u003d 1;"},{"lineNumber":144,"author":{"gitID":"Aquarinte"},"content":"        message +\u003d \"New pet patient added: %2$s\\nNew appointment made: %3$s\";"},{"lineNumber":145,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":147,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"Aquarinte"},"content":"     * Creates an AddCommand to add the specified {@code Appointment} if an existing Person object getNric() is"},{"lineNumber":149,"author":{"gitID":"Aquarinte"},"content":"     * equivalent to {@code Nric}, and an existing PetPatient object getOwner() is equivalent to {@code ownerNric}"},{"lineNumber":150,"author":{"gitID":"Aquarinte"},"content":"     * and getName() equivalent to {@code PetPatientName}."},{"lineNumber":151,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"Aquarinte"},"content":"    public AddCommand(Appointment appt, Nric ownerNric, PetPatientName petPatientName) {"},{"lineNumber":153,"author":{"gitID":"Aquarinte"},"content":"        requireNonNull(appt);"},{"lineNumber":154,"author":{"gitID":"Aquarinte"},"content":"        requireNonNull(ownerNric);"},{"lineNumber":155,"author":{"gitID":"Aquarinte"},"content":"        requireNonNull(petPatientName);"},{"lineNumber":156,"author":{"gitID":"Aquarinte"},"content":"        this.appt \u003d appt;"},{"lineNumber":157,"author":{"gitID":"Aquarinte"},"content":"        this.ownerNric \u003d ownerNric;"},{"lineNumber":158,"author":{"gitID":"Aquarinte"},"content":"        this.petPatientName \u003d petPatientName;"},{"lineNumber":159,"author":{"gitID":"Aquarinte"},"content":"        type \u003d 2;"},{"lineNumber":160,"author":{"gitID":"Aquarinte"},"content":"        message \u003d \"New appointment made: %1$s\\nunder owner: %2$s\\nfor pet patient: %3$s\";"},{"lineNumber":161,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":163,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"Aquarinte"},"content":"     * Creates an AddCommand to add the specified {@code PetPatient} if an existing Person object getNric() is"},{"lineNumber":165,"author":{"gitID":"Aquarinte"},"content":"     * equivalent to {@code Nric}."},{"lineNumber":166,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"Aquarinte"},"content":"    public AddCommand(PetPatient petPatient, Nric ownerNric) {"},{"lineNumber":168,"author":{"gitID":"Aquarinte"},"content":"        requireNonNull(petPatient);"},{"lineNumber":169,"author":{"gitID":"Aquarinte"},"content":"        requireNonNull(ownerNric);"},{"lineNumber":170,"author":{"gitID":"Aquarinte"},"content":"        this.petPatient \u003d petPatient;"},{"lineNumber":171,"author":{"gitID":"Aquarinte"},"content":"        this.ownerNric \u003d ownerNric;"},{"lineNumber":172,"author":{"gitID":"Aquarinte"},"content":"        type \u003d 3;"},{"lineNumber":173,"author":{"gitID":"Aquarinte"},"content":"        message \u003d \"New pet patient added: %1$s \\nunder owner: %2$s\";"},{"lineNumber":174,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":176,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"Aquarinte"},"content":"     * Creates an AddCommand to add the specified {@code Person}."},{"lineNumber":178,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"Aquarinte"},"content":"    public AddCommand(Person owner) {"},{"lineNumber":180,"author":{"gitID":"Aquarinte"},"content":"        requireNonNull(owner);"},{"lineNumber":181,"author":{"gitID":"Aquarinte"},"content":"        person \u003d owner;"},{"lineNumber":182,"author":{"gitID":"Aquarinte"},"content":"        type \u003d 4;"},{"lineNumber":183,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":185,"author":{"gitID":"Aquarinte"},"content":"    public String getMessage() {"},{"lineNumber":186,"author":{"gitID":"Aquarinte"},"content":"        return message;"},{"lineNumber":187,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":189,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":190,"author":{"gitID":"Aquarinte"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":191,"author":{"gitID":"Aquarinte"},"content":"        requireNonNull(model);"},{"lineNumber":192,"author":{"gitID":"Aquarinte"},"content":"        try {"},{"lineNumber":193,"author":{"gitID":"Aquarinte"},"content":"            switch (type) {"},{"lineNumber":194,"author":{"gitID":"Aquarinte"},"content":"            case 1: return addAllNew();"},{"lineNumber":195,"author":{"gitID":"Aquarinte"},"content":"            case 2: return addNewAppt();"},{"lineNumber":196,"author":{"gitID":"Aquarinte"},"content":"            case 3: return addNewPetPatient();"},{"lineNumber":197,"author":{"gitID":"Aquarinte"},"content":"            case 4: return addNewPerson();"},{"lineNumber":198,"author":{"gitID":"Aquarinte"},"content":"            default: throw new CommandException(MESSAGE_USAGE);"},{"lineNumber":199,"author":{"gitID":"Aquarinte"},"content":"            }"},{"lineNumber":200,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":201,"author":{"gitID":"Aquarinte"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":202,"author":{"gitID":"Aquarinte"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":203,"author":{"gitID":"Aquarinte"},"content":"        } catch (DuplicateNricException e) {"},{"lineNumber":204,"author":{"gitID":"Aquarinte"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_NRIC);"},{"lineNumber":205,"author":{"gitID":"Aquarinte"},"content":"        } catch (DuplicatePetPatientException e) {"},{"lineNumber":206,"author":{"gitID":"Aquarinte"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PET_PATIENT);"},{"lineNumber":207,"author":{"gitID":"Aquarinte"},"content":"        } catch (DuplicateAppointmentException e) {"},{"lineNumber":208,"author":{"gitID":"Aquarinte"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":209,"author":{"gitID":"Aquarinte"},"content":"        } catch (DuplicateDateTimeException e) {"},{"lineNumber":210,"author":{"gitID":"Aquarinte"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_DATETIME);"},{"lineNumber":211,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":214,"author":{"gitID":"Aquarinte"},"content":"    private CommandResult addNewPerson() throws DuplicatePersonException, DuplicateNricException {"},{"lineNumber":215,"author":{"gitID":"Aquarinte"},"content":"        model.addPerson(person);"},{"lineNumber":216,"author":{"gitID":"Aquarinte"},"content":"        return new CommandResult(String.format(message, person));"},{"lineNumber":217,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":219,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"Aquarinte"},"content":"     * Add a new pet patient under an existing person."},{"lineNumber":221,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"Aquarinte"},"content":"    private CommandResult addNewPetPatient() throws DuplicatePetPatientException, CommandException {"},{"lineNumber":223,"author":{"gitID":"Aquarinte"},"content":"        person \u003d model.getPersonWithNric(ownerNric);"},{"lineNumber":224,"author":{"gitID":"Aquarinte"},"content":"        if (person !\u003d null) {"},{"lineNumber":225,"author":{"gitID":"Aquarinte"},"content":"            model.addPetPatient(petPatient);"},{"lineNumber":226,"author":{"gitID":"Aquarinte"},"content":"            return new CommandResult(String.format(message, petPatient, person));"},{"lineNumber":227,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"Aquarinte"},"content":"        throw new CommandException(MESSAGE_INVALID_NRIC);"},{"lineNumber":229,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":231,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"Aquarinte"},"content":"     * Add a new appointment for an existing pet patient under an existing person."},{"lineNumber":233,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"Aquarinte"},"content":"    private CommandResult addNewAppt() throws CommandException, DuplicateAppointmentException,"},{"lineNumber":235,"author":{"gitID":"Aquarinte"},"content":"            DuplicateDateTimeException {"},{"lineNumber":236,"author":{"gitID":"Aquarinte"},"content":"        person \u003d model.getPersonWithNric(ownerNric);"},{"lineNumber":237,"author":{"gitID":"Aquarinte"},"content":"        petPatient \u003d model.getPetPatientWithNricAndName(ownerNric, petPatientName);"},{"lineNumber":238,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":239,"author":{"gitID":"Aquarinte"},"content":"        if (person \u003d\u003d null) {"},{"lineNumber":240,"author":{"gitID":"Aquarinte"},"content":"            throw new CommandException(MESSAGE_INVALID_NRIC);"},{"lineNumber":241,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":243,"author":{"gitID":"Aquarinte"},"content":"        if (petPatient \u003d\u003d null) {"},{"lineNumber":244,"author":{"gitID":"Aquarinte"},"content":"            throw new CommandException(MESSAGE_INVALID_PET_PATIENT);"},{"lineNumber":245,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":247,"author":{"gitID":"Aquarinte"},"content":"        model.addAppointment(appt);"},{"lineNumber":248,"author":{"gitID":"Aquarinte"},"content":"        return new CommandResult(String.format(message, appt, person, petPatient));"},{"lineNumber":249,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":251,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":252,"author":{"gitID":"Aquarinte"},"content":"     * Add a new appointment, a new pet patient and a new person."},{"lineNumber":253,"author":{"gitID":"Aquarinte"},"content":"     * (New appointment for the new patient under a new person)."},{"lineNumber":254,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":255,"author":{"gitID":"Aquarinte"},"content":"    private CommandResult addAllNew() throws DuplicatePersonException, DuplicateNricException,"},{"lineNumber":256,"author":{"gitID":"Aquarinte"},"content":"            DuplicatePetPatientException, DuplicateAppointmentException, DuplicateDateTimeException {"},{"lineNumber":257,"author":{"gitID":"Aquarinte"},"content":"        model.addPerson(person);"},{"lineNumber":258,"author":{"gitID":"Aquarinte"},"content":"        model.addPetPatient(petPatient);"},{"lineNumber":259,"author":{"gitID":"Aquarinte"},"content":"        model.addAppointment(appt);"},{"lineNumber":260,"author":{"gitID":"Aquarinte"},"content":"        return new CommandResult(String.format(message, person, petPatient, appt));"},{"lineNumber":261,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":263,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":264,"author":{"gitID":"Aquarinte"},"content":"    public boolean equals(Object other) {"},{"lineNumber":265,"author":{"gitID":"Aquarinte"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":266,"author":{"gitID":"Aquarinte"},"content":"            return true;"},{"lineNumber":267,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":268,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":269,"author":{"gitID":"Aquarinte"},"content":"        if (!(other instanceof AddCommand)) {"},{"lineNumber":270,"author":{"gitID":"Aquarinte"},"content":"            return false;"},{"lineNumber":271,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":272,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":273,"author":{"gitID":"Aquarinte"},"content":"        AddCommand otherAddCommand \u003d (AddCommand) other;"},{"lineNumber":274,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":275,"author":{"gitID":"Aquarinte"},"content":"        boolean personSame \u003d isTheSame(person, otherAddCommand.person);"},{"lineNumber":276,"author":{"gitID":"Aquarinte"},"content":"        boolean petPatientSame \u003d isTheSame(petPatient, otherAddCommand.petPatient);"},{"lineNumber":277,"author":{"gitID":"Aquarinte"},"content":"        boolean appointmentSame \u003d isTheSame(appt, otherAddCommand.appt);"},{"lineNumber":278,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":279,"author":{"gitID":"Aquarinte"},"content":"        if (personSame \u0026\u0026 petPatientSame \u0026\u0026 appointmentSame) {"},{"lineNumber":280,"author":{"gitID":"Aquarinte"},"content":"            return true;"},{"lineNumber":281,"author":{"gitID":"Aquarinte"},"content":"        } else {"},{"lineNumber":282,"author":{"gitID":"Aquarinte"},"content":"            return false;"},{"lineNumber":283,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":284,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":285,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":286,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":287,"author":{"gitID":"Aquarinte"},"content":"     * Checks if both objects are the same."},{"lineNumber":288,"author":{"gitID":"Aquarinte"},"content":"     * Returns true if both objects are equivalent."},{"lineNumber":289,"author":{"gitID":"Aquarinte"},"content":"     * Returns true if both objects are null."},{"lineNumber":290,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":291,"author":{"gitID":"Aquarinte"},"content":"    public boolean isTheSame(Object one, Object two) {"},{"lineNumber":292,"author":{"gitID":"Aquarinte"},"content":"        if (one !\u003d null \u0026\u0026 two !\u003d null) {"},{"lineNumber":293,"author":{"gitID":"Aquarinte"},"content":"            if (one.equals(two)) {"},{"lineNumber":294,"author":{"gitID":"Aquarinte"},"content":"                return true;"},{"lineNumber":295,"author":{"gitID":"Aquarinte"},"content":"            }"},{"lineNumber":296,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":297,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":298,"author":{"gitID":"Aquarinte"},"content":"        if (one \u003d\u003d null \u0026\u0026 two \u003d\u003d null) {"},{"lineNumber":299,"author":{"gitID":"Aquarinte"},"content":"            return true;"},{"lineNumber":300,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":301,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":302,"author":{"gitID":"Aquarinte"},"content":"        return false;"},{"lineNumber":303,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":304,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":276,"chialejing":3,"wynonaK":3,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":1,"-":52}},{"path":"src/main/java/seedu/address/logic/parser/ChangeThemeCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.theme.Theme;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Aquarinte"},"content":"//@@author aquarinte"},{"lineNumber":10,"author":{"gitID":"Aquarinte"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Aquarinte"},"content":" * Parses input arguments and creates a new ChangeThemeCommand object"},{"lineNumber":12,"author":{"gitID":"Aquarinte"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Aquarinte"},"content":"public class ChangeThemeCommandParser implements Parser\u003cChangeThemeCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":15,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"Aquarinte"},"content":"     * Parses the given {@code String} of arguments in the context of the ChangeThemeCommand"},{"lineNumber":17,"author":{"gitID":"Aquarinte"},"content":"     * and returns a ChangeThemeCommand object for execution."},{"lineNumber":18,"author":{"gitID":"Aquarinte"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"Aquarinte"},"content":"    public ChangeThemeCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"Aquarinte"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"Aquarinte"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"Aquarinte"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"Aquarinte"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeThemeCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":28,"author":{"gitID":"Aquarinte"},"content":"        String[] splitArgs \u003d trimmedArgs.split(\" \");"},{"lineNumber":29,"author":{"gitID":"Aquarinte"},"content":"        if (splitArgs.length \u003e 1) {"},{"lineNumber":30,"author":{"gitID":"Aquarinte"},"content":"            throw new ParseException("},{"lineNumber":31,"author":{"gitID":"Aquarinte"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeThemeCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":34,"author":{"gitID":"Aquarinte"},"content":"        if (!Theme.isValidThemeName(splitArgs[0].toLowerCase())) {"},{"lineNumber":35,"author":{"gitID":"Aquarinte"},"content":"            throw new ParseException(Theme.MESSAGE_THEME_CONSTRAINTS);"},{"lineNumber":36,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":38,"author":{"gitID":"Aquarinte"},"content":"        return new ChangeThemeCommand(new Theme(splitArgs[0].toLowerCase()));"},{"lineNumber":39,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":41,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":33,"-":8}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"wynonaK"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":" * Keyword matching is case sensitive."},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"public class FindCommand extends Command {"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all fields that matches any of\""},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"            + \" the specified option, prefixes \u0026 keywords (case-sensitive)\""},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"            + \" and displays them as a list with index numbers.\\n\""},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"            + \"Parameters: OPTION PREFIX/KEYWORD [MORE_PREFIX/MORE_KEYWORDS]...\\n\""},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"            + \"Example: \" + COMMAND_WORD + \"-o n/alice bob charlie\";"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"    private Predicate\u003cPerson\u003e personPredicate \u003d null;"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"    private Predicate\u003cPetPatient\u003e petPatientPredicate \u003d null;"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"    private int type \u003d 0;"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"    public FindCommand(Predicate\u003cPerson\u003e personPredicate) {"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"        this.personPredicate \u003d personPredicate;"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"        type \u003d 1;"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"    public FindCommand(Predicate\u003cPetPatient\u003e petPatientPredicate, int petPatientIndicator) {"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"        this.petPatientPredicate \u003d petPatientPredicate;"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"        type \u003d petPatientIndicator;"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"        switch (type) {"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"        case 1:"},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"            return findOwner();"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"        case 2:"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"            return findPetPatient();"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"        default:"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":"            throw new CommandException(MESSAGE_USAGE);"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"     * Finds owners with given {@code predicate} in this {@code addressbook}."},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"    private CommandResult findOwner() {"},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"        model.updateFilteredPersonList(personPredicate);"},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"        updatePetListForOwner();"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size())"},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"                + getMessageForPetPatientListShownSummary(model.getFilteredPetPatientList().size()));"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"     * Finds owners with given {@code predicate} in this {@code addressbook}."},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"    private CommandResult findPetPatient() {"},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"        model.updateFilteredPetPatientList(petPatientPredicate);"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":"        updateOwnerListForPets();"},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size())"},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"                + getMessageForPetPatientListShownSummary(model.getFilteredPetPatientList().size()));"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"     * Updates the filtered pet list with the changed owners in this {@code addressbook}."},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"    private void updatePetListForOwner() {"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"        List\u003cString\u003e nricKeywordsForPets \u003d new ArrayList\u003c\u003e();"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"        for (Person person : model.getFilteredPersonList()) {"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"            nricKeywordsForPets.add(person.getNric().toString());"},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"        Predicate\u003cPetPatient\u003e petPatientNricPredicate \u003d  petPatient -\u003e nricKeywordsForPets.stream()"},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(petPatient.getOwner().toString(), keyword));"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"        model.updateFilteredPetPatientList(petPatientNricPredicate);"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":"     * Updates the filtered person list with the changed pets in this {@code addressbook}."},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"    private void updateOwnerListForPets() {"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":"        List\u003cString\u003e nricKeywordsForOwner \u003d new ArrayList\u003c\u003e();"},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":"        for (PetPatient petPatient : model.getFilteredPetPatientList()) {"},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":"            if (!nricKeywordsForOwner.contains(petPatient.getOwner().toString())) {"},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"                nricKeywordsForOwner.add(petPatient.getOwner().toString());"},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":"        Predicate\u003cPerson\u003e ownerNricPredicate \u003d  person -\u003e nricKeywordsForOwner.stream()"},{"lineNumber":101,"author":{"gitID":"wynonaK"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getNric().toString(), keyword));"},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":"        model.updateFilteredPersonList(ownerNricPredicate);"},{"lineNumber":103,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"wynonaK"},"content":"    public boolean equals(Object other) {"},{"lineNumber":107,"author":{"gitID":"wynonaK"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":108,"author":{"gitID":"wynonaK"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":109,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 this.personPredicate.equals(((FindCommand) other).personPredicate)); // state check"},{"lineNumber":110,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":107,"-":4}},{"path":"src/main/java/seedu/address/storage/AddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface AddressBookStorage {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @see #getAddressBookFilePath()"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"     * Backups the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":"     * @throws IOException if there was any problem backing up the file."},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":6,"-":45}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private CommandSyntaxWords commandSyntax;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        commandSyntax \u003d CommandSyntaxWords.getInstance();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPetPatient\u003e getFilteredPetPatientList() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return model.getFilteredPetPatientList();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return model.getFilteredAppointmentList(); }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"Aquarinte"},"content":"    //@@author aquarinte"},{"lineNumber":76,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"Aquarinte"},"content":"    public Set\u003cString\u003e getAllCommandWords() {"},{"lineNumber":78,"author":{"gitID":"Aquarinte"},"content":"        return commandSyntax.getCommandWords();"},{"lineNumber":79,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":81,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"Aquarinte"},"content":"    public Set\u003cString\u003e getAllPrefixes() {"},{"lineNumber":83,"author":{"gitID":"Aquarinte"},"content":"        return commandSyntax.getPrefixes();"},{"lineNumber":84,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":86,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"Aquarinte"},"content":"    public Set\u003cString\u003e getAllOptions() {"},{"lineNumber":88,"author":{"gitID":"Aquarinte"},"content":"        return commandSyntax.getOptions();"},{"lineNumber":89,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":91,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"Aquarinte"},"content":"    public Set\u003cString\u003e getAllNric() {"},{"lineNumber":93,"author":{"gitID":"Aquarinte"},"content":"        Set\u003cString\u003e allNricInModel \u003d new HashSet\u003c\u003e();"},{"lineNumber":94,"author":{"gitID":"Aquarinte"},"content":"        for (Person p : model.getAddressBook().getPersonList()) {"},{"lineNumber":95,"author":{"gitID":"Aquarinte"},"content":"            allNricInModel.add(p.getNric().toString());"},{"lineNumber":96,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"Aquarinte"},"content":"        return allNricInModel;"},{"lineNumber":98,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":100,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"Aquarinte"},"content":"    public Set\u003cString\u003e getAllPetPatientNames() {"},{"lineNumber":102,"author":{"gitID":"Aquarinte"},"content":"        Set\u003cString\u003e allPetPatientNamesInModel \u003d new HashSet\u003c\u003e();"},{"lineNumber":103,"author":{"gitID":"Aquarinte"},"content":"        for (PetPatient p : model.getAddressBook().getPetPatientList()) {"},{"lineNumber":104,"author":{"gitID":"Aquarinte"},"content":"            allPetPatientNamesInModel.add(p.getName().toString());"},{"lineNumber":105,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"Aquarinte"},"content":"        return allPetPatientNamesInModel;"},{"lineNumber":107,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":109,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"Aquarinte"},"content":"    public Set\u003cString\u003e getAllTagNames() {"},{"lineNumber":111,"author":{"gitID":"Aquarinte"},"content":"        Set\u003cString\u003e getTagNamesInModel \u003d new HashSet\u003c\u003e();"},{"lineNumber":112,"author":{"gitID":"Aquarinte"},"content":"        for (Tag t : model.getTagList()) {"},{"lineNumber":113,"author":{"gitID":"Aquarinte"},"content":"            getTagNamesInModel.add(t.tagName);"},{"lineNumber":114,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"Aquarinte"},"content":"        return getTagNamesInModel;"},{"lineNumber":116,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":43,"chialejing":1,"wynonaK":1,"-":72}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"chialejing"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":82,"author":{"gitID":"chialejing"},"content":"        addressBookStorage.backupAddressBook(addressBook);"},{"lineNumber":83,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":4,"-":92}},{"path":"src/main/java/seedu/address/storage/XmlAddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorage implements AddressBookStorage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public XmlAddressBookStorage(String filePath) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return readAddressBook(filePath);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Similar to {@link #readAddressBook()}"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return Optional.of(xmlAddressBook.toModelType());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            logger.info(\"Illegal values found in \" + addressBookFile + \": \" + ive.getMessage());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"chialejing"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":84,"author":{"gitID":"chialejing"},"content":"        String backupFilePath \u003d filePath + \".backup\";"},{"lineNumber":85,"author":{"gitID":"chialejing"},"content":"        saveAddressBook(addressBook, backupFilePath);"},{"lineNumber":86,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":6,"-":82}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"    private List\u003cXmlAdaptedAppointment\u003e appointments;"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"    @XmlElement"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"    private List\u003cXmlAdaptedPetPatient\u003e petPatients;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"        appointments \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"        petPatients \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new)"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new)"},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"        appointments.addAll(src.getAppointmentList().stream().map(XmlAdaptedAppointment::new)"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"        petPatients.addAll(src.getPetPatientList().stream().map(XmlAdaptedPetPatient::new)"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"        for (XmlAdaptedAppointment a : appointments) {"},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"            addressBook.addAppointment(a.toModelType());"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"chialejing"},"content":"        for (XmlAdaptedPetPatient pp : petPatients) {"},{"lineNumber":73,"author":{"gitID":"chialejing"},"content":"            addressBook.addPetPatient(pp.toModelType());"},{"lineNumber":74,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":"        return persons.equals(otherAb.persons)"},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 tags.equals(otherAb.tags)"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 appointments.equals(otherAb.appointments)"},{"lineNumber":92,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 petPatients.equals(otherAb.petPatients);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":12,"wynonaK":12,"-":70}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"//import com.calendarfx.view.CalendarView;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":41,"author":{"gitID":"-"},"content":" */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"    public static final Version VERSION \u003d new Version(1, 3, 17, true);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":136,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":164,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":1,"-":212}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.EditCommand.Type.EDIT_APPOINTMENT;"},{"lineNumber":5,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.EditCommand.Type.EDIT_PERSON;"},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.EditCommand.Type.EDIT_PET_PATIENT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":8,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"},{"lineNumber":9,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BREED;"},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOUR;"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIES;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PET_PATIENTS;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"import java.time.LocalDateTime;"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"import java.util.ArrayList;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.appointment.Remark;"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.exceptions.DuplicatePetPatientException;"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.exceptions.PetPatientNotFoundException;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":" * Edits the details of an existing person, pet patient or appointment in the address book."},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":"    public static final String COMMAND_ALIAS \u003d \"ed\";"},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":63,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":64,"author":{"gitID":"chialejing"},"content":"            + \": Edits the details of the contact / owner / appointment identified by their respective index numbers. \""},{"lineNumber":65,"author":{"gitID":"chialejing"},"content":"            + \"Existing values will be overwritten by the input values. \""},{"lineNumber":66,"author":{"gitID":"chialejing"},"content":"            + \"Note that INDEX must be a positive integer.\\n\""},{"lineNumber":67,"author":{"gitID":"chialejing"},"content":"            + \"To edit the details of an existing contact: \""},{"lineNumber":68,"author":{"gitID":"chialejing"},"content":"            + COMMAND_WORD + \" -o \" + \"INDEX \""},{"lineNumber":69,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_NAME + \"CONTACT_NAME] \""},{"lineNumber":70,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":71,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":72,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":73,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_NRIC + \"NRIC] \""},{"lineNumber":74,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":75,"author":{"gitID":"chialejing"},"content":"            + \"To edit the details of an existing pet patient: \""},{"lineNumber":76,"author":{"gitID":"chialejing"},"content":"            + COMMAND_WORD + \" -p \" + \"INDEX \""},{"lineNumber":77,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_NAME + \"PET_PATIENT_NAME] \""},{"lineNumber":78,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_SPECIES + \"SPECIES] \""},{"lineNumber":79,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_BREED + \"BREED] \""},{"lineNumber":80,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_COLOUR + \"COLOUR] \""},{"lineNumber":81,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_BLOODTYPE + \"BLOOD_TYPE] \""},{"lineNumber":82,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_NRIC + \"OWNER_NRIC] \""},{"lineNumber":83,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":84,"author":{"gitID":"chialejing"},"content":"            + \"To edit the details of an existing appointment: \""},{"lineNumber":85,"author":{"gitID":"chialejing"},"content":"            + COMMAND_WORD + \" -a \" + \"INDEX \""},{"lineNumber":86,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_DATE + \"YYYY-MM-DD HH:MM] \""},{"lineNumber":87,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_REMARK + \"REMARK] \""},{"lineNumber":88,"author":{"gitID":"chialejing"},"content":"            // + \"[\" + PREFIX_NRIC + \"OWNER_NRIC] \""},{"lineNumber":89,"author":{"gitID":"chialejing"},"content":"            // + \"[\" + PREFIX_NAME + \"PET_PATIENT_NAME] \""},{"lineNumber":90,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":91,"author":{"gitID":"chialejing"},"content":"            + \"\\n\";"},{"lineNumber":92,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":93,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":94,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_EDIT_PET_PATIENT_SUCCESS \u003d \"Edited Pet Patient: %1$s\";"},{"lineNumber":95,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_EDIT_APPOINTMENT_SUCCESS \u003d \"Edited Appointment: %1$s\";"},{"lineNumber":96,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":97,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":98,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_DUPLICATE_PET_PATIENT \u003d \"This pet patient already exists in the address book.\";"},{"lineNumber":99,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"This appointment already exists in the address book.\";"},{"lineNumber":100,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":101,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"chialejing"},"content":"     * Enum to support the type of edit command that the user wishes to execute."},{"lineNumber":103,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"chialejing"},"content":"    public enum Type { EDIT_PERSON, EDIT_PET_PATIENT, EDIT_APPOINTMENT };"},{"lineNumber":105,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":106,"author":{"gitID":"chialejing"},"content":"    private Index index;"},{"lineNumber":107,"author":{"gitID":"chialejing"},"content":"    private EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":108,"author":{"gitID":"chialejing"},"content":"    private EditPetPatientDescriptor editPetPatientDescriptor;"},{"lineNumber":109,"author":{"gitID":"chialejing"},"content":"    private EditAppointmentDescriptor editAppointmentDescriptor;"},{"lineNumber":110,"author":{"gitID":"chialejing"},"content":"    private Type type;"},{"lineNumber":111,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":112,"author":{"gitID":"chialejing"},"content":"    private Person personToEdit; // original"},{"lineNumber":113,"author":{"gitID":"chialejing"},"content":"    private Person editedPerson; // edited"},{"lineNumber":114,"author":{"gitID":"chialejing"},"content":"    private PetPatient petPatientToEdit;"},{"lineNumber":115,"author":{"gitID":"chialejing"},"content":"    private PetPatient editedPetPatient;"},{"lineNumber":116,"author":{"gitID":"chialejing"},"content":"    private Appointment appointmentToEdit;"},{"lineNumber":117,"author":{"gitID":"chialejing"},"content":"    private Appointment editedAppointment;"},{"lineNumber":118,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":119,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"chialejing"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":121,"author":{"gitID":"chialejing"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":122,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"chialejing"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":124,"author":{"gitID":"chialejing"},"content":"        requireNonNull(index);"},{"lineNumber":125,"author":{"gitID":"chialejing"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":126,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":127,"author":{"gitID":"chialejing"},"content":"        this.index \u003d index;"},{"lineNumber":128,"author":{"gitID":"chialejing"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":129,"author":{"gitID":"chialejing"},"content":"        this.type \u003d EDIT_PERSON;"},{"lineNumber":130,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":132,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"chialejing"},"content":"     * @param index of the pet patient in the filtered pet patient list to edit"},{"lineNumber":134,"author":{"gitID":"chialejing"},"content":"     * @param editPetPatientDescriptor details to edit the pet patient with"},{"lineNumber":135,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"chialejing"},"content":"    public EditCommand(Index index, EditPetPatientDescriptor editPetPatientDescriptor) {"},{"lineNumber":137,"author":{"gitID":"chialejing"},"content":"        requireNonNull(index);"},{"lineNumber":138,"author":{"gitID":"chialejing"},"content":"        requireNonNull(editPetPatientDescriptor);"},{"lineNumber":139,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":140,"author":{"gitID":"chialejing"},"content":"        this.index \u003d index;"},{"lineNumber":141,"author":{"gitID":"chialejing"},"content":"        this.editPetPatientDescriptor \u003d new EditPetPatientDescriptor(editPetPatientDescriptor);"},{"lineNumber":142,"author":{"gitID":"chialejing"},"content":"        this.type \u003d EDIT_PET_PATIENT;"},{"lineNumber":143,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":145,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"chialejing"},"content":"     * @param index of the appointment in the filtered appointment list to edit"},{"lineNumber":147,"author":{"gitID":"chialejing"},"content":"     * @param editAppointmentDescriptor details to edit the appointment with"},{"lineNumber":148,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"chialejing"},"content":"    public EditCommand(Index index, EditAppointmentDescriptor editAppointmentDescriptor) {"},{"lineNumber":150,"author":{"gitID":"chialejing"},"content":"        requireNonNull(index);"},{"lineNumber":151,"author":{"gitID":"chialejing"},"content":"        requireNonNull(editAppointmentDescriptor);"},{"lineNumber":152,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":153,"author":{"gitID":"chialejing"},"content":"        this.index \u003d index;"},{"lineNumber":154,"author":{"gitID":"chialejing"},"content":"        this.editAppointmentDescriptor \u003d new EditAppointmentDescriptor(editAppointmentDescriptor);"},{"lineNumber":155,"author":{"gitID":"chialejing"},"content":"        this.type \u003d EDIT_APPOINTMENT;"},{"lineNumber":156,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":158,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":159,"author":{"gitID":"chialejing"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":160,"author":{"gitID":"chialejing"},"content":"        try {"},{"lineNumber":161,"author":{"gitID":"chialejing"},"content":"            switch (type) {"},{"lineNumber":162,"author":{"gitID":"chialejing"},"content":"            case EDIT_PERSON:"},{"lineNumber":163,"author":{"gitID":"chialejing"},"content":"                resolvePersonDependencies();"},{"lineNumber":164,"author":{"gitID":"chialejing"},"content":"                model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":165,"author":{"gitID":"chialejing"},"content":"                System.out.println(personToEdit.getNric().toString());"},{"lineNumber":166,"author":{"gitID":"chialejing"},"content":"                System.out.println(editedPerson.getNric().toString());"},{"lineNumber":167,"author":{"gitID":"chialejing"},"content":"                break;"},{"lineNumber":168,"author":{"gitID":"chialejing"},"content":"            case EDIT_PET_PATIENT:"},{"lineNumber":169,"author":{"gitID":"chialejing"},"content":"                resolvePetPatientDependencies();"},{"lineNumber":170,"author":{"gitID":"chialejing"},"content":"                model.updatePetPatient(petPatientToEdit, editedPetPatient);"},{"lineNumber":171,"author":{"gitID":"chialejing"},"content":"                break;"},{"lineNumber":172,"author":{"gitID":"chialejing"},"content":"            case EDIT_APPOINTMENT:"},{"lineNumber":173,"author":{"gitID":"chialejing"},"content":"                checkForClashes();"},{"lineNumber":174,"author":{"gitID":"chialejing"},"content":"                model.updateAppointment(appointmentToEdit, editedAppointment);"},{"lineNumber":175,"author":{"gitID":"chialejing"},"content":"                break;"},{"lineNumber":176,"author":{"gitID":"chialejing"},"content":"            default:"},{"lineNumber":177,"author":{"gitID":"chialejing"},"content":"                break;"},{"lineNumber":178,"author":{"gitID":"chialejing"},"content":"            }"},{"lineNumber":179,"author":{"gitID":"chialejing"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":180,"author":{"gitID":"chialejing"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":181,"author":{"gitID":"chialejing"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":182,"author":{"gitID":"chialejing"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":183,"author":{"gitID":"chialejing"},"content":"        } catch (DuplicatePetPatientException dppe) {"},{"lineNumber":184,"author":{"gitID":"chialejing"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PET_PATIENT);"},{"lineNumber":185,"author":{"gitID":"chialejing"},"content":"        } catch (PetPatientNotFoundException ppnfe) {"},{"lineNumber":186,"author":{"gitID":"chialejing"},"content":"            throw new AssertionError(\"The target pet patient cannot be missing\");"},{"lineNumber":187,"author":{"gitID":"chialejing"},"content":"        } catch (DuplicateAppointmentException dae) {"},{"lineNumber":188,"author":{"gitID":"chialejing"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":189,"author":{"gitID":"chialejing"},"content":"        } catch (AppointmentNotFoundException anfe) {"},{"lineNumber":190,"author":{"gitID":"chialejing"},"content":"            throw new AssertionError(\"The target appointment cannot be missing\");"},{"lineNumber":191,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"chialejing"},"content":"        switch (type) {"},{"lineNumber":193,"author":{"gitID":"chialejing"},"content":"        case EDIT_PERSON:"},{"lineNumber":194,"author":{"gitID":"chialejing"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":195,"author":{"gitID":"chialejing"},"content":"            return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":196,"author":{"gitID":"chialejing"},"content":"        case EDIT_PET_PATIENT:"},{"lineNumber":197,"author":{"gitID":"chialejing"},"content":"            model.updateFilteredPetPatientList(PREDICATE_SHOW_ALL_PET_PATIENTS);"},{"lineNumber":198,"author":{"gitID":"chialejing"},"content":"            return new CommandResult(String.format(MESSAGE_EDIT_PET_PATIENT_SUCCESS, editedPetPatient));"},{"lineNumber":199,"author":{"gitID":"chialejing"},"content":"        case EDIT_APPOINTMENT:"},{"lineNumber":200,"author":{"gitID":"chialejing"},"content":"            model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"},{"lineNumber":201,"author":{"gitID":"chialejing"},"content":"            return new CommandResult(String.format(MESSAGE_EDIT_APPOINTMENT_SUCCESS, editedAppointment));"},{"lineNumber":202,"author":{"gitID":"chialejing"},"content":"        default:"},{"lineNumber":203,"author":{"gitID":"chialejing"},"content":"            return null;"},{"lineNumber":204,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":207,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"chialejing"},"content":"     * Checks whether person\u0027s NRIC has been modified"},{"lineNumber":209,"author":{"gitID":"chialejing"},"content":"     * If yes, update all other relevant pet patients and appointments under the same person"},{"lineNumber":210,"author":{"gitID":"chialejing"},"content":"     * If no, do nothing"},{"lineNumber":211,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":212,"author":{"gitID":"chialejing"},"content":"    private void resolvePersonDependencies() throws DuplicatePetPatientException, PetPatientNotFoundException,"},{"lineNumber":213,"author":{"gitID":"chialejing"},"content":"            DuplicateAppointmentException, AppointmentNotFoundException {"},{"lineNumber":214,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":215,"author":{"gitID":"chialejing"},"content":"        Nric oldNric \u003d personToEdit.getNric();"},{"lineNumber":216,"author":{"gitID":"chialejing"},"content":"        Nric newNric \u003d editedPerson.getNric();"},{"lineNumber":217,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":218,"author":{"gitID":"chialejing"},"content":"        if (!oldNric.equals(newNric)) {"},{"lineNumber":219,"author":{"gitID":"chialejing"},"content":"            updatePetPatienstByOwnerNric(oldNric, newNric);"},{"lineNumber":220,"author":{"gitID":"chialejing"},"content":"            updateAppointmentByOwnerNric(oldNric, newNric);"},{"lineNumber":221,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":224,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":225,"author":{"gitID":"chialejing"},"content":"     * Checks whether pet patient\u0027s name or owner NRIC has been modified"},{"lineNumber":226,"author":{"gitID":"chialejing"},"content":"     * If yes, update all other relevant appointments and also the update the new owner for the pet"},{"lineNumber":227,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"chialejing"},"content":"    private void resolvePetPatientDependencies() throws CommandException,"},{"lineNumber":229,"author":{"gitID":"chialejing"},"content":"            AppointmentNotFoundException, DuplicateAppointmentException {"},{"lineNumber":230,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":231,"author":{"gitID":"chialejing"},"content":"        Nric oldNric \u003d petPatientToEdit.getOwner();"},{"lineNumber":232,"author":{"gitID":"chialejing"},"content":"        Nric newNric \u003d editedPetPatient.getOwner();"},{"lineNumber":233,"author":{"gitID":"chialejing"},"content":"        PetPatientName oldPetName \u003d petPatientToEdit.getName();"},{"lineNumber":234,"author":{"gitID":"chialejing"},"content":"        PetPatientName newPetName \u003d editedPetPatient.getName();"},{"lineNumber":235,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":236,"author":{"gitID":"chialejing"},"content":"        if (!oldNric.equals(newNric)) { // nric edited, I want to change owner"},{"lineNumber":237,"author":{"gitID":"chialejing"},"content":"            Person newOwner \u003d model.getPersonWithNric(newNric); // new owner must exist"},{"lineNumber":238,"author":{"gitID":"chialejing"},"content":"            if (newOwner \u003d\u003d null) {"},{"lineNumber":239,"author":{"gitID":"chialejing"},"content":"                throw new CommandException(\"New owner must exist first before updating pet patient\u0027s owner NRIC!\");"},{"lineNumber":240,"author":{"gitID":"chialejing"},"content":"            }"},{"lineNumber":241,"author":{"gitID":"chialejing"},"content":"            updateAppointmentByOwnerNric(oldNric, newNric);"},{"lineNumber":242,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"chialejing"},"content":"        if (!oldPetName.equals(newPetName)) { // name edited"},{"lineNumber":244,"author":{"gitID":"chialejing"},"content":"            updateAppointmentByPetPatientName(newNric, oldPetName, newPetName);"},{"lineNumber":245,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":248,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"chialejing"},"content":"     * Checks whether there are clashes in appointment date and time"},{"lineNumber":250,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":251,"author":{"gitID":"chialejing"},"content":"    private void checkForClashes() throws CommandException {"},{"lineNumber":252,"author":{"gitID":"chialejing"},"content":"        LocalDateTime oldDateTime \u003d appointmentToEdit.getDateTime();"},{"lineNumber":253,"author":{"gitID":"chialejing"},"content":"        LocalDateTime newDateTime \u003d editedAppointment.getDateTime();"},{"lineNumber":254,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":255,"author":{"gitID":"chialejing"},"content":"        if (!oldDateTime.equals(newDateTime)) {"},{"lineNumber":256,"author":{"gitID":"chialejing"},"content":"            Appointment appointmentWithClash \u003d model.getClashingAppointment(newDateTime);"},{"lineNumber":257,"author":{"gitID":"chialejing"},"content":"            if (appointmentWithClash !\u003d null) {"},{"lineNumber":258,"author":{"gitID":"chialejing"},"content":"                throw new CommandException(\"Clash in timing exists. Please change to another date / time.\");"},{"lineNumber":259,"author":{"gitID":"chialejing"},"content":"            }"},{"lineNumber":260,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":261,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":263,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":264,"author":{"gitID":"chialejing"},"content":"     * Helper function to update pet patient\u0027s owner from an old nric to new nric"},{"lineNumber":265,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":266,"author":{"gitID":"chialejing"},"content":"    private void updatePetPatienstByOwnerNric(Nric oldNric, Nric newNric) throws"},{"lineNumber":267,"author":{"gitID":"chialejing"},"content":"            PetPatientNotFoundException, DuplicatePetPatientException {"},{"lineNumber":268,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":269,"author":{"gitID":"chialejing"},"content":"        ArrayList\u003cPetPatient\u003e petPatientArrayList \u003d model.getPetPatientsWithNric(oldNric);"},{"lineNumber":270,"author":{"gitID":"chialejing"},"content":"        EditPetPatientDescriptor eppd \u003d new EditPetPatientDescriptor();"},{"lineNumber":271,"author":{"gitID":"chialejing"},"content":"        eppd.setOwnerNric(newNric);"},{"lineNumber":272,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":273,"author":{"gitID":"chialejing"},"content":"        for (PetPatient currPetPatient : petPatientArrayList) {"},{"lineNumber":274,"author":{"gitID":"chialejing"},"content":"            PetPatient modifiedPetPatient \u003d createEditedPetPatient(currPetPatient, eppd);"},{"lineNumber":275,"author":{"gitID":"chialejing"},"content":"            model.updatePetPatient(currPetPatient, modifiedPetPatient);"},{"lineNumber":276,"author":{"gitID":"chialejing"},"content":"            model.updateFilteredPetPatientList(PREDICATE_SHOW_ALL_PET_PATIENTS);"},{"lineNumber":277,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":278,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":279,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":280,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":281,"author":{"gitID":"chialejing"},"content":"     * Helper function to update appointment\u0027s owner from an old nric to new nric"},{"lineNumber":282,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":283,"author":{"gitID":"chialejing"},"content":"    private void updateAppointmentByOwnerNric(Nric oldNric, Nric newNric) throws"},{"lineNumber":284,"author":{"gitID":"chialejing"},"content":"            AppointmentNotFoundException, DuplicateAppointmentException {"},{"lineNumber":285,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":286,"author":{"gitID":"chialejing"},"content":"        ArrayList\u003cAppointment\u003e appointmentArrayList \u003d model.getAppointmentsWithNric(oldNric);"},{"lineNumber":287,"author":{"gitID":"chialejing"},"content":"        EditAppointmentDescriptor ead \u003d new EditAppointmentDescriptor();"},{"lineNumber":288,"author":{"gitID":"chialejing"},"content":"        ead.setOwnerNric(newNric);"},{"lineNumber":289,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":290,"author":{"gitID":"chialejing"},"content":"        for (Appointment currAppointment : appointmentArrayList) {"},{"lineNumber":291,"author":{"gitID":"chialejing"},"content":"            Appointment modifiedAppointment \u003d createEditedAppointment(currAppointment, ead);"},{"lineNumber":292,"author":{"gitID":"chialejing"},"content":"            model.updateAppointment(currAppointment, modifiedAppointment);"},{"lineNumber":293,"author":{"gitID":"chialejing"},"content":"            model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"},{"lineNumber":294,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":295,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":297,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":298,"author":{"gitID":"chialejing"},"content":"     * Helper function to update pet patient name in appointment"},{"lineNumber":299,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":300,"author":{"gitID":"chialejing"},"content":"    private void updateAppointmentByPetPatientName(Nric ownerNric, PetPatientName oldPetName,"},{"lineNumber":301,"author":{"gitID":"chialejing"},"content":"                                                   PetPatientName newPetName) throws"},{"lineNumber":302,"author":{"gitID":"chialejing"},"content":"            DuplicateAppointmentException, AppointmentNotFoundException {"},{"lineNumber":303,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":304,"author":{"gitID":"chialejing"},"content":"        ArrayList\u003cAppointment\u003e appointmentArrayList \u003d"},{"lineNumber":305,"author":{"gitID":"chialejing"},"content":"                model.getAppointmentsWithNricAndPetName(ownerNric, oldPetName);"},{"lineNumber":306,"author":{"gitID":"chialejing"},"content":"        EditAppointmentDescriptor ead \u003d new EditAppointmentDescriptor();"},{"lineNumber":307,"author":{"gitID":"chialejing"},"content":"        ead.setPetPatientName(newPetName);"},{"lineNumber":308,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":309,"author":{"gitID":"chialejing"},"content":"        for (Appointment currAppointment : appointmentArrayList) {"},{"lineNumber":310,"author":{"gitID":"chialejing"},"content":"            Appointment modifiedAppointment \u003d createEditedAppointment(currAppointment, ead);"},{"lineNumber":311,"author":{"gitID":"chialejing"},"content":"            model.updateAppointment(currAppointment, modifiedAppointment);"},{"lineNumber":312,"author":{"gitID":"chialejing"},"content":"            model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"},{"lineNumber":313,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":314,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":315,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":316,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":317,"author":{"gitID":"chialejing"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":318,"author":{"gitID":"chialejing"},"content":"        switch (type) {"},{"lineNumber":319,"author":{"gitID":"chialejing"},"content":"        case EDIT_PERSON:"},{"lineNumber":320,"author":{"gitID":"chialejing"},"content":"            preprocessUndoableCommandForPerson();"},{"lineNumber":321,"author":{"gitID":"chialejing"},"content":"            break;"},{"lineNumber":322,"author":{"gitID":"chialejing"},"content":"        case EDIT_PET_PATIENT:"},{"lineNumber":323,"author":{"gitID":"chialejing"},"content":"            preprocessUndoableCommandForPetPatient();"},{"lineNumber":324,"author":{"gitID":"chialejing"},"content":"            break;"},{"lineNumber":325,"author":{"gitID":"chialejing"},"content":"        case EDIT_APPOINTMENT:"},{"lineNumber":326,"author":{"gitID":"chialejing"},"content":"            preprocessUndoableCommandForAppointment();"},{"lineNumber":327,"author":{"gitID":"chialejing"},"content":"            break;"},{"lineNumber":328,"author":{"gitID":"chialejing"},"content":"        default:"},{"lineNumber":329,"author":{"gitID":"chialejing"},"content":"            break;"},{"lineNumber":330,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":331,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":332,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":333,"author":{"gitID":"chialejing"},"content":"     * Obtains the last shown person list."},{"lineNumber":334,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":335,"author":{"gitID":"chialejing"},"content":"    protected void preprocessUndoableCommandForPerson() throws CommandException {"},{"lineNumber":336,"author":{"gitID":"chialejing"},"content":"        List\u003cPerson\u003e lastShownPersonList \u003d model.getFilteredPersonList();"},{"lineNumber":337,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":338,"author":{"gitID":"chialejing"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownPersonList.size()) {"},{"lineNumber":339,"author":{"gitID":"chialejing"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":340,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":341,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":342,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":343,"author":{"gitID":"chialejing"},"content":"        personToEdit \u003d lastShownPersonList.get(index.getZeroBased());"},{"lineNumber":344,"author":{"gitID":"chialejing"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":345,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":346,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":347,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":348,"author":{"gitID":"chialejing"},"content":"     * Obtains the last shown pet patient list."},{"lineNumber":349,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":350,"author":{"gitID":"chialejing"},"content":"    protected void preprocessUndoableCommandForPetPatient() throws CommandException {"},{"lineNumber":351,"author":{"gitID":"chialejing"},"content":"        List\u003cPetPatient\u003e lastShownPetPatientList \u003d model.getFilteredPetPatientList();"},{"lineNumber":352,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":353,"author":{"gitID":"chialejing"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownPetPatientList.size()) {"},{"lineNumber":354,"author":{"gitID":"chialejing"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PET_PATIENT_DISPLAYED_INDEX);"},{"lineNumber":355,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":356,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":357,"author":{"gitID":"chialejing"},"content":"        petPatientToEdit \u003d lastShownPetPatientList.get(index.getZeroBased());"},{"lineNumber":358,"author":{"gitID":"chialejing"},"content":"        editedPetPatient \u003d createEditedPetPatient(petPatientToEdit, editPetPatientDescriptor);"},{"lineNumber":359,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":360,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":361,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":362,"author":{"gitID":"chialejing"},"content":"     * Obtains the last shown appointment list."},{"lineNumber":363,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":364,"author":{"gitID":"chialejing"},"content":"    protected void preprocessUndoableCommandForAppointment() throws CommandException {"},{"lineNumber":365,"author":{"gitID":"chialejing"},"content":"        List\u003cAppointment\u003e lastShownAppointmentList \u003d model.getFilteredAppointmentList();"},{"lineNumber":366,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":367,"author":{"gitID":"chialejing"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownAppointmentList.size()) {"},{"lineNumber":368,"author":{"gitID":"chialejing"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);"},{"lineNumber":369,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":370,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":371,"author":{"gitID":"chialejing"},"content":"        appointmentToEdit \u003d lastShownAppointmentList.get(index.getZeroBased());"},{"lineNumber":372,"author":{"gitID":"chialejing"},"content":"        editedAppointment \u003d createEditedAppointment(appointmentToEdit, editAppointmentDescriptor);"},{"lineNumber":373,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":374,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":375,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":376,"author":{"gitID":"chialejing"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":377,"author":{"gitID":"chialejing"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":378,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":379,"author":{"gitID":"chialejing"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":380,"author":{"gitID":"chialejing"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":381,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":382,"author":{"gitID":"chialejing"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":383,"author":{"gitID":"chialejing"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":384,"author":{"gitID":"chialejing"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":385,"author":{"gitID":"chialejing"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":386,"author":{"gitID":"chialejing"},"content":"        Nric updatedNric \u003d editPersonDescriptor.getNric().orElse(personToEdit.getNric());"},{"lineNumber":387,"author":{"gitID":"chialejing"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":388,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":389,"author":{"gitID":"chialejing"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedNric, updatedTags);"},{"lineNumber":390,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":391,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":392,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":393,"author":{"gitID":"chialejing"},"content":"     * Creates and returns a {@code PetPatient} with the details of {@code petPatientToEdit}"},{"lineNumber":394,"author":{"gitID":"chialejing"},"content":"     * edited with {@code editPetPatientDescriptor}."},{"lineNumber":395,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":396,"author":{"gitID":"chialejing"},"content":"    private static PetPatient createEditedPetPatient(PetPatient petPatientToEdit,"},{"lineNumber":397,"author":{"gitID":"chialejing"},"content":"                                                     EditPetPatientDescriptor editPetPatientDescriptor) {"},{"lineNumber":398,"author":{"gitID":"chialejing"},"content":"        assert petPatientToEdit !\u003d null;"},{"lineNumber":399,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":400,"author":{"gitID":"chialejing"},"content":"        PetPatientName updatedName \u003d editPetPatientDescriptor.getName().orElse(petPatientToEdit.getName());"},{"lineNumber":401,"author":{"gitID":"chialejing"},"content":"        String updatedSpecies \u003d editPetPatientDescriptor.getSpecies().orElse(petPatientToEdit.getSpecies());"},{"lineNumber":402,"author":{"gitID":"chialejing"},"content":"        String updatedBreed \u003d editPetPatientDescriptor.getBreed().orElse(petPatientToEdit.getBreed());"},{"lineNumber":403,"author":{"gitID":"chialejing"},"content":"        String updatedColour \u003d editPetPatientDescriptor.getColour().orElse(petPatientToEdit.getColour());"},{"lineNumber":404,"author":{"gitID":"chialejing"},"content":"        String updatedBloodType \u003d editPetPatientDescriptor.getBloodType().orElse(petPatientToEdit.getBloodType());"},{"lineNumber":405,"author":{"gitID":"chialejing"},"content":"        Nric updatedOwnerNric \u003d editPetPatientDescriptor.getOwnerNric().orElse(petPatientToEdit.getOwner());"},{"lineNumber":406,"author":{"gitID":"chialejing"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPetPatientDescriptor.getTags().orElse(petPatientToEdit.getTags());"},{"lineNumber":407,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":408,"author":{"gitID":"chialejing"},"content":"        return new PetPatient("},{"lineNumber":409,"author":{"gitID":"chialejing"},"content":"                updatedName,"},{"lineNumber":410,"author":{"gitID":"chialejing"},"content":"                updatedSpecies,"},{"lineNumber":411,"author":{"gitID":"chialejing"},"content":"                updatedBreed,"},{"lineNumber":412,"author":{"gitID":"chialejing"},"content":"                updatedColour,"},{"lineNumber":413,"author":{"gitID":"chialejing"},"content":"                updatedBloodType,"},{"lineNumber":414,"author":{"gitID":"chialejing"},"content":"                updatedOwnerNric,"},{"lineNumber":415,"author":{"gitID":"chialejing"},"content":"                updatedTags"},{"lineNumber":416,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":417,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":418,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":419,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":420,"author":{"gitID":"chialejing"},"content":"     * Creates and returns a {@code Appointment} with the details of {@code appointmentToEdit}"},{"lineNumber":421,"author":{"gitID":"chialejing"},"content":"     * edited with {@code editAppointmentDescriptor}."},{"lineNumber":422,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":423,"author":{"gitID":"chialejing"},"content":"    private static Appointment createEditedAppointment(Appointment appointmentToEdit,"},{"lineNumber":424,"author":{"gitID":"chialejing"},"content":"                                                       EditAppointmentDescriptor editAppointmentDescriptor) {"},{"lineNumber":425,"author":{"gitID":"chialejing"},"content":"        assert appointmentToEdit !\u003d null;"},{"lineNumber":426,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":427,"author":{"gitID":"chialejing"},"content":"        Nric updatedOwnerNric \u003d editAppointmentDescriptor.getOwnerNric()"},{"lineNumber":428,"author":{"gitID":"chialejing"},"content":"                .orElse(appointmentToEdit.getOwnerNric());"},{"lineNumber":429,"author":{"gitID":"chialejing"},"content":"        PetPatientName updatedPetPatientName \u003d editAppointmentDescriptor.getPetPatientName()"},{"lineNumber":430,"author":{"gitID":"chialejing"},"content":"                .orElse(appointmentToEdit.getPetPatientName());"},{"lineNumber":431,"author":{"gitID":"chialejing"},"content":"        Remark updatedRemark \u003d editAppointmentDescriptor.getRemark()"},{"lineNumber":432,"author":{"gitID":"chialejing"},"content":"                .orElse(appointmentToEdit.getRemark());"},{"lineNumber":433,"author":{"gitID":"chialejing"},"content":"        LocalDateTime updatedLocalDateTime \u003d editAppointmentDescriptor.getLocalDateTime()"},{"lineNumber":434,"author":{"gitID":"chialejing"},"content":"                .orElse(appointmentToEdit.getDateTime());"},{"lineNumber":435,"author":{"gitID":"chialejing"},"content":"        Set\u003cTag\u003e updatedTags \u003d editAppointmentDescriptor.getTags()"},{"lineNumber":436,"author":{"gitID":"chialejing"},"content":"                .orElse(appointmentToEdit.getAppointmentTags());"},{"lineNumber":437,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":438,"author":{"gitID":"chialejing"},"content":"        return new Appointment("},{"lineNumber":439,"author":{"gitID":"chialejing"},"content":"                updatedOwnerNric,"},{"lineNumber":440,"author":{"gitID":"chialejing"},"content":"                updatedPetPatientName,"},{"lineNumber":441,"author":{"gitID":"chialejing"},"content":"                updatedRemark,"},{"lineNumber":442,"author":{"gitID":"chialejing"},"content":"                updatedLocalDateTime,"},{"lineNumber":443,"author":{"gitID":"chialejing"},"content":"                updatedTags"},{"lineNumber":444,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":445,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":446,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":447,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":448,"author":{"gitID":"chialejing"},"content":"    public boolean equals(Object other) {"},{"lineNumber":449,"author":{"gitID":"chialejing"},"content":"        // short circuit if same object"},{"lineNumber":450,"author":{"gitID":"chialejing"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":451,"author":{"gitID":"chialejing"},"content":"            return true;"},{"lineNumber":452,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":453,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":454,"author":{"gitID":"chialejing"},"content":"        // instanceof handles nulls"},{"lineNumber":455,"author":{"gitID":"chialejing"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":456,"author":{"gitID":"chialejing"},"content":"            return false;"},{"lineNumber":457,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":458,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":459,"author":{"gitID":"chialejing"},"content":"        // state check"},{"lineNumber":460,"author":{"gitID":"chialejing"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":461,"author":{"gitID":"chialejing"},"content":"        return index.equals(e.index)"},{"lineNumber":462,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":463,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":464,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":465,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":466,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":467,"author":{"gitID":"chialejing"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":468,"author":{"gitID":"chialejing"},"content":"     * corresponding field value of the person."},{"lineNumber":469,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":470,"author":{"gitID":"chialejing"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":471,"author":{"gitID":"chialejing"},"content":"        private Name name;"},{"lineNumber":472,"author":{"gitID":"chialejing"},"content":"        private Phone phone;"},{"lineNumber":473,"author":{"gitID":"chialejing"},"content":"        private Email email;"},{"lineNumber":474,"author":{"gitID":"chialejing"},"content":"        private Address address;"},{"lineNumber":475,"author":{"gitID":"chialejing"},"content":"        private Nric nric;"},{"lineNumber":476,"author":{"gitID":"chialejing"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":477,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":478,"author":{"gitID":"chialejing"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":479,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":480,"author":{"gitID":"chialejing"},"content":"        /**"},{"lineNumber":481,"author":{"gitID":"chialejing"},"content":"         * Copy constructor."},{"lineNumber":482,"author":{"gitID":"chialejing"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":483,"author":{"gitID":"chialejing"},"content":"         */"},{"lineNumber":484,"author":{"gitID":"chialejing"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":485,"author":{"gitID":"chialejing"},"content":"            setName(toCopy.name);"},{"lineNumber":486,"author":{"gitID":"chialejing"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":487,"author":{"gitID":"chialejing"},"content":"            setEmail(toCopy.email);"},{"lineNumber":488,"author":{"gitID":"chialejing"},"content":"            setAddress(toCopy.address);"},{"lineNumber":489,"author":{"gitID":"chialejing"},"content":"            setNric(toCopy.nric);"},{"lineNumber":490,"author":{"gitID":"chialejing"},"content":"            setTags(toCopy.tags);"},{"lineNumber":491,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":492,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":493,"author":{"gitID":"chialejing"},"content":"        /**"},{"lineNumber":494,"author":{"gitID":"chialejing"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":495,"author":{"gitID":"chialejing"},"content":"         */"},{"lineNumber":496,"author":{"gitID":"chialejing"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":497,"author":{"gitID":"chialejing"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email,"},{"lineNumber":498,"author":{"gitID":"chialejing"},"content":"                    this.address, this.nric, this.tags);"},{"lineNumber":499,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":500,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":501,"author":{"gitID":"chialejing"},"content":"        public void setName(Name name) {"},{"lineNumber":502,"author":{"gitID":"chialejing"},"content":"            this.name \u003d name;"},{"lineNumber":503,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":504,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":505,"author":{"gitID":"chialejing"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":506,"author":{"gitID":"chialejing"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":507,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":508,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":509,"author":{"gitID":"chialejing"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":510,"author":{"gitID":"chialejing"},"content":"            this.phone \u003d phone;"},{"lineNumber":511,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":512,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":513,"author":{"gitID":"chialejing"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":514,"author":{"gitID":"chialejing"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":515,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":516,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":517,"author":{"gitID":"chialejing"},"content":"        public void setEmail(Email email) {"},{"lineNumber":518,"author":{"gitID":"chialejing"},"content":"            this.email \u003d email;"},{"lineNumber":519,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":520,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":521,"author":{"gitID":"chialejing"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":522,"author":{"gitID":"chialejing"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":523,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":524,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":525,"author":{"gitID":"chialejing"},"content":"        public void setAddress(Address address) {"},{"lineNumber":526,"author":{"gitID":"chialejing"},"content":"            this.address \u003d address;"},{"lineNumber":527,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":528,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":529,"author":{"gitID":"chialejing"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":530,"author":{"gitID":"chialejing"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":531,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":532,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":533,"author":{"gitID":"chialejing"},"content":"        public void setNric(Nric nric) {"},{"lineNumber":534,"author":{"gitID":"chialejing"},"content":"            this.nric \u003d nric;"},{"lineNumber":535,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":536,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":537,"author":{"gitID":"chialejing"},"content":"        public Optional\u003cNric\u003e getNric() {"},{"lineNumber":538,"author":{"gitID":"chialejing"},"content":"            return Optional.ofNullable(nric);"},{"lineNumber":539,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":540,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":541,"author":{"gitID":"chialejing"},"content":"        /**"},{"lineNumber":542,"author":{"gitID":"chialejing"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":543,"author":{"gitID":"chialejing"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":544,"author":{"gitID":"chialejing"},"content":"         */"},{"lineNumber":545,"author":{"gitID":"chialejing"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":546,"author":{"gitID":"chialejing"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":547,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":548,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":549,"author":{"gitID":"chialejing"},"content":"        /**"},{"lineNumber":550,"author":{"gitID":"chialejing"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":551,"author":{"gitID":"chialejing"},"content":"         * if modification is attempted."},{"lineNumber":552,"author":{"gitID":"chialejing"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":553,"author":{"gitID":"chialejing"},"content":"         */"},{"lineNumber":554,"author":{"gitID":"chialejing"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":555,"author":{"gitID":"chialejing"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":556,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":557,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":558,"author":{"gitID":"chialejing"},"content":"        @Override"},{"lineNumber":559,"author":{"gitID":"chialejing"},"content":"        public boolean equals(Object other) {"},{"lineNumber":560,"author":{"gitID":"chialejing"},"content":"            // short circuit if same object"},{"lineNumber":561,"author":{"gitID":"chialejing"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":562,"author":{"gitID":"chialejing"},"content":"                return true;"},{"lineNumber":563,"author":{"gitID":"chialejing"},"content":"            }"},{"lineNumber":564,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":565,"author":{"gitID":"chialejing"},"content":"            // instanceof handles nulls"},{"lineNumber":566,"author":{"gitID":"chialejing"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":567,"author":{"gitID":"chialejing"},"content":"                return false;"},{"lineNumber":568,"author":{"gitID":"chialejing"},"content":"            }"},{"lineNumber":569,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":570,"author":{"gitID":"chialejing"},"content":"            // state check"},{"lineNumber":571,"author":{"gitID":"chialejing"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":572,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":573,"author":{"gitID":"chialejing"},"content":"            return getName().equals(e.getName())"},{"lineNumber":574,"author":{"gitID":"chialejing"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":575,"author":{"gitID":"chialejing"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":576,"author":{"gitID":"chialejing"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":577,"author":{"gitID":"chialejing"},"content":"                    \u0026\u0026 getNric().equals(e.getNric())"},{"lineNumber":578,"author":{"gitID":"chialejing"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":579,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":580,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":581,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":582,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":583,"author":{"gitID":"chialejing"},"content":"     * Stores the details to edit the pet patient with. Each non-empty field value will replace the"},{"lineNumber":584,"author":{"gitID":"chialejing"},"content":"     * corresponding field value of the pet patient."},{"lineNumber":585,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":586,"author":{"gitID":"chialejing"},"content":"    public static class EditPetPatientDescriptor {"},{"lineNumber":587,"author":{"gitID":"chialejing"},"content":"        private PetPatientName name;"},{"lineNumber":588,"author":{"gitID":"chialejing"},"content":"        private String species;"},{"lineNumber":589,"author":{"gitID":"chialejing"},"content":"        private String breed;"},{"lineNumber":590,"author":{"gitID":"chialejing"},"content":"        private String colour;"},{"lineNumber":591,"author":{"gitID":"chialejing"},"content":"        private String bloodType;"},{"lineNumber":592,"author":{"gitID":"chialejing"},"content":"        private Nric ownerNric;"},{"lineNumber":593,"author":{"gitID":"chialejing"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":594,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":595,"author":{"gitID":"chialejing"},"content":"        public EditPetPatientDescriptor() {}"},{"lineNumber":596,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":597,"author":{"gitID":"chialejing"},"content":"        /**"},{"lineNumber":598,"author":{"gitID":"chialejing"},"content":"         * Copy constructor."},{"lineNumber":599,"author":{"gitID":"chialejing"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":600,"author":{"gitID":"chialejing"},"content":"         */"},{"lineNumber":601,"author":{"gitID":"chialejing"},"content":"        public EditPetPatientDescriptor(EditPetPatientDescriptor toCopy) {"},{"lineNumber":602,"author":{"gitID":"chialejing"},"content":"            setName(toCopy.name);"},{"lineNumber":603,"author":{"gitID":"chialejing"},"content":"            setSpecies(toCopy.species);"},{"lineNumber":604,"author":{"gitID":"chialejing"},"content":"            setBreed(toCopy.breed);"},{"lineNumber":605,"author":{"gitID":"chialejing"},"content":"            setColour(toCopy.colour);"},{"lineNumber":606,"author":{"gitID":"chialejing"},"content":"            setBloodType(toCopy.bloodType);"},{"lineNumber":607,"author":{"gitID":"chialejing"},"content":"            setOwnerNric(toCopy.ownerNric);"},{"lineNumber":608,"author":{"gitID":"chialejing"},"content":"            setTags(toCopy.tags);"},{"lineNumber":609,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":610,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":611,"author":{"gitID":"chialejing"},"content":"        /**"},{"lineNumber":612,"author":{"gitID":"chialejing"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":613,"author":{"gitID":"chialejing"},"content":"         */"},{"lineNumber":614,"author":{"gitID":"chialejing"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":615,"author":{"gitID":"chialejing"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.species, this.breed,"},{"lineNumber":616,"author":{"gitID":"chialejing"},"content":"                    this.colour, this.bloodType, this.ownerNric, this.tags);"},{"lineNumber":617,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":618,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":619,"author":{"gitID":"chialejing"},"content":"        public void setName(PetPatientName name) {"},{"lineNumber":620,"author":{"gitID":"chialejing"},"content":"            this.name \u003d name;"},{"lineNumber":621,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":622,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":623,"author":{"gitID":"chialejing"},"content":"        public Optional\u003cPetPatientName\u003e getName() {"},{"lineNumber":624,"author":{"gitID":"chialejing"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":625,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":626,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":627,"author":{"gitID":"chialejing"},"content":"        public void setSpecies(String species) {"},{"lineNumber":628,"author":{"gitID":"chialejing"},"content":"            this.species \u003d species;"},{"lineNumber":629,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":630,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":631,"author":{"gitID":"chialejing"},"content":"        public Optional\u003cString\u003e getSpecies() {"},{"lineNumber":632,"author":{"gitID":"chialejing"},"content":"            return Optional.ofNullable(species);"},{"lineNumber":633,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":634,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":635,"author":{"gitID":"chialejing"},"content":"        public void setBreed(String breed) {"},{"lineNumber":636,"author":{"gitID":"chialejing"},"content":"            this.breed \u003d breed;"},{"lineNumber":637,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":638,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":639,"author":{"gitID":"chialejing"},"content":"        public Optional\u003cString\u003e getBreed() {"},{"lineNumber":640,"author":{"gitID":"chialejing"},"content":"            return Optional.ofNullable(breed);"},{"lineNumber":641,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":642,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":643,"author":{"gitID":"chialejing"},"content":"        public void setColour(String colour) {"},{"lineNumber":644,"author":{"gitID":"chialejing"},"content":"            this.colour \u003d colour;"},{"lineNumber":645,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":646,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":647,"author":{"gitID":"chialejing"},"content":"        public Optional\u003cString\u003e getColour() {"},{"lineNumber":648,"author":{"gitID":"chialejing"},"content":"            return Optional.ofNullable(colour);"},{"lineNumber":649,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":650,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":651,"author":{"gitID":"chialejing"},"content":"        public void setBloodType(String bloodType) {"},{"lineNumber":652,"author":{"gitID":"chialejing"},"content":"            this.bloodType \u003d bloodType;"},{"lineNumber":653,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":654,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":655,"author":{"gitID":"chialejing"},"content":"        public Optional\u003cString\u003e getBloodType() {"},{"lineNumber":656,"author":{"gitID":"chialejing"},"content":"            return Optional.ofNullable(bloodType);"},{"lineNumber":657,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":658,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":659,"author":{"gitID":"chialejing"},"content":"        public void setOwnerNric(Nric nric) {"},{"lineNumber":660,"author":{"gitID":"chialejing"},"content":"            this.ownerNric \u003d nric;"},{"lineNumber":661,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":662,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":663,"author":{"gitID":"chialejing"},"content":"        public Optional\u003cNric\u003e getOwnerNric() {"},{"lineNumber":664,"author":{"gitID":"chialejing"},"content":"            return Optional.ofNullable(ownerNric);"},{"lineNumber":665,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":666,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":667,"author":{"gitID":"chialejing"},"content":"        /**"},{"lineNumber":668,"author":{"gitID":"chialejing"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":669,"author":{"gitID":"chialejing"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":670,"author":{"gitID":"chialejing"},"content":"         */"},{"lineNumber":671,"author":{"gitID":"chialejing"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":672,"author":{"gitID":"chialejing"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":673,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":674,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":675,"author":{"gitID":"chialejing"},"content":"        /**"},{"lineNumber":676,"author":{"gitID":"chialejing"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":677,"author":{"gitID":"chialejing"},"content":"         * if modification is attempted."},{"lineNumber":678,"author":{"gitID":"chialejing"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":679,"author":{"gitID":"chialejing"},"content":"         */"},{"lineNumber":680,"author":{"gitID":"chialejing"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":681,"author":{"gitID":"chialejing"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":682,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":683,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":684,"author":{"gitID":"chialejing"},"content":"        @Override"},{"lineNumber":685,"author":{"gitID":"chialejing"},"content":"        public boolean equals(Object other) {"},{"lineNumber":686,"author":{"gitID":"chialejing"},"content":"            // short circuit if same object"},{"lineNumber":687,"author":{"gitID":"chialejing"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":688,"author":{"gitID":"chialejing"},"content":"                return true;"},{"lineNumber":689,"author":{"gitID":"chialejing"},"content":"            }"},{"lineNumber":690,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":691,"author":{"gitID":"chialejing"},"content":"            // instanceof handles nulls"},{"lineNumber":692,"author":{"gitID":"chialejing"},"content":"            if (!(other instanceof EditPetPatientDescriptor)) {"},{"lineNumber":693,"author":{"gitID":"chialejing"},"content":"                return false;"},{"lineNumber":694,"author":{"gitID":"chialejing"},"content":"            }"},{"lineNumber":695,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":696,"author":{"gitID":"chialejing"},"content":"            // state check"},{"lineNumber":697,"author":{"gitID":"chialejing"},"content":"            EditPetPatientDescriptor e \u003d (EditPetPatientDescriptor) other;"},{"lineNumber":698,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":699,"author":{"gitID":"chialejing"},"content":"            return getName().equals(e.getName())"},{"lineNumber":700,"author":{"gitID":"chialejing"},"content":"                    \u0026\u0026 getSpecies().equals(e.getSpecies())"},{"lineNumber":701,"author":{"gitID":"chialejing"},"content":"                    \u0026\u0026 getBreed().equals(e.getBreed())"},{"lineNumber":702,"author":{"gitID":"chialejing"},"content":"                    \u0026\u0026 getColour().equals(e.getColour())"},{"lineNumber":703,"author":{"gitID":"chialejing"},"content":"                    \u0026\u0026 getBloodType().equals(e.getBloodType())"},{"lineNumber":704,"author":{"gitID":"chialejing"},"content":"                    \u0026\u0026 getOwnerNric().equals(e.getOwnerNric())"},{"lineNumber":705,"author":{"gitID":"chialejing"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":706,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":707,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":708,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":709,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":710,"author":{"gitID":"chialejing"},"content":"     * Stores the details to edit the appointment with. Each non-empty field value will replace the"},{"lineNumber":711,"author":{"gitID":"chialejing"},"content":"     * corresponding field value of the appointment."},{"lineNumber":712,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":713,"author":{"gitID":"chialejing"},"content":"    public static class EditAppointmentDescriptor {"},{"lineNumber":714,"author":{"gitID":"chialejing"},"content":"        private Nric ownerNric;"},{"lineNumber":715,"author":{"gitID":"chialejing"},"content":"        private PetPatientName petPatientName;"},{"lineNumber":716,"author":{"gitID":"chialejing"},"content":"        private Remark remark;"},{"lineNumber":717,"author":{"gitID":"chialejing"},"content":"        private LocalDateTime localDateTime;"},{"lineNumber":718,"author":{"gitID":"chialejing"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":719,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":720,"author":{"gitID":"chialejing"},"content":"        public EditAppointmentDescriptor() {}"},{"lineNumber":721,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":722,"author":{"gitID":"chialejing"},"content":"        /**"},{"lineNumber":723,"author":{"gitID":"chialejing"},"content":"         * Copy constructor."},{"lineNumber":724,"author":{"gitID":"chialejing"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":725,"author":{"gitID":"chialejing"},"content":"         */"},{"lineNumber":726,"author":{"gitID":"chialejing"},"content":"        public EditAppointmentDescriptor(EditAppointmentDescriptor toCopy) {"},{"lineNumber":727,"author":{"gitID":"chialejing"},"content":"            setOwnerNric(toCopy.ownerNric);"},{"lineNumber":728,"author":{"gitID":"chialejing"},"content":"            setPetPatientName(toCopy.petPatientName);"},{"lineNumber":729,"author":{"gitID":"chialejing"},"content":"            setRemark(toCopy.remark);"},{"lineNumber":730,"author":{"gitID":"chialejing"},"content":"            setLocalDateTime(toCopy.localDateTime);"},{"lineNumber":731,"author":{"gitID":"chialejing"},"content":"            setTags(toCopy.tags);"},{"lineNumber":732,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":733,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":734,"author":{"gitID":"chialejing"},"content":"        /**"},{"lineNumber":735,"author":{"gitID":"chialejing"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":736,"author":{"gitID":"chialejing"},"content":"         */"},{"lineNumber":737,"author":{"gitID":"chialejing"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":738,"author":{"gitID":"chialejing"},"content":"            return CollectionUtil.isAnyNonNull(this.ownerNric, this.petPatientName, this.remark,"},{"lineNumber":739,"author":{"gitID":"chialejing"},"content":"                    this.localDateTime, this.tags);"},{"lineNumber":740,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":741,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":742,"author":{"gitID":"chialejing"},"content":"        public void setOwnerNric(Nric ownerNric) {"},{"lineNumber":743,"author":{"gitID":"chialejing"},"content":"            this.ownerNric \u003d ownerNric;"},{"lineNumber":744,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":745,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":746,"author":{"gitID":"chialejing"},"content":"        public Optional\u003cNric\u003e getOwnerNric() {"},{"lineNumber":747,"author":{"gitID":"chialejing"},"content":"            return Optional.ofNullable(ownerNric);"},{"lineNumber":748,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":749,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":750,"author":{"gitID":"chialejing"},"content":"        public void setPetPatientName(PetPatientName petPatientName) {"},{"lineNumber":751,"author":{"gitID":"chialejing"},"content":"            this.petPatientName \u003d petPatientName;"},{"lineNumber":752,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":753,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":754,"author":{"gitID":"chialejing"},"content":"        public Optional\u003cPetPatientName\u003e getPetPatientName() {"},{"lineNumber":755,"author":{"gitID":"chialejing"},"content":"            return Optional.ofNullable(petPatientName);"},{"lineNumber":756,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":757,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":758,"author":{"gitID":"chialejing"},"content":"        public void setRemark(Remark remark) {"},{"lineNumber":759,"author":{"gitID":"chialejing"},"content":"            this.remark \u003d remark;"},{"lineNumber":760,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":761,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":762,"author":{"gitID":"chialejing"},"content":"        public Optional\u003cRemark\u003e getRemark() {"},{"lineNumber":763,"author":{"gitID":"chialejing"},"content":"            return Optional.ofNullable(remark);"},{"lineNumber":764,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":765,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":766,"author":{"gitID":"chialejing"},"content":"        public void setLocalDateTime(LocalDateTime localDateTime) {"},{"lineNumber":767,"author":{"gitID":"chialejing"},"content":"            this.localDateTime \u003d localDateTime;"},{"lineNumber":768,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":769,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":770,"author":{"gitID":"chialejing"},"content":"        public Optional\u003cLocalDateTime\u003e getLocalDateTime() {"},{"lineNumber":771,"author":{"gitID":"chialejing"},"content":"            return Optional.ofNullable(localDateTime);"},{"lineNumber":772,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":773,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":774,"author":{"gitID":"chialejing"},"content":"        /**"},{"lineNumber":775,"author":{"gitID":"chialejing"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":776,"author":{"gitID":"chialejing"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":777,"author":{"gitID":"chialejing"},"content":"         */"},{"lineNumber":778,"author":{"gitID":"chialejing"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":779,"author":{"gitID":"chialejing"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":780,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":781,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":782,"author":{"gitID":"chialejing"},"content":"        /**"},{"lineNumber":783,"author":{"gitID":"chialejing"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":784,"author":{"gitID":"chialejing"},"content":"         * if modification is attempted."},{"lineNumber":785,"author":{"gitID":"chialejing"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":786,"author":{"gitID":"chialejing"},"content":"         */"},{"lineNumber":787,"author":{"gitID":"chialejing"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":788,"author":{"gitID":"chialejing"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":789,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":790,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":791,"author":{"gitID":"chialejing"},"content":"        @Override"},{"lineNumber":792,"author":{"gitID":"chialejing"},"content":"        public boolean equals(Object other) {"},{"lineNumber":793,"author":{"gitID":"chialejing"},"content":"            // short circuit if same object"},{"lineNumber":794,"author":{"gitID":"chialejing"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":795,"author":{"gitID":"chialejing"},"content":"                return true;"},{"lineNumber":796,"author":{"gitID":"chialejing"},"content":"            }"},{"lineNumber":797,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":798,"author":{"gitID":"chialejing"},"content":"            // instanceof handles nulls"},{"lineNumber":799,"author":{"gitID":"chialejing"},"content":"            if (!(other instanceof EditAppointmentDescriptor)) {"},{"lineNumber":800,"author":{"gitID":"chialejing"},"content":"                return false;"},{"lineNumber":801,"author":{"gitID":"chialejing"},"content":"            }"},{"lineNumber":802,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":803,"author":{"gitID":"chialejing"},"content":"            // state check"},{"lineNumber":804,"author":{"gitID":"chialejing"},"content":"            EditAppointmentDescriptor e \u003d (EditAppointmentDescriptor) other;"},{"lineNumber":805,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":806,"author":{"gitID":"chialejing"},"content":"            return getOwnerNric().equals(e.getOwnerNric())"},{"lineNumber":807,"author":{"gitID":"chialejing"},"content":"                    \u0026\u0026 getPetPatientName().equals(e.getPetPatientName())"},{"lineNumber":808,"author":{"gitID":"chialejing"},"content":"                    \u0026\u0026 getRemark().equals(e.getRemark())"},{"lineNumber":809,"author":{"gitID":"chialejing"},"content":"                    \u0026\u0026 getLocalDateTime().equals(e.getLocalDateTime())"},{"lineNumber":810,"author":{"gitID":"chialejing"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":811,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":812,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":813,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":780,"wynonaK":1,"-":32}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/AppointmentDependencyNotEmptyException.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.model.appointment.exceptions;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":" * Signals that the operation is unable to continue because there are still appointments dependent."},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"public class AppointmentDependencyNotEmptyException extends Exception {"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":9}},{"path":"src/main/java/seedu/address/model/appointment/Appointment.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":" * Represents an Appointment."},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":" * Guarantees: details are present and not null, field values are validated."},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"public class Appointment {"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"    private Nric ownerNric;"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"    private PetPatientName petPatientName;"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"    private Remark remark; //remarks"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"    private LocalDateTime localDateTime; //date of appointment"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"    private UniqueTagList appointmentTags; //type of appointment"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"     * Every field must be present and not null."},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"    public Appointment(Nric ownerNric, PetPatientName petPatientName, Remark remark,"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"                       LocalDateTime localDateTime, Set\u003cTag\u003e appointmentTags) {"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"        requireAllNonNull(ownerNric, petPatientName, remark, localDateTime, appointmentTags);"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"        this.ownerNric \u003d ownerNric;"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"        this.petPatientName \u003d petPatientName;"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"        this.remark \u003d remark;"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"        this.localDateTime \u003d localDateTime;"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"        this.appointmentTags \u003d new UniqueTagList(appointmentTags);"},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"     * ownerNric and petName can be set later using setter methods."},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"    public Appointment(Remark remark, LocalDateTime localDateTime, Set\u003cTag\u003e type) {"},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"        requireAllNonNull(remark, localDateTime, type);"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"        this.remark \u003d remark;"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"        this.localDateTime \u003d localDateTime;"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":"        this.appointmentTags \u003d new UniqueTagList(type);"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"    public Nric getOwnerNric() {"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"        return ownerNric;"},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"    public void setOwnerNric(Nric ownerNric) {"},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"        this.ownerNric \u003d ownerNric;"},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"    public PetPatientName getPetPatientName() {"},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"        return petPatientName;"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"    public void setPetPatientName(PetPatientName petPatientName) {"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"        this.petPatientName \u003d petPatientName;"},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"    public Remark getRemark() {"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":"        return remark;"},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"    public LocalDateTime getDateTime() {"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"        return localDateTime;"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"    public String getFormattedLocalDateTime() {"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"        return localDateTime.format(formatter);"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"     * if modification is attempted."},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"    public Set\u003cTag\u003e getAppointmentTags() {"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":"        return Collections.unmodifiableSet(appointmentTags.toSet());"},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":"    public boolean equals(Object other) {"},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":"            return true;"},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"        if (!(other instanceof Appointment)) {"},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":"            return false;"},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":101,"author":{"gitID":"wynonaK"},"content":"        Appointment otherAppointment \u003d (Appointment) other;"},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":"        return otherAppointment.getOwnerNric().equals(this.getOwnerNric())"},{"lineNumber":103,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 otherAppointment.getPetPatientName().equals((this.getPetPatientName()))"},{"lineNumber":104,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 otherAppointment.getRemark().equals(this.getRemark())"},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 otherAppointment.getDateTime().equals(this.getDateTime());"},{"lineNumber":106,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":108,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"wynonaK"},"content":"    public int hashCode() {"},{"lineNumber":110,"author":{"gitID":"wynonaK"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":"        return Objects.hash(ownerNric, petPatientName, remark, localDateTime, appointmentTags);"},{"lineNumber":112,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":114,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":115,"author":{"gitID":"wynonaK"},"content":"    public String toString() {"},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":"        builder.append(\"\\t\")"},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":"                .append(getFormattedLocalDateTime())"},{"lineNumber":119,"author":{"gitID":"wynonaK"},"content":"                .append(\"\\tRemarks: \")"},{"lineNumber":120,"author":{"gitID":"wynonaK"},"content":"                .append(getRemark())"},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":"                .append(\"\\tType(s): \");"},{"lineNumber":122,"author":{"gitID":"wynonaK"},"content":"        getAppointmentTags().forEach(builder::append);"},{"lineNumber":123,"author":{"gitID":"wynonaK"},"content":"        return builder.toString();"},{"lineNumber":124,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":126,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"chialejing":1,"wynonaK":119,"-":6}},{"path":"src/main/java/seedu/address/model/appointment/UniqueAppointmentList.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateDateTimeException;"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":" * A list of appointments that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":" *"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":" * Supports a minimal set of list operations."},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":" *"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":" * @see Appointment#equals(Object)"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"public class UniqueAppointmentList implements Iterable\u003cAppointment\u003e {"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"    private final ObservableList\u003cAppointment\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"     * Returns true if the list contains an equivalent appointment as the given argument."},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"    public boolean contains(Appointment toCheck) {"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(toCheck);"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"     * Adds an appointment to the list."},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"     * @throws DuplicateAppointmentException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"    public void add(Appointment toAdd) throws DuplicateAppointmentException, DuplicateDateTimeException {"},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(toAdd);"},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":"        if (contains(toAdd)) {"},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"            throw new DuplicateAppointmentException();"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"        for (Appointment a : internalList) {"},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"            if (a.getDateTime().equals(toAdd.getDateTime())) {"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"                throw new DuplicateDateTimeException();"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":"        internalList.add(toAdd);"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"     * Replaces the appointment {@code target} in the list with {@code editedAppointment}."},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"     * @throws DuplicateAppointmentException if the replacement is equivalent to"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"     * another existing appointment in the list."},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"     * @throws AppointmentNotFoundException if {@code target} could not be found in the list."},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment)"},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"            throws DuplicateAppointmentException, AppointmentNotFoundException {"},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(editedAppointment);"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"            throw new AppointmentNotFoundException();"},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"        if (!target.equals(editedAppointment) \u0026\u0026 internalList.contains(editedAppointment)) {"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":"            throw new DuplicateAppointmentException();"},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"        internalList.set(index, editedAppointment);"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"     * Removes the equivalent pet patient from the list."},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"     * @throws AppointmentNotFoundException if no such pet patient could be found in the list."},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"    public boolean remove(Appointment toRemove) throws AppointmentNotFoundException {"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(toRemove);"},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":"        final boolean appointmentFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"        if (!appointmentFoundAndDeleted) {"},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"            throw new AppointmentNotFoundException();"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":"        return appointmentFoundAndDeleted;"},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":"    public void setAppointments(UniqueAppointmentList replacement) {"},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments)"},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":"            throws DuplicateAppointmentException, DuplicateDateTimeException {"},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"        requireAllNonNull(appointments);"},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":"        final UniqueAppointmentList replacement \u003d new UniqueAppointmentList();"},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":"        for (final Appointment appointment : appointments) {"},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":"            replacement.add(appointment);"},{"lineNumber":101,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":"        setAppointments(replacement);"},{"lineNumber":103,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"wynonaK"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":107,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"wynonaK"},"content":"    public ObservableList\u003cAppointment\u003e asObservableList() {"},{"lineNumber":109,"author":{"gitID":"wynonaK"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":110,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":112,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"wynonaK"},"content":"    public Iterator\u003cAppointment\u003e iterator() {"},{"lineNumber":114,"author":{"gitID":"wynonaK"},"content":"        return internalList.iterator();"},{"lineNumber":115,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":"    public boolean equals(Object other) {"},{"lineNumber":119,"author":{"gitID":"wynonaK"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":120,"author":{"gitID":"wynonaK"},"content":"                || (other instanceof UniqueAppointmentList // instanceof handles nulls"},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueAppointmentList) other).internalList));"},{"lineNumber":122,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":124,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"wynonaK"},"content":"    public int hashCode() {"},{"lineNumber":126,"author":{"gitID":"wynonaK"},"content":"        return internalList.hashCode();"},{"lineNumber":127,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":124,"-":4}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/DuplicateAppointmentException.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.model.appointment.exceptions;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":" * Signals that the operation will result in duplicate Appointment objects."},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"public class DuplicateAppointmentException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"    public DuplicateAppointmentException() {"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"        super(\"Operation would result in duplicate appointments\");"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":12,"-":1}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedAppointment.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":""},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Remark;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":" * JAXB-friendly version of an Appointment."},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"public class XmlAdaptedAppointment {"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appointment %s field is missing!\";"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"    private String ownerNric;"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"    private String petPatientName;"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"    private String remark;"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"    private String dateTime;"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"    @XmlElement"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"    private List\u003cXmlAdaptedTag\u003e appointmentTagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"     * Constructs an XmlAdaptedAppointment."},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"    public XmlAdaptedAppointment() {}"},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"     * Constructs an {@code XmlAdaptedAppointment} with the given appointment details."},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":"    public XmlAdaptedAppointment(String ownerNric, String petPatientName, String remark,"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"                                 String dateTime, List\u003cXmlAdaptedTag\u003e appointmentTagged) {"},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":"        this.ownerNric \u003d ownerNric;"},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"        this.petPatientName \u003d petPatientName;"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"        this.remark \u003d remark;"},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"        if (appointmentTagged !\u003d null) {"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"            this.appointmentTagged \u003d new ArrayList\u003c\u003e(appointmentTagged);"},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"     * Converts a given Appointment into this class for JAXB use."},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedAppointment"},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"    public XmlAdaptedAppointment(Appointment source) {"},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":"        ownerNric \u003d source.getOwnerNric().toString();"},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"        petPatientName \u003d source.getPetPatientName().toString();"},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"        remark \u003d source.getRemark().value;"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":"        dateTime \u003d source.getFormattedLocalDateTime();"},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":"        appointmentTagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"        for (Tag tag : source.getAppointmentTags()) {"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"            appointmentTagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"     * Converts this jaxb-friendly adapted appointment object into the model\u0027s Appointment object."},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted appointment"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"    public Appointment toModelType() throws IllegalValueException {"},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":"        final List\u003cTag\u003e appointmentTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"        for (XmlAdaptedTag tag : appointmentTagged) {"},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"            appointmentTags.add(tag.toModelType());"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":"        if (this.ownerNric \u003d\u003d null) {"},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":"        if (!Nric.isValidNric(this.ownerNric)) {"},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"            throw new IllegalValueException(Nric.MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":"        final Nric ownerNric \u003d new Nric(this.ownerNric);"},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"        if (this.petPatientName \u003d\u003d null) {"},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":"            throw new IllegalValueException("},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, PetPatientName.class.getSimpleName()));"},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"wynonaK"},"content":"        if (!PetPatientName.isValidName(this.petPatientName)) {"},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":"            throw new IllegalValueException(PetPatientName.MESSAGE_PET_NAME_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"wynonaK"},"content":"        final PetPatientName petPatientName \u003d new PetPatientName(this.petPatientName);"},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":106,"author":{"gitID":"wynonaK"},"content":"        if (this.remark \u003d\u003d null) {"},{"lineNumber":107,"author":{"gitID":"wynonaK"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));"},{"lineNumber":108,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"wynonaK"},"content":"        if (!Remark.isValidRemark(this.remark)) {"},{"lineNumber":110,"author":{"gitID":"wynonaK"},"content":"            throw new IllegalValueException(Remark.MESSAGE_REMARK_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":113,"author":{"gitID":"wynonaK"},"content":"        final Remark remark \u003d new Remark(this.remark);"},{"lineNumber":114,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":115,"author":{"gitID":"wynonaK"},"content":"        if (this.dateTime \u003d\u003d null) {"},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":"            throw new IllegalValueException("},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, LocalDateTime.class.getSimpleName()));"},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":120,"author":{"gitID":"wynonaK"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":"        LocalDateTime localDateTime \u003d null;"},{"lineNumber":122,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":123,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":124,"author":{"gitID":"wynonaK"},"content":"            localDateTime \u003d LocalDateTime.parse(dateTime, formatter);"},{"lineNumber":125,"author":{"gitID":"wynonaK"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":126,"author":{"gitID":"wynonaK"},"content":"            throw new IllegalValueException(\"Please follow the format of yyyy-MM-dd HH:mm\");"},{"lineNumber":127,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":129,"author":{"gitID":"wynonaK"},"content":"        final LocalDateTime dateTime \u003d localDateTime;"},{"lineNumber":130,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":131,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":132,"author":{"gitID":"wynonaK"},"content":"        final Set\u003cTag\u003e thisAppointmentTags \u003d new HashSet\u003c\u003e(appointmentTags);"},{"lineNumber":133,"author":{"gitID":"wynonaK"},"content":"        return new Appointment(ownerNric, petPatientName, remark, dateTime, thisAppointmentTags);"},{"lineNumber":134,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":136,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":137,"author":{"gitID":"wynonaK"},"content":"    public boolean equals(Object other) {"},{"lineNumber":138,"author":{"gitID":"wynonaK"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":139,"author":{"gitID":"wynonaK"},"content":"            return true;"},{"lineNumber":140,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":142,"author":{"gitID":"wynonaK"},"content":"        if (!(other instanceof XmlAdaptedAppointment)) {"},{"lineNumber":143,"author":{"gitID":"wynonaK"},"content":"            return false;"},{"lineNumber":144,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":146,"author":{"gitID":"wynonaK"},"content":"        XmlAdaptedAppointment otherAppointment \u003d (XmlAdaptedAppointment) other;"},{"lineNumber":147,"author":{"gitID":"wynonaK"},"content":"        return Objects.equals(ownerNric, otherAppointment.ownerNric)"},{"lineNumber":148,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 Objects.equals(petPatientName, otherAppointment.petPatientName)"},{"lineNumber":149,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 Objects.equals(remark, otherAppointment.remark)"},{"lineNumber":150,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 Objects.equals(dateTime, otherAppointment.dateTime)"},{"lineNumber":151,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 appointmentTagged.equals(otherAppointment.appointmentTagged);"},{"lineNumber":152,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"chialejing":1,"wynonaK":140,"-":12}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/DuplicateDateTimeException.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.model.appointment.exceptions;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":" * Signals that the operation will result in double booking."},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"public class DuplicateDateTimeException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"    public DuplicateDateTimeException() {"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"        super(\"Operation would result in multiple bookings in the same time slot\");"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":12,"-":1}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/AppointmentNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.model.appointment.exceptions;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":" * Signals that the operation is unable to find the specified person."},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"public class AppointmentNotFoundException extends Exception {}"}],"authorContributionMap":{"wynonaK":7}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPetPatient.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":" * JAXB-friendly version of the PetPatient."},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"public class XmlAdaptedPetPatient {"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"    public static final String MISSING_NAME_FIELD_MESSAGE_FORMAT \u003d \"Pet patient\u0027s name field is missing!\";"},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":"    public static final String MISSING_SPECIES_FIELD_MESSAGE_FORMAT \u003d \"Pet patient\u0027s species field is missing!\";"},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"    public static final String MISSING_BREED_FIELD_MESSAGE_FORMAT \u003d \"Pet patient\u0027s breed field is missing!\";"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"    public static final String MISSING_COLOUR_FIELD_MESSAGE_FORMAT \u003d \"Pet patient\u0027s colour field is missing!\";"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"    public static final String MISSING_BLOODTYPE_FIELD_MESSAGE_FORMAT \u003d \"Pet patient\u0027s blood type field is missing!\";"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"    public static final String MISSING_OWNER_FIELD_MESSAGE_FORMAT \u003d \"Pet patient\u0027s owner field is missing!\";"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"    private String name;"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"    private String species;"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"    private String breed;"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"    private String colour;"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"    private String bloodType;"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"    private String ownerNric;"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":"    @XmlElement"},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":"    private String dateOfBirth;"},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"    @XmlElement"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"    @XmlElement"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":"    private String medicalHistory;"},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"     * Constructs an XmlAdaptedPetPatient."},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"    public XmlAdaptedPetPatient() {}"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":"     * Constructs an {@code XmlAdaptedPetPatient} with the given pet patient details."},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":"    public XmlAdaptedPetPatient(String name, String species, String breed, String colour,"},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"                            String bloodType, String ownerNric, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":"        this.name \u003d name;"},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":"        this.species \u003d species;"},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":"        this.breed \u003d breed;"},{"lineNumber":63,"author":{"gitID":"chialejing"},"content":"        this.colour \u003d colour;"},{"lineNumber":64,"author":{"gitID":"chialejing"},"content":"        this.bloodType \u003d bloodType;"},{"lineNumber":65,"author":{"gitID":"chialejing"},"content":"        this.ownerNric \u003d ownerNric;"},{"lineNumber":66,"author":{"gitID":"chialejing"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":67,"author":{"gitID":"chialejing"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":68,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":71,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"chialejing"},"content":"     * Converts a given PetPatient into this class for JAXB use."},{"lineNumber":73,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"chialejing"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPetPatient"},{"lineNumber":75,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"chialejing"},"content":"    public XmlAdaptedPetPatient(PetPatient source) {"},{"lineNumber":77,"author":{"gitID":"chialejing"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":78,"author":{"gitID":"chialejing"},"content":"        species \u003d source.getSpecies();"},{"lineNumber":79,"author":{"gitID":"chialejing"},"content":"        breed \u003d source.getBreed();"},{"lineNumber":80,"author":{"gitID":"chialejing"},"content":"        colour \u003d source.getColour();"},{"lineNumber":81,"author":{"gitID":"chialejing"},"content":"        bloodType \u003d source.getBloodType();"},{"lineNumber":82,"author":{"gitID":"chialejing"},"content":"        ownerNric \u003d source.getOwner().toString();"},{"lineNumber":83,"author":{"gitID":"chialejing"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":84,"author":{"gitID":"chialejing"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":85,"author":{"gitID":"chialejing"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":86,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":89,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"chialejing"},"content":"     * Converts this jaxb-friendly adapted pet patient object into the model\u0027s PetPatient object."},{"lineNumber":91,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":92,"author":{"gitID":"chialejing"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted pet patient"},{"lineNumber":93,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"chialejing"},"content":"    public PetPatient toModelType() throws IllegalValueException {"},{"lineNumber":95,"author":{"gitID":"chialejing"},"content":"        final List\u003cTag\u003e petPatientTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":96,"author":{"gitID":"chialejing"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":97,"author":{"gitID":"chialejing"},"content":"            petPatientTags.add(tag.toModelType());"},{"lineNumber":98,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":100,"author":{"gitID":"chialejing"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":101,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException("},{"lineNumber":102,"author":{"gitID":"chialejing"},"content":"                    String.format(MISSING_NAME_FIELD_MESSAGE_FORMAT, PetPatientName.class.getSimpleName()));"},{"lineNumber":103,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"chialejing"},"content":"        if (!PetPatientName.isValidName(this.name)) {"},{"lineNumber":105,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException(PetPatientName.MESSAGE_PET_NAME_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"chialejing"},"content":"        final PetPatientName name \u003d new PetPatientName(this.name);"},{"lineNumber":108,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":109,"author":{"gitID":"chialejing"},"content":"        if (this.species \u003d\u003d null) {"},{"lineNumber":110,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException(String.format(MISSING_SPECIES_FIELD_MESSAGE_FORMAT));"},{"lineNumber":111,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":113,"author":{"gitID":"chialejing"},"content":"        if (this.breed \u003d\u003d null) {"},{"lineNumber":114,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException(String.format(MISSING_BREED_FIELD_MESSAGE_FORMAT));"},{"lineNumber":115,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":117,"author":{"gitID":"chialejing"},"content":"        if (this.colour \u003d\u003d null) {"},{"lineNumber":118,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException(String.format(MISSING_COLOUR_FIELD_MESSAGE_FORMAT));"},{"lineNumber":119,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":121,"author":{"gitID":"chialejing"},"content":"        if (this.bloodType \u003d\u003d null) {"},{"lineNumber":122,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException(String.format(MISSING_BLOODTYPE_FIELD_MESSAGE_FORMAT));"},{"lineNumber":123,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":125,"author":{"gitID":"chialejing"},"content":"        if (this.ownerNric \u003d\u003d null) {"},{"lineNumber":126,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException("},{"lineNumber":127,"author":{"gitID":"chialejing"},"content":"                    String.format(MISSING_OWNER_FIELD_MESSAGE_FORMAT, PetPatientName.class.getSimpleName()));"},{"lineNumber":128,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"chialejing"},"content":"        if (!Nric.isValidNric(this.ownerNric)) {"},{"lineNumber":130,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException(Nric.MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":131,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"chialejing"},"content":"        final Nric ownerNric \u003d new Nric(this.ownerNric);"},{"lineNumber":133,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":134,"author":{"gitID":"chialejing"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(petPatientTags);"},{"lineNumber":135,"author":{"gitID":"chialejing"},"content":"        return new PetPatient(name, species, breed, colour, bloodType, ownerNric, tags);"},{"lineNumber":136,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":138,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":139,"author":{"gitID":"chialejing"},"content":"    public boolean equals(Object other) {"},{"lineNumber":140,"author":{"gitID":"chialejing"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":141,"author":{"gitID":"chialejing"},"content":"            return true;"},{"lineNumber":142,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":144,"author":{"gitID":"chialejing"},"content":"        if (!(other instanceof XmlAdaptedPetPatient)) {"},{"lineNumber":145,"author":{"gitID":"chialejing"},"content":"            return false;"},{"lineNumber":146,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":148,"author":{"gitID":"chialejing"},"content":"        XmlAdaptedPetPatient otherPetPatient \u003d (XmlAdaptedPetPatient) other;"},{"lineNumber":149,"author":{"gitID":"chialejing"},"content":"        return Objects.equals(name, otherPetPatient.name)"},{"lineNumber":150,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 Objects.equals(species, otherPetPatient.species)"},{"lineNumber":151,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 Objects.equals(breed, otherPetPatient.breed)"},{"lineNumber":152,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 Objects.equals(colour, otherPetPatient.colour)"},{"lineNumber":153,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 Objects.equals(bloodType, otherPetPatient.bloodType)"},{"lineNumber":154,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 Objects.equals(ownerNric, otherPetPatient.ownerNric)"},{"lineNumber":155,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 tagged.equals(otherPetPatient.tagged);"},{"lineNumber":156,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":147,"-":10}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"wynonaK"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Remark;"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateDateTimeException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"//import seedu.address.model.person.NRIC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicateNricException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.exceptions.DuplicatePetPatientException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"public class SampleDataUtil {"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"        return new Person[] {"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Nric(\"S0123456B\"),"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"owner\")),"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Nric(\"T0123456C\"),"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"owner\")),"},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Nric(\"G0123456A\"),"},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"owner\")),"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Nric(\"F0123456B\"),"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"owner\")),"},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Nric(\"S0163456E\"),"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"owner\")),"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Nric(\"F0123056T\"),"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"owner\")),"},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":"            new Person(new Name(\"Fuji Syuusuke\"), new Phone(\"90245123\"), new Email(\"fujis@example.com\"),"},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"                new Address(\"Blk 106 Bukit Purmei Street 10, #20-20\"), new Nric(\"S9015638A\"),"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"supplier\"))"},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"        };"},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"    public static PetPatient[] getSamplePetPatients() {"},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"        return new PetPatient[] {"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Ane\"), \"Cat\", \"Siamese\","},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"                    \"Brown\", \"A\", new Nric(\"S0123456B\"), getTagSet(\"Hostile\")),"},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Bei\"), \"Cat\", \"British Shorthair\","},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"                    \"Grey\", \"B\", new Nric(\"T0123456C\"), getTagSet(\"Overfriendly\")),"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Nei\"), \"Cat\", \"Maine Coon\","},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"                    \"Black\", \"AB\", new Nric(\"T0123456C\"), getTagSet(\"Aggressive\")),"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Chae\"), \"Cat\", \"Russian Blue\","},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":"                    \"Grey\", \"A\", new Nric(\"G0123456A\"), getTagSet(\"Naive\")),"},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Don\"), \"Dog\", \"German Shepherd\","},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"                    \"Brown\", \"DEA 4\", new Nric(\"F0123456B\"), getTagSet(\"Aggressive\")),"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Este\"), \"Dog\", \"Golden Retriever\","},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":"                    \"Golden\", \"DEA 6\", new Nric(\"S0163456E\"), getTagSet(\"Overfriendly\")),"},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Famm\"), \"Dog\", \"Pug\","},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"                    \"Golden\", \"DEA 1.1-\", new Nric(\"F0123056T\"), getTagSet(\"3legged\")),"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Plan\"), \"Dog\", \"Siberian Husky\","},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"                    \"White\", \"DEA 1.1+\", new Nric(\"F0123056T\"), getTagSet(\"Hostile\")),"},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"        };"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"    public static Appointment[] getSampleAppointments() {"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"        return new Appointment[] {"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"S0123456B\"), new PetPatientName(\"Ane\"), new Remark(\"nil\"),"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-10-01 10:30\"), getTagSet(\"Checkup\")),"},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"T0123456C\"), new PetPatientName(\"Bei\"), new Remark(\"nil\"),"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-10-02 10:30\"), getTagSet(\"Presurgery\")),"},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"F0123056T\"), new PetPatientName(\"Famm\"), new Remark(\"Home visit\"),"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-10-03 10:30\"), getTagSet(\"Vaccination\")),"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"F0123056T\"), new PetPatientName(\"Plan\"), new Remark(\"Home visit\"),"},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-10-03 11:00\"), getTagSet(\"Vaccination\")),"},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"T0123456C\"), new PetPatientName(\"Bei\"), new Remark(\"nil\"),"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-10-06 10:30\"), getTagSet(\"Surgery\")),"},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"G0123456A\"), new PetPatientName(\"Chae\"), new Remark(\"nil\"),"},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-10-07 09:30\"), getTagSet(\"Checkup\")),"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"F0123456B\"), new PetPatientName(\"Don\"), new Remark(\"nil\"),"},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-10-07 15:30\"), getTagSet(\"Microchipping\")),"},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"T0123456C\"), new PetPatientName(\"Bei\"), new Remark(\"nil\"),"},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-10-09 15:30\"), getTagSet(\"Postsurgery\")),"},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"T0123456C\"), new PetPatientName(\"Nei\"), new Remark(\"nil\"),"},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-10-09 16:00\"), getTagSet(\"Checkup\")),"},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":"        };"},{"lineNumber":101,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":103,"author":{"gitID":"wynonaK"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":104,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":106,"author":{"gitID":"wynonaK"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":107,"author":{"gitID":"wynonaK"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":108,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":109,"author":{"gitID":"wynonaK"},"content":"            for (PetPatient petPatient : getSamplePetPatients()) {"},{"lineNumber":110,"author":{"gitID":"wynonaK"},"content":"                sampleAb.addPetPatient(petPatient);"},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":112,"author":{"gitID":"wynonaK"},"content":"            for (Appointment appointment : getSampleAppointments()) {"},{"lineNumber":113,"author":{"gitID":"wynonaK"},"content":"                sampleAb.addAppointment(appointment);"},{"lineNumber":114,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":115,"author":{"gitID":"wynonaK"},"content":"            return sampleAb;"},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":"        } catch (DuplicateNricException e) {"},{"lineNumber":119,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate NRIC values\", e);"},{"lineNumber":120,"author":{"gitID":"wynonaK"},"content":"        } catch (DuplicatePetPatientException e) {"},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate pet patients\", e);"},{"lineNumber":122,"author":{"gitID":"wynonaK"},"content":"        } catch (DuplicateDateTimeException e) {"},{"lineNumber":123,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"sample data cannot contain double booked appointments\", e);"},{"lineNumber":124,"author":{"gitID":"wynonaK"},"content":"        } catch (DuplicateAppointmentException e) {"},{"lineNumber":125,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate appointments\", e);"},{"lineNumber":126,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":129,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"wynonaK"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":131,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"wynonaK"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":133,"author":{"gitID":"wynonaK"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":134,"author":{"gitID":"wynonaK"},"content":"        for (String s : strings) {"},{"lineNumber":135,"author":{"gitID":"wynonaK"},"content":"            tags.add(new Tag(s));"},{"lineNumber":136,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":138,"author":{"gitID":"wynonaK"},"content":"        return tags;"},{"lineNumber":139,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":141,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"wynonaK"},"content":"     * Returns a LocalDateTime object of the given string."},{"lineNumber":143,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"wynonaK"},"content":"    private static LocalDateTime getLocalDateTime(String string) {"},{"lineNumber":145,"author":{"gitID":"wynonaK"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":146,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":147,"author":{"gitID":"wynonaK"},"content":"        return LocalDateTime.parse(string, formatter);"},{"lineNumber":148,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":150,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"chialejing":1,"wynonaK":131,"-":18}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Nric nric;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Nric nric, Set\u003cTag\u003e tags) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, nric, tags);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.nric \u003d nric;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public Nric getNric() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return nric;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"     * Returns a list of tags as a string, for find command."},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":"    public String getTagString() {"},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":"        StringBuilder tagString \u003d new StringBuilder();"},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"        Set\u003cTag\u003e tagSet \u003d Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"        for (Tag tag : tagSet) {"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"            tagString.append(tag.tagName);"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"            tagString.append(\" \");"},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"        return tagString.toString().trim();"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress())"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getNric().equals(this.getNric());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return Objects.hash(name, phone, email, address, nric, tags);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        builder.append(\"\\t\")"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                .append(getName())"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                .append(\"\\tPhone: \")"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                .append(\"\\tEmail: \")"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                .append(\"\\tAddress: \")"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                .append(\"\\tNRIC: \")"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                .append(getNric())"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                .append(\"\\tTags: \");"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":13,"-":110}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"     * Returns an unmodifiable view of the appointments list."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"    ObservableList\u003cAppointment\u003e getAppointmentList();"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"     * Returns an unmodifiable view of the pet patient list."},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"     * This list will not contain any duplicate pet patients."},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"    ObservableList\u003cPetPatient\u003e getPetPatientList();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":5,"wynonaK":8,"-":26}},{"path":"src/main/java/seedu/address/model/petpatient/exceptions/PetPatientNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.model.petpatient.exceptions;"},{"lineNumber":2,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":3,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"chialejing"},"content":" * Signals that the operation is unable to find the specified pet patient."},{"lineNumber":5,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":"public class PetPatientNotFoundException extends Exception {"},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":7}},{"path":"src/main/java/seedu/address/model/appointment/Remark.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":" * Represents a Appointment\u0027s remarks."},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":" * Guarantees: is valid as declared in {@link #isValidRemark(String)}"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"public class Remark {"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_REMARK_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":"            \"Remarks can take any values, and it should not be blank. Leave \\\"nil\\\" for no remarks.\";"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"     * The first character of the remark must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"    public static final String REMARK_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"     * Constructs an {@code Remark}."},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"     * @param remark A valid address."},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"    public Remark(String remark) {"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(remark);"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"        checkArgument(isValidRemark(remark), MESSAGE_REMARK_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"        this.value \u003d remark;"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"     * Returns true if a given string is a valid remark."},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"    public static boolean isValidRemark(String test) {"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"        return test.matches(REMARK_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"                || (other instanceof Remark // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 this.value.equals(((Remark) other).value)); // state check"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":55,"-":4}},{"path":"src/main/java/seedu/address/model/theme/Theme.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.theme;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Aquarinte"},"content":"//@@author aquarinte"},{"lineNumber":10,"author":{"gitID":"Aquarinte"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Aquarinte"},"content":" * Represents a Theme in the address book."},{"lineNumber":12,"author":{"gitID":"Aquarinte"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Aquarinte"},"content":"public class Theme {"},{"lineNumber":14,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":15,"author":{"gitID":"Aquarinte"},"content":"    private static String[] themes \u003d {\"dark\", \"light\"};"},{"lineNumber":16,"author":{"gitID":"Aquarinte"},"content":"    private static String[] themesLocation \u003d {\"/view/DarkTheme.css\", \"/view/LightTheme.css\"};"},{"lineNumber":17,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":18,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_THEME_CONSTRAINTS \u003d \"Please specify one of the following themes:\\n\""},{"lineNumber":19,"author":{"gitID":"Aquarinte"},"content":"            + Arrays.stream(themes).collect(Collectors.joining(\", \"));"},{"lineNumber":20,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":21,"author":{"gitID":"Aquarinte"},"content":"    public final String selectedThemePath;"},{"lineNumber":22,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":23,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"Aquarinte"},"content":"     * Constructs a {@code Theme}."},{"lineNumber":25,"author":{"gitID":"Aquarinte"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"Aquarinte"},"content":"     * @param themeName A valid theme name."},{"lineNumber":27,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"Aquarinte"},"content":"    public Theme(String themeName) {"},{"lineNumber":29,"author":{"gitID":"Aquarinte"},"content":"        requireNonNull(themeName);"},{"lineNumber":30,"author":{"gitID":"Aquarinte"},"content":"        checkArgument(isValidThemeName(themeName.toLowerCase()), MESSAGE_THEME_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"Aquarinte"},"content":"        selectedThemePath \u003d themesLocation[Arrays.asList(themes).indexOf(themeName.toLowerCase())];"},{"lineNumber":32,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":34,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"Aquarinte"},"content":"     * Returns true if a given string is a valid theme name."},{"lineNumber":36,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"Aquarinte"},"content":"    public static boolean isValidThemeName(String themeName) {"},{"lineNumber":38,"author":{"gitID":"Aquarinte"},"content":"        boolean isValid \u003d Arrays.stream(themes).anyMatch(themeName::equals);"},{"lineNumber":39,"author":{"gitID":"Aquarinte"},"content":"        return isValid;"},{"lineNumber":40,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":42,"author":{"gitID":"Aquarinte"},"content":"    public String getThemeName() {"},{"lineNumber":43,"author":{"gitID":"Aquarinte"},"content":"        return themes[Arrays.asList(themesLocation).indexOf(selectedThemePath)];"},{"lineNumber":44,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":46,"author":{"gitID":"Aquarinte"},"content":"    public String getThemePath() {"},{"lineNumber":47,"author":{"gitID":"Aquarinte"},"content":"        return selectedThemePath;"},{"lineNumber":48,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":50,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"Aquarinte"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"Aquarinte"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":53,"author":{"gitID":"Aquarinte"},"content":"                || (other instanceof Theme // instanceof handles nulls"},{"lineNumber":54,"author":{"gitID":"Aquarinte"},"content":"                \u0026\u0026 this.selectedThemePath.equals(((Theme) other).selectedThemePath)); // state check"},{"lineNumber":55,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":57,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"Aquarinte"},"content":"    public int hashCode() {"},{"lineNumber":59,"author":{"gitID":"Aquarinte"},"content":"        return selectedThemePath.hashCode();"},{"lineNumber":60,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":62,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"Aquarinte"},"content":"     * Format state as text for viewing."},{"lineNumber":64,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"Aquarinte"},"content":"    public String toString() {"},{"lineNumber":66,"author":{"gitID":"Aquarinte"},"content":"        return \u0027[\u0027 + selectedThemePath + \u0027]\u0027;"},{"lineNumber":67,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":60,"-":8}},{"path":"src/main/java/seedu/address/model/petpatient/exceptions/DuplicatePetPatientException.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.model.petpatient.exceptions;"},{"lineNumber":2,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":5,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":" * Signals that the operation will result in duplicate PetPatient objects."},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":8,"author":{"gitID":"chialejing"},"content":"public class DuplicatePetPatientException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"chialejing"},"content":"    public DuplicatePetPatientException() {"},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":"        super(\"Operation would result in duplicate pet patients\");"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":11,"-":1}},{"path":"src/main/java/seedu/address/model/petpatient/exceptions/PetDependencyNotEmptyException.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.model.petpatient.exceptions;"},{"lineNumber":2,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":3,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":" * Signals that the operation is unable to continue because there are still pets dependent."},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"public class PetDependencyNotEmptyException extends Exception {"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"chialejing":2,"wynonaK":6}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.AppointmentDependencyNotEmptyException;"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateDateTimeException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicateNricException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.UniquePetPatientList;"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.exceptions.DuplicatePetPatientException;"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.exceptions.PetDependencyNotEmptyException;"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.exceptions.PetPatientNotFoundException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"    private final UniqueAppointmentList appointments;"},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"    private final UniquePetPatientList petPatients;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":47,"author":{"gitID":"-"},"content":"         * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":48,"author":{"gitID":"-"},"content":"         * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":49,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":50,"author":{"gitID":"-"},"content":"         * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        *   among constructors."},{"lineNumber":52,"author":{"gitID":"-"},"content":"        */ {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"        appointments \u003d new UniqueAppointmentList();"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":"        petPatients \u003d new UniquePetPatientList();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public AddressBook() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException, DuplicateNricException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments)"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"            throws DuplicateAppointmentException, DuplicateDateTimeException {"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"        this.appointments.setAppointments(appointments);"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":85,"author":{"gitID":"chialejing"},"content":"    public void setPetPatients(List\u003cPetPatient\u003e petPatients) throws DuplicatePetPatientException {"},{"lineNumber":86,"author":{"gitID":"chialejing"},"content":"        this.petPatients.setPetPatients(petPatients);"},{"lineNumber":87,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Medeina should not have duplicate persons.\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        } catch (DuplicateNricException e) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Medeina should not have two person sharing the same NRIC.\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":108,"author":{"gitID":"wynonaK"},"content":"        List\u003cAppointment\u003e syncedAppointmentList \u003d newData.getAppointmentList().stream()"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"wynonaK"},"content":"            setAppointments(syncedAppointmentList);"},{"lineNumber":113,"author":{"gitID":"wynonaK"},"content":"        } catch (DuplicateAppointmentException dae) {"},{"lineNumber":114,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"AddressBook should not have duplicate appointments.\");"},{"lineNumber":115,"author":{"gitID":"wynonaK"},"content":"        } catch (DuplicateDateTimeException ddte) {"},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"AddressBook should not have appointments on the same slot\");"},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":120,"author":{"gitID":"chialejing"},"content":"        List\u003cPetPatient\u003e syncedPetPatientList \u003d newData.getPetPatientList().stream()"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":123,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":124,"author":{"gitID":"chialejing"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"chialejing"},"content":"            setPetPatients(syncedPetPatientList);"},{"lineNumber":126,"author":{"gitID":"chialejing"},"content":"        } catch (DuplicatePetPatientException e) {"},{"lineNumber":127,"author":{"gitID":"chialejing"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate pet patients\");"},{"lineNumber":128,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException, DuplicateNricException {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":145,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     *                                  another existing person in the list."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":163,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":165,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":166,"author":{"gitID":"wynonaK"},"content":"        removeUselessTags();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"chialejing"},"content":"     * Adds a pet patient to the address book."},{"lineNumber":171,"author":{"gitID":"chialejing"},"content":"     * Also checks the new pet patient\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":172,"author":{"gitID":"chialejing"},"content":"     * and updates the Tag objects in the pet patient to point to those in {@link #tags}."},{"lineNumber":173,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":174,"author":{"gitID":"chialejing"},"content":"     * @throws DuplicatePetPatientException if an equivalent person already exists."},{"lineNumber":175,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"chialejing"},"content":"    public void addPetPatient(PetPatient p) throws DuplicatePetPatientException {"},{"lineNumber":177,"author":{"gitID":"chialejing"},"content":"        PetPatient petPatient \u003d syncWithMasterTagList(p);"},{"lineNumber":178,"author":{"gitID":"chialejing"},"content":"        petPatients.add(petPatient);"},{"lineNumber":179,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":181,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"chialejing"},"content":"     * Replaces the given pet patient {@code target} in the list with {@code editedPetPatient}."},{"lineNumber":183,"author":{"gitID":"chialejing"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPetPatient}."},{"lineNumber":184,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":185,"author":{"gitID":"chialejing"},"content":"     * @throws DuplicatePetPatientException if updating the pet patient\u0027s details causes the pet patient to be"},{"lineNumber":186,"author":{"gitID":"chialejing"},"content":"     *                                      equivalent to another existing pet patient in the list."},{"lineNumber":187,"author":{"gitID":"chialejing"},"content":"     * @throws PetPatientNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":188,"author":{"gitID":"chialejing"},"content":"     * @see #syncWithMasterTagList(PetPatient)"},{"lineNumber":189,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"chialejing"},"content":"    public void updatePetPatient(PetPatient target, PetPatient editedPetPatient)"},{"lineNumber":191,"author":{"gitID":"chialejing"},"content":"            throws DuplicatePetPatientException, PetPatientNotFoundException {"},{"lineNumber":192,"author":{"gitID":"chialejing"},"content":"        requireNonNull(editedPetPatient);"},{"lineNumber":193,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":194,"author":{"gitID":"chialejing"},"content":"        PetPatient syncEditedPetPatient \u003d syncWithMasterTagList(editedPetPatient);"},{"lineNumber":195,"author":{"gitID":"chialejing"},"content":"        petPatients.setPetPatient(target, syncEditedPetPatient);"},{"lineNumber":196,"author":{"gitID":"chialejing"},"content":"        removeUselessTags();"},{"lineNumber":197,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":199,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"chialejing"},"content":"     * Replaces the given appointment {@code target} in the list with {@code editedAppointment}."},{"lineNumber":201,"author":{"gitID":"chialejing"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedAppointment}."},{"lineNumber":202,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":203,"author":{"gitID":"chialejing"},"content":"     * @throws DuplicateAppointmentException if updating the appointment\u0027s details causes the appointment to be"},{"lineNumber":204,"author":{"gitID":"chialejing"},"content":"     *                                       equivalent to another existing appointment in the list."},{"lineNumber":205,"author":{"gitID":"chialejing"},"content":"     * @throws AppointmentNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":206,"author":{"gitID":"chialejing"},"content":"     * @see #syncWithMasterTagList(Appointment)"},{"lineNumber":207,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":208,"author":{"gitID":"chialejing"},"content":"    public void updateAppointment(Appointment target, Appointment editedAppointment)"},{"lineNumber":209,"author":{"gitID":"chialejing"},"content":"            throws DuplicateAppointmentException, AppointmentNotFoundException {"},{"lineNumber":210,"author":{"gitID":"chialejing"},"content":"        requireNonNull(editedAppointment);"},{"lineNumber":211,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":212,"author":{"gitID":"chialejing"},"content":"        Appointment syncEditedPetPatient \u003d syncWithMasterTagList(editedAppointment);"},{"lineNumber":213,"author":{"gitID":"chialejing"},"content":"        appointments.setAppointment(target, syncEditedPetPatient);"},{"lineNumber":214,"author":{"gitID":"chialejing"},"content":"        removeUselessTags();"},{"lineNumber":215,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":219,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * list."},{"lineNumber":222,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":233,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":236,"author":{"gitID":"-"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            person.getNric(), correctTagReferences);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":241,"author":{"gitID":"chialejing"},"content":"     * Updates the master tag list to include tags in {@code petPatient} that are not in the list."},{"lineNumber":242,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":243,"author":{"gitID":"chialejing"},"content":"     * @return a copy of this {@code petPatient} such that every tag in this pet patient points to a Tag object in the"},{"lineNumber":244,"author":{"gitID":"chialejing"},"content":"     * master list."},{"lineNumber":245,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"chialejing"},"content":"    private PetPatient syncWithMasterTagList (PetPatient petPatient) {"},{"lineNumber":247,"author":{"gitID":"chialejing"},"content":"        final UniqueTagList currentPetPatientTags \u003d new UniqueTagList(petPatient.getTags());"},{"lineNumber":248,"author":{"gitID":"chialejing"},"content":"        tags.mergeFrom(currentPetPatientTags);"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":256,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":257,"author":{"gitID":"chialejing"},"content":"        currentPetPatientTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":258,"author":{"gitID":"chialejing"},"content":"        return new PetPatient("},{"lineNumber":259,"author":{"gitID":"chialejing"},"content":"                petPatient.getName(),"},{"lineNumber":260,"author":{"gitID":"chialejing"},"content":"                petPatient.getSpecies(),"},{"lineNumber":261,"author":{"gitID":"chialejing"},"content":"                petPatient.getBreed(),"},{"lineNumber":262,"author":{"gitID":"chialejing"},"content":"                petPatient.getColour(),"},{"lineNumber":263,"author":{"gitID":"chialejing"},"content":"                petPatient.getBloodType(),"},{"lineNumber":264,"author":{"gitID":"-"},"content":"                petPatient.getOwner(),"},{"lineNumber":265,"author":{"gitID":"chialejing"},"content":"                correctTagReferences);"},{"lineNumber":266,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":268,"author":{"gitID":"wynonaK"},"content":"    //@@author wynonaK"},{"lineNumber":269,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":270,"author":{"gitID":"wynonaK"},"content":"     * Updates the master tag list to include tags in {@code appointment} that are not in the list."},{"lineNumber":271,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":272,"author":{"gitID":"wynonaK"},"content":"     * @return a copy of this {@code appointment} such that every tag in this appointment"},{"lineNumber":273,"author":{"gitID":"wynonaK"},"content":"     * points to a Tag object in the master list."},{"lineNumber":274,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":275,"author":{"gitID":"wynonaK"},"content":"    private Appointment syncWithMasterTagList(Appointment appointment) {"},{"lineNumber":276,"author":{"gitID":"wynonaK"},"content":"        final UniqueTagList appointmentTags \u003d new UniqueTagList(appointment.getAppointmentTags());"},{"lineNumber":277,"author":{"gitID":"wynonaK"},"content":"        tags.mergeFrom(appointmentTags);"},{"lineNumber":278,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":279,"author":{"gitID":"wynonaK"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":280,"author":{"gitID":"wynonaK"},"content":"        // used for checking person tag references"},{"lineNumber":281,"author":{"gitID":"wynonaK"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":282,"author":{"gitID":"wynonaK"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":283,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":284,"author":{"gitID":"wynonaK"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":285,"author":{"gitID":"wynonaK"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":286,"author":{"gitID":"wynonaK"},"content":"        appointmentTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":287,"author":{"gitID":"wynonaK"},"content":"        return new Appointment("},{"lineNumber":288,"author":{"gitID":"wynonaK"},"content":"                appointment.getOwnerNric(),"},{"lineNumber":289,"author":{"gitID":"wynonaK"},"content":"                appointment.getPetPatientName(),"},{"lineNumber":290,"author":{"gitID":"wynonaK"},"content":"                appointment.getRemark(),"},{"lineNumber":291,"author":{"gitID":"wynonaK"},"content":"                appointment.getDateTime(),"},{"lineNumber":292,"author":{"gitID":"wynonaK"},"content":"                correctTagReferences);"},{"lineNumber":293,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":294,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":295,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":296,"author":{"gitID":"wynonaK"},"content":"     * Adds an appointment."},{"lineNumber":297,"author":{"gitID":"wynonaK"},"content":"     * Also checks the new appointment\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":298,"author":{"gitID":"wynonaK"},"content":"     * and updates the Tag objects in the appointment to point to those in {@link #tags}."},{"lineNumber":299,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":300,"author":{"gitID":"wynonaK"},"content":"     * @throws DuplicateAppointmentException if an equivalent person already exists."},{"lineNumber":301,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":302,"author":{"gitID":"wynonaK"},"content":"    public void addAppointment(Appointment a) throws DuplicateAppointmentException, DuplicateDateTimeException {"},{"lineNumber":303,"author":{"gitID":"wynonaK"},"content":"        Appointment appointment \u003d syncWithMasterTagList(a);"},{"lineNumber":304,"author":{"gitID":"wynonaK"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":305,"author":{"gitID":"wynonaK"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any appointment"},{"lineNumber":306,"author":{"gitID":"wynonaK"},"content":"        // in the appointment list."},{"lineNumber":307,"author":{"gitID":"wynonaK"},"content":"        appointments.add(appointment);"},{"lineNumber":308,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":309,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":310,"author":{"gitID":"wynonaK"},"content":"    ////Delete operations"},{"lineNumber":311,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":312,"author":{"gitID":"wynonaK"},"content":"    //@@author wynonaK"},{"lineNumber":313,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":314,"author":{"gitID":"wynonaK"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":315,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":316,"author":{"gitID":"wynonaK"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":317,"author":{"gitID":"wynonaK"},"content":"     * @throws PetDependencyNotEmptyException if the {@code key} still contains pet patients it is tied to."},{"lineNumber":318,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":319,"author":{"gitID":"wynonaK"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException, PetDependencyNotEmptyException {"},{"lineNumber":320,"author":{"gitID":"wynonaK"},"content":"        petPatientDependenciesExist(key);"},{"lineNumber":321,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":322,"author":{"gitID":"wynonaK"},"content":"        if (persons.remove(key)) {"},{"lineNumber":323,"author":{"gitID":"wynonaK"},"content":"            removeUselessTags();"},{"lineNumber":324,"author":{"gitID":"wynonaK"},"content":"            return true;"},{"lineNumber":325,"author":{"gitID":"wynonaK"},"content":"        } else {"},{"lineNumber":326,"author":{"gitID":"wynonaK"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":327,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":328,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":329,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":330,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":331,"author":{"gitID":"wynonaK"},"content":"     * Removes pet patient {@code key} from this {@code AddressBook}."},{"lineNumber":332,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":333,"author":{"gitID":"wynonaK"},"content":"     * @throws PetPatientNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":334,"author":{"gitID":"wynonaK"},"content":"     * @throws AppointmentDependencyNotEmptyException if the {@code key} still contains appointments it is tied to."},{"lineNumber":335,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":336,"author":{"gitID":"wynonaK"},"content":"    public boolean removePetPatient(PetPatient key)"},{"lineNumber":337,"author":{"gitID":"wynonaK"},"content":"            throws PetPatientNotFoundException, AppointmentDependencyNotEmptyException {"},{"lineNumber":338,"author":{"gitID":"wynonaK"},"content":"        appointmentDependenciesExist(key);"},{"lineNumber":339,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":340,"author":{"gitID":"wynonaK"},"content":"        if (petPatients.remove(key)) {"},{"lineNumber":341,"author":{"gitID":"wynonaK"},"content":"            removeUselessTags();"},{"lineNumber":342,"author":{"gitID":"wynonaK"},"content":"            return true;"},{"lineNumber":343,"author":{"gitID":"wynonaK"},"content":"        } else {"},{"lineNumber":344,"author":{"gitID":"wynonaK"},"content":"            throw new PetPatientNotFoundException();"},{"lineNumber":345,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":346,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":347,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":348,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":349,"author":{"gitID":"wynonaK"},"content":"     * Forcefully removes all pet patients dependencies on {@code key} from this {@code AddressBook}."},{"lineNumber":350,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":351,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":352,"author":{"gitID":"wynonaK"},"content":"    public List\u003cPetPatient\u003e removeAllPetPatientDependencies(Person key) {"},{"lineNumber":353,"author":{"gitID":"wynonaK"},"content":"        Iterator\u003cPetPatient\u003e petPatientIterator \u003d petPatients.iterator();"},{"lineNumber":354,"author":{"gitID":"wynonaK"},"content":"        List\u003cPetPatient\u003e petPatientsDeleted \u003d new ArrayList\u003c\u003e();"},{"lineNumber":355,"author":{"gitID":"wynonaK"},"content":"        while (petPatientIterator.hasNext()) {"},{"lineNumber":356,"author":{"gitID":"wynonaK"},"content":"            PetPatient petPatient \u003d petPatientIterator.next();"},{"lineNumber":357,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":358,"author":{"gitID":"wynonaK"},"content":"            if (petPatient.getOwner().equals(key.getNric())) {"},{"lineNumber":359,"author":{"gitID":"wynonaK"},"content":"                petPatientsDeleted.add(petPatient);"},{"lineNumber":360,"author":{"gitID":"wynonaK"},"content":"                petPatientIterator.remove();"},{"lineNumber":361,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":362,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":363,"author":{"gitID":"wynonaK"},"content":"        return petPatientsDeleted;"},{"lineNumber":364,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":365,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":366,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":367,"author":{"gitID":"wynonaK"},"content":"     * @throws AppointmentDependencyNotEmptyException if appointment dependencies of {@code key}"},{"lineNumber":368,"author":{"gitID":"wynonaK"},"content":"     * still exists in {@code AddressBook}."},{"lineNumber":369,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":370,"author":{"gitID":"wynonaK"},"content":"    private void appointmentDependenciesExist(PetPatient key) throws AppointmentDependencyNotEmptyException {"},{"lineNumber":371,"author":{"gitID":"wynonaK"},"content":"        for (Appointment appointment : appointments) {"},{"lineNumber":372,"author":{"gitID":"wynonaK"},"content":"            if (appointment.getPetPatientName().equals(key.getName())"},{"lineNumber":373,"author":{"gitID":"wynonaK"},"content":"                    \u0026\u0026 appointment.getOwnerNric().equals(key.getOwner())) {"},{"lineNumber":374,"author":{"gitID":"wynonaK"},"content":"                throw new AppointmentDependencyNotEmptyException();"},{"lineNumber":375,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":376,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":377,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":378,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":379,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":380,"author":{"gitID":"wynonaK"},"content":"     * @throws PetDependencyNotEmptyException if pet dependencies of {@code key} still exists in {@code AddressBook}."},{"lineNumber":381,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":382,"author":{"gitID":"wynonaK"},"content":"    private void petPatientDependenciesExist(Person key) throws PetDependencyNotEmptyException {"},{"lineNumber":383,"author":{"gitID":"wynonaK"},"content":"        for (PetPatient petPatient : petPatients) {"},{"lineNumber":384,"author":{"gitID":"wynonaK"},"content":"            if (petPatient.getOwner().equals(key.getNric())) {"},{"lineNumber":385,"author":{"gitID":"wynonaK"},"content":"                throw new PetDependencyNotEmptyException();"},{"lineNumber":386,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":387,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":388,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":389,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":390,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":391,"author":{"gitID":"wynonaK"},"content":"     * Forcefully removes all dependencies relying on pet patient {@code key} from this {@code AddressBook}."},{"lineNumber":392,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":393,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":394,"author":{"gitID":"wynonaK"},"content":"    public List\u003cAppointment\u003e removeAllAppointmentDependencies(PetPatient key) {"},{"lineNumber":395,"author":{"gitID":"wynonaK"},"content":"        List\u003cAppointment\u003e appointmentsDeleted \u003d new ArrayList\u003c\u003e();"},{"lineNumber":396,"author":{"gitID":"wynonaK"},"content":"        Iterator\u003cAppointment\u003e appointmentIterator \u003d appointments.iterator();"},{"lineNumber":397,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":398,"author":{"gitID":"wynonaK"},"content":"        while (appointmentIterator.hasNext()) {"},{"lineNumber":399,"author":{"gitID":"wynonaK"},"content":"            Appointment appointment \u003d appointmentIterator.next();"},{"lineNumber":400,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":401,"author":{"gitID":"wynonaK"},"content":"            if (appointment.getPetPatientName().equals(key.getName())"},{"lineNumber":402,"author":{"gitID":"wynonaK"},"content":"                    \u0026\u0026 appointment.getOwnerNric().equals(key.getOwner())) {"},{"lineNumber":403,"author":{"gitID":"wynonaK"},"content":"                appointmentsDeleted.add(appointment);"},{"lineNumber":404,"author":{"gitID":"wynonaK"},"content":"                appointmentIterator.remove();"},{"lineNumber":405,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":406,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":407,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":408,"author":{"gitID":"wynonaK"},"content":"        return appointmentsDeleted;"},{"lineNumber":409,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":410,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":411,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":412,"author":{"gitID":"wynonaK"},"content":"     * Removes appointment {@code key} from this {@code AddressBook}."},{"lineNumber":413,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":414,"author":{"gitID":"wynonaK"},"content":"     * @throws AppointmentNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":415,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":416,"author":{"gitID":"wynonaK"},"content":"    public boolean removeAppointment(Appointment key) throws AppointmentNotFoundException {"},{"lineNumber":417,"author":{"gitID":"wynonaK"},"content":"        if (appointments.remove(key)) {"},{"lineNumber":418,"author":{"gitID":"wynonaK"},"content":"            removeUselessTags();"},{"lineNumber":419,"author":{"gitID":"wynonaK"},"content":"            return true;"},{"lineNumber":420,"author":{"gitID":"wynonaK"},"content":"        } else {"},{"lineNumber":421,"author":{"gitID":"wynonaK"},"content":"            throw new AppointmentNotFoundException();"},{"lineNumber":422,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":423,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":424,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":425,"author":{"gitID":"wynonaK"},"content":"    //// tag operations"},{"lineNumber":426,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":427,"author":{"gitID":"wynonaK"},"content":"    //@@author"},{"lineNumber":428,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":429,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":430,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":431,"author":{"gitID":"-"},"content":""},{"lineNumber":432,"content":"    //@@author wynonaK-reused"},{"lineNumber":433,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":434,"author":{"gitID":"wynonaK"},"content":"     * Removes all {@code tag}s not used by anyone in this {@code AddressBook}."},{"lineNumber":435,"author":{"gitID":"wynonaK"},"content":"     * Reused from https://github.com/se-edu/addressbook-level4/pull/790/files with minor modifications"},{"lineNumber":436,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":437,"author":{"gitID":"wynonaK"},"content":"    private void removeUselessTags() {"},{"lineNumber":438,"author":{"gitID":"wynonaK"},"content":"        Set\u003cTag\u003e personTags \u003d"},{"lineNumber":439,"author":{"gitID":"wynonaK"},"content":"                persons.asObservableList()"},{"lineNumber":440,"author":{"gitID":"wynonaK"},"content":"                        .stream()"},{"lineNumber":441,"author":{"gitID":"wynonaK"},"content":"                        .map(Person::getTags)"},{"lineNumber":442,"author":{"gitID":"wynonaK"},"content":"                        .flatMap(Set::stream)"},{"lineNumber":443,"author":{"gitID":"wynonaK"},"content":"                        .collect(Collectors.toSet());"},{"lineNumber":444,"author":{"gitID":"wynonaK"},"content":"        Set\u003cTag\u003e appointmentTags \u003d"},{"lineNumber":445,"author":{"gitID":"wynonaK"},"content":"                appointments.asObservableList()"},{"lineNumber":446,"author":{"gitID":"wynonaK"},"content":"                        .stream()"},{"lineNumber":447,"author":{"gitID":"wynonaK"},"content":"                        .map(Appointment::getAppointmentTags)"},{"lineNumber":448,"author":{"gitID":"wynonaK"},"content":"                        .flatMap(Set::stream)"},{"lineNumber":449,"author":{"gitID":"wynonaK"},"content":"                        .collect(Collectors.toSet());"},{"lineNumber":450,"author":{"gitID":"wynonaK"},"content":"        Set\u003cTag\u003e petPatientTags \u003d"},{"lineNumber":451,"author":{"gitID":"wynonaK"},"content":"                petPatients.asObservableList()"},{"lineNumber":452,"author":{"gitID":"wynonaK"},"content":"                        .stream()"},{"lineNumber":453,"author":{"gitID":"wynonaK"},"content":"                        .map(PetPatient::getTags)"},{"lineNumber":454,"author":{"gitID":"wynonaK"},"content":"                        .flatMap(Set::stream)"},{"lineNumber":455,"author":{"gitID":"wynonaK"},"content":"                        .collect(Collectors.toSet());"},{"lineNumber":456,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":457,"author":{"gitID":"wynonaK"},"content":"        personTags.addAll(appointmentTags);"},{"lineNumber":458,"author":{"gitID":"wynonaK"},"content":"        personTags.addAll(petPatientTags);"},{"lineNumber":459,"author":{"gitID":"wynonaK"},"content":"        tags.setTags(personTags);"},{"lineNumber":460,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":461,"author":{"gitID":"-"},"content":""},{"lineNumber":462,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":463,"author":{"gitID":"wynonaK"},"content":"     * Removes {@code tag} from {@code person} with that tag this {@code AddressBook}."},{"lineNumber":464,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":465,"author":{"gitID":"wynonaK"},"content":"     * @throws PersonNotFoundException if {@code person} is not found in this {@code AddressBook}."},{"lineNumber":466,"author":{"gitID":"-"},"content":"     *                                 Reused from https://github.com/se-edu/addressbook-level4/"},{"lineNumber":467,"author":{"gitID":"-"},"content":"     *                                 pull/790/files with minor modifications"},{"lineNumber":468,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":469,"author":{"gitID":"wynonaK"},"content":"    private void removeTagParticular(Tag tag, Person person) throws PersonNotFoundException {"},{"lineNumber":470,"author":{"gitID":"wynonaK"},"content":"        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e(person.getTags()); //gets all the tags from a person"},{"lineNumber":471,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":472,"author":{"gitID":"wynonaK"},"content":"        if (tagList.remove(tag)) {"},{"lineNumber":473,"author":{"gitID":"wynonaK"},"content":"            Person updatedPerson \u003d"},{"lineNumber":474,"author":{"gitID":"-"},"content":"                    new Person(person.getName(), person.getPhone(), person.getEmail(),"},{"lineNumber":475,"author":{"gitID":"-"},"content":"                        person.getAddress(), person.getNric(), tagList);"},{"lineNumber":476,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":477,"author":{"gitID":"wynonaK"},"content":"            try {"},{"lineNumber":478,"author":{"gitID":"wynonaK"},"content":"                updatePerson(person, updatedPerson);"},{"lineNumber":479,"author":{"gitID":"wynonaK"},"content":"            } catch (DuplicatePersonException dpe) {"},{"lineNumber":480,"author":{"gitID":"wynonaK"},"content":"                throw new AssertionError(\"Modifying tag only should not result in duplicate person.\");"},{"lineNumber":481,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":482,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":483,"author":{"gitID":"wynonaK"},"content":"            return;"},{"lineNumber":484,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":485,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":486,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":487,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":488,"author":{"gitID":"wynonaK"},"content":"     * Removes {@code tag} from all person with that tag this {@code AddressBook}."},{"lineNumber":489,"author":{"gitID":"wynonaK"},"content":"     * Reused from https://github.com/se-edu/addressbook-level4/pull/790/files with minor modifications"},{"lineNumber":490,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":491,"author":{"gitID":"wynonaK"},"content":"    public void removeTag(Tag tag) {"},{"lineNumber":492,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":493,"author":{"gitID":"wynonaK"},"content":"            for (Person currPerson : persons) {"},{"lineNumber":494,"author":{"gitID":"wynonaK"},"content":"                removeTagParticular(tag, currPerson);"},{"lineNumber":495,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":496,"author":{"gitID":"wynonaK"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":497,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"Impossible as obtained from address book.\");"},{"lineNumber":498,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":499,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":500,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":501,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":502,"author":{"gitID":"-"},"content":""},{"lineNumber":503,"content":"    //@@author"},{"lineNumber":504,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":505,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":506,"author":{"gitID":"chialejing"},"content":"        return persons.asObservableList().size() + \" persons, \""},{"lineNumber":507,"author":{"gitID":"chialejing"},"content":"                + petPatients.asObservableList().size() + \" pet patients, \""},{"lineNumber":508,"author":{"gitID":"wynonaK"},"content":"                + appointments.asObservableList().size() + \" appointments, \""},{"lineNumber":509,"author":{"gitID":"chialejing"},"content":"                + tags.asObservableList().size() + \" tags\";"},{"lineNumber":510,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":511,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":512,"author":{"gitID":"-"},"content":""},{"lineNumber":513,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":514,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":515,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":516,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":517,"author":{"gitID":"-"},"content":""},{"lineNumber":518,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":519,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":520,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":521,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":522,"author":{"gitID":"-"},"content":""},{"lineNumber":523,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":524,"author":{"gitID":"chialejing"},"content":"    public ObservableList\u003cPetPatient\u003e getPetPatientList() {"},{"lineNumber":525,"author":{"gitID":"chialejing"},"content":"        return petPatients.asObservableList();"},{"lineNumber":526,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":527,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":528,"author":{"gitID":"wynonaK"},"content":"    //@@author wynonaK"},{"lineNumber":529,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":530,"author":{"gitID":"wynonaK"},"content":"    public ObservableList\u003cAppointment\u003e getAppointmentList() {"},{"lineNumber":531,"author":{"gitID":"wynonaK"},"content":"        return appointments.asObservableList();"},{"lineNumber":532,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":533,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":534,"author":{"gitID":"wynonaK"},"content":"    //@@author"},{"lineNumber":535,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":536,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":537,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":538,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":539,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":540,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 this.appointments.equals(((AddressBook) other).appointments)"},{"lineNumber":541,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 this.petPatients.equals(((AddressBook) other).petPatients)"},{"lineNumber":542,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":543,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":544,"author":{"gitID":"-"},"content":""},{"lineNumber":545,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":546,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":547,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":548,"author":{"gitID":"chialejing"},"content":"        return Objects.hash(persons, appointments, petPatients, tags);"},{"lineNumber":549,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":550,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":2,"chialejing":90,"wynonaK":261,"-":197}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.AppointmentDependencyNotEmptyException;"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateDateTimeException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicateNricException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.exceptions.DuplicatePetPatientException;"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.exceptions.PetDependencyNotEmptyException;"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.exceptions.PetPatientNotFoundException;"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":37,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"    private final FilteredList\u003cAppointment\u003e filteredAppointments;"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"    private final FilteredList\u003cPetPatient\u003e filteredPetPatients;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"        filteredAppointments \u003d new FilteredList\u003c\u003e(this.addressBook.getAppointmentList());"},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"        filteredPetPatients \u003d new FilteredList\u003c\u003e(this.addressBook.getPetPatientList());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"    public synchronized void deletePerson(Person target)"},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":"            throws PersonNotFoundException, PetDependencyNotEmptyException {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException, DuplicateNricException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":"    //@@author wynonaK"},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":"    public synchronized void deletePetPatient(PetPatient target)"},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":"            throws PetPatientNotFoundException, AppointmentDependencyNotEmptyException {"},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":"        addressBook.removePetPatient(target);"},{"lineNumber":101,"author":{"gitID":"wynonaK"},"content":"        indicateAddressBookChanged();"},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":104,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":"    public synchronized List\u003cPetPatient\u003e deletePetPatientDependencies(Person target) {"},{"lineNumber":106,"author":{"gitID":"wynonaK"},"content":"        List\u003cPetPatient\u003e petPatients \u003d addressBook.removeAllPetPatientDependencies(target);"},{"lineNumber":107,"author":{"gitID":"wynonaK"},"content":"        indicateAddressBookChanged();"},{"lineNumber":108,"author":{"gitID":"wynonaK"},"content":"        return petPatients;"},{"lineNumber":109,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"wynonaK"},"content":"    public synchronized List\u003cAppointment\u003e deleteAppointmentDependencies(PetPatient target) {"},{"lineNumber":113,"author":{"gitID":"wynonaK"},"content":"        List\u003cAppointment\u003e dependenciesDeleted \u003d addressBook.removeAllAppointmentDependencies(target);"},{"lineNumber":114,"author":{"gitID":"wynonaK"},"content":"        indicateAddressBookChanged();"},{"lineNumber":115,"author":{"gitID":"wynonaK"},"content":"        return dependenciesDeleted;"},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":"    //@@author"},{"lineNumber":119,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"chialejing"},"content":"    public synchronized void addPetPatient(PetPatient petPatient) throws DuplicatePetPatientException {"},{"lineNumber":121,"author":{"gitID":"chialejing"},"content":"        addressBook.addPetPatient(petPatient);"},{"lineNumber":122,"author":{"gitID":"chialejing"},"content":"        updateFilteredPetPatientList(PREDICATE_SHOW_ALL_PET_PATIENTS);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"Aquarinte"},"content":"    //@@author aquarinte"},{"lineNumber":127,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"Aquarinte"},"content":"    public Person getPersonWithNric(Nric ownerNric) {"},{"lineNumber":129,"author":{"gitID":"Aquarinte"},"content":"        for (Person p : addressBook.getPersonList()) {"},{"lineNumber":130,"author":{"gitID":"Aquarinte"},"content":"            if (p.getNric().equals(ownerNric)) {"},{"lineNumber":131,"author":{"gitID":"Aquarinte"},"content":"                return p;"},{"lineNumber":132,"author":{"gitID":"Aquarinte"},"content":"            }"},{"lineNumber":133,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"Aquarinte"},"content":"        return null;"},{"lineNumber":135,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":137,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":138,"author":{"gitID":"Aquarinte"},"content":"    public PetPatient getPetPatientWithNricAndName(Nric ownerNric, PetPatientName petPatientName) {"},{"lineNumber":139,"author":{"gitID":"Aquarinte"},"content":"        for (PetPatient p : addressBook.getPetPatientList()) {"},{"lineNumber":140,"author":{"gitID":"Aquarinte"},"content":"            if (p.getOwner().equals(ownerNric) \u0026\u0026 p.getName().equals(petPatientName)) {"},{"lineNumber":141,"author":{"gitID":"Aquarinte"},"content":"                return p;"},{"lineNumber":142,"author":{"gitID":"Aquarinte"},"content":"            }"},{"lineNumber":143,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"Aquarinte"},"content":"        return null;"},{"lineNumber":145,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":147,"author":{"gitID":"chialejing"},"content":"    //@@author chialejing"},{"lineNumber":148,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":149,"author":{"gitID":"chialejing"},"content":"    public ArrayList\u003cPetPatient\u003e getPetPatientsWithNric(Nric ownerNric) {"},{"lineNumber":150,"author":{"gitID":"chialejing"},"content":"        ArrayList\u003cPetPatient\u003e petPatientArrayList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":151,"author":{"gitID":"chialejing"},"content":"        for (PetPatient p : addressBook.getPetPatientList()) {"},{"lineNumber":152,"author":{"gitID":"chialejing"},"content":"            if (p.getOwner().equals(ownerNric)) {"},{"lineNumber":153,"author":{"gitID":"chialejing"},"content":"                petPatientArrayList.add(p);"},{"lineNumber":154,"author":{"gitID":"chialejing"},"content":"            }"},{"lineNumber":155,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"chialejing"},"content":"        return petPatientArrayList;"},{"lineNumber":157,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":159,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":160,"author":{"gitID":"chialejing"},"content":"    public ArrayList\u003cAppointment\u003e getAppointmentsWithNric(Nric ownerNric) {"},{"lineNumber":161,"author":{"gitID":"chialejing"},"content":"        ArrayList\u003cAppointment\u003e appointmentArrayList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":162,"author":{"gitID":"chialejing"},"content":"        for (Appointment a : addressBook.getAppointmentList()) {"},{"lineNumber":163,"author":{"gitID":"chialejing"},"content":"            if (a.getOwnerNric().equals(ownerNric)) {"},{"lineNumber":164,"author":{"gitID":"chialejing"},"content":"                appointmentArrayList.add(a);"},{"lineNumber":165,"author":{"gitID":"chialejing"},"content":"            }"},{"lineNumber":166,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"chialejing"},"content":"        return appointmentArrayList;"},{"lineNumber":168,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":170,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":171,"author":{"gitID":"chialejing"},"content":"    public ArrayList\u003cAppointment\u003e getAppointmentsWithNricAndPetName(Nric ownerNric, PetPatientName petPatientName) {"},{"lineNumber":172,"author":{"gitID":"chialejing"},"content":"        ArrayList\u003cAppointment\u003e appointmentArrayList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":173,"author":{"gitID":"chialejing"},"content":"        for (Appointment a : addressBook.getAppointmentList()) {"},{"lineNumber":174,"author":{"gitID":"chialejing"},"content":"            if (a.getOwnerNric().equals(ownerNric) \u0026\u0026 a.getPetPatientName().equals(petPatientName)) {"},{"lineNumber":175,"author":{"gitID":"chialejing"},"content":"                appointmentArrayList.add(a);"},{"lineNumber":176,"author":{"gitID":"chialejing"},"content":"            }"},{"lineNumber":177,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"chialejing"},"content":"        return appointmentArrayList;"},{"lineNumber":179,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":181,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":182,"author":{"gitID":"chialejing"},"content":"    public Appointment getClashingAppointment(LocalDateTime dateTime) {"},{"lineNumber":183,"author":{"gitID":"chialejing"},"content":"        for (Appointment a : addressBook.getAppointmentList()) {"},{"lineNumber":184,"author":{"gitID":"chialejing"},"content":"            if (a.getDateTime().equals(dateTime)) {"},{"lineNumber":185,"author":{"gitID":"chialejing"},"content":"                return a;"},{"lineNumber":186,"author":{"gitID":"chialejing"},"content":"            }"},{"lineNumber":187,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"chialejing"},"content":"        return null;"},{"lineNumber":189,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":191,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":192,"author":{"gitID":"chialejing"},"content":"    public void updatePetPatient(PetPatient target, PetPatient editedPetPatient)"},{"lineNumber":193,"author":{"gitID":"chialejing"},"content":"            throws DuplicatePetPatientException, PetPatientNotFoundException {"},{"lineNumber":194,"author":{"gitID":"chialejing"},"content":"        requireAllNonNull(target, editedPetPatient);"},{"lineNumber":195,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":196,"author":{"gitID":"chialejing"},"content":"        addressBook.updatePetPatient(target, editedPetPatient);"},{"lineNumber":197,"author":{"gitID":"chialejing"},"content":"        indicateAddressBookChanged();"},{"lineNumber":198,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":200,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":201,"author":{"gitID":"chialejing"},"content":"    public void updateAppointment(Appointment target, Appointment editedAppointment)"},{"lineNumber":202,"author":{"gitID":"chialejing"},"content":"            throws DuplicateAppointmentException, AppointmentNotFoundException {"},{"lineNumber":203,"author":{"gitID":"chialejing"},"content":"        requireAllNonNull(target, editedAppointment);"},{"lineNumber":204,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":205,"author":{"gitID":"chialejing"},"content":"        addressBook.updateAppointment(target, editedAppointment);"},{"lineNumber":206,"author":{"gitID":"chialejing"},"content":"        indicateAddressBookChanged();"},{"lineNumber":207,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":209,"author":{"gitID":"chialejing"},"content":"    //@@author"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    public List\u003cTag\u003e getTagList() {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        return addressBook.getTagList();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"content":"    //@@author"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"wynonaK"},"content":"    //@@author wynonaK"},{"lineNumber":226,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":227,"author":{"gitID":"wynonaK"},"content":"    public synchronized void deleteAppointment(Appointment target) throws AppointmentNotFoundException {"},{"lineNumber":228,"author":{"gitID":"wynonaK"},"content":"        addressBook.removeAppointment(target);"},{"lineNumber":229,"author":{"gitID":"wynonaK"},"content":"        indicateAddressBookChanged();"},{"lineNumber":230,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":232,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":233,"author":{"gitID":"wynonaK"},"content":"    public synchronized void addAppointment(Appointment appointment)"},{"lineNumber":234,"author":{"gitID":"wynonaK"},"content":"            throws DuplicateAppointmentException, DuplicateDateTimeException {"},{"lineNumber":235,"author":{"gitID":"wynonaK"},"content":"        addressBook.addAppointment(appointment);"},{"lineNumber":236,"author":{"gitID":"wynonaK"},"content":"        updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"},{"lineNumber":237,"author":{"gitID":"wynonaK"},"content":"        indicateAddressBookChanged();"},{"lineNumber":238,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":240,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":241,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":242,"author":{"gitID":"wynonaK"},"content":"    public void deleteTag(Tag tag) {"},{"lineNumber":243,"author":{"gitID":"wynonaK"},"content":"        addressBook.removeTag(tag);"},{"lineNumber":244,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":246,"author":{"gitID":"wynonaK"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":247,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":248,"author":{"gitID":"wynonaK"},"content":"    //@@author"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"wynonaK"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Appointment List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":265,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":266,"author":{"gitID":"wynonaK"},"content":"    //@@author wynonaK"},{"lineNumber":267,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":268,"author":{"gitID":"wynonaK"},"content":"     * Returns an unmodifiable view of the list of {@code Appointment} backed by the internal list of"},{"lineNumber":269,"author":{"gitID":"wynonaK"},"content":"     * {@code addressBook}"},{"lineNumber":270,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":271,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":272,"author":{"gitID":"wynonaK"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":273,"author":{"gitID":"wynonaK"},"content":"        return FXCollections.unmodifiableObservableList(filteredAppointments);"},{"lineNumber":274,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":276,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":277,"author":{"gitID":"wynonaK"},"content":"    public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"},{"lineNumber":278,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(predicate);"},{"lineNumber":279,"author":{"gitID":"wynonaK"},"content":"        filteredAppointments.setPredicate(predicate);"},{"lineNumber":280,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":282,"author":{"gitID":"wynonaK"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Pet Patient List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":283,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":284,"author":{"gitID":"wynonaK"},"content":"    //@@author"},{"lineNumber":285,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":286,"author":{"gitID":"chialejing"},"content":"     * Returns an unmodifiable view of the list of {@code PetPatient} backed by the internal list of"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":290,"author":{"gitID":"chialejing"},"content":"    public ObservableList\u003cPetPatient\u003e getFilteredPetPatientList() {"},{"lineNumber":291,"author":{"gitID":"chialejing"},"content":"        return FXCollections.unmodifiableObservableList(filteredPetPatients);"},{"lineNumber":292,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":294,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":295,"author":{"gitID":"chialejing"},"content":"    public void updateFilteredPetPatientList(Predicate\u003cPetPatient\u003e predicate) {"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":297,"author":{"gitID":"chialejing"},"content":"        filteredPetPatients.setPredicate(predicate);"},{"lineNumber":298,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":299,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":301,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":304,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":309,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":310,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":315,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"},{"lineNumber":316,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 filteredAppointments.equals(other.filteredAppointments)"},{"lineNumber":317,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 filteredPetPatients.equals(other.filteredPetPatients);"},{"lineNumber":318,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"Aquarinte":21,"chialejing":86,"wynonaK":83,"-":129}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"chialejing"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitID":"chialejing"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.AppointmentDependencyNotEmptyException;"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateDateTimeException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicateNricException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.exceptions.DuplicatePetPatientException;"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.exceptions.PetDependencyNotEmptyException;"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.exceptions.PetPatientNotFoundException;"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"    Predicate\u003cAppointment\u003e PREDICATE_SHOW_ALL_APPOINTMENTS \u003d unused -\u003e true;"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"    Predicate\u003cPetPatient\u003e PREDICATE_SHOW_ALL_PET_PATIENTS \u003d unused -\u003e true;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":"    void deletePerson(Person target) throws PersonNotFoundException, PetDependencyNotEmptyException;"},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException, DuplicateNricException;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"    void updatePetPatient(PetPatient target, PetPatient editedPetPatient)"},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":"            throws DuplicatePetPatientException, PetPatientNotFoundException;"},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":"    void updateAppointment(Appointment target, Appointment editedAppointment)"},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":"            throws DuplicateAppointmentException, AppointmentNotFoundException;"},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"    /** Removes the specific {@code tag} from all {@code persons} with that tag **/"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"    void deleteTag(Tag tag);"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"    /** Adds the given appointment */"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"    void addAppointment(Appointment appointment) throws DuplicateAppointmentException, DuplicateDateTimeException;"},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"    /** Deletes the given appointment. */"},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"    void deleteAppointment(Appointment target) throws AppointmentNotFoundException;"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"    /** Returns an unmodifiable view of the filtered appointment list */"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":"    /** Returns an unmodifiable view of the filtered appointment list */"},{"lineNumber":85,"author":{"gitID":"chialejing"},"content":"    ObservableList\u003cPetPatient\u003e getFilteredPetPatientList();"},{"lineNumber":86,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":"     * Updates the filter of the filtered appointment list to filter by the given {@code predicate}."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":"    void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate);"},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":93,"author":{"gitID":"chialejing"},"content":"    void updateFilteredPetPatientList(Predicate\u003cPetPatient\u003e predicate);"},{"lineNumber":94,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":95,"author":{"gitID":"chialejing"},"content":"    void addPetPatient(PetPatient petPatient) throws DuplicatePetPatientException;"},{"lineNumber":96,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /** Returns a person object that has the given {@code Nric}. */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    Person getPersonWithNric(Nric ownerNric);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /** Returns a petpatient object that has the given {@code Nric} and {@code PetPatientName}. */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    PetPatient getPetPatientWithNricAndName(Nric ownerNric, PetPatientName petPatientName);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /** Returns a list of tags used in the application. */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    List\u003cTag\u003e getTagList();"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"chialejing"},"content":"    ArrayList\u003cPetPatient\u003e getPetPatientsWithNric(Nric ownerNric);"},{"lineNumber":107,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":108,"author":{"gitID":"chialejing"},"content":"    ArrayList\u003cAppointment\u003e getAppointmentsWithNric(Nric ownerNric);"},{"lineNumber":109,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":110,"author":{"gitID":"chialejing"},"content":"    ArrayList\u003cAppointment\u003e getAppointmentsWithNricAndPetName(Nric ownerNric, PetPatientName petPatientName);"},{"lineNumber":111,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":112,"author":{"gitID":"chialejing"},"content":"    Appointment getClashingAppointment(LocalDateTime dateTime);"},{"lineNumber":113,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":114,"author":{"gitID":"wynonaK"},"content":"    /** Deletes the given pet. */"},{"lineNumber":115,"author":{"gitID":"wynonaK"},"content":"    void deletePetPatient(PetPatient target)"},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":"            throws PetPatientNotFoundException, AppointmentDependencyNotEmptyException;"},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":"    /** Deletes all pet dependencies. */"},{"lineNumber":119,"author":{"gitID":"wynonaK"},"content":"    List\u003cPetPatient\u003e deletePetPatientDependencies(Person key);"},{"lineNumber":120,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":"    /** Deletes all appointment dependencies. */"},{"lineNumber":122,"author":{"gitID":"wynonaK"},"content":"    List\u003cAppointment\u003e deleteAppointmentDependencies(PetPatient target);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":26,"wynonaK":37,"-":60}},{"path":"src/main/java/seedu/address/model/petpatient/PetPatientName.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.model.petpatient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"chialejing"},"content":" * Represents a PetPatient\u0027s name in the address book."},{"lineNumber":9,"author":{"gitID":"chialejing"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"public class PetPatientName {"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_PET_NAME_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"            \"Pet Patient names should only contain alphanumeric characters and spaces, and it should not be blank.\";"},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":"    public final String fullName;"},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"     * Constructs a {@code PetPatientName}."},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"     * @param name A valid name."},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"    public PetPatientName(String name) {"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"        requireNonNull(name);"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"        checkArgument(isValidName(name), MESSAGE_PET_NAME_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"        this.fullName \u003d name;"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"     * Returns true if a given string is a valid pet patient name."},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"        return fullName;"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"                || (other instanceof PetPatientName // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 this.fullName.equals(((PetPatientName) other).fullName)); // state check"},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"        return fullName.hashCode();"},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":56,"-":4}},{"path":"src/main/java/seedu/address/model/petpatient/PetPatient.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.model.petpatient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":"import java.util.Date;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":" * Represents a PetPatient in the address book."},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":" * Guarantees: details are present, field values are validated."},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"public class PetPatient {"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"    private final PetPatientName name;"},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":"    private final String species; // e.g. dogs, cats, birds, etc."},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"    private final String breed; // different varieties of the same species"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"    private final String colour;"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"    private final String bloodType;"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"    private final UniqueTagList tags;"},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"    private final Optional\u003cDate\u003e dateOfBirth; // can be null"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"    private Nric ownerNric; // can be null (initially)"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"    private StringBuilder medicalHistory; // can be null (initially)"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"    //keep this constructor, as owner NRIC can be null initially when adding a new PetPatient"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"    public PetPatient(PetPatientName name,"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"                      String species,"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"                      String breed,"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"                      String colour,"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"                      String bloodType,"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"                      Set\u003cTag\u003e tags) {"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"        requireAllNonNull(name, species, breed, colour, bloodType, tags);"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"        this.name \u003d name;"},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":"        this.species \u003d species;"},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":"        this.breed \u003d breed;"},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"        this.colour \u003d colour;"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"        this.bloodType \u003d bloodType;"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"        this.ownerNric \u003d null;"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"        this.dateOfBirth \u003d null;"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"        this.medicalHistory \u003d new StringBuilder();"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"    public PetPatient(PetPatientName name,"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":"                      String species,"},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"                      String breed,"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":"                      String colour,"},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"                      String bloodType,"},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":"                      Nric ownerNric,"},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"                      Set\u003cTag\u003e tags) {"},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":"        requireAllNonNull(name, species, breed, colour, bloodType, tags);"},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":"        this.name \u003d name;"},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":"        this.species \u003d species;"},{"lineNumber":63,"author":{"gitID":"chialejing"},"content":"        this.breed \u003d breed;"},{"lineNumber":64,"author":{"gitID":"chialejing"},"content":"        this.colour \u003d colour;"},{"lineNumber":65,"author":{"gitID":"chialejing"},"content":"        this.bloodType \u003d bloodType;"},{"lineNumber":66,"author":{"gitID":"chialejing"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":67,"author":{"gitID":"chialejing"},"content":"        this.ownerNric \u003d ownerNric;"},{"lineNumber":68,"author":{"gitID":"chialejing"},"content":"        this.dateOfBirth \u003d null;"},{"lineNumber":69,"author":{"gitID":"chialejing"},"content":"        this.medicalHistory \u003d new StringBuilder();"},{"lineNumber":70,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":72,"author":{"gitID":"chialejing"},"content":"    //keep this constructor"},{"lineNumber":73,"author":{"gitID":"chialejing"},"content":"    public PetPatient(PetPatientName name,"},{"lineNumber":74,"author":{"gitID":"chialejing"},"content":"                      String species,"},{"lineNumber":75,"author":{"gitID":"chialejing"},"content":"                      String breed,"},{"lineNumber":76,"author":{"gitID":"chialejing"},"content":"                      String colour,"},{"lineNumber":77,"author":{"gitID":"chialejing"},"content":"                      String bloodType,"},{"lineNumber":78,"author":{"gitID":"chialejing"},"content":"                      Nric ownerNric,"},{"lineNumber":79,"author":{"gitID":"chialejing"},"content":"                      Optional\u003cDate\u003e dateOfBirth,"},{"lineNumber":80,"author":{"gitID":"chialejing"},"content":"                      Set\u003cTag\u003e tags) {"},{"lineNumber":81,"author":{"gitID":"chialejing"},"content":"        requireAllNonNull(name, species, breed, colour, bloodType, ownerNric, dateOfBirth, tags);"},{"lineNumber":82,"author":{"gitID":"chialejing"},"content":"        this.name \u003d name;"},{"lineNumber":83,"author":{"gitID":"chialejing"},"content":"        this.species \u003d species;"},{"lineNumber":84,"author":{"gitID":"chialejing"},"content":"        this.breed \u003d breed;"},{"lineNumber":85,"author":{"gitID":"chialejing"},"content":"        this.colour \u003d colour;"},{"lineNumber":86,"author":{"gitID":"chialejing"},"content":"        this.bloodType \u003d bloodType;"},{"lineNumber":87,"author":{"gitID":"chialejing"},"content":"        this.ownerNric \u003d ownerNric;"},{"lineNumber":88,"author":{"gitID":"chialejing"},"content":"        this.dateOfBirth \u003d dateOfBirth;"},{"lineNumber":89,"author":{"gitID":"chialejing"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":90,"author":{"gitID":"chialejing"},"content":"        this.medicalHistory \u003d new StringBuilder();"},{"lineNumber":91,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":93,"author":{"gitID":"chialejing"},"content":"    public PetPatientName getName() {"},{"lineNumber":94,"author":{"gitID":"chialejing"},"content":"        return name;"},{"lineNumber":95,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":97,"author":{"gitID":"chialejing"},"content":"    public Optional\u003cDate\u003e getDateOfBirth() {"},{"lineNumber":98,"author":{"gitID":"chialejing"},"content":"        return dateOfBirth;"},{"lineNumber":99,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":101,"author":{"gitID":"chialejing"},"content":"    public String getSpecies() {"},{"lineNumber":102,"author":{"gitID":"chialejing"},"content":"        return species;"},{"lineNumber":103,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":105,"author":{"gitID":"chialejing"},"content":"    public String getBreed() {"},{"lineNumber":106,"author":{"gitID":"chialejing"},"content":"        return breed;"},{"lineNumber":107,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":109,"author":{"gitID":"chialejing"},"content":"    public String getColour() {"},{"lineNumber":110,"author":{"gitID":"chialejing"},"content":"        return colour;"},{"lineNumber":111,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":113,"author":{"gitID":"chialejing"},"content":"    public String getBloodType() {"},{"lineNumber":114,"author":{"gitID":"chialejing"},"content":"        return bloodType;"},{"lineNumber":115,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":117,"author":{"gitID":"chialejing"},"content":"    public Nric getOwner() {"},{"lineNumber":118,"author":{"gitID":"chialejing"},"content":"        return ownerNric;"},{"lineNumber":119,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":121,"author":{"gitID":"chialejing"},"content":"    public void setOwnerNric(Nric ownerNric) {"},{"lineNumber":122,"author":{"gitID":"chialejing"},"content":"        this.ownerNric \u003d ownerNric;"},{"lineNumber":123,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":125,"author":{"gitID":"chialejing"},"content":"    public StringBuilder getMedicalHistory() {"},{"lineNumber":126,"author":{"gitID":"chialejing"},"content":"        return medicalHistory;"},{"lineNumber":127,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":129,"author":{"gitID":"chialejing"},"content":"    public void updateMedicalHistory(String newContent) {"},{"lineNumber":130,"author":{"gitID":"chialejing"},"content":"        this.medicalHistory.append(newContent);"},{"lineNumber":131,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":133,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"chialejing"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":135,"author":{"gitID":"chialejing"},"content":"     * if modification is attempted."},{"lineNumber":136,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"chialejing"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":138,"author":{"gitID":"chialejing"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":139,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":141,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"chialejing"},"content":"     * Returns a list of tags as a string, for find command."},{"lineNumber":143,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"chialejing"},"content":"    public String getTagString() {"},{"lineNumber":145,"author":{"gitID":"chialejing"},"content":"        StringBuilder tagString \u003d new StringBuilder();"},{"lineNumber":146,"author":{"gitID":"chialejing"},"content":"        Set\u003cTag\u003e tagSet \u003d Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":147,"author":{"gitID":"chialejing"},"content":"        for (Tag tag : tagSet) {"},{"lineNumber":148,"author":{"gitID":"chialejing"},"content":"            tagString.append(tag.tagName);"},{"lineNumber":149,"author":{"gitID":"chialejing"},"content":"            tagString.append(\" \");"},{"lineNumber":150,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"chialejing"},"content":"        return tagString.toString().trim();"},{"lineNumber":152,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":154,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":155,"author":{"gitID":"chialejing"},"content":"    public boolean equals(Object other) {"},{"lineNumber":156,"author":{"gitID":"chialejing"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":157,"author":{"gitID":"chialejing"},"content":"            return true;"},{"lineNumber":158,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":160,"author":{"gitID":"chialejing"},"content":"        if (!(other instanceof PetPatient)) {"},{"lineNumber":161,"author":{"gitID":"chialejing"},"content":"            return false;"},{"lineNumber":162,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":164,"author":{"gitID":"chialejing"},"content":"        PetPatient otherPetPatient \u003d (PetPatient) other;"},{"lineNumber":165,"author":{"gitID":"chialejing"},"content":"        return otherPetPatient.getName().equals(this.getName())"},{"lineNumber":166,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 otherPetPatient.getSpecies().equals(this.getSpecies())"},{"lineNumber":167,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 otherPetPatient.getBreed().equals(this.getBreed())"},{"lineNumber":168,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 otherPetPatient.getColour().equals(this.getColour())"},{"lineNumber":169,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 otherPetPatient.getBloodType().equals(this.getBloodType())"},{"lineNumber":170,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 otherPetPatient.getOwner().equals(this.getOwner());"},{"lineNumber":171,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":173,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":174,"author":{"gitID":"chialejing"},"content":"    public int hashCode() {"},{"lineNumber":175,"author":{"gitID":"chialejing"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":176,"author":{"gitID":"chialejing"},"content":"        return Objects.hash(name, species, breed, colour, bloodType, tags, ownerNric);"},{"lineNumber":177,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":179,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":180,"author":{"gitID":"chialejing"},"content":"    public String toString() {"},{"lineNumber":181,"author":{"gitID":"chialejing"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":182,"author":{"gitID":"chialejing"},"content":"        builder.append(\"\\t\")"},{"lineNumber":183,"author":{"gitID":"chialejing"},"content":"                .append(getName())"},{"lineNumber":184,"author":{"gitID":"chialejing"},"content":"                .append(\"\\tSpecies: \")"},{"lineNumber":185,"author":{"gitID":"chialejing"},"content":"                .append(getSpecies())"},{"lineNumber":186,"author":{"gitID":"chialejing"},"content":"                .append(\"\\tBreed: \")"},{"lineNumber":187,"author":{"gitID":"chialejing"},"content":"                .append(getBreed())"},{"lineNumber":188,"author":{"gitID":"chialejing"},"content":"                .append(\"\\tColor: \")"},{"lineNumber":189,"author":{"gitID":"chialejing"},"content":"                .append(getColour())"},{"lineNumber":190,"author":{"gitID":"chialejing"},"content":"                .append(\"\\tBlood Type: \")"},{"lineNumber":191,"author":{"gitID":"chialejing"},"content":"                .append(getBloodType())"},{"lineNumber":192,"author":{"gitID":"chialejing"},"content":"                .append(\"\\t\\tOwner\u0027s NRIC: \")"},{"lineNumber":193,"author":{"gitID":"chialejing"},"content":"                .append(getOwner())"},{"lineNumber":194,"author":{"gitID":"chialejing"},"content":"                .append(\"\\tTags: \");"},{"lineNumber":195,"author":{"gitID":"chialejing"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":196,"author":{"gitID":"chialejing"},"content":"        return builder.toString();"},{"lineNumber":197,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":186,"-":12}},{"path":"src/main/java/seedu/address/model/petpatient/UniquePetPatientList.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.model.petpatient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.exceptions.DuplicatePetPatientException;"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.exceptions.PetPatientNotFoundException;"},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":" * A list of pet patients that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":" *"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":" * Supports a minimal set of list operations."},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":" *"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":" * @see PetPatient#equals(Object)"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"public class UniquePetPatientList implements Iterable\u003cPetPatient\u003e {"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"    private final ObservableList\u003cPetPatient\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"     * Returns true if the list contains an equivalent pet patient as the given argument."},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"    public boolean contains(PetPatient toCheck) {"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"        requireNonNull(toCheck);"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"     * Adds a pet patient to the list."},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"     * @throws DuplicatePetPatientException if the pet patient to add is a duplicate of an existing pet patient"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"     * in the list."},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"    public void add(PetPatient toAdd) throws DuplicatePetPatientException {"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"        requireNonNull(toAdd);"},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":"        if (contains(toAdd)) {"},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":"            throw new DuplicatePetPatientException();"},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"        internalList.add(toAdd);"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"     * Replaces the pet patient {@code target} in the list with {@code editedPetPatient}."},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"     * @throws DuplicatePetPatientException if the replacement is equivalent to another existing pet patient"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":"     * in the list."},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"     * @throws PetPatientNotFoundException if {@code target} could not be found in the list."},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"    public void setPetPatient(PetPatient target, PetPatient editedPetPatient)"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":"            throws DuplicatePetPatientException, PetPatientNotFoundException {"},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"        requireNonNull(editedPetPatient);"},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":"            throw new PetPatientNotFoundException();"},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":64,"author":{"gitID":"chialejing"},"content":"        if (!target.equals(editedPetPatient) \u0026\u0026 internalList.contains(editedPetPatient)) {"},{"lineNumber":65,"author":{"gitID":"chialejing"},"content":"            throw new DuplicatePetPatientException();"},{"lineNumber":66,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":68,"author":{"gitID":"chialejing"},"content":"        internalList.set(index, editedPetPatient);"},{"lineNumber":69,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":71,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"chialejing"},"content":"     * Removes the equivalent pet patient from the list."},{"lineNumber":73,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"chialejing"},"content":"     * @throws PetPatientNotFoundException if no such pet patient could be found in the list."},{"lineNumber":75,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"chialejing"},"content":"    public boolean remove(PetPatient toRemove) throws PetPatientNotFoundException {"},{"lineNumber":77,"author":{"gitID":"chialejing"},"content":"        requireNonNull(toRemove);"},{"lineNumber":78,"author":{"gitID":"chialejing"},"content":"        final boolean petPatientFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":79,"author":{"gitID":"chialejing"},"content":"        if (!petPatientFoundAndDeleted) {"},{"lineNumber":80,"author":{"gitID":"chialejing"},"content":"            throw new PetPatientNotFoundException();"},{"lineNumber":81,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"chialejing"},"content":"        return petPatientFoundAndDeleted;"},{"lineNumber":83,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":85,"author":{"gitID":"chialejing"},"content":"    public void setPetPatients(UniquePetPatientList replacement) {"},{"lineNumber":86,"author":{"gitID":"chialejing"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":87,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":89,"author":{"gitID":"chialejing"},"content":"    public void setPetPatients(List\u003cPetPatient\u003e petPatients) throws DuplicatePetPatientException {"},{"lineNumber":90,"author":{"gitID":"chialejing"},"content":"        requireAllNonNull(petPatients);"},{"lineNumber":91,"author":{"gitID":"chialejing"},"content":"        final UniquePetPatientList replacement \u003d new UniquePetPatientList();"},{"lineNumber":92,"author":{"gitID":"chialejing"},"content":"        for (final PetPatient petPatient : petPatients) {"},{"lineNumber":93,"author":{"gitID":"chialejing"},"content":"            replacement.add(petPatient);"},{"lineNumber":94,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"chialejing"},"content":"        setPetPatients(replacement);"},{"lineNumber":96,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":98,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"chialejing"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":100,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"chialejing"},"content":"    public ObservableList\u003cPetPatient\u003e asObservableList() {"},{"lineNumber":102,"author":{"gitID":"chialejing"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":103,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":105,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"chialejing"},"content":"    public Iterator\u003cPetPatient\u003e iterator() {"},{"lineNumber":107,"author":{"gitID":"chialejing"},"content":"        return internalList.iterator();"},{"lineNumber":108,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":110,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"chialejing"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitID":"chialejing"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":113,"author":{"gitID":"chialejing"},"content":"                || (other instanceof UniquePetPatientList // instanceof handles nulls"},{"lineNumber":114,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 this.internalList.equals(((UniquePetPatientList) other).internalList));"},{"lineNumber":115,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":117,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"chialejing"},"content":"    public int hashCode() {"},{"lineNumber":119,"author":{"gitID":"chialejing"},"content":"        return internalList.hashCode();"},{"lineNumber":120,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":112,"-":9}}]
