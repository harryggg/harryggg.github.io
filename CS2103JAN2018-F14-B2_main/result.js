var resultJson = [{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"Medeina is developed by the https://se-edu.github.io/docs/Team.html[se-edu] team. +"},{"lineNumber":7,"author":{"gitID":"-"},"content":"_{The dummy content given below serves as a placeholder to be used by future forks of the project.}_ +"},{"lineNumber":8,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":9,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Jacqueline Cheong"},{"lineNumber":14,"author":{"gitID":"-"},"content":"image::aquarinte.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":15,"author":{"gitID":"-"},"content":"{empty}[http://github.com/aquarinte[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":18,"author":{"gitID":"-"},"content":"Responsibilities: Logic component, managing documentation"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d Chia Le Jing"},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"image::lejing.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"{empty}[https://github.com/chialejing[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"Responsibilities: Storage component, managing documentation"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d Wynona Kaan"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"image::wynonaK.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"{empty}[https://github.com/wynonaK[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"Responsibilities: Model Component"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Peng Xuanchang"},{"lineNumber":41,"author":{"gitID":"-"},"content":"image::Robert_Peng.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":42,"author":{"gitID":"-"},"content":"{empty}[http://github.com/Robert-Peng[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":45,"author":{"gitID":"-"},"content":"Responsibilities: UI Component"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"chialejing":4,"wynonaK":4,"-":39}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Medeina"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"https://travis-ci.org/CS2103JAN2018-F14-B2/main[image:https://travis-ci.org/CS2103JAN2018-F14-B2/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://coveralls.io/github/CS2103JAN2018-F14-B2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-F14-B2/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":6,"author":{"gitID":"-"},"content":"https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":11,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":15,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"* This is a desktop application developed for Veterinarians and their assistants. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"* It is a Java application intended for veterinarians and their assistants to manage pet patients and appointments."},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"* It is *written in OOP fashion*. It provides a *reasonably well-written* code that allows future upgrades to be integrated easily (if necessary)."},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"* What\u0027s different from a typical task manager / address book:"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"** It is customized for veterinarians and their assistants\u0027 needs"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":"* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":29,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"* Original source: https://github.com/se-edu/addressbook-level4[Address Book Level 4] by https://github.com/se-edu/[SE-EDU]"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"chialejing":4,"-":31}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Medeina - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-F14-B2/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"Medeina is for Veterinarians and their assistants who *prefer to use a desktop app for managing contacts and appointments*. More importantly, Medeina is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Medeina can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":25,"author":{"gitID":"-"},"content":"+"},{"lineNumber":26,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":27,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":28,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":".  Download the latest `medeina.jar` link:{repoURL}/releases[here]."},{"lineNumber":31,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for Medeina."},{"lineNumber":32,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":33,"author":{"gitID":"-"},"content":"+"},{"lineNumber":34,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":37,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":38,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":41,"author":{"gitID":"-"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to Medeina\u0027s address book."},{"lineNumber":42,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":43,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":54,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":55,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":56,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":57,"author":{"gitID":"-"},"content":"* Shorthand equivalent alias is available for all commands to simplify execution of commands."},{"lineNumber":58,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help` or `h`"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"Format: `help` or `h`"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding new owner + pet patient + appointment : `add` or `a`"},{"lineNumber":65,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"To add a new owner, new pet patient and new appointment to Mediena: +"},{"lineNumber":67,"author":{"gitID":"-"},"content":"Format: `add **-o** n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS nr/NRIC [t/TAG]..."},{"lineNumber":68,"author":{"gitID":"-"},"content":"**-p** n/PET_PATIENT_NAME s/SPECIES b/BREED c/COLOUR bt/BLOOD_TYPE [t/TAG]..."},{"lineNumber":69,"author":{"gitID":"-"},"content":"**-a** d/DATE r/REMARK [t/TYPE OF APPOINTMENT]...`"},{"lineNumber":70,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":71,"author":{"gitID":"chialejing"},"content":"[TIP]"},{"lineNumber":72,"author":{"gitID":"-"},"content":"Owner, pet patient and appointment can have any number of tags (including 0)"},{"lineNumber":73,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":74,"author":{"gitID":"chialejing"},"content":"Examples:"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"* `add -o n/Fuji p/65123456 e/fuji@gmail.com a/Seishun Gakuen 2B nr/S1234567G -p n/jewel s/cat b/persian c/calico bt/AB -a d/2018-12-31 12:30 r/nil t/checkup t/vaccination`"},{"lineNumber":77,"author":{"gitID":"-"},"content":"* `a -o n/Tezuka p/65123478 e/tezuka@gmail.com a/Seishun Gakuen 2A nr/S1234599G -p n/silver s/cat b/persian c/grey bt/O -a d/2018-12-31 14:30 r/nil t/surgery`"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all persons : `list` or `ls`"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"Shows a list of all persons in Medeina\u0027s address book. +"},{"lineNumber":82,"author":{"gitID":"-"},"content":"Format: `list` or `ls`"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a person : `edit` or `ed`"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"Edits an existing person in Medeina\u0027s address book. +"},{"lineNumber":87,"author":{"gitID":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [nr/NRIC] [t/TAG]...` +"},{"lineNumber":88,"author":{"gitID":"-"},"content":"or `ed INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [nr/NRIC] [t/TAG]..."},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"****"},{"lineNumber":91,"author":{"gitID":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":92,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":93,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":94,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":95,"author":{"gitID":"-"},"content":"* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":96,"author":{"gitID":"-"},"content":"****"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":101,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":102,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` or `e 2 n/Betsy Crower t/` +"},{"lineNumber":103,"author":{"gitID":"-"},"content":"Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating persons by name: `find` or `f`"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"Finds persons whose names contain any of the given keywords. +"},{"lineNumber":108,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]` or `f KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"****"},{"lineNumber":111,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":112,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":113,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":114,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":115,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":116,"author":{"gitID":"-"},"content":"****"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"* `f John` +"},{"lineNumber":121,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":122,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` +"},{"lineNumber":123,"author":{"gitID":"-"},"content":"Returns any person having names `Betsy`, `Tim`, or `John`"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person : `delete` or `d`"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"Deletes the specified person from Medeina\u0027s address book. +"},{"lineNumber":128,"author":{"gitID":"-"},"content":"Format: `delete INDEX` or `d INDEX`"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"****"},{"lineNumber":131,"author":{"gitID":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":132,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":133,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":134,"author":{"gitID":"-"},"content":"****"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":139,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":140,"author":{"gitID":"-"},"content":"Deletes the 2nd person in Medeina\u0027s address book."},{"lineNumber":141,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":142,"author":{"gitID":"-"},"content":"`d 1` +"},{"lineNumber":143,"author":{"gitID":"-"},"content":"Deletes the 1st person in the results of the `find` command."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a person : `select` or `s`"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"Selects the person identified by the index number used in the last person listing. +"},{"lineNumber":148,"author":{"gitID":"-"},"content":"Format: `select INDEX` or `s INDEX`"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"****"},{"lineNumber":151,"author":{"gitID":"-"},"content":"* Selects the person and loads the Google search page the person at the specified `INDEX`."},{"lineNumber":152,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":153,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":154,"author":{"gitID":"-"},"content":"****"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":159,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":160,"author":{"gitID":"-"},"content":"Selects the 2nd person in Medeina\u0027s address book."},{"lineNumber":161,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":162,"author":{"gitID":"-"},"content":"`s 1` +"},{"lineNumber":163,"author":{"gitID":"-"},"content":"Selects the 1st person in the results of the `find` command."},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history` or `his`"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":168,"author":{"gitID":"-"},"content":"Format: `history` or `his`"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":171,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":172,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":173,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":176,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo` or `ud`"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"Restores Medeina to the state before the previous _undoable_ command was executed. +"},{"lineNumber":179,"author":{"gitID":"-"},"content":"Format: `undo` or `ud`"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":182,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":183,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify Medeina\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":184,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":189,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":190,"author":{"gitID":"-"},"content":"`ud` (reverses the `delete 1` command) +"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":193,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":194,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":195,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":198,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":199,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":200,"author":{"gitID":"-"},"content":"`ud` (reverses the `delete 1` command) +"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo` or `rd`"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":205,"author":{"gitID":"-"},"content":"Format: `redo` or `rd`"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":210,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":211,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":214,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":215,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":218,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":219,"author":{"gitID":"-"},"content":"`ud` (reverses the `clear` command) +"},{"lineNumber":220,"author":{"gitID":"-"},"content":"`ud` (reverses the `delete 1` command) +"},{"lineNumber":221,"author":{"gitID":"-"},"content":"`rd` (reapplies the `delete 1` command) +"},{"lineNumber":222,"author":{"gitID":"-"},"content":"`rd` (reapplies the `clear` command) +"},{"lineNumber":223,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear` or `cls`"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"Clears all entries from Medeina\u0027s address book. +"},{"lineNumber":228,"author":{"gitID":"-"},"content":"Format: `clear` or `cls`"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Changing theme : `theme` or `t`"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"Change Medeina\u0027s current theme to another pre-loaded theme. +"},{"lineNumber":233,"author":{"gitID":"-"},"content":"Format: `theme THEME_NAME` or `t THEME_NAME`"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"****"},{"lineNumber":236,"author":{"gitID":"-"},"content":"* THEME_NAME is case insensitive. e.g `DARK` will match `dark`"},{"lineNumber":237,"author":{"gitID":"-"},"content":"* Available themes: `dark` and `light`"},{"lineNumber":238,"author":{"gitID":"-"},"content":"****"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"* `theme dark`"},{"lineNumber":243,"author":{"gitID":"-"},"content":"* `t light`"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit` or `q`"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":248,"author":{"gitID":"-"},"content":"Format: `exit` or `q`"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"Data in Medeina are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":253,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":256,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"_{explain how the user can enable/disable data encryption}_"},{"lineNumber":259,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating user accounts to manage usage `[coming in v2.0]`"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"Create user accounts and log in to the application using assigned credentials. Usernames will be reflected for changes made in the application."},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Set user permissions `[coming in v2.0]`"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"The assigned administrator of the application (e.g. Veterinarian) can set user permissions for clinic staffs. +"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"* Vet assistants can add new pet patients and their owners to the application, but cannot delete any pet patient or owner from the application."},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"* Vet assistants can view medical histories of pet patients but not modify them."},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Support multi-users `[coming in v2.0]`"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"The application can be used concurrently on different systems and the data will be synced over an internet connection. This allow Veterinarians"},{"lineNumber":278,"author":{"gitID":"-"},"content":"and their assistants to access Medeina simultaneously in different rooms."},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":283,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Medeina folder."},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"},{"lineNumber":288,"author":{"gitID":"-"},"content":"or `a n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"},{"lineNumber":289,"author":{"gitID":"-"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague` +"},{"lineNumber":290,"author":{"gitID":"-"},"content":"`a n/Jessie Ho p/33335555 e/jessieho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"},{"lineNumber":291,"author":{"gitID":"-"},"content":"* *Clear* : `clear` or `cls`"},{"lineNumber":292,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` or `d INDEX` +"},{"lineNumber":293,"author":{"gitID":"-"},"content":"e.g. `delete 3` or `d 3`"},{"lineNumber":294,"author":{"gitID":"-"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"},{"lineNumber":295,"author":{"gitID":"-"},"content":"or `e INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"},{"lineNumber":296,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com` +"},{"lineNumber":297,"author":{"gitID":"-"},"content":"`ed 3 n/Jessie Lee e/jessielee@example.com`"},{"lineNumber":298,"author":{"gitID":"-"},"content":"* *Exit* : `exit` or `q`"},{"lineNumber":299,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":300,"author":{"gitID":"-"},"content":"e.g. `find James Jake`"},{"lineNumber":301,"author":{"gitID":"-"},"content":"* *List* : `list` or `ls`"},{"lineNumber":302,"author":{"gitID":"-"},"content":"* *Help* : `help` or `h`"},{"lineNumber":303,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` or `s INDEX` +"},{"lineNumber":304,"author":{"gitID":"-"},"content":"e.g.`select 2` +"},{"lineNumber":305,"author":{"gitID":"-"},"content":"`s 2`"},{"lineNumber":306,"author":{"gitID":"-"},"content":"* *History* : `history` or `his`"},{"lineNumber":307,"author":{"gitID":"-"},"content":"* *Undo* : `undo` or `ud`"},{"lineNumber":308,"author":{"gitID":"-"},"content":"* *Redo* : `redo` or `rd`"},{"lineNumber":309,"author":{"gitID":"-"},"content":"* *Change Theme* : `theme THEME_NAME` or `t THEME_NAME`"}],"authorContributionMap":{"chialejing":5,"wynonaK":1,"-":303}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Medeina - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-F14-B2/main"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":22,"author":{"gitID":"-"},"content":"+"},{"lineNumber":23,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":24,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":26,"author":{"gitID":"-"},"content":"+"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":38,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":39,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":40,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":41,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":42,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":43,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":47,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":52,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":61,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":62,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":65,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":80,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":92,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":100,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":105,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":120,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":132,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":143,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":156,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":159,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":170,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":174,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":177,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":178,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":184,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":187,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":188,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":189,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":194,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":197,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":200,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":207,"author":{"gitID":"-"},"content":"* stores Medeina\u0027s data."},{"lineNumber":208,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":209,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":212,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":215,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":222,"author":{"gitID":"-"},"content":"* can save Medeina\u0027s Address Book data in xml format and read it back."},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":225,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":234,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of Medeina (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of Medeina before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":246,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":247,"author":{"gitID":"-"},"content":"----"},{"lineNumber":248,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":"}"},{"lineNumber":254,"author":{"gitID":"-"},"content":"----"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":257,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":258,"author":{"gitID":"-"},"content":"----"},{"lineNumber":259,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":"}"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":"}"},{"lineNumber":274,"author":{"gitID":"-"},"content":"----"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in Medeina\u0027s address book. The current state of Medeina is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":287,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore Medeina to the state before the `add` command executed."},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":296,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores Medeina to the state after the command is executed)."},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":305,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":324,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":325,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":326,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":327,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":328,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire Medeina."},{"lineNumber":333,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":334,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":335,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":336,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":337,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies Medeina (`add`, `clear`, `edit`)."},{"lineNumber":343,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":344,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":345,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":346,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":347,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of Medeina * and not the view."},{"lineNumber":348,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":354,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":356,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":357,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":358,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":359,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"chialejing"},"content":"// tag::addPetPatient"},{"lineNumber":362,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d Adding a Pet Patient"},{"lineNumber":363,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":365,"author":{"gitID":"chialejing"},"content":"Currently, adding of pet patients is achieved by `AddPetPatientCommand`. It allows the user to add the details of pet patients, and subsequently stores the details within the storage file."},{"lineNumber":366,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":367,"author":{"gitID":"chialejing"},"content":"The implementation of `AddPetPatientCommand` is rather similar to that of `AddCommand`."},{"lineNumber":368,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":369,"author":{"gitID":"chialejing"},"content":"[NOTE]"},{"lineNumber":370,"author":{"gitID":"chialejing"},"content":"`AddPetPatientCommand`, as well as `AddCommand`, extends `UndoableCommand`."},{"lineNumber":371,"author":{"gitID":"chialejing"},"content":"----"},{"lineNumber":372,"author":{"gitID":"chialejing"},"content":"public class AddPetPatientCommand extends UndoableCommand {"},{"lineNumber":373,"author":{"gitID":"chialejing"},"content":"\t// logic for AddPetPatientCommand"},{"lineNumber":374,"author":{"gitID":"chialejing"},"content":"}"},{"lineNumber":375,"author":{"gitID":"chialejing"},"content":"----"},{"lineNumber":376,"author":{"gitID":"chialejing"},"content":"This brings us to the next section on the design considerations of AddPetPatientCommand."},{"lineNumber":377,"author":{"gitID":"-"},"content":""},{"lineNumber":378,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":379,"author":{"gitID":"-"},"content":""},{"lineNumber":380,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of AddPetPatientCommand"},{"lineNumber":381,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":382,"author":{"gitID":"chialejing"},"content":"* **Alternative 1 (current choice):** The command extends `UndoableCommand`"},{"lineNumber":383,"author":{"gitID":"chialejing"},"content":"** Pros: We can make use of the undo / redo function that was previously implemented. This also allows our users to correct any mistakes that they might have made while keying in the information of the pet patients."},{"lineNumber":384,"author":{"gitID":"chialejing"},"content":"** Cons: Developers who join our team in the future may have trouble understanding the code base (since we have both `UndoableCommand` and `Command`)."},{"lineNumber":385,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":386,"author":{"gitID":"chialejing"},"content":"* **Alternative 2:** The command extends `Command` instead."},{"lineNumber":387,"author":{"gitID":"chialejing"},"content":"** Pros: We simplify the code base by removing the use of `UndoableCommand`."},{"lineNumber":388,"author":{"gitID":"chialejing"},"content":"** Cons: Users are unable to undo their mistakes. Instead, they will have to go through the hassle of editing / deleting pet patients to resolve the error on their part."},{"lineNumber":389,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":390,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d\u003d Current Limitations"},{"lineNumber":391,"author":{"gitID":"chialejing"},"content":"As of now, the linking of pet patients to their respective owners (and also appointments) has not been implemented."},{"lineNumber":392,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":393,"author":{"gitID":"chialejing"},"content":"The implementation of `PetPatient` tags (i.e. having a separate list of tags from `Person`) is currently ongoing; as such, there is no support for tagging of pet patients yet."},{"lineNumber":394,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":395,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d\u003d Future Work"},{"lineNumber":396,"author":{"gitID":"chialejing"},"content":"Future work on this feature will address the current limitations that we have."},{"lineNumber":397,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":398,"author":{"gitID":"chialejing"},"content":"Linking of pet patients to their respective owners and appointments will be implemented. Tagging of the pet patients will also be implemented, as this is crucial to the searching of medical history of pets for the user."},{"lineNumber":399,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":400,"author":{"gitID":"chialejing"},"content":"// end::addPetPatient"},{"lineNumber":401,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":402,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":403,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":404,"author":{"gitID":"-"},"content":""},{"lineNumber":405,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":406,"author":{"gitID":"-"},"content":""},{"lineNumber":407,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":408,"author":{"gitID":"-"},"content":""},{"lineNumber":409,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":410,"author":{"gitID":"-"},"content":""},{"lineNumber":411,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":412,"author":{"gitID":"-"},"content":""},{"lineNumber":413,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":414,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":415,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":416,"author":{"gitID":"-"},"content":""},{"lineNumber":417,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":418,"author":{"gitID":"-"},"content":""},{"lineNumber":419,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":420,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":421,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":422,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":423,"author":{"gitID":"-"},"content":""},{"lineNumber":424,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":425,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":426,"author":{"gitID":"-"},"content":""},{"lineNumber":427,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":428,"author":{"gitID":"-"},"content":""},{"lineNumber":429,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":430,"author":{"gitID":"-"},"content":""},{"lineNumber":431,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":432,"author":{"gitID":"-"},"content":""},{"lineNumber":433,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":434,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":435,"author":{"gitID":"-"},"content":""},{"lineNumber":436,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":437,"author":{"gitID":"-"},"content":""},{"lineNumber":438,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":439,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":440,"author":{"gitID":"-"},"content":""},{"lineNumber":441,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":442,"author":{"gitID":"-"},"content":""},{"lineNumber":443,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":444,"author":{"gitID":"-"},"content":""},{"lineNumber":445,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":446,"author":{"gitID":"-"},"content":""},{"lineNumber":447,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":448,"author":{"gitID":"-"},"content":""},{"lineNumber":449,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":450,"author":{"gitID":"-"},"content":""},{"lineNumber":451,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":452,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":453,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":454,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":455,"author":{"gitID":"-"},"content":""},{"lineNumber":456,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":457,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":458,"author":{"gitID":"-"},"content":""},{"lineNumber":459,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":460,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":461,"author":{"gitID":"-"},"content":""},{"lineNumber":462,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":463,"author":{"gitID":"-"},"content":""},{"lineNumber":464,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":465,"author":{"gitID":"-"},"content":""},{"lineNumber":466,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":467,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":468,"author":{"gitID":"-"},"content":""},{"lineNumber":469,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":470,"author":{"gitID":"-"},"content":""},{"lineNumber":471,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":472,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":473,"author":{"gitID":"-"},"content":""},{"lineNumber":474,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":475,"author":{"gitID":"-"},"content":""},{"lineNumber":476,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":477,"author":{"gitID":"-"},"content":""},{"lineNumber":478,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":479,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":480,"author":{"gitID":"-"},"content":""},{"lineNumber":481,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":482,"author":{"gitID":"-"},"content":""},{"lineNumber":483,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":484,"author":{"gitID":"-"},"content":""},{"lineNumber":485,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":486,"author":{"gitID":"-"},"content":""},{"lineNumber":487,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":488,"author":{"gitID":"-"},"content":""},{"lineNumber":489,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":490,"author":{"gitID":"-"},"content":""},{"lineNumber":491,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":492,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":493,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":494,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":495,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":496,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":497,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":498,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":499,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":500,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":501,"author":{"gitID":"-"},"content":""},{"lineNumber":502,"author":{"gitID":"-"},"content":""},{"lineNumber":503,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":504,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":505,"author":{"gitID":"-"},"content":""},{"lineNumber":506,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":507,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":508,"author":{"gitID":"-"},"content":""},{"lineNumber":509,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":510,"author":{"gitID":"-"},"content":""},{"lineNumber":511,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":512,"author":{"gitID":"-"},"content":""},{"lineNumber":513,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":514,"author":{"gitID":"-"},"content":""},{"lineNumber":515,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":516,"author":{"gitID":"-"},"content":""},{"lineNumber":517,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":518,"author":{"gitID":"-"},"content":""},{"lineNumber":519,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":520,"author":{"gitID":"-"},"content":""},{"lineNumber":521,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":522,"author":{"gitID":"-"},"content":""},{"lineNumber":523,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":524,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":525,"author":{"gitID":"-"},"content":""},{"lineNumber":526,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":527,"author":{"gitID":"-"},"content":""},{"lineNumber":528,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":529,"author":{"gitID":"-"},"content":""},{"lineNumber":530,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":531,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":532,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":533,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":534,"author":{"gitID":"-"},"content":""},{"lineNumber":535,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":536,"author":{"gitID":"-"},"content":""},{"lineNumber":537,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Medeina depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":538,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":539,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":540,"author":{"gitID":"-"},"content":""},{"lineNumber":541,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":542,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":543,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":544,"author":{"gitID":"-"},"content":""},{"lineNumber":545,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":546,"author":{"gitID":"-"},"content":""},{"lineNumber":547,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":548,"author":{"gitID":"-"},"content":""},{"lineNumber":549,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":550,"author":{"gitID":"-"},"content":""},{"lineNumber":551,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":552,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":553,"author":{"gitID":"-"},"content":""},{"lineNumber":554,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":555,"author":{"gitID":"-"},"content":""},{"lineNumber":556,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":557,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":558,"author":{"gitID":"-"},"content":""},{"lineNumber":559,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":560,"author":{"gitID":"-"},"content":""},{"lineNumber":561,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":562,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":563,"author":{"gitID":"-"},"content":""},{"lineNumber":564,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":565,"author":{"gitID":"-"},"content":"+"},{"lineNumber":566,"author":{"gitID":"-"},"content":"****"},{"lineNumber":567,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":568,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":569,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":570,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":571,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":572,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":573,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":574,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":575,"author":{"gitID":"-"},"content":"****"},{"lineNumber":576,"author":{"gitID":"-"},"content":""},{"lineNumber":577,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":578,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":579,"author":{"gitID":"-"},"content":""},{"lineNumber":580,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":581,"author":{"gitID":"-"},"content":""},{"lineNumber":582,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":583,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":584,"author":{"gitID":"-"},"content":""},{"lineNumber":585,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in Medeina\u0027s address book."},{"lineNumber":586,"author":{"gitID":"-"},"content":"+"},{"lineNumber":587,"author":{"gitID":"-"},"content":"****"},{"lineNumber":588,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":589,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":590,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":591,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":592,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":593,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":594,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":595,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":596,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":597,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":598,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":599,"author":{"gitID":"-"},"content":"****"},{"lineNumber":600,"author":{"gitID":"-"},"content":""},{"lineNumber":601,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":602,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":603,"author":{"gitID":"-"},"content":""},{"lineNumber":604,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":605,"author":{"gitID":"-"},"content":""},{"lineNumber":606,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":607,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":608,"author":{"gitID":"-"},"content":""},{"lineNumber":609,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":610,"author":{"gitID":"-"},"content":"+"},{"lineNumber":611,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":612,"author":{"gitID":"-"},"content":"+"},{"lineNumber":613,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":614,"author":{"gitID":"-"},"content":"+"},{"lineNumber":615,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":616,"author":{"gitID":"-"},"content":"+"},{"lineNumber":617,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":618,"author":{"gitID":"-"},"content":"+"},{"lineNumber":619,"author":{"gitID":"-"},"content":"****"},{"lineNumber":620,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":621,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":622,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":623,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":624,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":625,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":626,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":627,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":628,"author":{"gitID":"-"},"content":"****"},{"lineNumber":629,"author":{"gitID":"-"},"content":""},{"lineNumber":630,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":631,"author":{"gitID":"-"},"content":"+"},{"lineNumber":632,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":633,"author":{"gitID":"-"},"content":"+"},{"lineNumber":634,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":635,"author":{"gitID":"-"},"content":"+"},{"lineNumber":636,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":637,"author":{"gitID":"-"},"content":"+"},{"lineNumber":638,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":639,"author":{"gitID":"-"},"content":"+"},{"lineNumber":640,"author":{"gitID":"-"},"content":"****"},{"lineNumber":641,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":642,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":643,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":644,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":645,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":646,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":647,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":648,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":649,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":650,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":651,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":652,"author":{"gitID":"-"},"content":"****"},{"lineNumber":653,"author":{"gitID":"-"},"content":""},{"lineNumber":654,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":655,"author":{"gitID":"-"},"content":"+"},{"lineNumber":656,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":657,"author":{"gitID":"-"},"content":"+"},{"lineNumber":658,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":659,"author":{"gitID":"-"},"content":"+"},{"lineNumber":660,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":661,"author":{"gitID":"-"},"content":"+"},{"lineNumber":662,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":663,"author":{"gitID":"-"},"content":"+"},{"lineNumber":664,"author":{"gitID":"-"},"content":"****"},{"lineNumber":665,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":666,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":667,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":668,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":669,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":670,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":671,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":672,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":673,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":674,"author":{"gitID":"-"},"content":"****"},{"lineNumber":675,"author":{"gitID":"-"},"content":""},{"lineNumber":676,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":677,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":678,"author":{"gitID":"-"},"content":""},{"lineNumber":679,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":680,"author":{"gitID":"-"},"content":""},{"lineNumber":681,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":682,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":683,"author":{"gitID":"-"},"content":""},{"lineNumber":684,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":685,"author":{"gitID":"-"},"content":"+"},{"lineNumber":686,"author":{"gitID":"-"},"content":"****"},{"lineNumber":687,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":688,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":689,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":690,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":691,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":692,"author":{"gitID":"-"},"content":"****"},{"lineNumber":693,"author":{"gitID":"-"},"content":""},{"lineNumber":694,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":695,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":696,"author":{"gitID":"-"},"content":""},{"lineNumber":697,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":698,"author":{"gitID":"-"},"content":""},{"lineNumber":699,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":700,"author":{"gitID":"-"},"content":""},{"lineNumber":701,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":702,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":703,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":704,"author":{"gitID":"-"},"content":""},{"lineNumber":705,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":706,"author":{"gitID":"-"},"content":""},{"lineNumber":707,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":708,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":709,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":710,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":711,"author":{"gitID":"-"},"content":""},{"lineNumber":712,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":713,"author":{"gitID":"-"},"content":""},{"lineNumber":714,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":715,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":716,"author":{"gitID":"-"},"content":""},{"lineNumber":717,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":718,"author":{"gitID":"-"},"content":""},{"lineNumber":719,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":720,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":721,"author":{"gitID":"-"},"content":""},{"lineNumber":722,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":723,"author":{"gitID":"-"},"content":""},{"lineNumber":724,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":725,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":726,"author":{"gitID":"-"},"content":""},{"lineNumber":727,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":728,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":729,"author":{"gitID":"-"},"content":""},{"lineNumber":730,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":731,"author":{"gitID":"-"},"content":""},{"lineNumber":732,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":733,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":734,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":735,"author":{"gitID":"-"},"content":""},{"lineNumber":736,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":737,"author":{"gitID":"-"},"content":""},{"lineNumber":738,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":739,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":740,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":741,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":742,"author":{"gitID":"-"},"content":""},{"lineNumber":743,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":744,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":745,"author":{"gitID":"-"},"content":""},{"lineNumber":746,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":747,"author":{"gitID":"-"},"content":""},{"lineNumber":748,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":749,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":750,"author":{"gitID":"-"},"content":""},{"lineNumber":751,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":752,"author":{"gitID":"-"},"content":""},{"lineNumber":753,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":754,"author":{"gitID":"-"},"content":""},{"lineNumber":755,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":756,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":757,"author":{"gitID":"-"},"content":""},{"lineNumber":758,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":759,"author":{"gitID":"-"},"content":""},{"lineNumber":760,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":761,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":762,"author":{"gitID":"-"},"content":""},{"lineNumber":763,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":764,"author":{"gitID":"-"},"content":""},{"lineNumber":765,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":766,"author":{"gitID":"-"},"content":""},{"lineNumber":767,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":768,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":769,"author":{"gitID":"-"},"content":""},{"lineNumber":770,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":771,"author":{"gitID":"-"},"content":""},{"lineNumber":772,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":773,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":774,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":775,"author":{"gitID":"-"},"content":""},{"lineNumber":776,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":777,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":778,"author":{"gitID":"-"},"content":""},{"lineNumber":779,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":780,"author":{"gitID":"-"},"content":""},{"lineNumber":781,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":782,"author":{"gitID":"-"},"content":""},{"lineNumber":783,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":784,"author":{"gitID":"-"},"content":""},{"lineNumber":785,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":786,"author":{"gitID":"-"},"content":""},{"lineNumber":787,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":788,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":789,"author":{"gitID":"-"},"content":""},{"lineNumber":790,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":791,"author":{"gitID":"-"},"content":""},{"lineNumber":792,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":793,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":794,"author":{"gitID":"-"},"content":""},{"lineNumber":795,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":796,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":797,"author":{"gitID":"-"},"content":""},{"lineNumber":798,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":799,"author":{"gitID":"-"},"content":""},{"lineNumber":800,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":801,"author":{"gitID":"-"},"content":""},{"lineNumber":802,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":803,"author":{"gitID":"-"},"content":""},{"lineNumber":804,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":805,"author":{"gitID":"-"},"content":""},{"lineNumber":806,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":807,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":808,"author":{"gitID":"-"},"content":""},{"lineNumber":809,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":810,"author":{"gitID":"-"},"content":""},{"lineNumber":811,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":812,"author":{"gitID":"-"},"content":""},{"lineNumber":813,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":814,"author":{"gitID":"-"},"content":""},{"lineNumber":815,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":816,"author":{"gitID":"-"},"content":""},{"lineNumber":817,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":818,"author":{"gitID":"-"},"content":""},{"lineNumber":819,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":820,"author":{"gitID":"-"},"content":""},{"lineNumber":821,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":822,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":823,"author":{"gitID":"-"},"content":""},{"lineNumber":824,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":825,"author":{"gitID":"-"},"content":""},{"lineNumber":826,"author":{"gitID":"wynonaK"},"content":"* tech-savvy veterinarians and their \u003c\u003cassistants, assistants\u003e\u003e"},{"lineNumber":827,"author":{"gitID":"wynonaK"},"content":"* can type relatively fast while maintaining accuracy"},{"lineNumber":828,"author":{"gitID":"wynonaK"},"content":"* requires using the desktop in the workplace"},{"lineNumber":829,"author":{"gitID":"wynonaK"},"content":"* requires \u003c\u003ccli, CLI\u003e\u003e applications for efficiency"},{"lineNumber":830,"author":{"gitID":"wynonaK"},"content":"* provide veterinary services to domestic animals in Singapore"},{"lineNumber":831,"author":{"gitID":"wynonaK"},"content":"* has to manage a significant number of \u003c\u003cpet_patients,pet patients\u003e\u003e"},{"lineNumber":832,"author":{"gitID":"wynonaK"},"content":"* requires the information kept to generally be non-volatile"},{"lineNumber":833,"author":{"gitID":"wynonaK"},"content":"* needs to search through amounts of data for information"},{"lineNumber":834,"author":{"gitID":"-"},"content":""},{"lineNumber":835,"author":{"gitID":"wynonaK"},"content":"*Value proposition*: all-in-one vet assistant app that can view and make appointments and search for information"},{"lineNumber":836,"author":{"gitID":"-"},"content":""},{"lineNumber":837,"author":{"gitID":"-"},"content":"*Feature contribution*:"},{"lineNumber":838,"author":{"gitID":"-"},"content":""},{"lineNumber":839,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%\",options\u003d\"header\",]"},{"lineNumber":840,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":841,"author":{"gitID":"-"},"content":"|Name |Major enhancement(s) |Minor enhancement(s)"},{"lineNumber":842,"author":{"gitID":"wynonaK"},"content":"|Jacqueline Cheong|"},{"lineNumber":843,"author":{"gitID":"-"},"content":"*Make command syntax more user friendly and closer to natural language*"},{"lineNumber":844,"author":{"gitID":"-"},"content":""},{"lineNumber":845,"author":{"gitID":"-"},"content":"To enhance user experience and usage efficiency by improving the command syntax to be more intuitive and simple to use |"},{"lineNumber":846,"author":{"gitID":"-"},"content":""},{"lineNumber":847,"author":{"gitID":"-"},"content":"*Add support to change theme*"},{"lineNumber":848,"author":{"gitID":"-"},"content":""},{"lineNumber":849,"author":{"gitID":"wynonaK"},"content":"This allows Vets to change the application\u0027s appearance to better suit their preferences and working environment (e.g. dark theme for night time)"},{"lineNumber":850,"author":{"gitID":"-"},"content":""},{"lineNumber":851,"author":{"gitID":"chialejing"},"content":"|Chia Le Jing|"},{"lineNumber":852,"author":{"gitID":"chialejing"},"content":"*PetPatient class and all its relevant features*"},{"lineNumber":853,"author":{"gitID":"-"},"content":""},{"lineNumber":854,"author":{"gitID":"chialejing"},"content":"Commands such as add, edit, delete, find. Also includes the storage of pet patient\u0027s data into the associated .xml file. |"},{"lineNumber":855,"author":{"gitID":"-"},"content":""},{"lineNumber":856,"author":{"gitID":"chialejing"},"content":"*Implement backup function for local databases and the cloud (for v2.0)*"},{"lineNumber":857,"author":{"gitID":"-"},"content":""},{"lineNumber":858,"author":{"gitID":"chialejing"},"content":"Allows local files to be backed up with the latest copy (in case of corruption of data). Also allows data to be backed up to the cloud for future use."},{"lineNumber":859,"author":{"gitID":"-"},"content":""},{"lineNumber":860,"author":{"gitID":"wynonaK"},"content":"|Wynona Kaan |"},{"lineNumber":861,"author":{"gitID":"wynonaK"},"content":"*Appointment class and all relevant features*"},{"lineNumber":862,"author":{"gitID":"-"},"content":""},{"lineNumber":863,"author":{"gitID":"wynonaK"},"content":"Commands such as add, remove, edit, find, as well as storage, for Vet and assistants, to handle appointments. |"},{"lineNumber":864,"author":{"gitID":"-"},"content":""},{"lineNumber":865,"author":{"gitID":"wynonaK"},"content":"*Remove tags from all person objects*"},{"lineNumber":866,"author":{"gitID":"-"},"content":""},{"lineNumber":867,"author":{"gitID":"wynonaK"},"content":"Allows for a particular tag to be removed from all objects, depending on what needs to be removed."},{"lineNumber":868,"author":{"gitID":"-"},"content":""},{"lineNumber":869,"author":{"gitID":"-"},"content":"|Peng Xuanchang |"},{"lineNumber":870,"author":{"gitID":"-"},"content":"*Integrating CalenderFX as framework for Calender view*"},{"lineNumber":871,"author":{"gitID":"-"},"content":""},{"lineNumber":872,"author":{"gitID":"-"},"content":"Vets and their assistants will be able to see their appointments in calender view integrated in the software. |"},{"lineNumber":873,"author":{"gitID":"-"},"content":""},{"lineNumber":874,"author":{"gitID":"-"},"content":"*Add NRIC field in Owner’s profile*"},{"lineNumber":875,"author":{"gitID":"-"},"content":""},{"lineNumber":876,"author":{"gitID":"-"},"content":"The NRIC field will help the veterinarians and their assistants to better locate an owner using their unique ID."},{"lineNumber":877,"author":{"gitID":"-"},"content":""},{"lineNumber":878,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":879,"author":{"gitID":"-"},"content":""},{"lineNumber":880,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":881,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":882,"author":{"gitID":"-"},"content":""},{"lineNumber":883,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":884,"author":{"gitID":"-"},"content":""},{"lineNumber":885,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":886,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":887,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":888,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget command syntax, or how to use the App"},{"lineNumber":889,"author":{"gitID":"-"},"content":""},{"lineNumber":890,"author":{"gitID":"-"},"content":"|`* * *` |user |add a pet patient |register its information"},{"lineNumber":891,"author":{"gitID":"-"},"content":""},{"lineNumber":892,"author":{"gitID":"-"},"content":"|`* * *` |user |find a pet patient by name |easily locate its information without having to go through a long list of pet patients"},{"lineNumber":893,"author":{"gitID":"-"},"content":""},{"lineNumber":894,"author":{"gitID":"-"},"content":"|`* * *` |user |add appointment |schedule meetings with pet patients and their owners"},{"lineNumber":895,"author":{"gitID":"-"},"content":""},{"lineNumber":896,"author":{"gitID":"-"},"content":"|`* * *` |user |edit pet owner\u0027s contact information |update any change in contact information (e.g. changed hand phone number, change of address)"},{"lineNumber":897,"author":{"gitID":"-"},"content":""},{"lineNumber":898,"author":{"gitID":"-"},"content":"|`* * *` |user |search for a pet patient\u0027s medical history |know the next step of treatment"},{"lineNumber":899,"author":{"gitID":"-"},"content":""},{"lineNumber":900,"author":{"gitID":"-"},"content":"|`* * *` |user |create and modify tags |standardize tags used in the application"},{"lineNumber":901,"author":{"gitID":"-"},"content":""},{"lineNumber":902,"author":{"gitID":"-"},"content":"|`* * *` |user |basic tags to be assigned automatically |type lesser (e.g. when adding a pet owner, the \"Person\" tag should be assigned by default)"},{"lineNumber":903,"author":{"gitID":"-"},"content":""},{"lineNumber":904,"author":{"gitID":"-"},"content":"|`* * *` |user |list out appointments for next day |prepare for the required procedures/diagnosis/consultation"},{"lineNumber":905,"author":{"gitID":"-"},"content":""},{"lineNumber":906,"author":{"gitID":"-"},"content":"|`* * *` |user |change the theme of the application |better suit my preference"},{"lineNumber":907,"author":{"gitID":"-"},"content":""},{"lineNumber":908,"author":{"gitID":"-"},"content":"|`* * *` |user |classify types of appointment |better organize a long list of appointment"},{"lineNumber":909,"author":{"gitID":"-"},"content":""},{"lineNumber":910,"author":{"gitID":"-"},"content":"|`* * *` |user |cancel an appointment |make space in schedule for other things"},{"lineNumber":911,"author":{"gitID":"-"},"content":""},{"lineNumber":912,"author":{"gitID":"-"},"content":"|`* * *` |user |see upcoming appointments |prepare/plan in advance"},{"lineNumber":913,"author":{"gitID":"-"},"content":""},{"lineNumber":914,"author":{"gitID":"-"},"content":"|`* * *` |user |see a list of today\u0027s appointment |check on today\u0027s schedule"},{"lineNumber":915,"author":{"gitID":"-"},"content":""},{"lineNumber":916,"author":{"gitID":"-"},"content":"|`* * *` |user |filter pet patients by species and blood type |contact them for blood donation during emergencies"},{"lineNumber":917,"author":{"gitID":"-"},"content":""},{"lineNumber":918,"author":{"gitID":"-"},"content":"|`* * *` |user |log in with password |protect my pet patients\u0027 and their respective owners\u0027 information"},{"lineNumber":919,"author":{"gitID":"-"},"content":""},{"lineNumber":920,"author":{"gitID":"-"},"content":"|`* * *` |user |reschedule an appointment |make time for emergency situations"},{"lineNumber":921,"author":{"gitID":"-"},"content":""},{"lineNumber":922,"author":{"gitID":"-"},"content":"|`* * *` |user |search by pet owner\u0027s name |retrieve a list of pet patients under a particular owner"},{"lineNumber":923,"author":{"gitID":"-"},"content":""},{"lineNumber":924,"author":{"gitID":"-"},"content":"|`* * *` |user |add a pet owner |maintain contact information and register a pet patient under him or her"},{"lineNumber":925,"author":{"gitID":"-"},"content":""},{"lineNumber":926,"author":{"gitID":"-"},"content":"|`* * *` |user |add in owner details such as contact number |contact them when needed"},{"lineNumber":927,"author":{"gitID":"-"},"content":""},{"lineNumber":928,"author":{"gitID":"-"},"content":"|`* * *` |user |update pet patients\u0027 information |"},{"lineNumber":929,"author":{"gitID":"-"},"content":""},{"lineNumber":930,"author":{"gitID":"-"},"content":"|`* * *` |user |see pet owner\u0027s name when checking pet patients\u0027 profile |know who it belongs to"},{"lineNumber":931,"author":{"gitID":"-"},"content":""},{"lineNumber":932,"author":{"gitID":"-"},"content":"|`* *` |user |delete a pet patient after certain period |remove entries that I no longer need"},{"lineNumber":933,"author":{"gitID":"-"},"content":""},{"lineNumber":934,"author":{"gitID":"-"},"content":"|`* *` |user |update status of pet patient (living, deceased) |know the number of pets I am managing now"},{"lineNumber":935,"author":{"gitID":"-"},"content":""},{"lineNumber":936,"author":{"gitID":"-"},"content":"|`* *` |user |check who is my assistant for the day/particular pet patient |brief them in advance"},{"lineNumber":937,"author":{"gitID":"-"},"content":""},{"lineNumber":938,"author":{"gitID":"-"},"content":"|`* *` |user |have reminders sms sent to pet owners automatically 2 days before appointment|"},{"lineNumber":939,"author":{"gitID":"-"},"content":""},{"lineNumber":940,"author":{"gitID":"-"},"content":"|`* *` |user |check services consumed for a particular appointment |know what a pet patient has gone through"},{"lineNumber":941,"author":{"gitID":"-"},"content":""},{"lineNumber":942,"author":{"gitID":"-"},"content":"|`* *` |user |update my status |be recognized as an official vet after my training"},{"lineNumber":943,"author":{"gitID":"-"},"content":""},{"lineNumber":944,"author":{"gitID":"-"},"content":"|`* *` |user |transfer a pet patient from my clinic to another in case of emergency|"},{"lineNumber":945,"author":{"gitID":"-"},"content":""},{"lineNumber":946,"author":{"gitID":"-"},"content":"|`* *` |user |manage the \"rooms\" in hospital |make space for newly hospitalized pet patient"},{"lineNumber":947,"author":{"gitID":"-"},"content":""},{"lineNumber":948,"author":{"gitID":"-"},"content":"|`*` |user with many pet patients in the address book |sort pet patients by name |locate a pet patient easily"},{"lineNumber":949,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":950,"author":{"gitID":"-"},"content":""},{"lineNumber":951,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":952,"author":{"gitID":"-"},"content":""},{"lineNumber":953,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":954,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":955,"author":{"gitID":"-"},"content":""},{"lineNumber":956,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `Medeina` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":957,"author":{"gitID":"-"},"content":""},{"lineNumber":958,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":959,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: View full details of an appointment"},{"lineNumber":960,"author":{"gitID":"-"},"content":""},{"lineNumber":961,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":962,"author":{"gitID":"-"},"content":""},{"lineNumber":963,"author":{"gitID":"-"},"content":"1.  User requests to list appointments"},{"lineNumber":964,"author":{"gitID":"-"},"content":"2.  Medeina shows a list of appointments for the current month"},{"lineNumber":965,"author":{"gitID":"-"},"content":"3.  User requests to view a specific appointment in the list"},{"lineNumber":966,"author":{"gitID":"-"},"content":"4.  Medeina shows the full details of the specified appointment"},{"lineNumber":967,"author":{"gitID":"-"},"content":"+"},{"lineNumber":968,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":969,"author":{"gitID":"-"},"content":""},{"lineNumber":970,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":971,"author":{"gitID":"-"},"content":""},{"lineNumber":972,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":973,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":974,"author":{"gitID":"-"},"content":"+"},{"lineNumber":975,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":976,"author":{"gitID":"-"},"content":""},{"lineNumber":977,"author":{"gitID":"-"},"content":"* 2b. To retrieve a list of all upcoming appointments, use the command \"list -a appointments\""},{"lineNumber":978,"author":{"gitID":"-"},"content":"+"},{"lineNumber":979,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":980,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":981,"author":{"gitID":"-"},"content":"+"},{"lineNumber":982,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":983,"author":{"gitID":"-"},"content":"** 3a1. Medeina shows an error message."},{"lineNumber":984,"author":{"gitID":"-"},"content":"+"},{"lineNumber":985,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":986,"author":{"gitID":"-"},"content":""},{"lineNumber":987,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":988,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Update pet owner\u0027s contact information"},{"lineNumber":989,"author":{"gitID":"-"},"content":""},{"lineNumber":990,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":991,"author":{"gitID":"-"},"content":""},{"lineNumber":992,"author":{"gitID":"-"},"content":"1.  User requests to find a pet patient with the name \"Joseph\""},{"lineNumber":993,"author":{"gitID":"-"},"content":"2.  Medeina shows a list of pet patients with the name \"Joseph\""},{"lineNumber":994,"author":{"gitID":"-"},"content":"3.  User requests to view contact information of a specific pet patient"},{"lineNumber":995,"author":{"gitID":"-"},"content":"4.  Medeina shows the pet patient\u0027s owner\u0027s contact information"},{"lineNumber":996,"author":{"gitID":"-"},"content":"5.  User requests to modify the pet patient\u0027s owner\u0027s contact information"},{"lineNumber":997,"author":{"gitID":"-"},"content":"6.  Medeina shows the pet patient\u0027s updated contact information"},{"lineNumber":998,"author":{"gitID":"-"},"content":"+"},{"lineNumber":999,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1000,"author":{"gitID":"-"},"content":""},{"lineNumber":1001,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1002,"author":{"gitID":"-"},"content":""},{"lineNumber":1003,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1004,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1005,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1006,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1007,"author":{"gitID":"-"},"content":""},{"lineNumber":1008,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1009,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1010,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1011,"author":{"gitID":"-"},"content":"** 3a1. Medeina shows an error message."},{"lineNumber":1012,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1013,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1014,"author":{"gitID":"-"},"content":""},{"lineNumber":1015,"author":{"gitID":"-"},"content":"* 5a. The given command is invalid."},{"lineNumber":1016,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1017,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1018,"author":{"gitID":"-"},"content":"** 5a1. Medeina shows the correct command usage to edit pet patient\u0027s information."},{"lineNumber":1019,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1020,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1021,"author":{"gitID":"-"},"content":""},{"lineNumber":1022,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1023,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Retrieve medical history of a pet patient"},{"lineNumber":1024,"author":{"gitID":"-"},"content":""},{"lineNumber":1025,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1026,"author":{"gitID":"-"},"content":""},{"lineNumber":1027,"author":{"gitID":"-"},"content":"1.  User requests to find a pet patient with the name \"Joseph\""},{"lineNumber":1028,"author":{"gitID":"-"},"content":"2.  Medeina shows a list of pet patients with the name \"Joseph\""},{"lineNumber":1029,"author":{"gitID":"-"},"content":"3.  User requests to view medical history of a specific pet patient"},{"lineNumber":1030,"author":{"gitID":"-"},"content":"4.  Medeina shows the pet patient\u0027s medical history"},{"lineNumber":1031,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1032,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1033,"author":{"gitID":"-"},"content":""},{"lineNumber":1034,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1035,"author":{"gitID":"-"},"content":""},{"lineNumber":1036,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1037,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1038,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1039,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1040,"author":{"gitID":"-"},"content":""},{"lineNumber":1041,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1042,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1043,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1044,"author":{"gitID":"-"},"content":"** 3a1. Medeina shows an error message."},{"lineNumber":1045,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1046,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1047,"author":{"gitID":"-"},"content":""},{"lineNumber":1048,"author":{"gitID":"-"},"content":"* 4a. No medical history (empty)."},{"lineNumber":1049,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1050,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1051,"author":{"gitID":"-"},"content":""},{"lineNumber":1052,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1053,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Retrieve information of a particular owner (contact details, pet patients owned by him/her, and appointments made)"},{"lineNumber":1054,"author":{"gitID":"-"},"content":""},{"lineNumber":1055,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1056,"author":{"gitID":"-"},"content":""},{"lineNumber":1057,"author":{"gitID":"-"},"content":"1.  User requests to find an owner named \"Mavis\""},{"lineNumber":1058,"author":{"gitID":"-"},"content":"2.  Medeina shows a list of owners with \"Mavis\" as part of their name"},{"lineNumber":1059,"author":{"gitID":"-"},"content":"3.  User requests to view information of a specific owner"},{"lineNumber":1060,"author":{"gitID":"-"},"content":"4.  Medeina shows information about the owner"},{"lineNumber":1061,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1062,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1063,"author":{"gitID":"-"},"content":""},{"lineNumber":1064,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1065,"author":{"gitID":"-"},"content":""},{"lineNumber":1066,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1067,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1068,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1069,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1070,"author":{"gitID":"-"},"content":""},{"lineNumber":1071,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1072,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1073,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1074,"author":{"gitID":"-"},"content":"** 3a1. Medeina shows an error message."},{"lineNumber":1075,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1076,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1077,"author":{"gitID":"-"},"content":""},{"lineNumber":1078,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1079,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Generate a pdf report of a pet patient\u0027s medical history and owner\u0027s contact information"},{"lineNumber":1080,"author":{"gitID":"-"},"content":""},{"lineNumber":1081,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1082,"author":{"gitID":"-"},"content":""},{"lineNumber":1083,"author":{"gitID":"-"},"content":"1.  User requests to find a pet patient with the name \"Joseph\""},{"lineNumber":1084,"author":{"gitID":"-"},"content":"2.  Medeina shows a list of pet patients with the name \"Joseph\""},{"lineNumber":1085,"author":{"gitID":"-"},"content":"3.  User requests for a pdf report of a specific pet patient on the list"},{"lineNumber":1086,"author":{"gitID":"-"},"content":"4.  Medeina generates a pdf report for the user"},{"lineNumber":1087,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1088,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1089,"author":{"gitID":"-"},"content":""},{"lineNumber":1090,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1091,"author":{"gitID":"-"},"content":""},{"lineNumber":1092,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1093,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1094,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1095,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1096,"author":{"gitID":"-"},"content":""},{"lineNumber":1097,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1098,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1099,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1100,"author":{"gitID":"-"},"content":"** 3a1. Medeina shows an error message."},{"lineNumber":1101,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1102,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1103,"author":{"gitID":"-"},"content":""},{"lineNumber":1104,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1105,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Generate a pdf report of a particular owner\u0027s full information e.g. contact details, list of pet patients under this owner and their medical histories"},{"lineNumber":1106,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1107,"author":{"gitID":"-"},"content":""},{"lineNumber":1108,"author":{"gitID":"-"},"content":"1.  User requests to find an owner with the name \"Mavis\""},{"lineNumber":1109,"author":{"gitID":"-"},"content":"2.  Medeina shows a list of owners with the name \"Mavis\""},{"lineNumber":1110,"author":{"gitID":"-"},"content":"3.  User requests for a pdf report of a specific owner on the list"},{"lineNumber":1111,"author":{"gitID":"-"},"content":"4.  Medeina generates a pdf report for the user"},{"lineNumber":1112,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1113,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1114,"author":{"gitID":"-"},"content":""},{"lineNumber":1115,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1116,"author":{"gitID":"-"},"content":""},{"lineNumber":1117,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1118,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1119,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1120,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1121,"author":{"gitID":"-"},"content":""},{"lineNumber":1122,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1123,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1124,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1125,"author":{"gitID":"-"},"content":"** 3a1. Medeina shows an error message."},{"lineNumber":1126,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1127,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1128,"author":{"gitID":"-"},"content":""},{"lineNumber":1129,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1130,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add tag(s) to a pet owner"},{"lineNumber":1131,"author":{"gitID":"-"},"content":""},{"lineNumber":1132,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1133,"author":{"gitID":"-"},"content":""},{"lineNumber":1134,"author":{"gitID":"-"},"content":"1.  User requests to find an owner with the name \"Mavis\""},{"lineNumber":1135,"author":{"gitID":"-"},"content":"2.  Medeina shows a list of owners with the name \"Mavis\""},{"lineNumber":1136,"author":{"gitID":"-"},"content":"3.  User requests to add tags to a specific owner on the list"},{"lineNumber":1137,"author":{"gitID":"-"},"content":"4.  Medeina shows updated owner information"},{"lineNumber":1138,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1139,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1140,"author":{"gitID":"-"},"content":""},{"lineNumber":1141,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1142,"author":{"gitID":"-"},"content":""},{"lineNumber":1143,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1144,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1145,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1146,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1147,"author":{"gitID":"-"},"content":""},{"lineNumber":1148,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1149,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1150,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1151,"author":{"gitID":"-"},"content":"** 3a1. Medeina shows an error message."},{"lineNumber":1152,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1153,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1154,"author":{"gitID":"-"},"content":""},{"lineNumber":1155,"author":{"gitID":"-"},"content":"* 3b. The given tag(s) is/are invalid."},{"lineNumber":1156,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1157,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1158,"author":{"gitID":"-"},"content":"** 3b1. Medeina shows a list of valid tags."},{"lineNumber":1159,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1160,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1161,"author":{"gitID":"-"},"content":""},{"lineNumber":1162,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1163,"author":{"gitID":"-"},"content":""},{"lineNumber":1164,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1165,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1166,"author":{"gitID":"-"},"content":""},{"lineNumber":1167,"author":{"gitID":"chialejing"},"content":".  The system should work on Windows, Linux and macOS as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1168,"author":{"gitID":"chialejing"},"content":".  A user (vet or vet assistant) with above average typing speed for regular English text (i.e. not code, not system administrative commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1169,"author":{"gitID":"chialejing"},"content":".  The system should be accessible, even without any Internet connection (or with poor Internet connection)."},{"lineNumber":1170,"author":{"gitID":"chialejing"},"content":".  The system should be able to hold the information of at least 1000 patients (pets) and their respective owners without noticeable sluggishness in performance for typical usage."},{"lineNumber":1171,"author":{"gitID":"chialejing"},"content":".  The system should be stable (runs without crashing, even for extended hours) and responsive (with a maximum lag of 2 seconds) due to the possibility of patient emergencies."},{"lineNumber":1172,"author":{"gitID":"chialejing"},"content":".  The system should be reliable and accurate (i.e. information keyed in is guaranteed to be saved, information retrieved is guaranteed to be accurate based on what was keyed in previously)."},{"lineNumber":1173,"author":{"gitID":"chialejing"},"content":".  The system must have sufficient security (such as password protection / encrypted storage file) to protect the confidentiality of the patients (pets) and their respective owners. This is also to ensure compliance with PDPA."},{"lineNumber":1174,"author":{"gitID":"chialejing"},"content":".  Patient\u0027s and owner\u0027s information should be easily and accurately backed up, with zero errors in the information."},{"lineNumber":1175,"author":{"gitID":"chialejing"},"content":".  Restoring patient\u0027s and their respective owner\u0027s information should be an easy process."},{"lineNumber":1176,"author":{"gitID":"chialejing"},"content":".  The system should have sufficient commands / functions to ensure that information can be maintained and managed easily. Basic operations such as add, delete, find, update must be included for patients and their respective owners."},{"lineNumber":1177,"author":{"gitID":"-"},"content":""},{"lineNumber":1178,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1179,"author":{"gitID":"-"},"content":""},{"lineNumber":1180,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1181,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1182,"author":{"gitID":"-"},"content":""},{"lineNumber":1183,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1184,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1185,"author":{"gitID":"-"},"content":""},{"lineNumber":1186,"author":{"gitID":"wynonaK"},"content":"[[assistants]] Assistants::"},{"lineNumber":1187,"author":{"gitID":"wynonaK"},"content":"People who help Veterinarians (receptionist, technicians etc.)"},{"lineNumber":1188,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1189,"author":{"gitID":"wynonaK"},"content":"[[cli]] CLI::"},{"lineNumber":1190,"author":{"gitID":"wynonaK"},"content":"Command Line Interface"},{"lineNumber":1191,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1192,"author":{"gitID":"wynonaK"},"content":"[[pet_patients]] Pet Patients::"},{"lineNumber":1193,"author":{"gitID":"wynonaK"},"content":"Domestic animals which seek veterinary services"},{"lineNumber":1194,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1195,"author":{"gitID":"-"},"content":""},{"lineNumber":1196,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1197,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1198,"author":{"gitID":"-"},"content":""},{"lineNumber":1199,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1200,"author":{"gitID":"-"},"content":""},{"lineNumber":1201,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1202,"author":{"gitID":"-"},"content":""},{"lineNumber":1203,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1204,"author":{"gitID":"-"},"content":""},{"lineNumber":1205,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1206,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1207,"author":{"gitID":"-"},"content":""},{"lineNumber":1208,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1209,"author":{"gitID":"-"},"content":""},{"lineNumber":1210,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1211,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1212,"author":{"gitID":"-"},"content":""},{"lineNumber":1213,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1214,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1215,"author":{"gitID":"-"},"content":""},{"lineNumber":1216,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1217,"author":{"gitID":"-"},"content":""},{"lineNumber":1218,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1219,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1220,"author":{"gitID":"-"},"content":""},{"lineNumber":1221,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1222,"author":{"gitID":"-"},"content":""},{"lineNumber":1223,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1224,"author":{"gitID":"-"},"content":""},{"lineNumber":1225,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1226,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1227,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1228,"author":{"gitID":"-"},"content":""},{"lineNumber":1229,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1230,"author":{"gitID":"-"},"content":""},{"lineNumber":1231,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1232,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1233,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1234,"author":{"gitID":"-"},"content":""},{"lineNumber":1235,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1236,"author":{"gitID":"-"},"content":""},{"lineNumber":1237,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1238,"author":{"gitID":"-"},"content":""},{"lineNumber":1239,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1240,"author":{"gitID":"-"},"content":""},{"lineNumber":1241,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1242,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1243,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1244,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1245,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1246,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1247,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1248,"author":{"gitID":"-"},"content":""},{"lineNumber":1249,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1250,"author":{"gitID":"-"},"content":""},{"lineNumber":1251,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1252,"author":{"gitID":"-"},"content":""},{"lineNumber":1253,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1254,"author":{"gitID":"-"},"content":""},{"lineNumber":1255,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1256,"author":{"gitID":"-"},"content":""},{"lineNumber":1257,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"chialejing":52,"wynonaK":25,"-":1180}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_JOKER;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BREED_DESC_JOKER;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.COLOUR_DESC_JOKER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_JOKER;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_OWNER;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_PET;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SPECIES_DESC_JOKER;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .withNric(VALID_NRIC_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        PetPatient expectedPet \u003d new PetPatient(new PetPatientName(\"joker\"), \"cat\", \"domestic shorthair\","},{"lineNumber":70,"author":{"gitID":"-"},"content":"                \"brown and white\", \"O\", expectedPerson, new HashSet\u003c\u003e());"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        //add new owner and new pet patient"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_FRIEND + OPTION_PET + NAME_DESC_JOKER"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                + SPECIES_DESC_JOKER + BREED_DESC_JOKER + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER,"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson, expectedPet));"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, OPTION_OWNER + NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withNric(VALID_NRIC_BOB)"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withNric(VALID_NRIC_AMY).withTags().build();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, OPTION_OWNER + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + NRIC_DESC_AMY, new AddCommand(expectedPerson));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + NRIC_DESC_BOB, expectedMessage);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + NRIC_DESC_BOB, expectedMessage);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + NRIC_DESC_BOB, expectedMessage);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                + VALID_ADDRESS_BOB + NRIC_DESC_BOB, expectedMessage);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                + VALID_ADDRESS_BOB + VALID_NRIC_BOB, expectedMessage);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            + INVALID_ADDRESS_DESC + NRIC_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            + ADDRESS_DESC_BOB + NRIC_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":170,"author":{"gitID":"-"},"content":"                + INVALID_ADDRESS_DESC + NRIC_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":174,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":1,"-":176}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_OWNER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_PATIENT_BLOODTYPE;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_PATIENT_BREED;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_PATIENT_COLOUR;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_PATIENT_SPECIES;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String VALID_NRIC_AMY \u003d \"G1078999P\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String VALID_NRIC_BOB \u003d \"S7895666N\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"    public static final String VALID_TAG_UNUSED \u003d \"unused\";"},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":"    public static final String VALID_TAG_CHECKUP \u003d \"checkup\";"},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"    public static final String VALID_TAG_VACCINATION \u003d \"vaccination\";"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"    public static final String VALID_OWNER_JOHNNY \u003d \"Johnny Sim\";"},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"    public static final String VALID_OWNER_TIMMY \u003d \"Timmy Sim\";"},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"    public static final String VALID_REMARK_JOHNNY \u003d \"Requires homevisit\";"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"    public static final String VALID_REMARK_TIMMY \u003d \"old age\";"},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"    public static final String VALID_DATE_JOHNNY \u003d \"2018-12-31 12:30\";"},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"    public static final String VALID_DATE_TIMMY \u003d \"2018-10-12 12:15\";"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String NRIC_DESC_AMY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_AMY;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final String NRIC_DESC_BOB \u003d \" \" + PREFIX_NRIC + VALID_NRIC_BOB;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"    public static final String TAG_DESC_CHECKUP \u003d \" \" + PREFIX_TAG + VALID_TAG_CHECKUP;"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"    public static final String TAG_DESC_VACCINATION \u003d \" \" + PREFIX_TAG + VALID_TAG_VACCINATION;"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"    public static final String OWNER_DESC_JOHNNY \u003d \" \" + PREFIX_OWNER + VALID_OWNER_JOHNNY;"},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"    public static final String OWNER_DESC_TIMMY \u003d \" \" + PREFIX_OWNER + VALID_OWNER_TIMMY;"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"    public static final String REMARK_DESC_JOHNNY \u003d \" \" + PREFIX_REMARK + VALID_REMARK_JOHNNY;"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"    public static final String REMARK_DESC_TIMMY \u003d \" \" + PREFIX_REMARK + VALID_REMARK_TIMMY;"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"    public static final String DATE_DESC_JOHNNY \u003d \" \" + PREFIX_DATE + VALID_DATE_JOHNNY;"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"    public static final String DATE_DESC_TIMMY \u003d \" \" + PREFIX_DATE + VALID_DATE_TIMMY;"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_JOKER \u003d \"Joker\";"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public static final String VALID_SPECIES_JOKER \u003d \"cat\";"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static final String VALID_BREED_JOKER \u003d \"domestic shorthair\";"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public static final String VALID_COLOUR_JOKER \u003d \"brown and white\";"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public static final String VALID_BLOODTYPE_JOKER \u003d \"O\";"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_JOKER \u003d \" \" + PREFIX_NAME + VALID_NAME_JOKER;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static final String SPECIES_DESC_JOKER \u003d \" \" + PREFIX_PET_PATIENT_SPECIES + VALID_SPECIES_JOKER;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public static final String BREED_DESC_JOKER \u003d \" \" + PREFIX_PET_PATIENT_BREED + VALID_BREED_JOKER;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public static final String COLOUR_DESC_JOKER \u003d \" \" + PREFIX_PET_PATIENT_COLOUR + VALID_COLOUR_JOKER;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public static final String BLOODTYPE_DESC_JOKER \u003d \" \" + PREFIX_PET_PATIENT_BLOODTYPE + VALID_BLOODTYPE_JOKER;"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public static final String INVALID_NRIC_DESC \u003d \" \" + PREFIX_NRIC + \"\u00262345678M\"; // \u0027\u0026\u0027 not allowed in NRIC"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":101,"author":{"gitID":"wynonaK"},"content":"    public static final String INVALID_OWNER_DESC \u003d \" \" + PREFIX_OWNER + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":"    public static final String INVALID_REMARK_DESC \u003d \" \" + PREFIX_REMARK; //empty string not allowed for remark"},{"lineNumber":103,"author":{"gitID":"wynonaK"},"content":"    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"twelvemarchtwozerooneeight\"; //follows format"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public static final String INVALID_THEME_PINK \u003d \"pink\";"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public static final String INVALID_THEME_LIGHTT \u003d \"lightt\";"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public static final String VALID_THEME_PATH_LIGHT \u003d \"/view/LightTheme.css\";"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public static final String VALID_THEME_PATH_DARK \u003d \"/view/DarkTheme.css\";"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public static final String OPTION_OWNER \u003d \" -o\";"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public static final String OPTION_PET \u003d \" -p\";"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                .withNric(VALID_NRIC_AMY)"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                .withNric(VALID_NRIC_BOB)"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":157,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":173,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":186,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":207,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":23,"-":190}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.exceptions.DuplicatePetPatientException;"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        new AddCommand((Person) null);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"chialejing"},"content":"        @Override"},{"lineNumber":110,"author":{"gitID":"chialejing"},"content":"        public void addPetPatient(PetPatient petPatient) throws DuplicatePetPatientException {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"wynonaK"},"content":"        @Override"},{"lineNumber":115,"author":{"gitID":"wynonaK"},"content":"        public void addAppointment(Appointment appointment) throws DuplicateAppointmentException {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"wynonaK"},"content":"        @Override"},{"lineNumber":142,"author":{"gitID":"wynonaK"},"content":"        public void deleteTag(Tag tag) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":144,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":157,"author":{"gitID":"chialejing"},"content":"        @Override"},{"lineNumber":158,"author":{"gitID":"chialejing"},"content":"        public void updateFilteredPetPatientList(Predicate\u003cPetPatient\u003e predicate) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":8,"wynonaK":9,"-":179}},{"path":"src/test/java/seedu/address/model/appointment/RemarkTest.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"public class RemarkTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Remark(null));"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"    public void constructor_invalidRemark_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"        String invalidRemark \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Remark(invalidRemark));"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"    public void isValidRemark() {"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"        // null remark"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Remark.isValidRemark(null));"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"        // invalid addresses"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"        assertFalse(Remark.isValidRemark(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"        assertFalse(Remark.isValidRemark(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"        // valid addresses"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"        assertTrue(Remark.isValidRemark(\"Might need a house visit.\"));"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"        assertTrue(Remark.isValidRemark(\"-\")); // one character"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"        assertTrue(Remark.isValidRemark(\"Might need a house visit, and medication.\")); // long address"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":28,"-":9}},{"path":"src/test/java/seedu/address/model/appointment/UniqueAppointmentListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"public class UniqueAppointmentListTest {"},{"lineNumber":8,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"        UniqueAppointmentList uniquePersonList \u003d new UniqueAppointmentList();"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        uniquePersonList.asObservableList().remove(0);"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":4,"-":13}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"    // Reused from https://github.com/se-edu/addressbook-level4/pull/790/files with minor modifications"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"    public void removeUnusedTag_addressBookUnchanged() throws Exception {"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"        AddressBook addressBookAmyBob \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"        addressBookAmyBob.removeTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"        AddressBook addressBookExpected \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"        //should be equal as unused tag removed"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"        assertEquals(addressBookExpected, addressBookAmyBob);"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"    // Reused from https://github.com/se-edu/addressbook-level4/pull/790/files with minor modifications"},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"    public void removeTag_multiplePersons_addressBookChanged() throws Exception {"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":"        AddressBook addressBookAmyBob \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":"        addressBookAmyBob.removeTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"        AddressBook addressBookAfterChange \u003d"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":"                new AddressBookBuilder().withPerson(amyWithoutFriendTag).withPerson(bobWithoutFriendTag).build();"},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":"        assertEquals(addressBookAfterChange, addressBookAmyBob);"},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":111,"author":{"gitID":"chialejing"},"content":"        private final ObservableList\u003cPetPatient\u003e petPatients \u003d FXCollections.observableArrayList();"},{"lineNumber":112,"author":{"gitID":"chialejing"},"content":"        private final ObservableList\u003cTag\u003e petPatientTags \u003d FXCollections.observableArrayList();"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":129,"author":{"gitID":"chialejing"},"content":"        @Override"},{"lineNumber":130,"author":{"gitID":"chialejing"},"content":"        public ObservableList\u003cPetPatient\u003e getPetPatientList() {"},{"lineNumber":131,"author":{"gitID":"chialejing"},"content":"            return petPatients;"},{"lineNumber":132,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":134,"author":{"gitID":"chialejing"},"content":"        @Override"},{"lineNumber":135,"author":{"gitID":"chialejing"},"content":"        public ObservableList\u003cTag\u003e getPetPatientTagList() {"},{"lineNumber":136,"author":{"gitID":"chialejing"},"content":"            return petPatientTags;"},{"lineNumber":137,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":13,"wynonaK":32,"-":95}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"    // Reused from https://github.com/se-edu/addressbook-level4/pull/790/files with minor modifications"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"    public void deleteUnusedTag_modelUnchanged() throws Exception {"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"        //unused tag removed, should remain the same"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":"    // Reused from https://github.com/se-edu/addressbook-level4/pull/790/files with minor modifications"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":"    public void deleteTag_multiplePersons_modelChanged() throws Exception {"},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"        AddressBook addressBookAfterChange \u003d"},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"                new AddressBookBuilder().withPerson(amyWithoutFriendTag).withPerson(bobWithoutFriendTag).build();"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"        ModelManager modelManagerAfterChange \u003d new ModelManager(addressBookAfterChange, userPrefs);"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"        assertTrue(modelManager.equals(modelManagerAfterChange));"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":30,"-":75}},{"path":"src/test/java/seedu/address/model/petpatient/PetPatientNameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.model.petpatient;"},{"lineNumber":2,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":3,"author":{"gitID":"chialejing"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"chialejing"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":"public class PetPatientNameTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new PetPatientName(null));"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new PetPatientName(invalidName));"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"    public void isValidName() {"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"        // null name"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e PetPatientName.isValidName(null));"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"        // invalid name"},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"        assertFalse(PetPatientName.isValidName(\"\")); // empty string"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"        assertFalse(PetPatientName.isValidName(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"        assertFalse(PetPatientName.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"        assertFalse(PetPatientName.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"        // valid name"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"        assertTrue(PetPatientName.isValidName(\"joker the second\")); // alphabets only"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"        assertTrue(PetPatientName.isValidName(\"12345\")); // numbers only"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"        assertTrue(PetPatientName.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"        assertTrue(PetPatientName.isValidName(\"Aye Captain\")); // with capital letters"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"        assertTrue(PetPatientName.isValidName(\"Aye Captain Howdy There Jr 2nd\")); // long names"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":28,"-":12}},{"path":"src/test/java/seedu/address/testutil/TypicalPetPatients.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":4,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code PetPatient} objects to be used in tests."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class TypicalPetPatients {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final PetPatient JOKER \u003d new PetPatient(new PetPatientName(\"joker\"), \"cat\","},{"lineNumber":12,"author":{"gitID":"-"},"content":"            \"domestic shorthair\", \"brown and white\", \"O\", TypicalPersons.BOB, null);"},{"lineNumber":13,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":2,"-":11}},{"path":"src/test/java/seedu/address/testutil/AppointmentUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_OWNER;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":" * A utility class for Appointment."},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":"public class AppointmentUtil {"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"     * Returns an add appointment command string for adding the {@code appointment}."},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"    public static String getAddAppointmentCommand(Appointment appointment) {"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"        return AddAppointmentCommand.COMMAND_WORD + \" \" + getAppointmentDetails(appointment);"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"     * Returns an add appointment command string for adding the {@code appointment}."},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"    public static String getAddAppointmentCommandAlias(Appointment appointment) {"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"        return AddAppointmentCommand.COMMAND_ALIAS + \" \" + getAppointmentDetails(appointment);"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"     * Returns the part of command string for the given {@code appointment}\u0027s details."},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"    public static String getAppointmentDetails(Appointment appointment) {"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_OWNER + appointment.getOwner().getName().toString() + \" \");"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"        sb.append(PREFIX_REMARK + appointment.getRemark().value + \" \");"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"        sb.append(PREFIX_DATE + appointment.getFormattedLocalDateTime() + \" \");"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"        appointment.getType().stream().forEach("},{"lineNumber":38,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":35,"-":7}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"//import com.calendarfx.view.CalendarView;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ChangeThemeRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private CalendarWindow calendarWindow;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    //private BrowserPanel browserPanel;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private StackPane calendarPlaceholder;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":96,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":97,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":98,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":99,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":100,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":101,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":102,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":103,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":104,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":105,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":106,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":107,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":108,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":109,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        //browserPanel \u003d new BrowserPanel();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        calendarWindow \u003d new CalendarWindow(logic.getFilteredPersonList());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        this.calendarPlaceholder.getChildren().add(calendarWindow.getRoot());"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /*void releaseResources() {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }*/"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"Aquarinte"},"content":"    //@@author aquarinte"},{"lineNumber":204,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"Aquarinte"},"content":"     * Change the theme of the application"},{"lineNumber":206,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":208,"author":{"gitID":"Aquarinte"},"content":"    @Subscribe"},{"lineNumber":209,"author":{"gitID":"Aquarinte"},"content":"    public void handleChangeThemeEvent(ChangeThemeRequestEvent event) {"},{"lineNumber":210,"author":{"gitID":"Aquarinte"},"content":"        String style \u003d this.getClass().getResource(event.theme.getThemePath()).toExternalForm();"},{"lineNumber":211,"author":{"gitID":"Aquarinte"},"content":"        if (!isCurrentStyleSheet(style)) {"},{"lineNumber":212,"author":{"gitID":"Aquarinte"},"content":"            changeStyleSheet(style);"},{"lineNumber":213,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":216,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"Aquarinte"},"content":"     * Returns true if none of the current stylesheets contains {@code String} theme"},{"lineNumber":218,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"Aquarinte"},"content":"    public Boolean isCurrentStyleSheet(String theme) {"},{"lineNumber":220,"author":{"gitID":"Aquarinte"},"content":"        if (getRoot().getScene().getStylesheets().contains(theme)) {"},{"lineNumber":221,"author":{"gitID":"Aquarinte"},"content":"            return true;"},{"lineNumber":222,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"Aquarinte"},"content":"        return false;"},{"lineNumber":224,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":226,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"Aquarinte"},"content":"     * Removes all existing stylesheets and add the given {@code String} theme to style sheets"},{"lineNumber":228,"author":{"gitID":"Aquarinte"},"content":"     * Re-add Extensions.css to style sheets."},{"lineNumber":229,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"Aquarinte"},"content":"    public void changeStyleSheet(String theme) {"},{"lineNumber":231,"author":{"gitID":"Aquarinte"},"content":"        String extensions \u003d this.getClass().getResource(\"/view/Extensions.css\").toExternalForm();"},{"lineNumber":232,"author":{"gitID":"Aquarinte"},"content":"        getRoot().getScene().getStylesheets().clear(); //removes all style sheets"},{"lineNumber":233,"author":{"gitID":"Aquarinte"},"content":"        getRoot().getScene().getStylesheets().add(theme);"},{"lineNumber":234,"author":{"gitID":"Aquarinte"},"content":"        getRoot().getScene().getStylesheets().add(extensions); //re-add Extensions.css"},{"lineNumber":235,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":34,"-":202}},{"path":"src/test/java/seedu/address/testutil/AppointmentBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"wynonaK"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Remark;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":" * A utility class to help with building Appointment Objects."},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"public class AppointmentBuilder {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final Person DEFAULT_PERSON \u003d TypicalPersons.ALICE;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final PetPatient DEFAULT_PET_PATIENT \u003d TypicalPetPatients.JOKER;"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"    public static final String DEFAULT_REMARK \u003d \"Requires home visit\";"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"    public static final String DEFAULT_DATE \u003d \"2018-12-31 12:30\";"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"    public static final String DEFAULT_TYPE \u003d \"surgery\";"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Person owner;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private PetPatient petPatient;"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"    private Remark remark;"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"    private LocalDateTime localDateTime;"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"    private Set\u003cTag\u003e type;"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"    public AppointmentBuilder() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        owner \u003d DEFAULT_PERSON;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        petPatient \u003d DEFAULT_PET_PATIENT;"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"        remark \u003d new Remark(DEFAULT_REMARK);"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"        localDateTime \u003d LocalDateTime.parse(DEFAULT_DATE, formatter);"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"        type \u003d SampleDataUtil.getTagSet(DEFAULT_TYPE);"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"     * Initializes the AppointmentBuilder with the data of {@code appointmentToCopy}."},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"    public AppointmentBuilder(Appointment appointmentToCopy) {"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"        owner \u003d appointmentToCopy.getOwner();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        petPatient \u003d appointmentToCopy.getPetPatient();"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"        remark \u003d appointmentToCopy.getRemark();"},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"        localDateTime \u003d appointmentToCopy.getDateTime();"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"        type \u003d new HashSet\u003c\u003e(appointmentToCopy.getType());"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"     * Sets the {@code Name} of the {@code Appointment} that we are building."},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public AppointmentBuilder withOwner(Person owner) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.owner \u003d owner;"},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"        return this;"},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"     * Parses the {@code type} into a {@code Set\u003cTag\u003e} and set it to the {@code Appointment} that we are building."},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"    public AppointmentBuilder withTags(String ... type) {"},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"        this.type \u003d SampleDataUtil.getTagSet(type);"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"        return this;"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":"     * Sets the {@code Remark} of the {@code Appointment} that we are building."},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"    public AppointmentBuilder withRemark(String remark) {"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":"        this.remark \u003d new Remark(remark);"},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":"        return this;"},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"     * Sets the {@code DateTime} of the {@code Appointment} that we are building."},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"    public AppointmentBuilder withDateTime(String stringDateTime) {"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(stringDateTime, formatter);"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"        this.localDateTime \u003d dateTime;"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"        return this;"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"    public Appointment build() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return new Appointment(owner, petPatient, remark, localDateTime, type);"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"chialejing":1,"wynonaK":72,"-":15}},{"path":"src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/** Indicates the AddressBook in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"-"},"content":"public class AddressBookChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public final ReadOnlyAddressBook data;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"        return \"number of persons \" + data.getPersonList().size()"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"                + \", number of tags \" + data.getTagList().size()"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"                + \", number of pet patients \" + data.getPetPatientList().size()"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"                + \", number of pet patient tags \" + data.getPetPatientTagList().size();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":4,"-":18}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final Pattern ADD_COMMAND_FORMAT_OWNERONLY \u003d Pattern.compile(\"-(o)+(?\u003cownerInfo\u003e.*)\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final Pattern ADD_COMMAND_FORMAT_ALL_NEW \u003d Pattern.compile(\"-(o)+(?\u003cownerInfo\u003e.*)\""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + \"-(p)+(?\u003cpetInfo\u003e.*)-(a)+(?\u003capptInfo\u003e.*)\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final Pattern ADD_COMMAND_FORMAT_OWNER \u003d Pattern.compile(\"-(o)+(?\u003cownerInfo\u003e.*)-(p)+(?\u003cpetInfo\u003e.*)\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final Pattern ADD_COMMAND_FORMAT_PET \u003d Pattern.compile(\"-(p)+(?\u003cpetInfo\u003e.*)-(o)+(?\u003cownerNric\u003e.*)\");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final Pattern ADD_COMMAND_FORMAT_APPT \u003d Pattern.compile(\"-(a)+(?\u003capptInfo\u003e.*)-(o)(?\u003cownerNric\u003e.*)\""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + \"-(p)+(?\u003cpetName\u003e.*)\");"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the Person class"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * and returns an Person object."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Person parsePerson(String ownerInfo) throws ParseException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimapOwner \u003d"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(ownerInfo, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                        PREFIX_ADDRESS, PREFIX_NRIC, PREFIX_TAG);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimapOwner, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_NRIC)"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                || !argMultimapOwner.getPreamble().isEmpty()) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            Name ownerName \u003d ParserUtil.parseName(argMultimapOwner.getValue(PREFIX_NAME)).get();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimapOwner.getValue(PREFIX_PHONE)).get();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimapOwner.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimapOwner.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            Nric nric \u003d ParserUtil.parseNric(argMultimapOwner.getValue(PREFIX_NRIC)).get();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e ownerTagList \u003d ParserUtil.parseTags(argMultimapOwner.getAllValues(PREFIX_TAG));"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"            Person owner \u003d new Person(ownerName, phone, email, address, nric, ownerTagList);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return owner;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of AddCommand"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public AddCommand parseNewOwnerPetAppt(String ownerInfo, String petInfo, String apptInfo)"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            throws ParseException {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        System.out.println(\"I AM PARSING 3 NOW\");"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Person owner \u003d parsePerson(ownerInfo);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        PetPatient petPatient \u003d new AddPetPatientCommandParser().parse(petInfo, owner);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Appointment appt \u003d new AddAppointmentCommandParser().parse(apptInfo, owner, petPatient);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return new AddCommand(owner, petPatient, appt);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of AddCommand"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public AddCommand parseNewOwnerAndPet(String ownerInfo, String petInfo) throws ParseException {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Person owner \u003d parsePerson(ownerInfo);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        PetPatient petPatient \u003d new AddPetPatientCommandParser().parse(petInfo, owner);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return new AddCommand(owner, petPatient);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of AddCommand"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public AddCommand parseNewOwnerOnly(String ownerInfo) throws ParseException {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Person owner \u003d parsePerson(ownerInfo);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return new AddCommand(owner);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of AddCommand"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        Matcher matcher \u003d ADD_COMMAND_FORMAT_ALL_NEW.matcher(trimmedArgs);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        if (matcher.matches()) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            String ownerInfo \u003d matcher.group(\"ownerInfo\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            String petInfo \u003d matcher.group(\"petInfo\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            String apptInfo \u003d matcher.group(\"apptInfo\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            return parseNewOwnerPetAppt(ownerInfo, petInfo, apptInfo);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        matcher \u003d ADD_COMMAND_FORMAT_OWNER.matcher(trimmedArgs);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        if (matcher.matches()) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            String ownerInfo \u003d matcher.group(\"ownerInfo\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            String petInfo \u003d matcher.group(\"petInfo\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            return parseNewOwnerAndPet(ownerInfo, petInfo);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        matcher \u003d ADD_COMMAND_FORMAT_PET.matcher(trimmedArgs);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        if (matcher.matches()) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            String petInfo \u003d matcher.group(\"petInfo\");"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            String ownerNric \u003d matcher.group(\"ownerNric\");"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            //return new AddPetPatientCommandParser().parse(petInfo, ownerNric);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        matcher \u003d ADD_COMMAND_FORMAT_OWNERONLY.matcher(trimmedArgs);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        if (matcher.matches()) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            String ownerInfo \u003d matcher.group(\"ownerInfo\");"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            return parseNewOwnerOnly(ownerInfo);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":1,"wynonaK":1,"-":153}},{"path":"src/main/java/seedu/address/commons/events/ui/ChangeThemeRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.theme.Theme;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Aquarinte"},"content":"//@@author aquarinte"},{"lineNumber":7,"author":{"gitID":"Aquarinte"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"Aquarinte"},"content":" * Indicates a request to change Medeina\u0027s theme"},{"lineNumber":9,"author":{"gitID":"Aquarinte"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Aquarinte"},"content":"public class ChangeThemeRequestEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"Aquarinte"},"content":"    public final Theme theme;"},{"lineNumber":12,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":13,"author":{"gitID":"Aquarinte"},"content":"    public ChangeThemeRequestEvent(Theme theme) {"},{"lineNumber":14,"author":{"gitID":"Aquarinte"},"content":"        this.theme \u003d theme;"},{"lineNumber":15,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":17,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"Aquarinte"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"Aquarinte"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":16,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"nr/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"    public static final Prefix PREFIX_OWNER \u003d new Prefix(\"o/\");"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"    public static final Prefix PREFIX_PET_PATIENT_SPECIES \u003d new Prefix(\"s/\");"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"    public static final Prefix PREFIX_PET_PATIENT_BREED \u003d new Prefix(\"b/\");"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"    public static final Prefix PREFIX_PET_PATIENT_COLOUR \u003d new Prefix(\"c/\");"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"    public static final Prefix PREFIX_PET_PATIENT_BLOODTYPE \u003d new Prefix(\"bt/\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":4,"wynonaK":3,"-":16}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Remark;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"//import seedu.address.model.person.NRIC;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":28,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"wynonaK"},"content":"     * Parses a {@code String remark} into an {@code Remark}."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":129,"author":{"gitID":"wynonaK"},"content":"     * @throws IllegalValueException if the given {@code remark} is invalid."},{"lineNumber":130,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"wynonaK"},"content":"    public static Remark parseRemark(String remark) throws IllegalValueException {"},{"lineNumber":132,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(remark);"},{"lineNumber":133,"author":{"gitID":"wynonaK"},"content":"        String trimmedRemark \u003d remark.trim();"},{"lineNumber":134,"author":{"gitID":"wynonaK"},"content":"        if (!Remark.isValidRemark(trimmedRemark)) {"},{"lineNumber":135,"author":{"gitID":"wynonaK"},"content":"            throw new IllegalValueException(Remark.MESSAGE_REMARK_CONSTRAINTS);"},{"lineNumber":136,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"wynonaK"},"content":"        return new Remark(trimmedRemark);"},{"lineNumber":138,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":140,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"wynonaK"},"content":"     * Parses a {@code Optional\u003cString\u003e remark} into an {@code Optional\u003cRemark\u003e} if {@code remark} is present."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"wynonaK"},"content":"    public static Optional\u003cRemark\u003e parseRemark(Optional\u003cString\u003e remark) throws IllegalValueException {"},{"lineNumber":145,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(remark);"},{"lineNumber":146,"author":{"gitID":"wynonaK"},"content":"        return remark.isPresent() ? Optional.of(parseRemark(remark.get())) : Optional.empty();"},{"lineNumber":147,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":149,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"wynonaK"},"content":"     * Parses a {@code String dateTime} into an {@code LocalDateTime} object."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":153,"author":{"gitID":"wynonaK"},"content":"     * @throws IllegalValueException if the given {@code dateTime} is invalid."},{"lineNumber":154,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"wynonaK"},"content":"    public static LocalDateTime parseDateTime(String dateTime) throws IllegalValueException {"},{"lineNumber":156,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(dateTime);"},{"lineNumber":157,"author":{"gitID":"wynonaK"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":158,"author":{"gitID":"wynonaK"},"content":"        LocalDateTime localDateTime \u003d null;"},{"lineNumber":159,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":160,"author":{"gitID":"wynonaK"},"content":"            localDateTime \u003d LocalDateTime.parse(dateTime, formatter);"},{"lineNumber":161,"author":{"gitID":"wynonaK"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":162,"author":{"gitID":"wynonaK"},"content":"            throw new IllegalValueException(\"Please follow the format of yyyy-MM-dd HH:mm\");"},{"lineNumber":163,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"wynonaK"},"content":"        return localDateTime;"},{"lineNumber":165,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":167,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"wynonaK"},"content":"     * Parses {@code Optional\u003cString\u003e dateTime} into an {@code Optional\u003cLocalDatetime\u003e} if {@code dateTime} is present."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"wynonaK"},"content":"    public static Optional\u003cLocalDateTime\u003e parseDateTime(Optional\u003cString\u003e dateTime) throws IllegalValueException {"},{"lineNumber":172,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(dateTime);"},{"lineNumber":173,"author":{"gitID":"wynonaK"},"content":"        return dateTime.isPresent() ? Optional.of(parseDateTime(dateTime.get())) : Optional.empty();"},{"lineNumber":174,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":181,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":194,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * Parses a {@code String nric} into a {@code NRIC}."},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * @param nric"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * @return"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    public static Nric parseNric(String nric) throws IllegalValueException {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        requireNonNull(nric);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        String trimmedNric \u003d nric.trim();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        if (!Nric.isValidNric(trimmedNric)) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Nric.MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        return new Nric(trimmedNric);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e nric} into an {@code Optional\u003cNRIC\u003e} if {@code nric} is present."},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * @param nric"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * @return"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    public static Optional\u003cNric\u003e parseNric(Optional\u003cString\u003e nric) throws IllegalValueException {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        requireNonNull(nric);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        return nric.isPresent() ? Optional.of(parseNric(nric.get())) : Optional.empty();"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":231,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":233,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":245,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":255,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":256,"author":{"gitID":"chialejing"},"content":"     * Parses a {@code String name} into a {@code PetPatientName}."},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":258,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":260,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":261,"author":{"gitID":"chialejing"},"content":"    public static PetPatientName parsePetPatientName(String name) throws IllegalValueException {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":264,"author":{"gitID":"chialejing"},"content":"        if (!PetPatientName.isValidName(trimmedName)) {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":267,"author":{"gitID":"chialejing"},"content":"        return new PetPatientName(trimmedName);"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":273,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"chialejing"},"content":"    public static Optional\u003cPetPatientName\u003e parsePetPatientName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":275,"author":{"gitID":"chialejing"},"content":"        requireNonNull(name);"},{"lineNumber":276,"author":{"gitID":"chialejing"},"content":"        return name.isPresent() ? Optional.of(parsePetPatientName(name.get())) : Optional.empty();"},{"lineNumber":277,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":279,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":280,"author":{"gitID":"chialejing"},"content":"     * Parses a {@code String species} into a {@code String}."},{"lineNumber":281,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":282,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":283,"author":{"gitID":"chialejing"},"content":"    public static String parseSpecies(String species) {"},{"lineNumber":284,"author":{"gitID":"chialejing"},"content":"        requireNonNull(species);"},{"lineNumber":285,"author":{"gitID":"chialejing"},"content":"        String trimmedSpecies \u003d species.trim();"},{"lineNumber":286,"author":{"gitID":"chialejing"},"content":"        // check for valid species incomplete"},{"lineNumber":287,"author":{"gitID":"chialejing"},"content":"        return trimmedSpecies;"},{"lineNumber":288,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":290,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":291,"author":{"gitID":"chialejing"},"content":"     * Parses a {@code Optional\u003cString\u003e species} into an {@code Optional\u003cString\u003e} if {@code species} is present."},{"lineNumber":292,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":293,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":294,"author":{"gitID":"chialejing"},"content":"    public static Optional\u003cString\u003e parseSpecies(Optional\u003cString\u003e species) throws IllegalValueException {"},{"lineNumber":295,"author":{"gitID":"chialejing"},"content":"        requireNonNull(species);"},{"lineNumber":296,"author":{"gitID":"chialejing"},"content":"        return species.isPresent() ? Optional.of(parseSpecies(species.get())) : Optional.empty();"},{"lineNumber":297,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":298,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":299,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":300,"author":{"gitID":"chialejing"},"content":"     * Parses a {@code String breed} into a {@code String}."},{"lineNumber":301,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":302,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":303,"author":{"gitID":"chialejing"},"content":"    public static String parseBreed(String breed) {"},{"lineNumber":304,"author":{"gitID":"chialejing"},"content":"        requireNonNull(breed);"},{"lineNumber":305,"author":{"gitID":"chialejing"},"content":"        String trimmedBreed \u003d breed.trim();"},{"lineNumber":306,"author":{"gitID":"chialejing"},"content":"        // check for valid breed incomplete"},{"lineNumber":307,"author":{"gitID":"chialejing"},"content":"        return trimmedBreed;"},{"lineNumber":308,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":309,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":310,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":311,"author":{"gitID":"chialejing"},"content":"     * Parses a {@code Optional\u003cString\u003e breed} into an {@code Optional\u003cString\u003e} if {@code breed} is present."},{"lineNumber":312,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":313,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":314,"author":{"gitID":"chialejing"},"content":"    public static Optional\u003cString\u003e parseBreed(Optional\u003cString\u003e breed) throws IllegalValueException {"},{"lineNumber":315,"author":{"gitID":"chialejing"},"content":"        requireNonNull(breed);"},{"lineNumber":316,"author":{"gitID":"chialejing"},"content":"        return breed.isPresent() ? Optional.of(parseBreed(breed.get())) : Optional.empty();"},{"lineNumber":317,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":318,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":319,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":320,"author":{"gitID":"chialejing"},"content":"     * Parses a {@code String colour} into a {@code String}."},{"lineNumber":321,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":322,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":323,"author":{"gitID":"chialejing"},"content":"    public static String parseColour(String colour) {"},{"lineNumber":324,"author":{"gitID":"chialejing"},"content":"        requireNonNull(colour);"},{"lineNumber":325,"author":{"gitID":"chialejing"},"content":"        String trimmedColour \u003d colour.trim();"},{"lineNumber":326,"author":{"gitID":"chialejing"},"content":"        // check for valid colour incomplete"},{"lineNumber":327,"author":{"gitID":"chialejing"},"content":"        return trimmedColour;"},{"lineNumber":328,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":329,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":330,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":331,"author":{"gitID":"chialejing"},"content":"     * Parses a {@code Optional\u003cString\u003e colour} into an {@code Optional\u003cString\u003e} if {@code colour} is present."},{"lineNumber":332,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":333,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":334,"author":{"gitID":"chialejing"},"content":"    public static Optional\u003cString\u003e parseColour(Optional\u003cString\u003e colour) throws IllegalValueException {"},{"lineNumber":335,"author":{"gitID":"chialejing"},"content":"        requireNonNull(colour);"},{"lineNumber":336,"author":{"gitID":"chialejing"},"content":"        return colour.isPresent() ? Optional.of(parseColour(colour.get())) : Optional.empty();"},{"lineNumber":337,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":338,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":339,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":340,"author":{"gitID":"chialejing"},"content":"     * Parses a {@code String bloodType} into a {@code String}."},{"lineNumber":341,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":342,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":343,"author":{"gitID":"chialejing"},"content":"    public static String parseBloodType(String bloodType) {"},{"lineNumber":344,"author":{"gitID":"chialejing"},"content":"        requireNonNull(bloodType);"},{"lineNumber":345,"author":{"gitID":"chialejing"},"content":"        String trimmedBloodType \u003d bloodType.trim();"},{"lineNumber":346,"author":{"gitID":"chialejing"},"content":"        // check for valid blood type incomplete"},{"lineNumber":347,"author":{"gitID":"chialejing"},"content":"        return trimmedBloodType;"},{"lineNumber":348,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":349,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":350,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":351,"author":{"gitID":"chialejing"},"content":"     * Parses a {@code Optional\u003cString\u003e bloodType} into an {@code Optional\u003cString\u003e} if {@code bloodType} is present."},{"lineNumber":352,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":353,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":354,"author":{"gitID":"chialejing"},"content":"    public static Optional\u003cString\u003e parseBloodType(Optional\u003cString\u003e bloodType) throws IllegalValueException {"},{"lineNumber":355,"author":{"gitID":"chialejing"},"content":"        requireNonNull(bloodType);"},{"lineNumber":356,"author":{"gitID":"chialejing"},"content":"        return bloodType.isPresent() ? Optional.of(parseBloodType(bloodType.get())) : Optional.empty();"},{"lineNumber":357,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":358,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":79,"wynonaK":47,"-":232}},{"path":"src/main/java/seedu/address/logic/commands/ChangeThemeCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ChangeThemeRequestEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.theme.Theme;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Aquarinte"},"content":"//@@author aquarinte"},{"lineNumber":10,"author":{"gitID":"Aquarinte"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Aquarinte"},"content":" * Change the theme of Medeina"},{"lineNumber":12,"author":{"gitID":"Aquarinte"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Aquarinte"},"content":"public class ChangeThemeCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"Aquarinte"},"content":"    public static final String COMMAND_WORD \u003d \"theme\";"},{"lineNumber":15,"author":{"gitID":"Aquarinte"},"content":"    public static final String COMMAND_ALIAS \u003d \"t\";"},{"lineNumber":16,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":17,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Change Medeina\u0027s theme to the\""},{"lineNumber":18,"author":{"gitID":"Aquarinte"},"content":"            + \"specified theme name (case-insensitive)\\n\""},{"lineNumber":19,"author":{"gitID":"Aquarinte"},"content":"            + \"Parameters: THEME NAME\\n\""},{"lineNumber":20,"author":{"gitID":"Aquarinte"},"content":"            + \"Example: \" + COMMAND_WORD + \" light\";"},{"lineNumber":21,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":22,"author":{"gitID":"Aquarinte"},"content":"    private String result;"},{"lineNumber":23,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":24,"author":{"gitID":"Aquarinte"},"content":"    private final Theme theme;"},{"lineNumber":25,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":26,"author":{"gitID":"Aquarinte"},"content":"    public ChangeThemeCommand(Theme theme) {"},{"lineNumber":27,"author":{"gitID":"Aquarinte"},"content":"        requireNonNull(theme);"},{"lineNumber":28,"author":{"gitID":"Aquarinte"},"content":"        this.theme \u003d theme;"},{"lineNumber":29,"author":{"gitID":"Aquarinte"},"content":"        result \u003d \"Current theme: \" + theme.getThemeName();"},{"lineNumber":30,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":32,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"Aquarinte"},"content":"    public CommandResult execute() {"},{"lineNumber":34,"author":{"gitID":"Aquarinte"},"content":"        EventsCenter.getInstance().post(new ChangeThemeRequestEvent(theme));"},{"lineNumber":35,"author":{"gitID":"Aquarinte"},"content":"        return new CommandResult(result);"},{"lineNumber":36,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":38,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"Aquarinte"},"content":"    public boolean equals(Object other) {"},{"lineNumber":40,"author":{"gitID":"Aquarinte"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":41,"author":{"gitID":"Aquarinte"},"content":"                || (other instanceof ChangeThemeCommand // instanceof handles nulls"},{"lineNumber":42,"author":{"gitID":"Aquarinte"},"content":"                \u0026\u0026 theme.equals(((ChangeThemeCommand) other).theme));"},{"lineNumber":43,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":36,"-":8}},{"path":"src/main/java/seedu/address/logic/parser/ChangeThemeCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.theme.Theme;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Aquarinte"},"content":"//@@author aquarinte"},{"lineNumber":10,"author":{"gitID":"Aquarinte"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Aquarinte"},"content":" * Parses input arguments and creates a new ChangeThemeCommand object"},{"lineNumber":12,"author":{"gitID":"Aquarinte"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Aquarinte"},"content":"public class ChangeThemeCommandParser implements Parser\u003cChangeThemeCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":15,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"Aquarinte"},"content":"     * Parses the given {@code String} of arguments in the context of the ChangeThemeCommand"},{"lineNumber":17,"author":{"gitID":"Aquarinte"},"content":"     * and returns a ChangeThemeCommand object for execution."},{"lineNumber":18,"author":{"gitID":"Aquarinte"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"Aquarinte"},"content":"    public ChangeThemeCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"Aquarinte"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"Aquarinte"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"Aquarinte"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"Aquarinte"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeThemeCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":28,"author":{"gitID":"Aquarinte"},"content":"        String[] splitArgs \u003d trimmedArgs.split(\" \");"},{"lineNumber":29,"author":{"gitID":"Aquarinte"},"content":"        if (splitArgs.length \u003e 1) {"},{"lineNumber":30,"author":{"gitID":"Aquarinte"},"content":"            throw new ParseException("},{"lineNumber":31,"author":{"gitID":"Aquarinte"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeThemeCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":34,"author":{"gitID":"Aquarinte"},"content":"        if (!Theme.isValidThemeName(splitArgs[0].toLowerCase())) {"},{"lineNumber":35,"author":{"gitID":"Aquarinte"},"content":"            throw new ParseException(Theme.MESSAGE_THEME_CONSTRAINTS);"},{"lineNumber":36,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":38,"author":{"gitID":"Aquarinte"},"content":"        return new ChangeThemeCommand(new Theme(splitArgs[0].toLowerCase()));"},{"lineNumber":39,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":41,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":33,"-":8}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" -o : Adds a person to the address book. \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_NRIC + \"NRIC \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_NRIC + \"S1234567Q \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\\n\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private Person toAddOwner;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private PetPatient toAddPet;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private Appointment toAddAppt;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private String message \u003d \"New person added: %1$s\\n\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person} and {@code PetPatient} and {@code Appointment}"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public AddCommand(Person owner, PetPatient pet, Appointment appt) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        requireNonNull(owner);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        requireNonNull(pet);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        requireNonNull(appt);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        toAddOwner \u003d owner;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        toAddPet \u003d pet;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        toAddAppt \u003d appt;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        message +\u003d \"New pet patient added: \" + toAddPet.toString()"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                + \"\\nNew appointment made: \" + toAddAppt.toString();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        System.out.println(\"ADDED ALL THREE\");"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person} and {@code PetPatient}"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public AddCommand(Person owner, PetPatient pet) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        requireNonNull(owner);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        requireNonNull(pet);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        toAddOwner \u003d owner;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        toAddPet \u003d pet;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        message +\u003d \"New pet patient added: \" + toAddPet.toString();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":76,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"chialejing"},"content":"     * Creates an AddCommand to add the specified {@code PetPatient}"},{"lineNumber":78,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public AddCommand(PetPatient pet) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        requireNonNull(pet);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        toAddPet \u003d pet;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public AddCommand(Person owner) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        requireNonNull(owner);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        toAddOwner \u003d owner;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public String getMessage() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return message;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            model.addPerson(toAddOwner);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(message, toAddOwner));"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAddOwner.equals(((AddCommand) other).toAddOwner));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":5,"wynonaK":1,"-":108}},{"path":"src/main/java/seedu/address/logic/parser/AddPetPatientCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_PATIENT_BLOODTYPE;"},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_PATIENT_BREED;"},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_PATIENT_COLOUR;"},{"lineNumber":8,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_PATIENT_SPECIES;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"import seedu.address.logic.commands.AddPetPatientCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":" * Parses input arguments and creates a new AddPetPatientCommand object"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class AddPetPatientCommandParser {"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the PetPatient class"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * and returns an PetPatient object."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public PetPatient parse(String petInfo, Person owner) throws ParseException {"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"                ArgumentTokenizer.tokenize("},{"lineNumber":34,"author":{"gitID":"-"},"content":"                        petInfo,"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                        PREFIX_NAME,"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"                        PREFIX_PET_PATIENT_SPECIES,"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"                        PREFIX_PET_PATIENT_BREED,"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"                        PREFIX_PET_PATIENT_COLOUR,"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"                        PREFIX_PET_PATIENT_BLOODTYPE,"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"                        PREFIX_TAG);"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":"        if (!arePrefixesPresent("},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":"                argMultimap,"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                PREFIX_NAME,"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"                PREFIX_PET_PATIENT_BREED,"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"                PREFIX_PET_PATIENT_SPECIES,"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":"                PREFIX_PET_PATIENT_COLOUR,"},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"                PREFIX_PET_PATIENT_BLOODTYPE)"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPetPatientCommand.MESSAGE_USAGE));"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            PetPatientName name \u003d ParserUtil.parsePetPatientName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"            String species \u003d ParserUtil.parseSpecies(argMultimap.getValue(PREFIX_PET_PATIENT_SPECIES)).get();"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":"            String breed \u003d ParserUtil.parseBreed(argMultimap.getValue(PREFIX_PET_PATIENT_BREED)).get();"},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"            String color \u003d ParserUtil.parseColour(argMultimap.getValue(PREFIX_PET_PATIENT_COLOUR)).get();"},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":"            String bloodType \u003d ParserUtil.parseBloodType(argMultimap.getValue(PREFIX_PET_PATIENT_BLOODTYPE)).get();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"            PetPatient petPatient \u003d new PetPatient(name, species, breed, color, bloodType, owner, tagList);"},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return petPatient;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":38,"-":38}},{"path":"src/main/java/seedu/address/logic/parser/AddAppointmentCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Remark;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":" * Parses input arguments and creates a new AddAppointmentCommand object"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class AddAppointmentCommandParser {"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the Appointment class"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * and returns an Appointment object."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public Appointment parse(String args, Person owner, PetPatient pet) throws ParseException {"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_REMARK, PREFIX_TAG);"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_REMARK, PREFIX_TAG)"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"            throw new ParseException("},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":"            LocalDateTime localDateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATE)).get();"},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"            Remark remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK)).get();"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"            Set\u003cTag\u003e type \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            Appointment appointment \u003d new Appointment(owner, pet, remark, localDateTime, type);"},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return appointment;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent (ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"chialejing":1,"wynonaK":27,"-":33}},{"path":"src/main/java/seedu/address/logic/commands/AddPetPatientCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_PATIENT_BLOODTYPE;"},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_PATIENT_BREED;"},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_PATIENT_COLOUR;"},{"lineNumber":8,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_PATIENT_SPECIES;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.exceptions.DuplicatePetPatientException;"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":" * Adds a pet patient to the address book."},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"public class AddPetPatientCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" -p : Adds a pet patient to the address book. \""},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"            + \"Parameters: \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"            + PREFIX_PET_PATIENT_SPECIES + \"SPECIES \""},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"            + PREFIX_PET_PATIENT_BREED + \"BREED \""},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"            + PREFIX_PET_PATIENT_COLOUR + \"COLOUR \""},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"            + PREFIX_PET_PATIENT_BLOODTYPE + \"BLOOD_TYPE \""},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"Jewel \""},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"            + PREFIX_PET_PATIENT_SPECIES + \"Cat \""},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"            + PREFIX_PET_PATIENT_BREED + \"Persian Ragdoll \""},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"            + PREFIX_PET_PATIENT_COLOUR + \"Calico \""},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"            + PREFIX_PET_PATIENT_BLOODTYPE + \"AB\";"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New pet patient added: %1$s\";"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_DUPLICATE_PET_PATIENT \u003d \"This pet patient already exists in the address book\";"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"    private final PetPatient toAddPetPatient;"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":"     * Creates an AddCommand to add the specified {@code PetPatient}"},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"    public AddPetPatientCommand(PetPatient petPatient) {"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"        requireNonNull(petPatient);"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":"        toAddPetPatient \u003d petPatient;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":"            model.addPetPatient(toAddPetPatient);"},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAddPetPatient));"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":"        } catch (DuplicatePetPatientException e) {"},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PET_PATIENT);"},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":65,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 toAddPetPatient.equals(((AddPetPatientCommand) other).toAddPetPatient));"},{"lineNumber":66,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":43,"-":24}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"chialejing"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":82,"author":{"gitID":"chialejing"},"content":"        addressBookStorage.backupAddressBook(addressBook);"},{"lineNumber":83,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":4,"-":92}},{"path":"src/main/java/seedu/address/storage/AddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface AddressBookStorage {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @see #getAddressBookFilePath()"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"     * Backups the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":"     * @throws IOException if there was any problem backing up the file."},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":6,"-":45}},{"path":"src/main/java/seedu/address/storage/XmlAddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorage implements AddressBookStorage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public XmlAddressBookStorage(String filePath) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return readAddressBook(filePath);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Similar to {@link #readAddressBook()}"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return Optional.of(xmlAddressBook.toModelType());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            logger.info(\"Illegal values found in \" + addressBookFile + \": \" + ive.getMessage());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"chialejing"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":84,"author":{"gitID":"chialejing"},"content":"        String backupFilePath \u003d filePath + \".backup\";"},{"lineNumber":85,"author":{"gitID":"chialejing"},"content":"        saveAddressBook(addressBook, backupFilePath);"},{"lineNumber":86,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":6,"-":82}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"    private List\u003cXmlAdaptedPetPatient\u003e petPatients;"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"    @XmlElement"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"    private List\u003cXmlAdaptedTag\u003e petPatientTags;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"        petPatients \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"        petPatientTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new)"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new)"},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"        petPatients.addAll(src.getPetPatientList().stream().map(XmlAdaptedPetPatient::new)"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"        petPatientTags.addAll(src.getPetPatientTagList().stream().map(XmlAdaptedTag::new)"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"chialejing"},"content":"        for (XmlAdaptedPetPatient pp : petPatients) {"},{"lineNumber":70,"author":{"gitID":"chialejing"},"content":"            addressBook.addPetPatient(pp.toModelType());"},{"lineNumber":71,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"chialejing"},"content":"        for (XmlAdaptedTag pt : petPatientTags) {"},{"lineNumber":73,"author":{"gitID":"chialejing"},"content":"            addressBook.addPetPatientTag(pt.toModelType());"},{"lineNumber":74,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":89,"author":{"gitID":"chialejing"},"content":"        return persons.equals(otherAb.persons)"},{"lineNumber":90,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 tags.equals(otherAb.tags)"},{"lineNumber":91,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 petPatients.equals(otherAb.petPatients)"},{"lineNumber":92,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 petPatientTags.equals(otherAb.petPatientTags);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":24,"-":70}},{"path":"src/main/java/seedu/address/logic/commands/AddAppointmentCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":" * Adds an appointment."},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"public class AddAppointmentCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" -a : Adds an appointment. \""},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"            + \"Parameters: \""},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"            + PREFIX_DATE + \"DATE \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + PREFIX_REMARK + \"REMARK \""},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"            + \"[\" + PREFIX_TAG + \"TYPE OF APPOINTMENT]...\\n\""},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"            + PREFIX_DATE + \"2018-12-31 12:30 \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_REMARK + \"nil \""},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"            + PREFIX_TAG + \"checkup \""},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"            + PREFIX_TAG + \"vaccination\";"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New appointment added: %1$s\";"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"This particular appointment already exists\";"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"    private final Appointment toAdd;"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"     * Creates an AddAppointmentCommand to add the specified {@code Appointment}"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"    public AddAppointmentCommand(Appointment appointment) {"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(appointment);"},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"        toAdd \u003d appointment;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"            model.addAppointment(toAdd);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"        } catch (DuplicateAppointmentException e) {"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"                || (other instanceof AddAppointmentCommand // instanceof handles nulls"},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 toAdd.equals(((AddAppointmentCommand) other).toAdd));"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":39,"-":23}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/DuplicateAppointmentException.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.model.appointment.exceptions;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":" * Signals that the operation will result in duplicate Appointment objects."},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"public class DuplicateAppointmentException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"    public DuplicateAppointmentException() {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"        super(\"Operation would result in duplicate persons\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":8,"-":4}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/AppointmentNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.model.appointment.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Signals that the operation is unable to find the specified person."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"public class AppointmentNotFoundException extends Exception {}"}],"authorContributionMap":{"wynonaK":2,"-":4}},{"path":"src/main/java/seedu/address/model/appointment/UniqueAppointmentList.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import java.util.Iterator;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":" * A list of appointments that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":" *"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":" * Supports a minimal set of list operations."},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":" *"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":" * @see Appointment#equals(Object)"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"public class UniqueAppointmentList implements Iterable\u003cAppointment\u003e {"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"    private final ObservableList\u003cAppointment\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"     * Returns true if the list contains an equivalent appointment as the given argument."},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"    public boolean contains(Appointment toCheck) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"     * Adds an appointment to the list."},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"     * @throws DuplicateAppointmentException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"    public void add(Appointment toAdd) throws DuplicateAppointmentException {"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(toAdd);"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"        if (contains(toAdd)) {"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"            throw new DuplicateAppointmentException();"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"        internalList.add(toAdd);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"    public ObservableList\u003cAppointment\u003e asObservableList() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":"    public Iterator\u003cAppointment\u003e iterator() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"                || (other instanceof UniqueAppointmentList // instanceof handles nulls"},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueAppointmentList) other).internalList));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":35,"-":31}},{"path":"src/main/java/seedu/address/model/appointment/Remark.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":" * Represents a Appointment\u0027s remarks."},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":" * Guarantees: is valid as declared in {@link #isValidRemark(String)}"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"public class Remark {"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_REMARK_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"            \"Remarks can take any values, and it should not be blank. Leave \\\"nil\\\" for no remarks.\";"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"     * The first character of the remark must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"    public static final String REMARK_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"     * Constructs an {@code Remark}."},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"     * @param remark A valid address."},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"    public Remark(String remark) {"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(remark);"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"        checkArgument(isValidRemark(remark), MESSAGE_REMARK_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"        this.value \u003d remark;"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"     * Returns true if a given string is a valid remark."},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"    public static boolean isValidRemark(String test) {"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"        return test.matches(REMARK_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"                || (other instanceof Remark // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 this.value.equals(((Remark) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":36,"-":22}},{"path":"src/main/java/seedu/address/model/appointment/Appointment.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":" * Represents an Appointment."},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":" * Guarantees: details are present and not null, field values are validated."},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"public class Appointment {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Person owner; //owner of the appointment"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final PetPatient pet;"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"    private Remark remark; //remarks"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"    private LocalDateTime localDateTime; //date of appointment"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"    private final UniqueTagList type; //type of appointment"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"     * Every field must be present and not null."},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public Appointment(Person owner, PetPatient pet, Remark remark, LocalDateTime localDateTime, Set\u003cTag\u003e type) {"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"        requireAllNonNull(owner, remark, localDateTime, type);"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"        this.owner \u003d owner;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.pet \u003d pet;"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"        this.remark \u003d remark;"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"        this.localDateTime \u003d localDateTime;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"        this.type \u003d new UniqueTagList(type);"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public Person getOwner() {"},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":"        return owner;"},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public PetPatient getPetPatient() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return pet;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"    public Remark getRemark() {"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"        return remark;"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":"    public LocalDateTime getDateTime() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"        return localDateTime;"},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"    public String getFormattedLocalDateTime() {"},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"        return localDateTime.format(formatter);"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"    public Set\u003cTag\u003e getType() {"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"        return Collections.unmodifiableSet(type.toSet());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"        if (!(other instanceof Appointment)) {"},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"            return false;"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"        Appointment otherAppointment \u003d (Appointment) other;"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"        return otherAppointment.getOwner().equals(this.getOwner())"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 otherAppointment.getRemark().equals(this.getRemark())"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 otherAppointment.getDateTime().equals(this.getDateTime());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":"        return Objects.hash(owner, remark, localDateTime, type);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        builder.append(\"\\t\")"},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":"                .append(getFormattedLocalDateTime())"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                .append(\"\\tOwner: \")"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                .append(getOwner().getName().toString())"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                .append(\"\\tPet Patient: \")"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                .append(getPetPatient().getName().toString())"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                .append(\"\\tRemarks: \")"},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":"                .append(getRemark())"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                .append(\"\\tType(s): \");"},{"lineNumber":104,"author":{"gitID":"wynonaK"},"content":"        getType().forEach(builder::append);"},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":"        return builder.toString();"},{"lineNumber":106,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":108,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"chialejing":1,"wynonaK":61,"-":46}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":5,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"     * Returns an unmodifiable view of the pet patient list."},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"     * This list will not contain any duplicate pet patients."},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"    ObservableList\u003cPetPatient\u003e getPetPatientList();"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"     * Returns an unmodifiable view of the pet patient tags list."},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"     * This list will not contain any duplicate pet patient tags."},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"    ObservableList\u003cTag\u003e getPetPatientTagList();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":12,"-":24}},{"path":"src/main/java/seedu/address/model/petpatient/exceptions/PetPatientNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.model.petpatient.exceptions;"},{"lineNumber":2,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":3,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"chialejing"},"content":" * Signals that the operation is unable to find the specified pet patient."},{"lineNumber":5,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":"public class PetPatientNotFoundException extends Exception {"},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":7}},{"path":"src/main/java/seedu/address/model/petpatient/exceptions/DuplicatePetPatientException.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.model.petpatient.exceptions;"},{"lineNumber":2,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":5,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":" * Signals that the operation will result in duplicate PetPatient objects."},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":8,"author":{"gitID":"chialejing"},"content":"public class DuplicatePetPatientException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"chialejing"},"content":"    public DuplicatePetPatientException() {"},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":"        super(\"Operation would result in duplicate pet patients\");"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":11,"-":1}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.UniquePetPatientList;"},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.exceptions.DuplicatePetPatientException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"    private final UniqueAppointmentList appointments;"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"    private final UniquePetPatientList petPatients;"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"    private final UniqueTagList petPatientTags;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":40,"author":{"gitID":"-"},"content":"         * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":41,"author":{"gitID":"-"},"content":"         * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":42,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":43,"author":{"gitID":"-"},"content":"         * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        *   among constructors."},{"lineNumber":45,"author":{"gitID":"-"},"content":"        */ {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"        appointments \u003d new UniqueAppointmentList();"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"        petPatients \u003d new UniquePetPatientList();"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"        petPatientTags \u003d new UniqueTagList();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public AddressBook() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"chialejing"},"content":"    public void setPetPatients(List\u003cPetPatient\u003e petPatients) throws DuplicatePetPatientException {"},{"lineNumber":75,"author":{"gitID":"chialejing"},"content":"        this.petPatients.setPetPatients(petPatients);"},{"lineNumber":76,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":78,"author":{"gitID":"chialejing"},"content":"    public void setPetPatientTags(Set\u003cTag\u003e petPatientTags) {"},{"lineNumber":79,"author":{"gitID":"chialejing"},"content":"        this.petPatientTags.setTags(petPatientTags);"},{"lineNumber":80,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":98,"author":{"gitID":"chialejing"},"content":"        setPetPatientTags(new HashSet\u003c\u003e(newData.getPetPatientTagList()));"},{"lineNumber":99,"author":{"gitID":"chialejing"},"content":"        List\u003cPetPatient\u003e syncedPetPatientList \u003d newData.getPetPatientList().stream()"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":104,"author":{"gitID":"chialejing"},"content":"            setPetPatients(syncedPetPatientList);"},{"lineNumber":105,"author":{"gitID":"chialejing"},"content":"        } catch (DuplicatePetPatientException e) {"},{"lineNumber":106,"author":{"gitID":"chialejing"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate pet patients\");"},{"lineNumber":107,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":124,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     *                                  another existing person in the list."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":144,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":145,"author":{"gitID":"wynonaK"},"content":"        removeUselessTags();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"wynonaK"},"content":"     * Adds an appointment."},{"lineNumber":150,"author":{"gitID":"wynonaK"},"content":"     * Also checks the new appointment\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":151,"author":{"gitID":"wynonaK"},"content":"     * and updates the Tag objects in the appointment to point to those in {@link #tags}."},{"lineNumber":152,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":153,"author":{"gitID":"wynonaK"},"content":"     * @throws DuplicateAppointmentException if an equivalent person already exists."},{"lineNumber":154,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"wynonaK"},"content":"    public void addAppointment(Appointment a) throws DuplicateAppointmentException {"},{"lineNumber":156,"author":{"gitID":"wynonaK"},"content":"        Appointment appointment \u003d syncWithAppointmentMasterTagList(a);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":158,"author":{"gitID":"wynonaK"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any appointment"},{"lineNumber":159,"author":{"gitID":"wynonaK"},"content":"        // in the appointment list."},{"lineNumber":160,"author":{"gitID":"wynonaK"},"content":"        appointments.add(appointment);"},{"lineNumber":161,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":163,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"wynonaK"},"content":"     * Removes all {@code tag}s not used by anyone in this {@code AddressBook}."},{"lineNumber":165,"author":{"gitID":"wynonaK"},"content":"     * Reused from https://github.com/se-edu/addressbook-level4/pull/790/files with minor modifications"},{"lineNumber":166,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"wynonaK"},"content":"    private void removeUselessTags() {"},{"lineNumber":168,"author":{"gitID":"wynonaK"},"content":"        Set\u003cTag\u003e personTags \u003d"},{"lineNumber":169,"author":{"gitID":"wynonaK"},"content":"                persons.asObservableList()"},{"lineNumber":170,"author":{"gitID":"wynonaK"},"content":"                        .stream()"},{"lineNumber":171,"author":{"gitID":"wynonaK"},"content":"                        .map(Person::getTags)"},{"lineNumber":172,"author":{"gitID":"wynonaK"},"content":"                        .flatMap(Set::stream)"},{"lineNumber":173,"author":{"gitID":"wynonaK"},"content":"                        .collect(Collectors.toSet());"},{"lineNumber":174,"author":{"gitID":"wynonaK"},"content":"        tags.setTags(personTags);"},{"lineNumber":175,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * list."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":193,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":196,"author":{"gitID":"-"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            person.getNric(), correctTagReferences);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":201,"author":{"gitID":"chialejing"},"content":"     * Updates the master tag list to include tags in {@code petPatient} that are not in the list."},{"lineNumber":202,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":203,"author":{"gitID":"chialejing"},"content":"     * @return a copy of this {@code petPatient} such that every tag in this pet patient points to a Tag object in the"},{"lineNumber":204,"author":{"gitID":"chialejing"},"content":"     * master list."},{"lineNumber":205,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"chialejing"},"content":"    private PetPatient syncWithMasterTagList (PetPatient petPatient) {"},{"lineNumber":207,"author":{"gitID":"chialejing"},"content":"        final UniqueTagList currentPetPatientTags \u003d new UniqueTagList(petPatient.getTags());"},{"lineNumber":208,"author":{"gitID":"chialejing"},"content":"        petPatientTags.mergeFrom(currentPetPatientTags);"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":216,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":217,"author":{"gitID":"chialejing"},"content":"        currentPetPatientTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":218,"author":{"gitID":"chialejing"},"content":"        return new PetPatient("},{"lineNumber":219,"author":{"gitID":"chialejing"},"content":"                petPatient.getName(),"},{"lineNumber":220,"author":{"gitID":"chialejing"},"content":"                petPatient.getSpecies(),"},{"lineNumber":221,"author":{"gitID":"chialejing"},"content":"                petPatient.getBreed(),"},{"lineNumber":222,"author":{"gitID":"chialejing"},"content":"                petPatient.getColour(),"},{"lineNumber":223,"author":{"gitID":"chialejing"},"content":"                petPatient.getBloodType(),"},{"lineNumber":224,"author":{"gitID":"-"},"content":"                petPatient.getOwner(),"},{"lineNumber":225,"author":{"gitID":"chialejing"},"content":"                correctTagReferences);"},{"lineNumber":226,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":229,"author":{"gitID":"wynonaK"},"content":"     * Updates the master tag list to include tags in {@code appointment} that are not in the list."},{"lineNumber":230,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":231,"author":{"gitID":"wynonaK"},"content":"     * @return a copy of this {@code appointment} such that every tag in this appointment"},{"lineNumber":232,"author":{"gitID":"wynonaK"},"content":"     * points to a Tag object in the master list."},{"lineNumber":233,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"wynonaK"},"content":"    private Appointment syncWithAppointmentMasterTagList(Appointment appointment) {"},{"lineNumber":235,"author":{"gitID":"wynonaK"},"content":"        final UniqueTagList appointmentTags \u003d new UniqueTagList(appointment.getType());"},{"lineNumber":236,"author":{"gitID":"wynonaK"},"content":"        tags.mergeFrom(appointmentTags);"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":244,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":245,"author":{"gitID":"wynonaK"},"content":"        appointmentTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":246,"author":{"gitID":"wynonaK"},"content":"        return new Appointment("},{"lineNumber":247,"author":{"gitID":"-"},"content":"                appointment.getOwner(), appointment.getPetPatient(), appointment.getRemark(),"},{"lineNumber":248,"author":{"gitID":"-"},"content":"                appointment.getDateTime(), correctTagReferences);"},{"lineNumber":249,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":252,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":254,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"chialejing"},"content":"    //// pet-patient-level operations"},{"lineNumber":264,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":265,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":266,"author":{"gitID":"chialejing"},"content":"     * Adds a pet patient to the address book."},{"lineNumber":267,"author":{"gitID":"chialejing"},"content":"     * Also checks the new pet patient\u0027s tags and updates {@link #petPatientTags} with any new tags found,"},{"lineNumber":268,"author":{"gitID":"chialejing"},"content":"     * and updates the Tag objects in the person to point to those in {@link #petPatientTags}."},{"lineNumber":269,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":270,"author":{"gitID":"chialejing"},"content":"     * @throws DuplicatePetPatientException if an equivalent person already exists."},{"lineNumber":271,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":272,"author":{"gitID":"chialejing"},"content":"    public void addPetPatient(PetPatient p) throws DuplicatePetPatientException {"},{"lineNumber":273,"author":{"gitID":"chialejing"},"content":"        PetPatient petPatient \u003d syncWithMasterTagList(p);"},{"lineNumber":274,"author":{"gitID":"chialejing"},"content":"        petPatients.add(petPatient);"},{"lineNumber":275,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"chialejing"},"content":"    public void addPetPatientTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":284,"author":{"gitID":"chialejing"},"content":"        petPatientTags.add(t);"},{"lineNumber":285,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":286,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":287,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":288,"author":{"gitID":"wynonaK"},"content":"     * Removes {@code tag} from {@code person} with that tag this {@code AddressBook}."},{"lineNumber":289,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":290,"author":{"gitID":"wynonaK"},"content":"     * @throws PersonNotFoundException if {@code person} is not found in this {@code AddressBook}."},{"lineNumber":291,"author":{"gitID":"-"},"content":"     *                                 Reused from https://github.com/se-edu/addressbook-level4/"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     *                                 pull/790/files with minor modifications"},{"lineNumber":293,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":294,"author":{"gitID":"wynonaK"},"content":"    private void removeTagParticular(Tag tag, Person person) throws PersonNotFoundException {"},{"lineNumber":295,"author":{"gitID":"wynonaK"},"content":"        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e(person.getTags()); //gets all the tags from a person"},{"lineNumber":296,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":297,"author":{"gitID":"wynonaK"},"content":"        if (tagList.remove(tag)) {"},{"lineNumber":298,"author":{"gitID":"wynonaK"},"content":"            Person updatedPerson \u003d"},{"lineNumber":299,"author":{"gitID":"-"},"content":"                    new Person(person.getName(), person.getPhone(), person.getEmail(),"},{"lineNumber":300,"author":{"gitID":"-"},"content":"                        person.getAddress(), person.getNric(), tagList);"},{"lineNumber":301,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":302,"author":{"gitID":"wynonaK"},"content":"            try {"},{"lineNumber":303,"author":{"gitID":"wynonaK"},"content":"                updatePerson(person, updatedPerson);"},{"lineNumber":304,"author":{"gitID":"wynonaK"},"content":"            } catch (DuplicatePersonException dpe) {"},{"lineNumber":305,"author":{"gitID":"wynonaK"},"content":"                throw new AssertionError(\"Modifying tag only should not result in duplicate person.\");"},{"lineNumber":306,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":308,"author":{"gitID":"wynonaK"},"content":"            return;"},{"lineNumber":309,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":310,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":311,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":312,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":313,"author":{"gitID":"wynonaK"},"content":"     * Removes {@code tag} from all person with that tag this {@code AddressBook}."},{"lineNumber":314,"author":{"gitID":"wynonaK"},"content":"     * Reused from https://github.com/se-edu/addressbook-level4/pull/790/files with minor modifications"},{"lineNumber":315,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":316,"author":{"gitID":"wynonaK"},"content":"    public void removeTag(Tag tag) {"},{"lineNumber":317,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":318,"author":{"gitID":"wynonaK"},"content":"            for (Person currPerson : persons) {"},{"lineNumber":319,"author":{"gitID":"wynonaK"},"content":"                removeTagParticular(tag, currPerson);"},{"lineNumber":320,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":321,"author":{"gitID":"wynonaK"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":322,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"Impossible as obtained from address book.\");"},{"lineNumber":323,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":324,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":325,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":326,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":329,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":330,"author":{"gitID":"chialejing"},"content":"        return persons.asObservableList().size() + \" persons, \""},{"lineNumber":331,"author":{"gitID":"chialejing"},"content":"                + tags.asObservableList().size() + \" tags, \""},{"lineNumber":332,"author":{"gitID":"chialejing"},"content":"                + petPatients.asObservableList().size() + \" pet patients, \""},{"lineNumber":333,"author":{"gitID":"chialejing"},"content":"                + petPatientTags.asObservableList().size() + \" pet patient tags\";"},{"lineNumber":334,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":335,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":338,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":339,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":340,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":343,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":344,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":345,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":348,"author":{"gitID":"chialejing"},"content":"    public ObservableList\u003cPetPatient\u003e getPetPatientList() {"},{"lineNumber":349,"author":{"gitID":"chialejing"},"content":"        return petPatients.asObservableList();"},{"lineNumber":350,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":351,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":352,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":353,"author":{"gitID":"chialejing"},"content":"    public ObservableList\u003cTag\u003e getPetPatientTagList() {"},{"lineNumber":354,"author":{"gitID":"chialejing"},"content":"        return petPatientTags.asObservableList();"},{"lineNumber":355,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":356,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":357,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":358,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":359,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":360,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":361,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":362,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags))"},{"lineNumber":363,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 this.petPatients.equals(((AddressBook) other).petPatients)"},{"lineNumber":364,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 this.petPatientTags.equalsOrderInsensitive(((AddressBook) other).petPatientTags);"},{"lineNumber":365,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":368,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":369,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":370,"author":{"gitID":"chialejing"},"content":"        return Objects.hash(persons, tags, petPatients, petPatientTags);"},{"lineNumber":371,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":372,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":77,"wynonaK":77,"-":218}},{"path":"src/main/java/seedu/address/model/theme/Theme.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.theme;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Aquarinte"},"content":"//@@author aquarinte"},{"lineNumber":10,"author":{"gitID":"Aquarinte"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Aquarinte"},"content":" * Represents a Theme in the address book."},{"lineNumber":12,"author":{"gitID":"Aquarinte"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Aquarinte"},"content":"public class Theme {"},{"lineNumber":14,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":15,"author":{"gitID":"Aquarinte"},"content":"    private static String[] themes \u003d {\"dark\", \"light\"};"},{"lineNumber":16,"author":{"gitID":"Aquarinte"},"content":"    private static String[] themesLocation \u003d {\"/view/DarkTheme.css\", \"/view/LightTheme.css\"};"},{"lineNumber":17,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":18,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_THEME_CONSTRAINTS \u003d \"Please specify one of the following themes:\\n\""},{"lineNumber":19,"author":{"gitID":"Aquarinte"},"content":"            + Arrays.stream(themes).collect(Collectors.joining(\", \"));"},{"lineNumber":20,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":21,"author":{"gitID":"Aquarinte"},"content":"    public final String selectedThemePath;"},{"lineNumber":22,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":23,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"Aquarinte"},"content":"     * Constructs a {@code Theme}."},{"lineNumber":25,"author":{"gitID":"Aquarinte"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"Aquarinte"},"content":"     * @param themeName A valid theme name."},{"lineNumber":27,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"Aquarinte"},"content":"    public Theme(String themeName) {"},{"lineNumber":29,"author":{"gitID":"Aquarinte"},"content":"        requireNonNull(themeName);"},{"lineNumber":30,"author":{"gitID":"Aquarinte"},"content":"        checkArgument(isValidThemeName(themeName.toLowerCase()), MESSAGE_THEME_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"Aquarinte"},"content":"        selectedThemePath \u003d themesLocation[Arrays.asList(themes).indexOf(themeName.toLowerCase())];"},{"lineNumber":32,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":34,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"Aquarinte"},"content":"     * Returns true if a given string is a valid theme name."},{"lineNumber":36,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"Aquarinte"},"content":"    public static boolean isValidThemeName(String themeName) {"},{"lineNumber":38,"author":{"gitID":"Aquarinte"},"content":"        boolean isValid \u003d Arrays.stream(themes).anyMatch(themeName::equals);"},{"lineNumber":39,"author":{"gitID":"Aquarinte"},"content":"        return isValid;"},{"lineNumber":40,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":42,"author":{"gitID":"Aquarinte"},"content":"    public String getThemeName() {"},{"lineNumber":43,"author":{"gitID":"Aquarinte"},"content":"        return themes[Arrays.asList(themesLocation).indexOf(selectedThemePath)];"},{"lineNumber":44,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":46,"author":{"gitID":"Aquarinte"},"content":"    public String getThemePath() {"},{"lineNumber":47,"author":{"gitID":"Aquarinte"},"content":"        return selectedThemePath;"},{"lineNumber":48,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":50,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"Aquarinte"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"Aquarinte"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":53,"author":{"gitID":"Aquarinte"},"content":"                || (other instanceof Theme // instanceof handles nulls"},{"lineNumber":54,"author":{"gitID":"Aquarinte"},"content":"                \u0026\u0026 this.selectedThemePath.equals(((Theme) other).selectedThemePath)); // state check"},{"lineNumber":55,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":57,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"Aquarinte"},"content":"    public int hashCode() {"},{"lineNumber":59,"author":{"gitID":"Aquarinte"},"content":"        return selectedThemePath.hashCode();"},{"lineNumber":60,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":62,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"Aquarinte"},"content":"     * Format state as text for viewing."},{"lineNumber":64,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"Aquarinte"},"content":"    public String toString() {"},{"lineNumber":66,"author":{"gitID":"Aquarinte"},"content":"        return \u0027[\u0027 + selectedThemePath + \u0027]\u0027;"},{"lineNumber":67,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":60,"-":8}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPetPatient.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":" * JAXB-friendly version of the PetPatient."},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"public class XmlAdaptedPetPatient {"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Pet patient\u0027s %s field is missing!\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"    private String species;"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"    private String breed;"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"    private String colour;"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"    private String bloodType;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"     * Constructs an XmlAdaptedPetPatient."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"    public XmlAdaptedPetPatient() {}"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":"     * Constructs an {@code XmlAdaptedPetPatient} with the given pet patient details."},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"    public XmlAdaptedPetPatient(String name, String species, String breed, String colour,"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"                            String bloodType, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"        this.name \u003d name;"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":"        this.species \u003d species;"},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"        this.breed \u003d breed;"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"        this.colour \u003d colour;"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"        this.bloodType \u003d bloodType;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"     * Converts a given PetPatient into this class for JAXB use."},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPetPatient"},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":"    public XmlAdaptedPetPatient(PetPatient source) {"},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":63,"author":{"gitID":"chialejing"},"content":"        species \u003d source.getSpecies();"},{"lineNumber":64,"author":{"gitID":"chialejing"},"content":"        breed \u003d source.getBreed();"},{"lineNumber":65,"author":{"gitID":"chialejing"},"content":"        colour \u003d source.getColour();"},{"lineNumber":66,"author":{"gitID":"chialejing"},"content":"        bloodType \u003d source.getBloodType();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"chialejing"},"content":"     * Converts this jaxb-friendly adapted pet patient object into the model\u0027s PetPatient object."},{"lineNumber":75,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":76,"author":{"gitID":"chialejing"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted pet patient"},{"lineNumber":77,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"chialejing"},"content":"    public PetPatient toModelType() throws IllegalValueException {"},{"lineNumber":79,"author":{"gitID":"chialejing"},"content":"        final List\u003cTag\u003e petPatientTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":80,"author":{"gitID":"chialejing"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":81,"author":{"gitID":"chialejing"},"content":"            petPatientTags.add(tag.toModelType());"},{"lineNumber":82,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":84,"author":{"gitID":"chialejing"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":85,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException("},{"lineNumber":86,"author":{"gitID":"chialejing"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, PetPatientName.class.getSimpleName()));"},{"lineNumber":87,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"chialejing"},"content":"        if (!PetPatientName.isValidName(this.name)) {"},{"lineNumber":89,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException(PetPatientName.MESSAGE_PET_NAME_CONSTRAINTS);"},{"lineNumber":90,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"chialejing"},"content":"        final PetPatientName name \u003d new PetPatientName(this.name);"},{"lineNumber":92,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":93,"author":{"gitID":"chialejing"},"content":"        if (this.species \u003d\u003d null) {"},{"lineNumber":94,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT));"},{"lineNumber":95,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":97,"author":{"gitID":"chialejing"},"content":"        if (this.breed \u003d\u003d null) {"},{"lineNumber":98,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT));"},{"lineNumber":99,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":101,"author":{"gitID":"chialejing"},"content":"        if (this.colour \u003d\u003d null) {"},{"lineNumber":102,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT));"},{"lineNumber":103,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":105,"author":{"gitID":"chialejing"},"content":"        if (this.bloodType \u003d\u003d null) {"},{"lineNumber":106,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT));"},{"lineNumber":107,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":109,"author":{"gitID":"chialejing"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(petPatientTags);"},{"lineNumber":110,"author":{"gitID":"chialejing"},"content":"        return new PetPatient(name, species, breed, colour, bloodType, tags);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"chialejing"},"content":"        if (!(other instanceof XmlAdaptedPetPatient)) {"},{"lineNumber":120,"author":{"gitID":"chialejing"},"content":"            return false;"},{"lineNumber":121,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":123,"author":{"gitID":"chialejing"},"content":"        XmlAdaptedPetPatient otherPetPatient \u003d (XmlAdaptedPetPatient) other;"},{"lineNumber":124,"author":{"gitID":"chialejing"},"content":"        return Objects.equals(name, otherPetPatient.name)"},{"lineNumber":125,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 Objects.equals(species, otherPetPatient.species)"},{"lineNumber":126,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 Objects.equals(breed, otherPetPatient.breed)"},{"lineNumber":127,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 Objects.equals(colour, otherPetPatient.colour)"},{"lineNumber":128,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 Objects.equals(bloodType, otherPetPatient.bloodType)"},{"lineNumber":129,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 tagged.equals(otherPetPatient.tagged);"},{"lineNumber":130,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":89,"-":42}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.exceptions.DuplicatePetPatientException;"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":26,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"    private final FilteredList\u003cPetPatient\u003e filteredPetPatients;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"        filteredPetPatients \u003d new FilteredList\u003c\u003e(this.addressBook.getPetPatientList());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"chialejing"},"content":"    public synchronized void addPetPatient(PetPatient petPatient) throws DuplicatePetPatientException {"},{"lineNumber":84,"author":{"gitID":"chialejing"},"content":"        addressBook.addPetPatient(petPatient);"},{"lineNumber":85,"author":{"gitID":"chialejing"},"content":"        updateFilteredPetPatientList(PREDICATE_SHOW_ALL_PET_PATIENTS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":"    public synchronized void addAppointment(Appointment appointment) throws DuplicateAppointmentException {"},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":"        addressBook.addAppointment(appointment);"},{"lineNumber":101,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":103,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"wynonaK"},"content":"    public void deleteTag(Tag tag) {"},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":"        addressBook.removeTag(tag);"},{"lineNumber":106,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"chialejing"},"content":"    public void updateFilteredPetPatientList(Predicate\u003cPetPatient\u003e predicate) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":128,"author":{"gitID":"chialejing"},"content":"        filteredPetPatients.setPredicate(predicate);"},{"lineNumber":129,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":146,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"},{"lineNumber":147,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 filteredPetPatients.equals(other.filteredPetPatients);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":15,"wynonaK":13,"-":122}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.exceptions.DuplicatePetPatientException;"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"    Predicate\u003cPetPatient\u003e PREDICATE_SHOW_ALL_PET_PATIENTS \u003d unused -\u003e true;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"    /** Removes the specific {@code tag} from all {@code persons} with that tag **/"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"    void deleteTag(Tag tag);"},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"    /** Adds the given appointment */"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"    void addAppointment(Appointment appointment) throws DuplicateAppointmentException;"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":"    void updateFilteredPetPatientList(Predicate\u003cPetPatient\u003e predicate);"},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":"    void addPetPatient(PetPatient petPatient) throws DuplicatePetPatientException;"},{"lineNumber":63,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":7,"wynonaK":9,"-":48}},{"path":"src/main/java/seedu/address/model/petpatient/PetPatientName.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.model.petpatient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":" * Represents a PetPatient\u0027s name in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":"public class PetPatientName {"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_PET_NAME_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"            \"PetPatient names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"     * Constructs a {@code PetPatientName}."},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"    public PetPatientName(String name) {"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"        checkArgument(isValidName(name), MESSAGE_PET_NAME_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"        this.fullName \u003d name;"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"     * Returns true if a given string is a valid pet patient name."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"                || (other instanceof PetPatientName // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 this.fullName.equals(((PetPatientName) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":20,"-":39}},{"path":"src/main/java/seedu/address/model/petpatient/PetPatient.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.model.petpatient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":"import java.util.Date;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":" * Represents a PetPatient in the address book."},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":" * Guarantees: details are present, field values are validated."},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"public class PetPatient {"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"    private final PetPatientName name;"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"    private final String species; // e.g. dogs, cats, birds, etc."},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":"    private final String breed; // different varieties of the same species"},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"    private final String colour;"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"    private final String bloodType;"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"    private final Person owner; // maybe we can link by NRIC?"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"    private final UniqueTagList tags;"},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"    private final Optional\u003cDate\u003e dateOfBirth; // can be null"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"    private StringBuilder medicalHistory; // can be null (initially)"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"    public PetPatient(PetPatientName name,"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"                      String species,"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"                      String breed,"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"                      String colour,"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"                      String bloodType,"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                      Person owner,"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"                      Set\u003cTag\u003e tags) {"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"        requireAllNonNull(name, species, breed, colour, bloodType, tags);"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"        this.name \u003d name;"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"        this.species \u003d species;"},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":"        this.breed \u003d breed;"},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":"        this.colour \u003d colour;"},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"        this.bloodType \u003d bloodType;"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.owner \u003d null;"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":"        this.dateOfBirth \u003d null;"},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"        this.medicalHistory \u003d new StringBuilder();"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"    public PetPatient(PetPatientName name,"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":"                      String species,"},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"                      String breed,"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":"                      String colour,"},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"                      String bloodType,"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":"                      Person owner,"},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"                      Optional\u003cDate\u003e dateOfBirth,"},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":"                      Set\u003cTag\u003e tags) {"},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"        requireAllNonNull(name, species, breed, colour, bloodType, owner, dateOfBirth, tags);"},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":"        this.name \u003d name;"},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":"        this.species \u003d species;"},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":"        this.breed \u003d breed;"},{"lineNumber":63,"author":{"gitID":"chialejing"},"content":"        this.colour \u003d colour;"},{"lineNumber":64,"author":{"gitID":"chialejing"},"content":"        this.bloodType \u003d bloodType;"},{"lineNumber":65,"author":{"gitID":"chialejing"},"content":"        this.owner \u003d owner;"},{"lineNumber":66,"author":{"gitID":"chialejing"},"content":"        this.dateOfBirth \u003d dateOfBirth;"},{"lineNumber":67,"author":{"gitID":"chialejing"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":68,"author":{"gitID":"chialejing"},"content":"        this.medicalHistory \u003d new StringBuilder();"},{"lineNumber":69,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":71,"author":{"gitID":"chialejing"},"content":"    public PetPatientName getName() {"},{"lineNumber":72,"author":{"gitID":"chialejing"},"content":"        return name;"},{"lineNumber":73,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":75,"author":{"gitID":"chialejing"},"content":"    public Optional\u003cDate\u003e getDateOfBirth() {"},{"lineNumber":76,"author":{"gitID":"chialejing"},"content":"        return dateOfBirth;"},{"lineNumber":77,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":79,"author":{"gitID":"chialejing"},"content":"    public String getSpecies() {"},{"lineNumber":80,"author":{"gitID":"chialejing"},"content":"        return species;"},{"lineNumber":81,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":83,"author":{"gitID":"chialejing"},"content":"    public String getBreed() {"},{"lineNumber":84,"author":{"gitID":"chialejing"},"content":"        return breed;"},{"lineNumber":85,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":87,"author":{"gitID":"chialejing"},"content":"    public String getColour() {"},{"lineNumber":88,"author":{"gitID":"chialejing"},"content":"        return colour;"},{"lineNumber":89,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":91,"author":{"gitID":"chialejing"},"content":"    public String getBloodType() {"},{"lineNumber":92,"author":{"gitID":"chialejing"},"content":"        return bloodType;"},{"lineNumber":93,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":95,"author":{"gitID":"chialejing"},"content":"    public Person getOwner() {"},{"lineNumber":96,"author":{"gitID":"chialejing"},"content":"        return owner;"},{"lineNumber":97,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":99,"author":{"gitID":"chialejing"},"content":"    public StringBuilder getMedicalHistory() {"},{"lineNumber":100,"author":{"gitID":"chialejing"},"content":"        return medicalHistory;"},{"lineNumber":101,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":103,"author":{"gitID":"chialejing"},"content":"    public void updateMedicalHistory(String newContent) {"},{"lineNumber":104,"author":{"gitID":"chialejing"},"content":"        this.medicalHistory.append(newContent);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"chialejing"},"content":"        if (!(other instanceof PetPatient)) {"},{"lineNumber":122,"author":{"gitID":"chialejing"},"content":"            return false;"},{"lineNumber":123,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":125,"author":{"gitID":"chialejing"},"content":"        PetPatient otherPetPatient \u003d (PetPatient) other;"},{"lineNumber":126,"author":{"gitID":"chialejing"},"content":"        return otherPetPatient.getName().equals(this.getName())"},{"lineNumber":127,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 otherPetPatient.getSpecies().equals(this.getSpecies())"},{"lineNumber":128,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 otherPetPatient.getBreed().equals(this.getBreed())"},{"lineNumber":129,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 otherPetPatient.getColour().equals(this.getColour())"},{"lineNumber":130,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 otherPetPatient.getBloodType().equals(this.getBloodType());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":136,"author":{"gitID":"chialejing"},"content":"        return Objects.hash(name, species, breed, colour, bloodType, tags);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        builder.append(\"\\t\")"},{"lineNumber":143,"author":{"gitID":"chialejing"},"content":"                // .append(\" Owner\u0027s Name: \")"},{"lineNumber":144,"author":{"gitID":"chialejing"},"content":"                // .append(getOwner().getName())"},{"lineNumber":145,"author":{"gitID":"chialejing"},"content":"                .append(getName())"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                .append(\"\\tSpecies: \")"},{"lineNumber":147,"author":{"gitID":"chialejing"},"content":"                .append(getSpecies())"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                .append(\"\\tBreed: \")"},{"lineNumber":149,"author":{"gitID":"chialejing"},"content":"                .append(getBreed())"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                .append(\"\\tColor: \")"},{"lineNumber":151,"author":{"gitID":"chialejing"},"content":"                .append(getColour())"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                .append(\"\\tBlood Type: \")"},{"lineNumber":153,"author":{"gitID":"chialejing"},"content":"                .append(getBloodType())"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                .append(\"\\tTags: \");"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":109,"-":49}},{"path":"src/main/java/seedu/address/model/petpatient/UniquePetPatientList.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.model.petpatient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.exceptions.DuplicatePetPatientException;"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.exceptions.PetPatientNotFoundException;"},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":" * A list of pet patients that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":" *"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":" * Supports a minimal set of list operations."},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":" *"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":" * @see PetPatient#equals(Object)"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":"public class UniquePetPatientList implements Iterable\u003cPetPatient\u003e {"},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"    private final ObservableList\u003cPetPatient\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"     * Returns true if the list contains an equivalent pet patient as the given argument."},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"    public boolean contains(PetPatient toCheck) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"     * Adds a pet patient to the list."},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"     * @throws DuplicatePetPatientException if the pet patient to add is a duplicate of an existing pet patient"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"     * in the list."},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"    public void add(PetPatient toAdd) throws DuplicatePetPatientException {"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"        requireNonNull(toAdd);"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"        if (contains(toAdd)) {"},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":"            throw new DuplicatePetPatientException();"},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"        internalList.add(toAdd);"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"     * Replaces the pet patient {@code target} in the list with {@code editedPetPatient}."},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"     * @throws DuplicatePetPatientException if the replacement is equivalent to another existing pet patient"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"     * in the list."},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":"     * @throws PetPatientNotFoundException if {@code target} could not be found in the list."},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":"    public void setPetPatient(PetPatient target, PetPatient editedPetPatient)"},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"            throws DuplicatePetPatientException, PetPatientNotFoundException {"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":"        requireNonNull(editedPetPatient);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":"            throw new PetPatientNotFoundException();"},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":63,"author":{"gitID":"chialejing"},"content":"        if (!target.equals(editedPetPatient) \u0026\u0026 internalList.contains(editedPetPatient)) {"},{"lineNumber":64,"author":{"gitID":"chialejing"},"content":"            throw new DuplicatePetPatientException();"},{"lineNumber":65,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":67,"author":{"gitID":"chialejing"},"content":"        internalList.set(index, editedPetPatient);"},{"lineNumber":68,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":70,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"chialejing"},"content":"     * Removes the equivalent pet patient from the list."},{"lineNumber":72,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":73,"author":{"gitID":"chialejing"},"content":"     * @throws PetPatientNotFoundException if no such pet patient could be found in the list."},{"lineNumber":74,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"chialejing"},"content":"    public boolean remove(PetPatient toRemove) throws PetPatientNotFoundException {"},{"lineNumber":76,"author":{"gitID":"chialejing"},"content":"        requireNonNull(toRemove);"},{"lineNumber":77,"author":{"gitID":"chialejing"},"content":"        final boolean petPatientFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":78,"author":{"gitID":"chialejing"},"content":"        if (!petPatientFoundAndDeleted) {"},{"lineNumber":79,"author":{"gitID":"chialejing"},"content":"            throw new PetPatientNotFoundException();"},{"lineNumber":80,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"chialejing"},"content":"        return petPatientFoundAndDeleted;"},{"lineNumber":82,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":84,"author":{"gitID":"chialejing"},"content":"    public void setPetPatients(UniquePetPatientList replacement) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"chialejing"},"content":"    public void setPetPatients(List\u003cPetPatient\u003e petPatients) throws DuplicatePetPatientException {"},{"lineNumber":89,"author":{"gitID":"chialejing"},"content":"        requireAllNonNull(petPatients);"},{"lineNumber":90,"author":{"gitID":"chialejing"},"content":"        final UniquePetPatientList replacement \u003d new UniquePetPatientList();"},{"lineNumber":91,"author":{"gitID":"chialejing"},"content":"        for (final PetPatient petPatient : petPatients) {"},{"lineNumber":92,"author":{"gitID":"chialejing"},"content":"            replacement.add(petPatient);"},{"lineNumber":93,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"chialejing"},"content":"        setPetPatients(replacement);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"chialejing"},"content":"    public ObservableList\u003cPetPatient\u003e asObservableList() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"chialejing"},"content":"    public Iterator\u003cPetPatient\u003e iterator() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":112,"author":{"gitID":"chialejing"},"content":"                || (other instanceof UniquePetPatientList // instanceof handles nulls"},{"lineNumber":113,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 this.internalList.equals(((UniquePetPatientList) other).internalList));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":76,"-":44}}]
