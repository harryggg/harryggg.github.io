var resultJson = [{"path":"docs/ContactUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Contact Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"* *Bug reports, Suggestions* : Post in our https://github.com/CS2103JAN2018-W15-B4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."},{"lineNumber":5,"author":{"gitID":"-"},"content":"* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"* *Email us* : You can also reach us at `yashchowdhary98 [at] u.nus.edu`"}],"authorContributionMap":{"yash-chowdhary":2,"-":4}},{"path":"docs/UsingGradle.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Using Gradle"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":5,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":6,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":7,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":8,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"https://gradle.org/[Gradle] is a build automation tool. It can automate build-related tasks such as"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"* Running tests"},{"lineNumber":13,"author":{"gitID":"-"},"content":"* Managing library dependencies"},{"lineNumber":14,"author":{"gitID":"-"},"content":"* Analyzing code for style compliance"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":19,"author":{"gitID":"-"},"content":"To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u003d\u003d Running Gradle Commands"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"To run a Gradle command, open a command window on the project folder and enter the Gradle command. Gradle commands look like this:"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean allTests`"},{"lineNumber":26,"author":{"gitID":"-"},"content":"* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."},{"lineNumber":27,"author":{"gitID":"-"},"content":"`./gradlew clean allTests`"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":30,"author":{"gitID":"-"},"content":"If you do not specify any tasks, Gradlew will run the default tasks `clean` `headless` `allTests` `coverage`"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"\u003d\u003d Cleaning the Project"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"* *`clean`* +"},{"lineNumber":35,"author":{"gitID":"-"},"content":"Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":38,"author":{"gitID":"-"},"content":"*`clean` to force Gradle to execute a task*: +"},{"lineNumber":39,"author":{"gitID":"-"},"content":"When running a Gradle task, Gradle will try to figure out if the task needs running at all. If Gradle determines that the output of the task will be same as the previous time, it will not run the task. For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built. If we want to force Gradle to run a task, we can combine that task with `clean`. Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"\u003d\u003d Creating the JAR file"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"* *`shadowJar`* +"},{"lineNumber":44,"author":{"gitID":"-"},"content":"Creates the `addressbook.jar` file in the `build/jar` folder, _if the current file is outdated_. +"},{"lineNumber":45,"author":{"gitID":"-"},"content":"e.g. `./gradlew shadowJar`"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"****"},{"lineNumber":48,"author":{"gitID":"-"},"content":"To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"},{"lineNumber":49,"author":{"gitID":"-"},"content":"e.g. `./gradlew clean shadowJar`"},{"lineNumber":50,"author":{"gitID":"-"},"content":"****"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":53,"author":{"gitID":"-"},"content":"*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient. Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file. To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"\u003d\u003d Rendering AsciiDoc files"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"* **`asciidoctor`** +"},{"lineNumber":58,"author":{"gitID":"-"},"content":"Converts AsciiDoc files in `docs` to HTML format. Generated HTML files can be found in `build/docs`."},{"lineNumber":59,"author":{"gitID":"-"},"content":"* **`deployOfflineDocs`** +"},{"lineNumber":60,"author":{"gitID":"-"},"content":"Updates the offline user guide, and its associated files, used by the Help window in the application. Deployed HTML files and images can be found in `src/main/resources/docs`."},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"\u003d\u003d Running the application"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* *`run`* +"},{"lineNumber":65,"author":{"gitID":"-"},"content":"Builds and runs the application."},{"lineNumber":66,"author":{"gitID":"-"},"content":"* *`runShadow`* +"},{"lineNumber":67,"author":{"gitID":"-"},"content":"Builds the application as a fat JAR, and then runs it."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d Running code style checks"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"* **`checkstyleMain`** +"},{"lineNumber":72,"author":{"gitID":"-"},"content":"Runs the code style check for the main code base"},{"lineNumber":73,"author":{"gitID":"-"},"content":"* **`checkstyleTest`** +"},{"lineNumber":74,"author":{"gitID":"-"},"content":"Runs the code style check for the test code base"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`. To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"\u003d\u003d Running Tests"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"* **`allTests`** +"},{"lineNumber":81,"author":{"gitID":"-"},"content":"Runs all tests."},{"lineNumber":82,"author":{"gitID":"-"},"content":"* **`guiTests`** +"},{"lineNumber":83,"author":{"gitID":"amrut-prabhu"},"content":"Runs all tests in the `seedu.club.ui` and `systemtests` package"},{"lineNumber":84,"author":{"gitID":"-"},"content":"* **`nonGuiTests`** +"},{"lineNumber":85,"author":{"gitID":"amrut-prabhu"},"content":"Runs all non-GUI tests in the `seedu.club`"},{"lineNumber":86,"author":{"gitID":"-"},"content":"package"},{"lineNumber":87,"author":{"gitID":"-"},"content":"* **`headless`** +"},{"lineNumber":88,"author":{"gitID":"-"},"content":"Sets the test mode as _headless_. The mode is effective for that Gradle run only so it should be combined with other test tasks."},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"Here are some examples:"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"* `./gradlew headless allTests` -- Runs all tests in headless mode"},{"lineNumber":93,"author":{"gitID":"-"},"content":"* `./gradlew clean nonGuiTests` -- Cleans the project and runs non-GUI"},{"lineNumber":94,"author":{"gitID":"-"},"content":"tests"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"\u003d\u003d Updating Dependencies"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"* **`compileJava`** +"},{"lineNumber":101,"author":{"gitID":"-"},"content":"Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"},{"lineNumber":102,"author":{"gitID":"-"},"content":"See `build.gradle` -\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."},{"lineNumber":104,"author":{"gitID":"-"},"content":"* **`compileTestJava`** +"},{"lineNumber":105,"author":{"gitID":"-"},"content":"Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"},{"lineNumber":106,"author":{"gitID":"-"},"content":"See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."}],"authorContributionMap":{"amrut-prabhu":2,"-":104}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"Club Connect was developed by the https://github.com/CS2103JAN2018-W15-B4[W15-B4] team. +"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"It was forked from AddressBook - Level 4, developed by https://se-edu.github.io/docs/Team.html[se-edu] team."},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"\u003d\u003d\u003d Yash Chowdhary"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"image::yash-chowdhary.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"{empty}[https://github.com/yash-chowdhary[github]] [\u003c\u003cyashchowdhary#, portfolio\u003e\u003e]"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"Role: Team lead +"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"Responsibilities: In charge of Model, Deliverables and deadlines"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"\u003d\u003d\u003d Amrut Prabhu"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"image::amrut-prabhu.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"{empty}[https://github.com/amrut-prabhu[github]] [\u003c\u003camrutprabhu#, portfolio\u003e\u003e]"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"Role: DevOps +"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"Responsibilities: In charge of Logic, Documentation and Project Management"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"\u003d\u003d\u003d Muhammad Nur Kamal Bin Mohammed Ariff"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"image::muhdnurkamal.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"{empty}[https://github.com/MuhdNurKamal[github]] [\u003c\u003cmuhdnurkamal#, portfolio\u003e\u003e]"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"Responsibilities: In charge of Storage, Testing"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"\u003d\u003d\u003d Song Weiyang"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"image::th14thmusician.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"{empty}[https://github.com/th14thmusician[github]] [\u003c\u003csongweiyan#, portfolio\u003e\u003e]"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"Responsibilities: In charge of UI, Integration"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"MuhdNurKamal":20,"amrut-prabhu":1,"-":26}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Club Connect"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"https://travis-ci.org/CS2103JAN2018-W15-B4/main[image:https://travis-ci.org/CS2103JAN2018-W15-B4/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"https://ci.appveyor.com/project/yash-chowdhary/main/branch/master[image:https://ci.appveyor.com/api/projects/status/py0jsd905ygj58kc/branch/master?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"https://coveralls.io/github/CS2103JAN2018-W15-B4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-W15-B4/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"image:https://api.codacy.com/project/badge/Grade/d1a5dc46041045768dc78bca8b295f08[\"Codacy code quality\", link\u003d\"https://www.codacy.com/app/yash-chowdhary/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dCS2103JAN2018-W15-B4/main\u0026utm_campaign\u003dBadge_Grade\"]"},{"lineNumber":8,"author":{"gitID":"-"},"content":"https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":16,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"* Club Connect is a desktop application. It has a \u003c\u003cDeveloperGuide#gui,GUI\u003e\u003e but most of the user interactions happen using a \u003c\u003cDeveloperGuide#cli,CLI\u003e\u003e."},{"lineNumber":19,"author":{"gitID":"-"},"content":"* Club Connect is targeted at student organizations (such as clubs and societies) that are characterized by a well-established hierarchy."},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"* Student organizations require a one-stop destination for all their managerial needs when it comes to enrollment, delegating tasks, preparing for events, and opening polls and feedback systems."},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"* Student organizations can have hundreds of members which are further divided into sub-committees that have narrower focuses. These subcommittee members are often assigned individual tasks. With time, it will get very difficult to keep track of everything."},{"lineNumber":22,"author":{"gitID":"-"},"content":"* Club Connect is the solution to this problem as it helps \u003c\u003cDeveloperGuide#club,clubs\u003e\u003e manage and organize their activities and members efficiently and effectively."},{"lineNumber":23,"author":{"gitID":"-"},"content":"* Club Connect has the following features:"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"** \u003c\u003cDeveloperGuide#exco-member,Exco Members\u003e\u003e can manage the member roster"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"** Exco Members can delegate tasks to Sub-Committee Members"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"** Exco Members can set up polls and feedback surveys"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"** \u003c\u003cDeveloperGuide#member,Members\u003e\u003e can send e-mails to any other members"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"** Members can keep track of upcoming events and deadlines for tasks"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":33,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":34,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":35,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":40,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":41,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"amrut-prabhu":4,"yash-chowdhary":8,"-":31}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.club.logic.commands.LogInCommand;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"public class ClearCommandSystemTest extends ClubBookSystemTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private ObservableList\u003cMember\u003e observableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private Member member;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        observableList \u003d defaultModel.getClubBook().getMemberList();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        member \u003d observableList.get(0);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        String logInCommand \u003d LogInCommand.COMMAND_WORD + \" \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"                + PREFIX_USERNAME + member.getCredentials().getUsername().value + \" \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"                + PREFIX_PASSWORD + member.getCredentials().getPassword().value;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        executeCommand(logInCommand);"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: clear non-empty club book, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":30,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":31,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        executeCommand(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD + \" Y\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: undo clearing club book -\u003e original club book restored */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        /*String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();*/"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: redo clearing club book -\u003e cleared */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        /*command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();*/"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: selects first card in member list and clears club book -\u003e cleared and no card selected */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        /*executeCommand(UndoCommand.COMMAND_WORD); // restores the original club book"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"        selectMember(Index.fromOneBased(1));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();*/"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: filters the member list before clearing -\u003e entire club book cleared */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /*executeCommand(UndoCommand.COMMAND_WORD); // restores the original club book"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"        showMembersWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();*/"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* Case: clear empty club book -\u003e cleared *//*"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"clear\", Messages.MESSAGE_REQUIRE_SIGN_UP);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();*/"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":72,"author":{"gitID":"amrut-prabhu"},"content":"     * {@code ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":74,"author":{"gitID":"amrut-prabhu"},"content":"     * @see ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":96,"author":{"gitID":"amrut-prabhu"},"content":"     * {@code ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":99,"author":{"gitID":"amrut-prabhu"},"content":"     * @see ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":16,"-":94}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"\u003d Club Connect - User Guide"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":"[.text-center]"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":5,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":6,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":7,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":8,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":9,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":10,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":11,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":12,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":13,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":":format-caption:"},{"lineNumber":15,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":":repoURL: https://github.com/CS2103JAN2018-W15-B4/main"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"By: `Team W15-B4`      Since: `Feb 2018`      Licence: `MIT`"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"*Club Connect* is an application targeted at \u003c\u003cDeveloperGuide#club,club\u003e\u003e \u003c\u003cDeveloperGuide#member,members\u003e\u003e who are students at the National University of Singapore (NUS)."},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"It aims to make the tedious process of club management easier and more effective."},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"Currently, Club Connect is a desktop app that makes use of a *Command Line Interface* (\u003c\u003cDeveloperGuide#cli,CLI\u003e\u003e) for increased productivity, while still having the benefits of a Graphical User Interface (GUI)."},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"So, you can have increased productivity (owing to the CLI) without having to give up the beauty and aesthetics of a traditional GUI application."},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"The faster you type, the faster Club Connect gets your club-management tasks done."},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"Interested? Continue on to \u003c\u003cQuick Start\u003e\u003e to get started."},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"The symbols and formatting used in this document, along with their corresponding meanings, are: +"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"ℹ️: Note +"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"  💡  : Tip +"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"`code`: Commands that can be entered into *Club Connect* or Technical keywords +"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"kbd:[key]: Button on your keyboard +"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":40,"author":{"gitID":"-"},"content":"+"},{"lineNumber":41,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":42,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":43,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":44,"author":{"gitID":"-"},"content":"+"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":".  Download the latest `clubconnect.jar` link:{https://github.com/CS2103JAN2018-W15-B4/main}/releases[here]."},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":".  Copy the file to the folder that you want to use as the home folder for Club Connect (and the club Database)."},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":".  Double-click the file to start the app. The GUI (as shown in \u003c\u003claunch-app, Figure 1\u003e\u003e) should appear in a few seconds."},{"lineNumber":48,"author":{"gitID":"-"},"content":"+"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"[[launch-app]]"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"[.text-center]"},{"lineNumber":51,"author":{"gitID":"amrut-prabhu"},"content":".Club Connect application on launch"},{"lineNumber":52,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"550\"]"},{"lineNumber":53,"author":{"gitID":"-"},"content":"+"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":".  Type a command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"e.g. You can type *`help`* and press kbd:[Enter] to open the help window (shown in Figure 2)."},{"lineNumber":56,"author":{"gitID":"-"},"content":"+"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"[[help-window]]"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"[.text-center]"},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":".Club Connect Help window"},{"lineNumber":60,"author":{"gitID":"-"},"content":"image::help-window.png[height\u003d\"450\"]"},{"lineNumber":61,"author":{"gitID":"-"},"content":"+"},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":".  Some other example commands that you can try are:"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"* *`list`* : lists all members of the club on the left pane"},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":"* *`add`*`n/John Doe p/98765432 e/johnd@example.com m/A1234567H` : adds a member named `John Doe` to your Club Connect members list"},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":"* *`delete`*`3` : deletes the 3rd member shown in the current list"},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"* *`exit`* : exits the Club Connect app"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":".  Continue to the next section, \u003c\u003cFeatures\u003e\u003e, for details of each command and its usage."},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":72,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"amrut-prabhu"},"content":"This section describes the various features that Club Connect puts at your disposal."},{"lineNumber":75,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":76,"author":{"gitID":"amrut-prabhu"},"content":"This is how you should interpret the commands in this user guide."},{"lineNumber":77,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":78,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"amrut-prabhu"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user. For example, in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe` or `add n/Jane Doe`."},{"lineNumber":81,"author":{"gitID":"amrut-prabhu"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/President` or as `n/John Doe`."},{"lineNumber":82,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/Treasurer`, `t/Captain t/Goalkeeper` etc."},{"lineNumber":83,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":84,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"amrut-prabhu"},"content":"Here are some things to take note of before you begin using Club Connect."},{"lineNumber":87,"author":{"gitID":"amrut-prabhu"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":88,"author":{"gitID":"amrut-prabhu"},"content":"*Valid Entries*"},{"lineNumber":89,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":90,"author":{"gitID":"amrut-prabhu"},"content":"* *Names* of members should only contain alphabets, numbers and spaces."},{"lineNumber":91,"author":{"gitID":"amrut-prabhu"},"content":"The name should not be blank and cannot begin with a space (\" \")."},{"lineNumber":92,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":93,"author":{"gitID":"amrut-prabhu"},"content":"* *Phone numbers* can only contain numbers, and should be at least 3 digits long."},{"lineNumber":94,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":95,"author":{"gitID":"amrut-prabhu"},"content":"* *Email IDs* of members should be of the format: username@emailservice.com and should not contain spaces."},{"lineNumber":96,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":97,"author":{"gitID":"amrut-prabhu"},"content":"* *Matriculation Numbers* should follow the format of those at NUS."},{"lineNumber":98,"author":{"gitID":"amrut-prabhu"},"content":"So, they must begin with a letter, followed by 7 digits and should end with a letter."},{"lineNumber":99,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":100,"author":{"gitID":"amrut-prabhu"},"content":"* *Groups* should only contain letters and digits. They must not be empty."},{"lineNumber":101,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":102,"author":{"gitID":"amrut-prabhu"},"content":"* *Tags* should also only contain letters and digits. They cannot be empty."},{"lineNumber":103,"author":{"gitID":"amrut-prabhu"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":104,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":105,"author":{"gitID":"amrut-prabhu"},"content":"\u003d\u003d\u003d Adding a member: `add`"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"amrut-prabhu"},"content":"Adds a member to Club Connect. +"},{"lineNumber":108,"author":{"gitID":"yash-chowdhary"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL m/MATRIC_NUMBER [g/GROUP] [t/TAG]...` +"},{"lineNumber":109,"author":{"gitID":"yash-chowdhary"},"content":"Aliases: `a`, `insert` +"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":112,"author":{"gitID":"-"},"content":"A member can have any number of tags (including 0)."},{"lineNumber":113,"author":{"gitID":"yash-chowdhary"},"content":"[TIP]"},{"lineNumber":114,"author":{"gitID":"yash-chowdhary"},"content":"The `group` attribute is an optional attribute."},{"lineNumber":115,"author":{"gitID":"amrut-prabhu"},"content":"A member will be assigned to the default group `Member` if no group is specified in the command."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"MuhdNurKamal"},"content":"[NOTE]"},{"lineNumber":118,"author":{"gitID":"MuhdNurKamal"},"content":"This command is for `EXCO` members only."},{"lineNumber":119,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com m/A1234567H`"},{"lineNumber":123,"author":{"gitID":"amrut-prabhu"},"content":"* `add n/Betsy Crowe p/95462159 e/betsycrowe@u.nus.edu m/A0145625K g/Logistics t/Head`"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"MuhdNurKamal"},"content":"\u003d\u003d\u003d Adding a poll: `addpoll` (Since v1.3)"},{"lineNumber":126,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":127,"author":{"gitID":"MuhdNurKamal"},"content":"Adds a poll to Club Connect. +"},{"lineNumber":128,"author":{"gitID":"yash-chowdhary"},"content":"Format: `addpoll q/QUESTION ans/ANSWER [ans/ANSWER]...` +"},{"lineNumber":129,"author":{"gitID":"yash-chowdhary"},"content":"Aliases: `addp`, `poll`"},{"lineNumber":130,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":131,"author":{"gitID":"MuhdNurKamal"},"content":"****"},{"lineNumber":132,"author":{"gitID":"MuhdNurKamal"},"content":"* A poll must have 1 question."},{"lineNumber":133,"author":{"gitID":"MuhdNurKamal"},"content":"* A poll must have at least 1 answer."},{"lineNumber":134,"author":{"gitID":"MuhdNurKamal"},"content":"* Questions and answers must be non-empty."},{"lineNumber":135,"author":{"gitID":"MuhdNurKamal"},"content":"****"},{"lineNumber":136,"author":{"gitID":"MuhdNurKamal"},"content":"Examples:"},{"lineNumber":137,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":138,"author":{"gitID":"amrut-prabhu"},"content":"* `addpoll p/Which day should be Free Ice-Cream Day? ans/Monday ans/Wednesday ans/Friday` +"},{"lineNumber":139,"author":{"gitID":"MuhdNurKamal"},"content":"Creates a poll asking members to vote which day Free Ice-Cream Day should be."},{"lineNumber":140,"author":{"gitID":"amrut-prabhu"},"content":"The options to choose from are Monday, Wednesday and Friday."},{"lineNumber":141,"author":{"gitID":"MuhdNurKamal"},"content":"* `addpoll n/Where should the annual sports meeting be held? ans/I-Cube ans/LT7` +"},{"lineNumber":142,"author":{"gitID":"MuhdNurKamal"},"content":"Creates a poll asking members to vote where the annual sports meeting should be held."},{"lineNumber":143,"author":{"gitID":"amrut-prabhu"},"content":"The answers to choose from are I-Cube and LT7."},{"lineNumber":144,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":145,"author":{"gitID":"MuhdNurKamal"},"content":"[NOTE]"},{"lineNumber":146,"author":{"gitID":"MuhdNurKamal"},"content":"This command is for `EXCO` members only."},{"lineNumber":147,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":148,"author":{"gitID":"yash-chowdhary"},"content":"\u003d\u003d\u003d Adding a task: `addtask` (Since v1.3)"},{"lineNumber":149,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":150,"author":{"gitID":"yash-chowdhary"},"content":"Adds a task to Club Connect. +"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Format: `addtask desc/DESCRIPTION d/DUE_DATE ti/TIME` +"},{"lineNumber":152,"author":{"gitID":"-"},"content":"Aliases: `addt`, `task`"},{"lineNumber":153,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":154,"author":{"gitID":"yash-chowdhary"},"content":"*****"},{"lineNumber":155,"author":{"gitID":"yash-chowdhary"},"content":"* The `date` and `time` attributes must be valid dates and time (in 24-hour format)."},{"lineNumber":156,"author":{"gitID":"yash-chowdhary"},"content":"* By default, the `Assignor` and `Assignee` of the task is the member that is currently logged in. This cannot be changed."},{"lineNumber":157,"author":{"gitID":"yash-chowdhary"},"content":"* If you wish to assign taks to other members in the capacity of an Exco member, use the `assigntask` command."},{"lineNumber":158,"author":{"gitID":"yash-chowdhary"},"content":"* The default `Status` given to a newly created task is `Yet to Begin`. This can be updated using the `changetaskstatus` command."},{"lineNumber":159,"author":{"gitID":"yash-chowdhary"},"content":"*****"},{"lineNumber":160,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":161,"author":{"gitID":"yash-chowdhary"},"content":"[NOTE]"},{"lineNumber":162,"author":{"gitID":"yash-chowdhary"},"content":"Duplicate tasks are not allowed."},{"lineNumber":163,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":164,"author":{"gitID":"yash-chowdhary"},"content":"Examples:"},{"lineNumber":165,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":166,"author":{"gitID":"yash-chowdhary"},"content":"* `addtask desc/Book PGP Function Room 3 d/02/04/2018 ti/19:00` +"},{"lineNumber":167,"author":{"gitID":"yash-chowdhary"},"content":"Adds a task with description `Book PGP Function Room 3` due on `02/04/2018` at `19:00`."},{"lineNumber":168,"author":{"gitID":"yash-chowdhary"},"content":"* `addtask desc/Buy Food d/03.04.2018 ti/15:00` +"},{"lineNumber":169,"author":{"gitID":"yash-chowdhary"},"content":"Adds a task with description `Buy Food` due on `03/04/2018` at `15:00`."},{"lineNumber":170,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":171,"author":{"gitID":"yash-chowdhary"},"content":"\u003d\u003d\u003d Adding a task: `assigntask` (Since v1.4)"},{"lineNumber":172,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":173,"author":{"gitID":"yash-chowdhary"},"content":"Adds a task to Club Connect and assigns it to a member. +"},{"lineNumber":174,"author":{"gitID":"-"},"content":"Format: `assigntask desc/DESCRIPTION d/DUE_DATE ti/TIME n/NAME` +"},{"lineNumber":175,"author":{"gitID":"-"},"content":"Alias: `assignt`"},{"lineNumber":176,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":177,"author":{"gitID":"yash-chowdhary"},"content":"*****"},{"lineNumber":178,"author":{"gitID":"yash-chowdhary"},"content":"* The `date` and `time` attributes must be valid dates and time (in 24-hour format)."},{"lineNumber":179,"author":{"gitID":"yash-chowdhary"},"content":"* The member who the task is meant to be assigned to must exist in the club book."},{"lineNumber":180,"author":{"gitID":"yash-chowdhary"},"content":"* The default `Status` given to a newly created task is `Yet to Begin`. This can be updated using the `changetaskstatus` command."},{"lineNumber":181,"author":{"gitID":"yash-chowdhary"},"content":"*****"},{"lineNumber":182,"author":{"gitID":"yash-chowdhary"},"content":"[NOTE]"},{"lineNumber":183,"author":{"gitID":"yash-chowdhary"},"content":"Duplicate tasks are not allowed."},{"lineNumber":184,"author":{"gitID":"MuhdNurKamal"},"content":"[NOTE]"},{"lineNumber":185,"author":{"gitID":"MuhdNurKamal"},"content":"This command is for `EXCO` members only."},{"lineNumber":186,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":187,"author":{"gitID":"yash-chowdhary"},"content":"This command assigns the task to the member based on the entered `NAME`."},{"lineNumber":188,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":189,"author":{"gitID":"yash-chowdhary"},"content":"Examples:"},{"lineNumber":190,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":191,"author":{"gitID":"yash-chowdhary"},"content":"* `assigntask desc/Book PGP Function Room 3 d/02/04/2018 ti/19:00 n/Bernice Yu` +"},{"lineNumber":192,"author":{"gitID":"yash-chowdhary"},"content":"Assigns a task to `Bernice Yu` with description `Book PGP Function Room 3` due on `02/04/2018` at `19:00`."},{"lineNumber":193,"author":{"gitID":"yash-chowdhary"},"content":"* `assigntask desc/Buy Food d/03.04.2018 ti/15:00 n/David Li` +"},{"lineNumber":194,"author":{"gitID":"yash-chowdhary"},"content":"Assigns a task to `David Li` with description `Buy Food` due on `03/04/2018` at `15:00`."},{"lineNumber":195,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":196,"author":{"gitID":"yash-chowdhary"},"content":"\u003d\u003d\u003d Changing password : `changepass` (Since v1.4)"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"amrut-prabhu"},"content":"Changes your password, if you are logged in."},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"amrut-prabhu"},"content":"Format: `changepass u/USERNAME pw/OLD_PASSWORD npw/NEW_PASSWORD` +"},{"lineNumber":201,"author":{"gitID":"-"},"content":"Alias: `changepw`"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"****"},{"lineNumber":204,"author":{"gitID":"-"},"content":"* Members are only able to change their own password."},{"lineNumber":205,"author":{"gitID":"amrut-prabhu"},"content":"* Exco members can change the password of any member. The member is indicated by their username."},{"lineNumber":206,"author":{"gitID":"-"},"content":"****"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"yash-chowdhary"},"content":"* `changepass u/A0123456H pw/password npw/pword` +"},{"lineNumber":211,"author":{"gitID":"amrut-prabhu"},"content":"Changes the password of the member with username `A0123456H` to `pword`."},{"lineNumber":212,"author":{"gitID":"yash-chowdhary"},"content":"* `changepass u/A1234567H pw/password npw/brandnewpassword` +"},{"lineNumber":213,"author":{"gitID":"yash-chowdhary"},"content":"Changes the password of the member with username `A1234567H` to `brandnewpassword`."},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"amrut-prabhu"},"content":"\u003d\u003d\u003d Changing your profile photo : `changepic` (Since v1.2)"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"yash-chowdhary"},"content":"Changes the photo displayed on your profile to the specified photo. +"},{"lineNumber":218,"author":{"gitID":"yash-chowdhary"},"content":"Format: `changepic PHOTO_PATH` +"},{"lineNumber":219,"author":{"gitID":"yash-chowdhary"},"content":"Aliases: `pic`, `profilepic`"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"****"},{"lineNumber":222,"author":{"gitID":"amrut-prabhu"},"content":"* PHOTO_PATH must be an absolute path to the photo."},{"lineNumber":223,"author":{"gitID":"amrut-prabhu"},"content":"* This command is only guaranteed to work for ,jpeg, .jpg, and .png files."},{"lineNumber":224,"author":{"gitID":"-"},"content":"****"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"amrut-prabhu"},"content":"[TIP]"},{"lineNumber":227,"author":{"gitID":"amrut-prabhu"},"content":"To get the abolute path, right-click on the photo file and select `Properties`."},{"lineNumber":228,"author":{"gitID":"amrut-prabhu"},"content":"The `Location` field specifies the absolute location of the photo."},{"lineNumber":229,"author":{"gitID":"amrut-prabhu"},"content":"Finally, add the complete name of the photo file to this location."},{"lineNumber":230,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"amrut-prabhu"},"content":"* `changepic C:/Users/John Doe/Desktop/john_doe.jpg` +"},{"lineNumber":234,"author":{"gitID":"amrut-prabhu"},"content":"Changes your profile picture to the \"john_doe.jpg\" image on `John Doe` \u0027s Desktop."},{"lineNumber":235,"author":{"gitID":"amrut-prabhu"},"content":"* `changepic C:/Users/Admin/Downloads/CathyRay.png` +"},{"lineNumber":236,"author":{"gitID":"amrut-prabhu"},"content":"Changes your profile picture to the \"CathyRay.png\" image in your Downloads folder."},{"lineNumber":237,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":238,"author":{"gitID":"yash-chowdhary"},"content":"\u003d\u003d\u003d Changing the status of your task : `changetaskstatus` (Since v1.5rc)"},{"lineNumber":239,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":240,"author":{"gitID":"yash-chowdhary"},"content":"Changes the status of a task in Club Connect. +"},{"lineNumber":241,"author":{"gitID":"yash-chowdhary"},"content":"Format: `changetaskstatus INDEX st/STATUS` +"},{"lineNumber":242,"author":{"gitID":"yash-chowdhary"},"content":"Aliases: `cts`, `changestatus`, `status`"},{"lineNumber":243,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":244,"author":{"gitID":"yash-chowdhary"},"content":"****"},{"lineNumber":245,"author":{"gitID":"yash-chowdhary"},"content":"* `INDEX` *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":246,"author":{"gitID":"yash-chowdhary"},"content":"* The `STATUS` can be one of ```Yet To Begin```, ```In Progress```, and ```Completed```."},{"lineNumber":247,"author":{"gitID":"yash-chowdhary"},"content":"* You can only change the status of a task that you have been assigned."},{"lineNumber":248,"author":{"gitID":"yash-chowdhary"},"content":"* Club Connect detects if there is no change in the `STATUS`."},{"lineNumber":249,"author":{"gitID":"yash-chowdhary"},"content":"****"},{"lineNumber":250,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":251,"author":{"gitID":"yash-chowdhary"},"content":"[TIP]"},{"lineNumber":252,"author":{"gitID":"amrut-prabhu"},"content":"Tasks are color-coded by status: +"},{"lineNumber":253,"author":{"gitID":"yash-chowdhary"},"content":"[red]#Yet To Begin# +"},{"lineNumber":254,"author":{"gitID":"yash-chowdhary"},"content":"[yellow]#In Progress# +"},{"lineNumber":255,"author":{"gitID":"yash-chowdhary"},"content":"[green]#Completed#"},{"lineNumber":256,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":257,"author":{"gitID":"yash-chowdhary"},"content":"Examples:"},{"lineNumber":258,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":259,"author":{"gitID":"yash-chowdhary"},"content":"* `changetaskstatus 1 st/In Progress` +"},{"lineNumber":260,"author":{"gitID":"yash-chowdhary"},"content":"Changes the status of the 1st task to `In Progress` in the task listing."},{"lineNumber":261,"author":{"gitID":"yash-chowdhary"},"content":"* `status 3 st/Completed` +"},{"lineNumber":262,"author":{"gitID":"yash-chowdhary"},"content":"Changes the status of the 3rd task to `Completed` in the task listing."},{"lineNumber":263,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":265,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":266,"author":{"gitID":"amrut-prabhu"},"content":"Clears all entries from Club Connect. +"},{"lineNumber":267,"author":{"gitID":"-"},"content":"Format A: `clear` +"},{"lineNumber":268,"author":{"gitID":"-"},"content":"Format B: `clear LETTER`"},{"lineNumber":269,"author":{"gitID":"yash-chowdhary"},"content":"Aliases: `c`, `erase`"},{"lineNumber":270,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"****"},{"lineNumber":272,"author":{"gitID":"-"},"content":"* Firstly, execute Clear Command by entering Format A into the command line."},{"lineNumber":273,"author":{"gitID":"-"},"content":"* A confirmation message will be shown."},{"lineNumber":274,"author":{"gitID":"-"},"content":"* To confirm clearing all entries from Club Connect, enter Format B into the command line."},{"lineNumber":275,"author":{"gitID":"-"},"content":"* Format B has to be executed immediately after executing Format A."},{"lineNumber":276,"author":{"gitID":"-"},"content":"* LETTER must be equals to \"Y\" to confirm clearing data from Club Connect"},{"lineNumber":277,"author":{"gitID":"-"},"content":"* Any other LETTER will cancell the execution"},{"lineNumber":278,"author":{"gitID":"-"},"content":"****"},{"lineNumber":279,"author":{"gitID":"MuhdNurKamal"},"content":"[NOTE]"},{"lineNumber":280,"author":{"gitID":"MuhdNurKamal"},"content":"This command is for `EXCO` members only."},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"* `Clear` -\u003e `Clear Y`"},{"lineNumber":285,"author":{"gitID":"-"},"content":"Execute the clear command, and confirming it."},{"lineNumber":286,"author":{"gitID":"-"},"content":"* `Clear` -\u003e `Clear N`"},{"lineNumber":287,"author":{"gitID":"-"},"content":"Execute the clear command, and cancelling it."},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"MuhdNurKamal"},"content":"\u003d\u003d\u003d Compressing member details : `compress` (Since v1.2)"},{"lineNumber":290,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":291,"author":{"gitID":"MuhdNurKamal"},"content":"Compresses the details of members in the member list +"},{"lineNumber":292,"author":{"gitID":"yash-chowdhary"},"content":"Format: `compress` +"},{"lineNumber":293,"author":{"gitID":"yash-chowdhary"},"content":"Alias: `comp`"},{"lineNumber":294,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":295,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":296,"author":{"gitID":"MuhdNurKamal"},"content":"****"},{"lineNumber":297,"author":{"gitID":"MuhdNurKamal"},"content":"* No changes if member details are already compressed"},{"lineNumber":298,"author":{"gitID":"MuhdNurKamal"},"content":"* Use this to remove clutter in contact list"},{"lineNumber":299,"author":{"gitID":"MuhdNurKamal"},"content":"****"},{"lineNumber":300,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":301,"author":{"gitID":"MuhdNurKamal"},"content":"\u003d\u003d\u003d Decompressing member details : `decompress` (Since v1.2)"},{"lineNumber":302,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":303,"author":{"gitID":"MuhdNurKamal"},"content":"Decompresses the details of members in the member list +"},{"lineNumber":304,"author":{"gitID":"yash-chowdhary"},"content":"Format: `decompress` +"},{"lineNumber":305,"author":{"gitID":"yash-chowdhary"},"content":"Alias: `decomp`"},{"lineNumber":306,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":307,"author":{"gitID":"MuhdNurKamal"},"content":"****"},{"lineNumber":308,"author":{"gitID":"MuhdNurKamal"},"content":"* No changes if member details are already decompressed"},{"lineNumber":309,"author":{"gitID":"MuhdNurKamal"},"content":"* Use this to see more detailed information of members in contact list"},{"lineNumber":310,"author":{"gitID":"MuhdNurKamal"},"content":"****"},{"lineNumber":311,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":312,"author":{"gitID":"amrut-prabhu"},"content":"\u003d\u003d\u003d Deleting a member : `delete`"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"yash-chowdhary"},"content":"Deletes the specified member from Club Connect. +"},{"lineNumber":315,"author":{"gitID":"yash-chowdhary"},"content":"Format: `delete INDEX` +"},{"lineNumber":316,"author":{"gitID":"yash-chowdhary"},"content":"Aliases: `del`, `rm`, `remove`"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"****"},{"lineNumber":319,"author":{"gitID":"amrut-prabhu"},"content":"* Deletes the member at the specified `INDEX`."},{"lineNumber":320,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":321,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":322,"author":{"gitID":"-"},"content":"****"},{"lineNumber":323,"author":{"gitID":"MuhdNurKamal"},"content":"[NOTE]"},{"lineNumber":324,"author":{"gitID":"MuhdNurKamal"},"content":"This command is for `EXCO` members only."},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":329,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":330,"author":{"gitID":"amrut-prabhu"},"content":"Deletes the 2nd member in the member listing."},{"lineNumber":331,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":332,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":333,"author":{"gitID":"amrut-prabhu"},"content":"Deletes the 1st member in the results of the `find` command."},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"MuhdNurKamal"},"content":"\u003d\u003d\u003d Deleting a poll : `deletepoll` (Since v1.3)"},{"lineNumber":336,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":337,"author":{"gitID":"MuhdNurKamal"},"content":"Deletes the specified poll from the Club Connect. +"},{"lineNumber":338,"author":{"gitID":"yash-chowdhary"},"content":"Format: `deletepoll INDEX` +"},{"lineNumber":339,"author":{"gitID":"yash-chowdhary"},"content":"Aliases: `rmpoll`, `delpoll`"},{"lineNumber":340,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":341,"author":{"gitID":"yash-chowdhary"},"content":"****"},{"lineNumber":342,"author":{"gitID":"MuhdNurKamal"},"content":"* Deletes the poll at the specified `INDEX`."},{"lineNumber":343,"author":{"gitID":"MuhdNurKamal"},"content":"* The index refers to the index number shown in the most recent poll listing."},{"lineNumber":344,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":345,"author":{"gitID":"yash-chowdhary"},"content":"****"},{"lineNumber":346,"author":{"gitID":"MuhdNurKamal"},"content":"[NOTE]"},{"lineNumber":347,"author":{"gitID":"MuhdNurKamal"},"content":"This command is for `EXCO` members only."},{"lineNumber":348,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":349,"author":{"gitID":"yash-chowdhary"},"content":"Examples:"},{"lineNumber":350,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":351,"author":{"gitID":"MuhdNurKamal"},"content":"* `deletepoll 2` +"},{"lineNumber":352,"author":{"gitID":"MuhdNurKamal"},"content":"Deletes the 2nd poll in the poll listing."},{"lineNumber":353,"author":{"gitID":"yash-chowdhary"},"content":"* `deletepoll 4` +"},{"lineNumber":354,"author":{"gitID":"yash-chowdhary"},"content":"Deletes the 4th poll in the poll listing."},{"lineNumber":355,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":356,"author":{"gitID":"yash-chowdhary"},"content":"\u003d\u003d\u003d Deleting a tag : `deletetag` (Since v1.1)"},{"lineNumber":357,"author":{"gitID":"-"},"content":""},{"lineNumber":358,"author":{"gitID":"amrut-prabhu"},"content":"Deletes the specified tag for all members in the Club Connect. +"},{"lineNumber":359,"author":{"gitID":"yash-chowdhary"},"content":"Format: `deletetag t/TAG` +"},{"lineNumber":360,"author":{"gitID":"yash-chowdhary"},"content":"Aliases: `rmtag`, `deltag`"},{"lineNumber":361,"author":{"gitID":"MuhdNurKamal"},"content":"[NOTE]"},{"lineNumber":362,"author":{"gitID":"MuhdNurKamal"},"content":"This command is for `EXCO` members only."},{"lineNumber":363,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":364,"author":{"gitID":"amrut-prabhu"},"content":"****"},{"lineNumber":365,"author":{"gitID":"-"},"content":"* Deletes the specified tag from Club Connect."},{"lineNumber":366,"author":{"gitID":"amrut-prabhu"},"content":"* Deletes the specified tag for all members who are tagged with it."},{"lineNumber":367,"author":{"gitID":"amrut-prabhu"},"content":"****"},{"lineNumber":368,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":369,"author":{"gitID":"amrut-prabhu"},"content":"Examples:"},{"lineNumber":370,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":371,"author":{"gitID":"amrut-prabhu"},"content":"* `deletetag t/Treasurer` +"},{"lineNumber":372,"author":{"gitID":"amrut-prabhu"},"content":"Deletes the `Treasurer` tag for all members tagged with `Treasurer` in Club Connect."},{"lineNumber":373,"author":{"gitID":"yash-chowdhary"},"content":"* `deletetag t/EventInCharge` +"},{"lineNumber":374,"author":{"gitID":"yash-chowdhary"},"content":"Deletes the `EventInCharge` tag for all members tagged with `EventInCharge` in Club Connect."},{"lineNumber":375,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":376,"author":{"gitID":"yash-chowdhary"},"content":"\u003d\u003d\u003d Deleting a task : `deletetask` (Since v1.3)"},{"lineNumber":377,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":378,"author":{"gitID":"yash-chowdhary"},"content":"Deletes the specified task from the club book. +"},{"lineNumber":379,"author":{"gitID":"-"},"content":"Format: `deletetask INDEX` +"},{"lineNumber":380,"author":{"gitID":"-"},"content":"Aliases: `deltask`, `rmtask`"},{"lineNumber":381,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":382,"author":{"gitID":"yash-chowdhary"},"content":"****"},{"lineNumber":383,"author":{"gitID":"yash-chowdhary"},"content":"* Deletes the task at the specified `INDEX`."},{"lineNumber":384,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":385,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":386,"author":{"gitID":"-"},"content":"****"},{"lineNumber":387,"author":{"gitID":"-"},"content":""},{"lineNumber":388,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":389,"author":{"gitID":"-"},"content":""},{"lineNumber":390,"author":{"gitID":"yash-chowdhary"},"content":"* `viewmytasks` +"},{"lineNumber":391,"author":{"gitID":"yash-chowdhary"},"content":"`deletetask 2` +"},{"lineNumber":392,"author":{"gitID":"yash-chowdhary"},"content":"Deletes the 2nd task in the results of the `viewmytasks` command."},{"lineNumber":393,"author":{"gitID":"yash-chowdhary"},"content":"* `viewalltasks` +"},{"lineNumber":394,"author":{"gitID":"yash-chowdhary"},"content":"`deletetask 1` +"},{"lineNumber":395,"author":{"gitID":"yash-chowdhary"},"content":"Deletes the 1st task in the results of the `viewalltasks` command."},{"lineNumber":396,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":397,"author":{"gitID":"amrut-prabhu"},"content":"\u003d\u003d\u003d Editing a member : `edit`"},{"lineNumber":398,"author":{"gitID":"-"},"content":""},{"lineNumber":399,"author":{"gitID":"amrut-prabhu"},"content":"Edits the details of an existing member in Club Connect. +"},{"lineNumber":400,"author":{"gitID":"yash-chowdhary"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [m/MATRIC_NUMBER] [g/GROUP] [t/TAG]...` +"},{"lineNumber":401,"author":{"gitID":"yash-chowdhary"},"content":"Aliases: `e`, `update`"},{"lineNumber":402,"author":{"gitID":"-"},"content":""},{"lineNumber":403,"author":{"gitID":"-"},"content":"****"},{"lineNumber":404,"author":{"gitID":"amrut-prabhu"},"content":"* Edits the member at the specified `INDEX`. The index refers to the index number shown in the last member listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":405,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":406,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":407,"author":{"gitID":"yash-chowdhary"},"content":"* You can remove a member from a group by editing the member\u0027s group to `member` as it is the default group in Club Connect."},{"lineNumber":408,"author":{"gitID":"amrut-prabhu"},"content":"* You cannot remove a member from a group by typing `g/` without specifying any group after it as GROUP must comply with the requirements of a valid group name."},{"lineNumber":409,"author":{"gitID":"amrut-prabhu"},"content":"* When editing tags, the existing tags of the member will be removed i.e adding of tags is not cumulative."},{"lineNumber":410,"author":{"gitID":"amrut-prabhu"},"content":"* You can remove all the member\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":411,"author":{"gitID":"-"},"content":"****"},{"lineNumber":412,"author":{"gitID":"MuhdNurKamal"},"content":"[NOTE]"},{"lineNumber":413,"author":{"gitID":"MuhdNurKamal"},"content":"This command is for `EXCO` members only."},{"lineNumber":414,"author":{"gitID":"-"},"content":""},{"lineNumber":415,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":416,"author":{"gitID":"-"},"content":""},{"lineNumber":417,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":418,"author":{"gitID":"amrut-prabhu"},"content":"Edits the phone number and email address of the 1st member in the list to `91234567` and `johndoe@example.com` respectively."},{"lineNumber":419,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":420,"author":{"gitID":"amrut-prabhu"},"content":"Edits the name of the 2nd member to `Betsy Crower` and clears all existing tags."},{"lineNumber":421,"author":{"gitID":"yash-chowdhary"},"content":"* `edit 3 g/finance` +"},{"lineNumber":422,"author":{"gitID":"amrut-prabhu"},"content":"Edits the group of the 3rd member to be `finance`."},{"lineNumber":423,"author":{"gitID":"-"},"content":""},{"lineNumber":424,"author":{"gitID":"yash-chowdhary"},"content":"\u003d\u003d\u003d Emailing club members: `email` (Since v1.2)"},{"lineNumber":425,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":426,"author":{"gitID":"yash-chowdhary"},"content":"Opens up the chosen mail client\u0027s \u0027Compose Message\u0027 page in the system\u0027s default web browser with the relevant fields filled-in. The recipients will be the members that belong to the chosen `Group` or `Tag`.  +"},{"lineNumber":427,"author":{"gitID":"yash-chowdhary"},"content":"Format: `email g/GROUP OR t/TAG c/CLIENT [s/SUBJECT] [b/BODY]` +"},{"lineNumber":428,"author":{"gitID":"yash-chowdhary"},"content":"Alias: `mail`"},{"lineNumber":429,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":430,"author":{"gitID":"yash-chowdhary"},"content":"[NOTE]"},{"lineNumber":431,"author":{"gitID":"amrut-prabhu"},"content":"Club Connect currently only supports Gmail and Outlook mail clients."},{"lineNumber":432,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":433,"author":{"gitID":"yash-chowdhary"},"content":"[NOTE]"},{"lineNumber":434,"author":{"gitID":"yash-chowdhary"},"content":"Emails can only be sent to members belonging to EITHER a Group OR a Tag. Club Connect currently doesn\u0027t support sending emails to members belonging to BOTH a Group and a Tag."},{"lineNumber":435,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":436,"author":{"gitID":"yash-chowdhary"},"content":"****"},{"lineNumber":437,"author":{"gitID":"yash-chowdhary"},"content":"* Opens up the mail client\u0027s URL in the default web browser e.g. Google Chrome"},{"lineNumber":438,"author":{"gitID":"yash-chowdhary"},"content":"* A Group AND a Tag is not considered valid input"},{"lineNumber":439,"author":{"gitID":"yash-chowdhary"},"content":"* The Group (or Tag) must exist in the club book"},{"lineNumber":440,"author":{"gitID":"yash-chowdhary"},"content":"* The Group (or Tag) must be in valid format"},{"lineNumber":441,"author":{"gitID":"yash-chowdhary"},"content":"****"},{"lineNumber":442,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":443,"author":{"gitID":"yash-chowdhary"},"content":"Examples:"},{"lineNumber":444,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":445,"author":{"gitID":"yash-chowdhary"},"content":"* `email g/logistics c/gmail s/Meeting Minutes` +"},{"lineNumber":446,"author":{"gitID":"amrut-prabhu"},"content":"Opens up the Compose Message page of Gmail with the `Subject` field filled-in. The recipients are all the members that belong to the `logistics` group."},{"lineNumber":447,"author":{"gitID":"yash-chowdhary"},"content":"* `email t/projectHead c/outlook` +"},{"lineNumber":448,"author":{"gitID":"yash-chowdhary"},"content":"Opens up the Compose Message page of Outlook with blank `Subject` and `Body` fields. The recipients are all the members that are tagged with `projectHead`."},{"lineNumber":449,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":450,"author":{"gitID":"amrut-prabhu"},"content":"\u003d\u003d\u003d Exiting the application : `exit`"},{"lineNumber":451,"author":{"gitID":"-"},"content":""},{"lineNumber":452,"author":{"gitID":"amrut-prabhu"},"content":"Exits the Club Connect application. +"},{"lineNumber":453,"author":{"gitID":"yash-chowdhary"},"content":"Format: `exit` +"},{"lineNumber":454,"author":{"gitID":"yash-chowdhary"},"content":"Aliases: `q`, `quit`"},{"lineNumber":455,"author":{"gitID":"-"},"content":""},{"lineNumber":456,"author":{"gitID":"amrut-prabhu"},"content":"\u003d\u003d\u003d Exporting Club Connect data: `export` (Since v1.3)"},{"lineNumber":457,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":458,"author":{"gitID":"amrut-prabhu"},"content":"Exports the data of all members in Club Connect to a \u003c\u003cDeveloperGuide#csv,CSV\u003e\u003e file."},{"lineNumber":459,"author":{"gitID":"yash-chowdhary"},"content":"Format: \u0027export CSV_FILE_PATH` +"},{"lineNumber":460,"author":{"gitID":"yash-chowdhary"},"content":"Alias: `exp`"},{"lineNumber":461,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":462,"author":{"gitID":"MuhdNurKamal"},"content":"****"},{"lineNumber":463,"author":{"gitID":"amrut-prabhu"},"content":"* Exports Name, Phone Number, Email, Matriculation Number, Group, and Tags of all members added to Club Connect."},{"lineNumber":464,"author":{"gitID":"-"},"content":"* CSV_FILE_PATH must be an absolute path to the CSV file."},{"lineNumber":465,"author":{"gitID":"amrut-prabhu"},"content":"* In order for this command to work correctly, ensure that none of the members have double quoutes (\") in any of their data."},{"lineNumber":466,"author":{"gitID":"amrut-prabhu"},"content":"* A new CSV file with the specified name is created if it does not already exist."},{"lineNumber":467,"author":{"gitID":"amrut-prabhu"},"content":"* If the CSV file already exists, then the member data is added to the end of the file (i.e. it does not overwrite the existing file)."},{"lineNumber":468,"author":{"gitID":"MuhdNurKamal"},"content":"****"},{"lineNumber":469,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":470,"author":{"gitID":"yash-chowdhary"},"content":"[NOTE]"},{"lineNumber":471,"author":{"gitID":"amrut-prabhu"},"content":"You can import the generated CSV file on Microsoft Excel to get an even better view of the data."},{"lineNumber":472,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":473,"author":{"gitID":"MuhdNurKamal"},"content":"Examples:"},{"lineNumber":474,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":475,"author":{"gitID":"yash-chowdhary"},"content":"* `export C:/Users/John Doe/Desktop/members.csv` +"},{"lineNumber":476,"author":{"gitID":"yash-chowdhary"},"content":"Exports all members in Club Connect to \"members.csv\" file on `John Doe` \u0027s Desktop."},{"lineNumber":477,"author":{"gitID":"yash-chowdhary"},"content":"* `export C:/Users/Jane Doe/Desktop/clubbook.csv` +"},{"lineNumber":478,"author":{"gitID":"yash-chowdhary"},"content":"Exports all members in Club Connect to \"clubbook.csv\" file on `Jane Doe` \u0027s Desktop."},{"lineNumber":479,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":480,"author":{"gitID":"yash-chowdhary"},"content":"\u003d\u003d\u003d Locating members: `find` (Since v1.2)"},{"lineNumber":481,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":482,"author":{"gitID":"yash-chowdhary"},"content":"Finds members whose details contain any of the given keywords. +"},{"lineNumber":483,"author":{"gitID":"MuhdNurKamal"},"content":"Format: `find [PREFIX] KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":484,"author":{"gitID":"yash-chowdhary"},"content":"Aliases: `f`, `search` +"},{"lineNumber":485,"author":{"gitID":"MuhdNurKamal"},"content":"Allowed `PREFIX`: +"},{"lineNumber":486,"author":{"gitID":"MuhdNurKamal"},"content":"n/ \u003d `NAME` +"},{"lineNumber":487,"author":{"gitID":"MuhdNurKamal"},"content":"p/ \u003d `PHONE NUMBER` +"},{"lineNumber":488,"author":{"gitID":"MuhdNurKamal"},"content":"e/ \u003d `EMAIL` +"},{"lineNumber":489,"author":{"gitID":"MuhdNurKamal"},"content":"m/ \u003d `MATRIC NUMBER` +"},{"lineNumber":490,"author":{"gitID":"MuhdNurKamal"},"content":"g/ \u003d `GROUP` +"},{"lineNumber":491,"author":{"gitID":"MuhdNurKamal"},"content":"t/ \u003d `TAG` +"},{"lineNumber":492,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":493,"author":{"gitID":"MuhdNurKamal"},"content":"****"},{"lineNumber":494,"author":{"gitID":"MuhdNurKamal"},"content":"* An additional `PREFIX` can be stated after `find` to narrow search to a particular field. e.g e/ for email"},{"lineNumber":495,"author":{"gitID":"MuhdNurKamal"},"content":"* If no `PREFIX` is stated, all member fields will be searched."},{"lineNumber":496,"author":{"gitID":"amrut-prabhu"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`."},{"lineNumber":497,"author":{"gitID":"amrut-prabhu"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`."},{"lineNumber":498,"author":{"gitID":"amrut-prabhu"},"content":"* Partial matches will be matched e.g. `Han` will match `Hans`."},{"lineNumber":499,"author":{"gitID":"yash-chowdhary"},"content":"* Members matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`."},{"lineNumber":500,"author":{"gitID":"MuhdNurKamal"},"content":"****"},{"lineNumber":501,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":502,"author":{"gitID":"MuhdNurKamal"},"content":"Examples:"},{"lineNumber":503,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":504,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":505,"author":{"gitID":"amrut-prabhu"},"content":"Returns `john` and `John Doe`."},{"lineNumber":506,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` +"},{"lineNumber":507,"author":{"gitID":"MuhdNurKamal"},"content":"Returns all members having names containing `Betsy`, `Tim`, or `John`."},{"lineNumber":508,"author":{"gitID":"MuhdNurKamal"},"content":"* `find g/ logistics` +"},{"lineNumber":509,"author":{"gitID":"MuhdNurKamal"},"content":"Returns all members in the logistics `group`"},{"lineNumber":510,"author":{"gitID":"MuhdNurKamal"},"content":"* `find p/ 123` +"},{"lineNumber":511,"author":{"gitID":"amrut-prabhu"},"content":"Returns any member having phone number containing 123."},{"lineNumber":512,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":513,"author":{"gitID":"yash-chowdhary"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":514,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":515,"author":{"gitID":"amrut-prabhu"},"content":"Opens the Club Connect help window (see \u003c\u003chelp-window,Figure 2\u003e\u003e). +"},{"lineNumber":516,"author":{"gitID":"yash-chowdhary"},"content":"Format : `help` +"},{"lineNumber":517,"author":{"gitID":"yash-chowdhary"},"content":"Aliases : `h`, `info`"},{"lineNumber":518,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":519,"author":{"gitID":"MuhdNurKamal"},"content":"\u003d\u003d\u003d Hiding results of polls : `hideresults` (Since v1.4)"},{"lineNumber":520,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":521,"author":{"gitID":"MuhdNurKamal"},"content":"Hides the results of all polls in Club Connect. This is a command that can be used by `EXCO` members only to remove clutter from poll results. +"},{"lineNumber":522,"author":{"gitID":"-"},"content":"Format: `hideresults` +"},{"lineNumber":523,"author":{"gitID":"-"},"content":"Alias: `hideres`"},{"lineNumber":524,"author":{"gitID":"MuhdNurKamal"},"content":"[NOTE]"},{"lineNumber":525,"author":{"gitID":"MuhdNurKamal"},"content":"This command is for `EXCO` members only."},{"lineNumber":526,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":527,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":528,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":529,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":530,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":531,"author":{"gitID":"yash-chowdhary"},"content":"Format: `history` +"},{"lineNumber":532,"author":{"gitID":"yash-chowdhary"},"content":"Alias: `his`"},{"lineNumber":533,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":534,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":535,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":536,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":537,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":538,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":539,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Importing members into Club Connect: `import` (Since v1.4)"},{"lineNumber":540,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":541,"author":{"gitID":"-"},"content":"Imports the details of all members in the specified CSV file into Club Connect."},{"lineNumber":542,"author":{"gitID":"-"},"content":"Format: \u0027import CSV_FILE_PATH` +"},{"lineNumber":543,"author":{"gitID":"-"},"content":"Alias: `imp`"},{"lineNumber":544,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":545,"author":{"gitID":"amrut-prabhu"},"content":"****"},{"lineNumber":546,"author":{"gitID":"-"},"content":"* CSV_FILE_PATH must be an absolute path to the CSV file."},{"lineNumber":547,"author":{"gitID":"amrut-prabhu"},"content":"* The CSV file should organise its data in the format required by this application (see \u003c\u003ccsv-data-format, CSV file format\u003e\u003e)."},{"lineNumber":548,"author":{"gitID":"amrut-prabhu"},"content":"* In order for this command to work correctly, ensure that none of the data values contain double quoutes (\")."},{"lineNumber":549,"author":{"gitID":"amrut-prabhu"},"content":"****"},{"lineNumber":550,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":551,"author":{"gitID":"amrut-prabhu"},"content":"[NOTE]"},{"lineNumber":552,"author":{"gitID":"-"},"content":"You can save a Microsoft Excel spreadsheet as a CSV file by changing the file extension while saving."},{"lineNumber":553,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":554,"author":{"gitID":"MuhdNurKamal"},"content":"[NOTE]"},{"lineNumber":555,"author":{"gitID":"MuhdNurKamal"},"content":"This command is for `EXCO` members only."},{"lineNumber":556,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":557,"author":{"gitID":"amrut-prabhu"},"content":"Examples:"},{"lineNumber":558,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":559,"author":{"gitID":"-"},"content":"* `import C:/Users/John Doe/Desktop/members.csv` +"},{"lineNumber":560,"author":{"gitID":"yash-chowdhary"},"content":"Imports all members in the \"members.csv\" file on `John Doe` \u0027s Desktop to Club Connect."},{"lineNumber":561,"author":{"gitID":"yash-chowdhary"},"content":"* `import /Users/Jane Doe/Desktop/clubbook.csv` +"},{"lineNumber":562,"author":{"gitID":"yash-chowdhary"},"content":"Imports all members in the \"clubbook.csv\" file on `Jane Doe` \u0027s Desktop to Club Connect."},{"lineNumber":563,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":564,"author":{"gitID":"amrut-prabhu"},"content":"\u003d\u003d\u003d Listing all members : `list`"},{"lineNumber":565,"author":{"gitID":"-"},"content":""},{"lineNumber":566,"author":{"gitID":"amrut-prabhu"},"content":"Shows a list of all members in Club Connect. +"},{"lineNumber":567,"author":{"gitID":"yash-chowdhary"},"content":"Format: `list` +"},{"lineNumber":568,"author":{"gitID":"yash-chowdhary"},"content":"Alias: `l`"},{"lineNumber":569,"author":{"gitID":"-"},"content":""},{"lineNumber":570,"author":{"gitID":"yash-chowdhary"},"content":"\u003d\u003d\u003d Logging in to the application: `login` (Since v1.3)"},{"lineNumber":571,"author":{"gitID":"amrut-prabhu"},"content":"Logs in a member to Club Connect. +"},{"lineNumber":572,"author":{"gitID":"yash-chowdhary"},"content":"Format: `login u/USERNAME pw/PASSWORD` +"},{"lineNumber":573,"author":{"gitID":"yash-chowdhary"},"content":"Alias: `signin`"},{"lineNumber":574,"author":{"gitID":"-"},"content":""},{"lineNumber":575,"author":{"gitID":"amrut-prabhu"},"content":"Example: `login u/JohnDoe pw/pass1234`"},{"lineNumber":576,"author":{"gitID":"-"},"content":""},{"lineNumber":577,"author":{"gitID":"yash-chowdhary"},"content":"\u003d\u003d\u003d Logging out of the application : `logout` (Since v1.4)"},{"lineNumber":578,"author":{"gitID":"-"},"content":""},{"lineNumber":579,"author":{"gitID":"-"},"content":"Logouts out the user from Club Connect. +"},{"lineNumber":580,"author":{"gitID":"yash-chowdhary"},"content":"Format: `logout` +"},{"lineNumber":581,"author":{"gitID":"yash-chowdhary"},"content":"Alias: `signout`"},{"lineNumber":582,"author":{"gitID":"-"},"content":""},{"lineNumber":583,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":584,"author":{"gitID":"-"},"content":""},{"lineNumber":585,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":586,"author":{"gitID":"yash-chowdhary"},"content":"Format: `redo` +"},{"lineNumber":587,"author":{"gitID":"yash-chowdhary"},"content":"Alias: `r`"},{"lineNumber":588,"author":{"gitID":"-"},"content":""},{"lineNumber":589,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":590,"author":{"gitID":"-"},"content":""},{"lineNumber":591,"author":{"gitID":"yash-chowdhary"},"content":"* `delete 1` +"},{"lineNumber":592,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":593,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":594,"author":{"gitID":"-"},"content":""},{"lineNumber":595,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":596,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":597,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":598,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":599,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":600,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":601,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":602,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":603,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":604,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":605,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":606,"author":{"gitID":"yash-chowdhary"},"content":"\u003d\u003d\u003d Deleting a group : `removegroup` (Since v1.1)"},{"lineNumber":607,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":608,"author":{"gitID":"yash-chowdhary"},"content":"Deletes the specified group from Club Connect. +"},{"lineNumber":609,"author":{"gitID":"yash-chowdhary"},"content":"Format: `removegroup g/GROUP` +"},{"lineNumber":610,"author":{"gitID":"yash-chowdhary"},"content":"Aliases: `rmgroup`, `delgroup`"},{"lineNumber":611,"author":{"gitID":"MuhdNurKamal"},"content":"****"},{"lineNumber":612,"author":{"gitID":"yash-chowdhary"},"content":"* Deletes the specified group from Club Connect."},{"lineNumber":613,"author":{"gitID":"yash-chowdhary"},"content":"* Once the group is deleted, all members who were part of the group will be assigned to the default group `member`."},{"lineNumber":614,"author":{"gitID":"yash-chowdhary"},"content":"* The group must not be a mandatory group (`member`) as that is the default group."},{"lineNumber":615,"author":{"gitID":"yash-chowdhary"},"content":"* The group must exist in Club Connect."},{"lineNumber":616,"author":{"gitID":"yash-chowdhary"},"content":"* The group must be in valid format (i.e. no white-spaces and non-empty)."},{"lineNumber":617,"author":{"gitID":"MuhdNurKamal"},"content":"****"},{"lineNumber":618,"author":{"gitID":"MuhdNurKamal"},"content":"[NOTE]"},{"lineNumber":619,"author":{"gitID":"MuhdNurKamal"},"content":"This command is for `EXCO` members only."},{"lineNumber":620,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":621,"author":{"gitID":"yash-chowdhary"},"content":"Examples:"},{"lineNumber":622,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":623,"author":{"gitID":"amrut-prabhu"},"content":"* `removegroup g/logistics` +"},{"lineNumber":624,"author":{"gitID":"yash-chowdhary"},"content":"Deletes the `logistics` group from Club Connect."},{"lineNumber":625,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":626,"author":{"gitID":"yash-chowdhary"},"content":"* `removegroup g/pr` +"},{"lineNumber":627,"author":{"gitID":"yash-chowdhary"},"content":"Deletes the `pr` group from Club Connect."},{"lineNumber":628,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":629,"author":{"gitID":"yash-chowdhary"},"content":"\u003d\u003d\u003d Selecting a member : `select` (since v1.5rc)"},{"lineNumber":630,"author":{"gitID":"-"},"content":""},{"lineNumber":631,"author":{"gitID":"amrut-prabhu"},"content":"Selects the member identified by the index number used in the most recent member listing. +"},{"lineNumber":632,"author":{"gitID":"yash-chowdhary"},"content":"Format: `select INDEX` +"},{"lineNumber":633,"author":{"gitID":"yash-chowdhary"},"content":"Aliases: `s`, `show`"},{"lineNumber":634,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":635,"author":{"gitID":"MuhdNurKamal"},"content":"****"},{"lineNumber":636,"author":{"gitID":"yash-chowdhary"},"content":"* Selects the member and loads the member page the member at the specified `INDEX`."},{"lineNumber":637,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":638,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":639,"author":{"gitID":"MuhdNurKamal"},"content":"****"},{"lineNumber":640,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":641,"author":{"gitID":"yash-chowdhary"},"content":"Examples:"},{"lineNumber":642,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":643,"author":{"gitID":"yash-chowdhary"},"content":"* `list` +"},{"lineNumber":644,"author":{"gitID":"yash-chowdhary"},"content":"`select 2` +"},{"lineNumber":645,"author":{"gitID":"yash-chowdhary"},"content":"Selects the 2nd member in Club Connect."},{"lineNumber":646,"author":{"gitID":"yash-chowdhary"},"content":"* `find Betsy` +"},{"lineNumber":647,"author":{"gitID":"yash-chowdhary"},"content":"`s 1` +"},{"lineNumber":648,"author":{"gitID":"amrut-prabhu"},"content":"Selects the 1st member in the results of the `find` command."},{"lineNumber":649,"author":{"gitID":"-"},"content":""},{"lineNumber":650,"author":{"gitID":"MuhdNurKamal"},"content":"\u003d\u003d\u003d Showing results of polls : `showresults` (Since v1.4)"},{"lineNumber":651,"author":{"gitID":"-"},"content":""},{"lineNumber":652,"author":{"gitID":"MuhdNurKamal"},"content":"Displays the results of polls in Club Connect. This is a command that can be used by `EXCO` members only to monitor polls in the Club Connect. +"},{"lineNumber":653,"author":{"gitID":"MuhdNurKamal"},"content":"Results include number of voters for each answer of a poll and total number of voters who took part in the poll. Results are anonymous. +"},{"lineNumber":654,"author":{"gitID":"-"},"content":"Format: `showresults` +"},{"lineNumber":655,"author":{"gitID":"-"},"content":"Alias: `showres`"},{"lineNumber":656,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":657,"author":{"gitID":"MuhdNurKamal"},"content":"[NOTE]"},{"lineNumber":658,"author":{"gitID":"MuhdNurKamal"},"content":"This command is for `EXCO` members only."},{"lineNumber":659,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":660,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":661,"author":{"gitID":"yash-chowdhary"},"content":"\u003d\u003d\u003d Signing up a member: `signup` (since v1.4)"},{"lineNumber":662,"author":{"gitID":"-"},"content":"Signs up a member to Club Connect. +"},{"lineNumber":663,"author":{"gitID":"yash-chowdhary"},"content":"Format: `signup n/NAME p/PHONE_NUMBER e/EMAIL m/MATRIC_NUMBER [t/TAG]...` +"},{"lineNumber":664,"author":{"gitID":"yash-chowdhary"},"content":"Aliases: `register`, `enroll` +"},{"lineNumber":665,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":666,"author":{"gitID":"-"},"content":"A member can have any number of tags (including 0)."},{"lineNumber":667,"author":{"gitID":"-"},"content":""},{"lineNumber":668,"author":{"gitID":"-"},"content":"****"},{"lineNumber":669,"author":{"gitID":"-"},"content":"* You must not specify a group while signing up."},{"lineNumber":670,"author":{"gitID":"-"},"content":"* The member who signed up will be automatically be added to a group named exco."},{"lineNumber":671,"author":{"gitID":"yash-chowdhary"},"content":"* You can only sign-up once."},{"lineNumber":672,"author":{"gitID":"yash-chowdhary"},"content":"* You must use the credentials of the signed-up member to continue using Club Connect."},{"lineNumber":673,"author":{"gitID":"-"},"content":"****"},{"lineNumber":674,"author":{"gitID":"-"},"content":""},{"lineNumber":675,"author":{"gitID":"amrut-prabhu"},"content":"Example: `signup n/Alan Walker p/97456895 e/alanw@gmail.com m/A0156489C t/President`"},{"lineNumber":676,"author":{"gitID":"-"},"content":""},{"lineNumber":677,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":678,"author":{"gitID":"-"},"content":""},{"lineNumber":679,"author":{"gitID":"amrut-prabhu"},"content":"Restores Club Connect to the state before the previous _undoable_ command was executed. +"},{"lineNumber":680,"author":{"gitID":"yash-chowdhary"},"content":"Format: `undo` +"},{"lineNumber":681,"author":{"gitID":"yash-chowdhary"},"content":"Alias: `u`"},{"lineNumber":682,"author":{"gitID":"-"},"content":""},{"lineNumber":683,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":684,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":685,"author":{"gitID":"amrut-prabhu"},"content":"Undoable commands: those commands that modify Club Connect\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":686,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":687,"author":{"gitID":"-"},"content":""},{"lineNumber":688,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":689,"author":{"gitID":"-"},"content":""},{"lineNumber":690,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":691,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":692,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":693,"author":{"gitID":"-"},"content":""},{"lineNumber":694,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":695,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":696,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":697,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":698,"author":{"gitID":"-"},"content":""},{"lineNumber":699,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":700,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":701,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":702,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":703,"author":{"gitID":"-"},"content":""},{"lineNumber":704,"author":{"gitID":"yash-chowdhary"},"content":"\u003d\u003d\u003d Viewing all tasks in Club Connect : `viewalltasks` (Since v1.4)"},{"lineNumber":705,"author":{"gitID":"-"},"content":""},{"lineNumber":706,"author":{"gitID":"yash-chowdhary"},"content":"Displays all the tasks created/assigned in Club Connect. This is a command that can be used by `EXCO` members to monitor all the tasks in the club. +"},{"lineNumber":707,"author":{"gitID":"-"},"content":"Format: `viewalltasks` +"},{"lineNumber":708,"author":{"gitID":"-"},"content":"Alias: `alltasks`"},{"lineNumber":709,"author":{"gitID":"MuhdNurKamal"},"content":"[NOTE]"},{"lineNumber":710,"author":{"gitID":"MuhdNurKamal"},"content":"This command is for `EXCO` members only."},{"lineNumber":711,"author":{"gitID":"-"},"content":""},{"lineNumber":712,"author":{"gitID":"yash-chowdhary"},"content":"[NOTE]"},{"lineNumber":713,"author":{"gitID":"yash-chowdhary"},"content":"This command can only be invoked by `EXCO` members."},{"lineNumber":714,"author":{"gitID":"-"},"content":""},{"lineNumber":715,"author":{"gitID":"yash-chowdhary"},"content":"\u003d\u003d\u003d Viewing tasks assigned to or assigned by you : `viewmytasks` (Since v1.4)"},{"lineNumber":716,"author":{"gitID":"-"},"content":""},{"lineNumber":717,"author":{"gitID":"yash-chowdhary"},"content":"Display all tasks created/assigned by the currently member in Club Connect. +"},{"lineNumber":718,"author":{"gitID":"yash-chowdhary"},"content":"The main purpose of this command is to enable `EXCO` members to toggle between all tasks and those related to them. +"},{"lineNumber":719,"author":{"gitID":"-"},"content":"Format: `viewmytasks` +"},{"lineNumber":720,"author":{"gitID":"-"},"content":"Alias: `mytasks`"},{"lineNumber":721,"author":{"gitID":"-"},"content":""},{"lineNumber":722,"author":{"gitID":"MuhdNurKamal"},"content":"\u003d\u003d\u003d Voting in a poll : `vote` (Since v1.4)"},{"lineNumber":723,"author":{"gitID":"-"},"content":""},{"lineNumber":724,"author":{"gitID":"MuhdNurKamal"},"content":"Votes for the specified answer in the specified poll in Club Connect . +"},{"lineNumber":725,"author":{"gitID":"-"},"content":"Format: `vote POLL_INDEX ANSWER_INDEX` +"},{"lineNumber":726,"author":{"gitID":"-"},"content":"Alias: `vpoll`"},{"lineNumber":727,"author":{"gitID":"-"},"content":""},{"lineNumber":728,"author":{"gitID":"-"},"content":"****"},{"lineNumber":729,"author":{"gitID":"MuhdNurKamal"},"content":"* The POLL_INDEX refers to the index number shown in the most recent poll listing."},{"lineNumber":730,"author":{"gitID":"MuhdNurKamal"},"content":"* The ANSWER_INDEX refers to one of the index number of the answers of the specified poll."},{"lineNumber":731,"author":{"gitID":"MuhdNurKamal"},"content":"* The indices *must be positive integers* 1, 2, 3, ..."},{"lineNumber":732,"author":{"gitID":"MuhdNurKamal"},"content":"* Polls voted by current logged in member will not be visible in the poll list unless logged in as an `EXCO` member"},{"lineNumber":733,"author":{"gitID":"-"},"content":"****"},{"lineNumber":734,"author":{"gitID":"-"},"content":""},{"lineNumber":735,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":736,"author":{"gitID":"-"},"content":""},{"lineNumber":737,"author":{"gitID":"MuhdNurKamal"},"content":"* `vote 1 2` +"},{"lineNumber":738,"author":{"gitID":"MuhdNurKamal"},"content":"Votes for the 2nd answer in the 1st poll of the poll listing"},{"lineNumber":739,"author":{"gitID":"MuhdNurKamal"},"content":"* `vote 5 1` +"},{"lineNumber":740,"author":{"gitID":"MuhdNurKamal"},"content":"Votes for the 1st answer in the 5th poll of the poll listing"},{"lineNumber":741,"author":{"gitID":"-"},"content":""},{"lineNumber":742,"author":{"gitID":"yash-chowdhary"},"content":"\u003d\u003d\u003d Auto-Complete Command (Since v1.3)"},{"lineNumber":743,"author":{"gitID":"yash-chowdhary"},"content":"Auto-completes the command on pressing the kbd:[TAB] key. Cycles through all possible commands based on user input."},{"lineNumber":744,"author":{"gitID":"-"},"content":""},{"lineNumber":745,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":746,"author":{"gitID":"-"},"content":""},{"lineNumber":747,"author":{"gitID":"amrut-prabhu"},"content":"Club Connect data is saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":748,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":749,"author":{"gitID":"-"},"content":""},{"lineNumber":750,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":751,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":752,"author":{"gitID":"-"},"content":""},{"lineNumber":753,"author":{"gitID":"amrut-prabhu"},"content":"Encrypts the file in the hard disk that contains data from the Club Connect application. +"},{"lineNumber":754,"author":{"gitID":"amrut-prabhu"},"content":"Format: `encrypt`"},{"lineNumber":755,"author":{"gitID":"-"},"content":"_{explain how the user can enable/disable data encryption}_"},{"lineNumber":756,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":757,"author":{"gitID":"amrut-prabhu"},"content":"[NOTE]"},{"lineNumber":758,"author":{"gitID":"amrut-prabhu"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":759,"author":{"gitID":"amrut-prabhu"},"content":"Encryption is the process of encoding information in such a way that only authorized parties can access it and others cannot.  +"},{"lineNumber":760,"author":{"gitID":"amrut-prabhu"},"content":"Encrypting Club Connect\u0027s data files ensures that others will not be able to read members\u0027 information if they open the files."},{"lineNumber":761,"author":{"gitID":"amrut-prabhu"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":762,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":763,"author":{"gitID":"amrut-prabhu"},"content":"\u003cbr/\u003e"},{"lineNumber":764,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":765,"author":{"gitID":"amrut-prabhu"},"content":"[TIP]"},{"lineNumber":766,"author":{"gitID":"amrut-prabhu"},"content":"To further increase your efficiency while using Club Connect, check out \u003c\u003cTips\u003e\u003e."},{"lineNumber":767,"author":{"gitID":"-"},"content":""},{"lineNumber":768,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":769,"author":{"gitID":"-"},"content":""},{"lineNumber":770,"author":{"gitID":"MuhdNurKamal"},"content":"* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL m/MATRIC_NUMBER g/GROUP [t/TAG]...` +"},{"lineNumber":771,"author":{"gitID":"MuhdNurKamal"},"content":"e.g. `add n/James Jerome p/22224444 e/jamesjerome@example.com m/A1234567H g/publicity`"},{"lineNumber":772,"author":{"gitID":"yash-chowdhary"},"content":"* *Add Task* : `addtask desc/DESCRIPTION d/DUE_DATE ti/TIME` +"},{"lineNumber":773,"author":{"gitID":"yash-chowdhary"},"content":"e.g. `addtask desc/Buy Confetti d/03.04.2018 ti/19:00`"},{"lineNumber":774,"author":{"gitID":"yash-chowdhary"},"content":"* *Assign Task* : `assigntask desc/DESCRIPTION d/DUE_DATE ti/TIME n/NAME` +"},{"lineNumber":775,"author":{"gitID":"yash-chowdhary"},"content":"e.g. `assigntask desc/Buy Confetti d/03.04.2018 ti/19:00 n/Bernice Yu`"},{"lineNumber":776,"author":{"gitID":"-"},"content":"* *Clear* : `clear`"},{"lineNumber":777,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":778,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":779,"author":{"gitID":"MuhdNurKamal"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [m/MATRIC_NUMBER] [g/GROUP] [t/TAG]...` +"},{"lineNumber":780,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":781,"author":{"gitID":"amrut-prabhu"},"content":"* *Delete Group* : `removegroup g/GROUP` +"},{"lineNumber":782,"author":{"gitID":"amrut-prabhu"},"content":"e.g. `removegroup g/Publicity`"},{"lineNumber":783,"author":{"gitID":"amrut-prabhu"},"content":"* *Delete Tag* : `deletetag t/TAG` +"},{"lineNumber":784,"author":{"gitID":"amrut-prabhu"},"content":"e.g. `deletetag t/EventHelper`"},{"lineNumber":785,"author":{"gitID":"yash-chowdhary"},"content":"* *Delete Task* : `deletetask INDEX` +"},{"lineNumber":786,"author":{"gitID":"yash-chowdhary"},"content":"e.g. `deletetask 2`"},{"lineNumber":787,"author":{"gitID":"MuhdNurKamal"},"content":"* *Import members into Club Connect* : `import` +"},{"lineNumber":788,"author":{"gitID":"-"},"content":"e.g. `import C:/Users/Admin/Desktop/members.csv`"},{"lineNumber":789,"author":{"gitID":"MuhdNurKamal"},"content":"* *Export Club Connect data* : `export` +"},{"lineNumber":790,"author":{"gitID":"-"},"content":"e.g. `export C:/Users/John Doe/Downloads/ClubConnectMembers.csv`"},{"lineNumber":791,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":792,"author":{"gitID":"yash-chowdhary"},"content":"e.g. `find James Jacob`"},{"lineNumber":793,"author":{"gitID":"yash-chowdhary"},"content":"* *Email* : `email g/GROUP OR t/TAG c/CLIENT [s/SUBJECT] [b/BODY]` +"},{"lineNumber":794,"author":{"gitID":"yash-chowdhary"},"content":"e.g. `email g/marketing c/outlook s/Test Subject b/Test Body`"},{"lineNumber":795,"author":{"gitID":"-"},"content":"* *List* : `list`"},{"lineNumber":796,"author":{"gitID":"yash-chowdhary"},"content":"* *View All Tasks* : `viewalltasks`"},{"lineNumber":797,"author":{"gitID":"yash-chowdhary"},"content":"* *View My Tasks* : `viewmytasks`"},{"lineNumber":798,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":799,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` +"},{"lineNumber":800,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":801,"author":{"gitID":"MuhdNurKamal"},"content":"* *Add Poll* `addpoll q/QUESTION ans/ANSWER [ans/ANSWER]...` +"},{"lineNumber":802,"author":{"gitID":"MuhdNurKamal"},"content":"e.g. `addpoll n/Where should the annual meeting be held? ans/I-Cube ans/LT7`"},{"lineNumber":803,"author":{"gitID":"MuhdNurKamal"},"content":"* *Delete Poll* `deletepoll INDEX` +"},{"lineNumber":804,"author":{"gitID":"MuhdNurKamal"},"content":"e.g. `deletepoll 2`"},{"lineNumber":805,"author":{"gitID":"MuhdNurKamal"},"content":"* *Vote in a Poll* `vote POLL_INDEX ANSWER_INDEX` +"},{"lineNumber":806,"author":{"gitID":"MuhdNurKamal"},"content":"e.g. `vote 10 2`"},{"lineNumber":807,"author":{"gitID":"MuhdNurKamal"},"content":"* *Show results of polls* : `showresults`"},{"lineNumber":808,"author":{"gitID":"MuhdNurKamal"},"content":"* *Hide results of polls* : `hideresults`"},{"lineNumber":809,"author":{"gitID":"MuhdNurKamal"},"content":"* *Change Display Picture* : `changepic PHOTO_PATH` +"},{"lineNumber":810,"author":{"gitID":"MuhdNurKamal"},"content":"e.g. `changepic C:/Users/John Doe/Desktop/john_doe.jpg` +"},{"lineNumber":811,"author":{"gitID":"MuhdNurKamal"},"content":"* *Compress Member Details* : `compress`"},{"lineNumber":812,"author":{"gitID":"MuhdNurKamal"},"content":"* *Decompress Member Details* : `decompress`"},{"lineNumber":813,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":814,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":815,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"},{"lineNumber":816,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":817,"author":{"gitID":"amrut-prabhu"},"content":"\u003d\u003d Tips"},{"lineNumber":818,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":819,"author":{"gitID":"amrut-prabhu"},"content":"Not satisfied with your productivity while using Club Connect?"},{"lineNumber":820,"author":{"gitID":"amrut-prabhu"},"content":"Can\u0027t remember the command names?"},{"lineNumber":821,"author":{"gitID":"amrut-prabhu"},"content":"Here are some tips and tricks:"},{"lineNumber":822,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":823,"author":{"gitID":"amrut-prabhu"},"content":"* *Transferring data to another computer* +"},{"lineNumber":824,"author":{"gitID":"amrut-prabhu"},"content":"Install the Club Connect app on the other computer."},{"lineNumber":825,"author":{"gitID":"amrut-prabhu"},"content":"Then, overwrite the empty data file it creates (`clubbook.xml`) with the data file from your previous `Club Connect` folder."},{"lineNumber":826,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":827,"author":{"gitID":"amrut-prabhu"},"content":"* *Alternative command names*"},{"lineNumber":828,"author":{"gitID":"amrut-prabhu"},"content":"If you do not like the default command name or feel that it is too long, you can use one of its aliases to execute the command instead."},{"lineNumber":829,"author":{"gitID":"amrut-prabhu"},"content":"+"},{"lineNumber":830,"author":{"gitID":"amrut-prabhu"},"content":"Example: The `changepic` command uses `pic` as an alias."},{"lineNumber":831,"author":{"gitID":"amrut-prabhu"},"content":"So, both commands shown below can be used change your profile picture to the \"john_doe.jpg\" image on John Doe\u0027s Desktop. +"},{"lineNumber":832,"author":{"gitID":"amrut-prabhu"},"content":"`changepic C:/Users/John Doe/Desktop/john_doe.jpg`"},{"lineNumber":833,"author":{"gitID":"amrut-prabhu"},"content":"+"},{"lineNumber":834,"author":{"gitID":"amrut-prabhu"},"content":"`pic C:/Users/John Doe/Desktop/john_doe.jpg` +"},{"lineNumber":835,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":836,"author":{"gitID":"amrut-prabhu"},"content":"[[csv-data-format]]"},{"lineNumber":837,"author":{"gitID":"amrut-prabhu"},"content":"* *CSV format for `import`* +"},{"lineNumber":838,"author":{"gitID":"amrut-prabhu"},"content":"In order to successfully import data of members from the specified file, it has to follow the format shown in \u003c\u003ccsv-format,Figure 3\u003e\u003e."},{"lineNumber":839,"author":{"gitID":"amrut-prabhu"},"content":"+"},{"lineNumber":840,"author":{"gitID":"amrut-prabhu"},"content":"[[csv-format]]"},{"lineNumber":841,"author":{"gitID":"amrut-prabhu"},"content":".Required format of data in the file"},{"lineNumber":842,"author":{"gitID":"amrut-prabhu"},"content":"image::CSV_format.png[height\u003d\"350\"]"},{"lineNumber":843,"author":{"gitID":"amrut-prabhu"},"content":"+"},{"lineNumber":844,"author":{"gitID":"amrut-prabhu"},"content":"The columns in the import file should be in the same order as shown in the figure above."},{"lineNumber":845,"author":{"gitID":"amrut-prabhu"},"content":"All the tags of a member should be in a single cell, separated by commas (\",\")."},{"lineNumber":846,"author":{"gitID":"amrut-prabhu"},"content":"Also, to successfully import the data of a member, you have to make sure that their details conform to the constraints of the \u003c\u003cadd-command,`add` command\u003e\u003e."},{"lineNumber":847,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":848,"author":{"gitID":"yash-chowdhary"},"content":"\u003d\u003d Coming in v2.0"},{"lineNumber":849,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":850,"author":{"gitID":"amrut-prabhu"},"content":"* *Encrypt data files* : `encrypt` +"},{"lineNumber":851,"author":{"gitID":"amrut-prabhu"},"content":"Encryption is the process of encoding information in such a way that only authorized parties can access it and others cannot.  +"},{"lineNumber":852,"author":{"gitID":"amrut-prabhu"},"content":"By encrypting Club Connect\u0027s data files, you can ensure that others will not be able to read members\u0027 information if they open the files. Do note, however, that this may slightly affect performance."},{"lineNumber":853,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":854,"author":{"gitID":"amrut-prabhu"},"content":"* *Chat with any member* : `chat INDEX` +"},{"lineNumber":855,"author":{"gitID":"amrut-prabhu"},"content":"You can message other members in real time without ever needing to leave the Club Connect application."},{"lineNumber":856,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":857,"author":{"gitID":"amrut-prabhu"},"content":"* *Group Chats* : `gchat GROUP_NAME` +"},{"lineNumber":858,"author":{"gitID":"amrut-prabhu"},"content":"Tired of sending the same message to multiple members? The *Group Chat* feature allows you to have conversations as a group so that everyone is kept in the loop."},{"lineNumber":859,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":860,"author":{"gitID":"amrut-prabhu"},"content":"* *Submit anonymous feedback* : `feedback` +"},{"lineNumber":861,"author":{"gitID":"amrut-prabhu"},"content":"Not satisfied with certain aspects of the club? Afraid to speak up? +"},{"lineNumber":862,"author":{"gitID":"amrut-prabhu"},"content":"Fret not, Club Connect provides you with a platform to voice your opinions. And yes, we guarantee your anonymity."},{"lineNumber":863,"author":{"gitID":"amrut-prabhu"},"content":""}],"authorContributionMap":{"MuhdNurKamal":150,"amrut-prabhu":213,"yash-chowdhary":238,"-":262}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.DeleteCommand.MESSAGE_DELETE_MEMBER_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TestUtil.getMember;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TestUtil.getMidIndex;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_FIRST_MEMBER;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.club.logic.commands.LogInCommand;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.RedoCommand;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.UndoCommand;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.MemberNotFoundException;"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"public class DeleteCommandSystemTest extends ClubBookSystemTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: delete the first member in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ObservableList\u003cMember\u003e memberObservableList \u003d expectedModel.getClubBook().getMemberList();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String logInCommand \u003d LogInCommand.COMMAND_WORD + \" u/\" + memberObservableList.get(0).getMatricNumber().value"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                + \" pw/password\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        executeCommand(logInCommand);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_MEMBER.getOneBased() + \"       \";"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"        Member deletedMember \u003d removeMember(expectedModel, INDEX_FIRST_MEMBER);"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_MEMBER_SUCCESS, deletedMember);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: delete the last member in the list -\u003e deleted */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        modelBeforeDeletingLast.updateFilteredMemberList(modelBeforeDeletingLast.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"        Index lastMemberIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandSuccess(lastMemberIndex);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: undo deleting the last member in the list -\u003e last member restored */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: redo deleting the last member in the list -\u003e last member deleted again */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"        removeMember(modelBeforeDeletingLast, lastMemberIndex);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: delete the middle member in the list -\u003e deleted */"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"        Index middleMemberIndex \u003d getMidIndex(getModel());"},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandSuccess(middleMemberIndex);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: filtered member list, delete index within bounds of club book and member list -\u003e deleted */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        logInCommand \u003d LogInCommand.COMMAND_WORD + \" u/\" + memberObservableList.get(0).getMatricNumber().value"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                + \" pw/password\";"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        executeCommand(logInCommand);"},{"lineNumber":73,"author":{"gitID":"amrut-prabhu"},"content":"        showMembersWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":74,"author":{"gitID":"amrut-prabhu"},"content":"        Index index \u003d INDEX_FIRST_MEMBER;"},{"lineNumber":75,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredMemberList().size());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: filtered member list, delete index within bounds of club book but out of bounds of member list"},{"lineNumber":79,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":80,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":81,"author":{"gitID":"amrut-prabhu"},"content":"        showMembersWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":82,"author":{"gitID":"amrut-prabhu"},"content":"        int invalidIndex \u003d getModel().getClubBook().getMemberList().size();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":84,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"amrut-prabhu"},"content":"        /* --------------------- Performing delete operation while a member card is selected ------------------------ */"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: delete the selected member -\u003e member list panel selects the member before the deleted member */"},{"lineNumber":89,"author":{"gitID":"amrut-prabhu"},"content":"        showAllMembers();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredMemberList(expectedModel.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":94,"author":{"gitID":"amrut-prabhu"},"content":"        selectMember(selectedIndex);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":96,"author":{"gitID":"amrut-prabhu"},"content":"        deletedMember \u003d removeMember(expectedModel, selectedIndex);"},{"lineNumber":97,"author":{"gitID":"amrut-prabhu"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_MEMBER_SUCCESS, deletedMember);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":112,"author":{"gitID":"amrut-prabhu"},"content":"                getModel().getClubBook().getMemberList().size() + 1);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":114,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"amrut-prabhu"},"content":"     * Removes the {@code member} at the specified {@code index} in {@code model}\u0027s club book."},{"lineNumber":128,"author":{"gitID":"amrut-prabhu"},"content":"     * @return the removed member"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"amrut-prabhu"},"content":"    private Member removeMember(Model model, Index index) {"},{"lineNumber":131,"author":{"gitID":"amrut-prabhu"},"content":"        Member targetMember \u003d getMember(model, index);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":133,"author":{"gitID":"amrut-prabhu"},"content":"            model.deleteMember(targetMember);"},{"lineNumber":134,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (MemberNotFoundException mnfe) {"},{"lineNumber":135,"author":{"gitID":"amrut-prabhu"},"content":"            throw new AssertionError(\"targetMember is retrieved from model.\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"amrut-prabhu"},"content":"        return targetMember;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"amrut-prabhu"},"content":"     * Deletes the member at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":147,"author":{"gitID":"amrut-prabhu"},"content":"        Member deletedMember \u003d removeMember(expectedModel, toDelete);"},{"lineNumber":148,"author":{"gitID":"amrut-prabhu"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_MEMBER_SUCCESS, deletedMember);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":151,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":163,"author":{"gitID":"amrut-prabhu"},"content":"     * {@code ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":164,"author":{"gitID":"amrut-prabhu"},"content":"     * @see ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":174,"author":{"gitID":"amrut-prabhu"},"content":"     * @see ClubBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":199,"author":{"gitID":"amrut-prabhu"},"content":"     * {@code ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":200,"author":{"gitID":"amrut-prabhu"},"content":"     * @see ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":62,"-":148}},{"path":"src/test/java/systemtests/SystemTestSetupHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.TestApp;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ReadOnlyClubBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Contains helper methods that system tests require."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SystemTestSetupHelper {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Sets up a new {@code TestApp} and returns it."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"    public TestApp setupApplication(Supplier\u003cReadOnlyClubBook\u003e clubBook, String saveFileLocation) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            FxToolkit.registerStage(Stage::new);"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(clubBook, saveFileLocation));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Application takes too long to set up.\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return testApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Initializes TestFX."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static void initialize() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            FxToolkit.registerPrimaryStage();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            FxToolkit.hideStage();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        } catch (TimeoutException e) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new AssertionError(e);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public MainWindowHandle setupMainWindowHandle() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            FxToolkit.setupStage((stage) -\u003e {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                mainWindowHandle \u003d new MainWindowHandle(stage);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                mainWindowHandle.focus();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            });"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            FxToolkit.showStage();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Stage takes too long to set up.\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Tears down existing stages."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void tearDownStage() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            FxToolkit.cleanupStages();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Stage takes too long to tear down.\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":4,"-":69}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.GROUP_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.GROUP_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_MATRIC_NUMBER_DESC;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.MATRIC_NUMBER_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.MATRIC_NUMBER_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.PASSWORD_DESC;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.USERNAME_DESC_AMY;"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.USERNAME_DESC_BOB;"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_GROUP_AMY;"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_AMY;"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_BOB;"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.ALICE;"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.AMY;"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.BOB;"},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.CARL;"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.HOON;"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.IDA;"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.KEYWORD_MATCHING_MEIER;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":52,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.Messages;"},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.AddCommand;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.club.logic.commands.LogInCommand;"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.RedoCommand;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.club.logic.commands.SignUpCommand;"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.UndoCommand;"},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Email;"},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Name;"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Phone;"},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.DuplicateMatricNumberException;"},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.MemberBuilder;"},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.MemberUtil;"},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":70,"author":{"gitID":"amrut-prabhu"},"content":"public class AddCommandSystemTest extends ClubBookSystemTest {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private ObservableList\u003cMember\u003e observableList;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private Member member;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        observableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        member \u003d observableList.get(0);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        String logInCommand \u003d LogInCommand.COMMAND_WORD + \" \""},{"lineNumber":79,"author":{"gitID":"-"},"content":"                + PREFIX_USERNAME + member.getCredentials().getUsername().value + \" \""},{"lineNumber":80,"author":{"gitID":"-"},"content":"                + PREFIX_PASSWORD + member.getCredentials().getPassword().value;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        executeCommand(logInCommand);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: add a member without tags to a non-empty club book, command with leading spaces and trailing spaces"},{"lineNumber":86,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":87,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":88,"author":{"gitID":"amrut-prabhu"},"content":"        Member toAdd \u003d AMY;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":90,"author":{"gitID":"MuhdNurKamal"},"content":"                + EMAIL_DESC_AMY + \"   \" + MATRIC_NUMBER_DESC_AMY + \"   \""},{"lineNumber":91,"author":{"gitID":"-"},"content":"                + GROUP_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \" + \" \" + USERNAME_DESC_AMY + \" \" + PASSWORD_DESC;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        model.updateFilteredMemberList(model.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":102,"author":{"gitID":"amrut-prabhu"},"content":"        model.addMember(toAdd);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: add a member with all fields same as another member in the club book except name -\u003e rejected */"},{"lineNumber":107,"author":{"gitID":"amrut-prabhu"},"content":"        toAdd \u003d new MemberBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":108,"author":{"gitID":"MuhdNurKamal"},"content":"                .withMatricNumber(VALID_MATRIC_NUMBER_AMY).withGroup(VALID_GROUP_AMY)"},{"lineNumber":109,"author":{"gitID":"MuhdNurKamal"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":110,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + MATRIC_NUMBER_DESC_AMY"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                + GROUP_DESC_AMY + TAG_DESC_FRIEND + USERNAME_DESC_BOB + PASSWORD_DESC;"},{"lineNumber":112,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_MATRIC_NUMBER);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: add a member with all fields same as another member in the club book except phone -\u003e rejected */"},{"lineNumber":115,"author":{"gitID":"amrut-prabhu"},"content":"        toAdd \u003d new MemberBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":116,"author":{"gitID":"MuhdNurKamal"},"content":"                .withMatricNumber(VALID_MATRIC_NUMBER_AMY).withGroup(VALID_GROUP_AMY)"},{"lineNumber":117,"author":{"gitID":"MuhdNurKamal"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":118,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + MATRIC_NUMBER_DESC_AMY"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                + GROUP_DESC_AMY + TAG_DESC_FRIEND + USERNAME_DESC_AMY + PASSWORD_DESC;"},{"lineNumber":120,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_MATRIC_NUMBER);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: add a member with all fields same as another member in the club book except email -\u003e rejected */"},{"lineNumber":123,"author":{"gitID":"amrut-prabhu"},"content":"        toAdd \u003d new MemberBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":124,"author":{"gitID":"MuhdNurKamal"},"content":"                .withMatricNumber(VALID_MATRIC_NUMBER_AMY).withGroup(VALID_GROUP_AMY)"},{"lineNumber":125,"author":{"gitID":"MuhdNurKamal"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":126,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + MATRIC_NUMBER_DESC_AMY"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                + GROUP_DESC_AMY + TAG_DESC_FRIEND + USERNAME_DESC_AMY + PASSWORD_DESC;"},{"lineNumber":128,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_MATRIC_NUMBER);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: add a member with all fields same as another member in the club book except matric number -\u003e added */"},{"lineNumber":131,"author":{"gitID":"amrut-prabhu"},"content":"        toAdd \u003d new MemberBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":132,"author":{"gitID":"MuhdNurKamal"},"content":"                .withMatricNumber(VALID_MATRIC_NUMBER_BOB).withGroup(VALID_GROUP_AMY)"},{"lineNumber":133,"author":{"gitID":"MuhdNurKamal"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":134,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + MATRIC_NUMBER_DESC_BOB"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                + GROUP_DESC_AMY + TAG_DESC_FRIEND + USERNAME_DESC_AMY + PASSWORD_DESC;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: add to empty club book -\u003e added */"},{"lineNumber":139,"author":{"gitID":"amrut-prabhu"},"content":"        deleteAllMembers();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        String signUpCommand \u003d SignUpCommand.COMMAND_WORD + \" \""},{"lineNumber":141,"author":{"gitID":"-"},"content":"                + PREFIX_NAME + \"John Doe \""},{"lineNumber":142,"author":{"gitID":"-"},"content":"                + PREFIX_PHONE + \"98765432 \""},{"lineNumber":143,"author":{"gitID":"-"},"content":"                + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":144,"author":{"gitID":"-"},"content":"                + PREFIX_MATRIC_NUMBER + \"A0123456H \""},{"lineNumber":145,"author":{"gitID":"-"},"content":"                + PREFIX_TAG + \"friends \""},{"lineNumber":146,"author":{"gitID":"-"},"content":"                + PREFIX_TAG + \"owesMoney \";"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        executeCommand(signUpCommand);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        logInCommand \u003d LogInCommand.COMMAND_WORD + \" \""},{"lineNumber":149,"author":{"gitID":"-"},"content":"                + PREFIX_USERNAME + \"A0123456H\" + \" \""},{"lineNumber":150,"author":{"gitID":"-"},"content":"                + PREFIX_PASSWORD + \"password\";"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        executeCommand(logInCommand);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: add a member with tags, command with parameters in random order -\u003e added */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":156,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + MATRIC_NUMBER_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":157,"author":{"gitID":"-"},"content":"                + GROUP_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB + USERNAME_DESC_BOB + PASSWORD_DESC;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: add a member, missing tags -\u003e added */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: filters the member list before adding -\u003e added */"},{"lineNumber":166,"author":{"gitID":"amrut-prabhu"},"content":"        showMembersWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"amrut-prabhu"},"content":"        /* ------------------------ Perform add operation while a member card is selected --------------------------- */"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: selects first card in the member list, add a member -\u003e added, card selection remains unchanged */"},{"lineNumber":172,"author":{"gitID":"amrut-prabhu"},"content":"        selectMember(Index.fromOneBased(1));"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: add a duplicate member -\u003e rejected */"},{"lineNumber":178,"author":{"gitID":"amrut-prabhu"},"content":"        command \u003d MemberUtil.getAddCommand(HOON);"},{"lineNumber":179,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_MATRIC_NUMBER);"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: add a duplicate member except with different tags -\u003e rejected */"},{"lineNumber":182,"author":{"gitID":"amrut-prabhu"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalMembers#ALICE"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":184,"author":{"gitID":"amrut-prabhu"},"content":"        // ClubBook#addMember(member)"},{"lineNumber":185,"author":{"gitID":"amrut-prabhu"},"content":"        command \u003d MemberUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":186,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_MATRIC_NUMBER);"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":189,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + MATRIC_NUMBER_DESC_AMY;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":193,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + MATRIC_NUMBER_DESC_AMY;"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":197,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + MATRIC_NUMBER_DESC_AMY;"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"MuhdNurKamal"},"content":"        /* Case: missing matric number -\u003e rejected */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":205,"author":{"gitID":"amrut-prabhu"},"content":"        command \u003d \"adds \" + MemberUtil.getMemberDetails(toAdd);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":209,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY"},{"lineNumber":210,"author":{"gitID":"MuhdNurKamal"},"content":"                + EMAIL_DESC_AMY + MATRIC_NUMBER_DESC_AMY;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":214,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC"},{"lineNumber":215,"author":{"gitID":"MuhdNurKamal"},"content":"                + EMAIL_DESC_AMY + MATRIC_NUMBER_DESC_AMY;"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":219,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":220,"author":{"gitID":"MuhdNurKamal"},"content":"                + INVALID_EMAIL_DESC + MATRIC_NUMBER_DESC_AMY;"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"MuhdNurKamal"},"content":"        /* Case: invalid matric number -\u003e rejected */"},{"lineNumber":224,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":225,"author":{"gitID":"MuhdNurKamal"},"content":"                + EMAIL_DESC_AMY + INVALID_MATRIC_NUMBER_DESC;"},{"lineNumber":226,"author":{"gitID":"MuhdNurKamal"},"content":"        assertCommandFailure(command, MatricNumber.MESSAGE_MATRIC_NUMBER_CONSTRAINTS);"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":229,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + MATRIC_NUMBER_DESC_AMY"},{"lineNumber":230,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":240,"author":{"gitID":"amrut-prabhu"},"content":"     * 4. {@code Model}, {@code Storage} and {@code MemberListPanel} equal to the corresponding components in"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":245,"author":{"gitID":"amrut-prabhu"},"content":"     * {@code ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":246,"author":{"gitID":"amrut-prabhu"},"content":"     * @see ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":248,"author":{"gitID":"amrut-prabhu"},"content":"    private void assertCommandSuccess(Member toAdd) {"},{"lineNumber":249,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandSuccess(MemberUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":253,"author":{"gitID":"amrut-prabhu"},"content":"     * Performs the same verification as {@code assertCommandSuccess(member)}. Executes {@code command}"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":255,"author":{"gitID":"amrut-prabhu"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Member)"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":257,"author":{"gitID":"amrut-prabhu"},"content":"    private void assertCommandSuccess(String command, Member toAdd) {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":260,"author":{"gitID":"amrut-prabhu"},"content":"            expectedModel.addMember(toAdd);"},{"lineNumber":261,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (DuplicateMatricNumberException dmne) {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":270,"author":{"gitID":"amrut-prabhu"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, member)} except asserts that"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":273,"author":{"gitID":"amrut-prabhu"},"content":"     * 2. {@code Model}, {@code Storage} and {@code MemberListPanel} equal to the corresponding components in"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":275,"author":{"gitID":"amrut-prabhu"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Member)"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":289,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":290,"author":{"gitID":"amrut-prabhu"},"content":"     * 4. {@code Model}, {@code Storage} and {@code MemberListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":291,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":293,"author":{"gitID":"amrut-prabhu"},"content":"     * {@code ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":294,"author":{"gitID":"amrut-prabhu"},"content":"     * @see ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":295,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":296,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":300,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":304,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":305,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":29,"amrut-prabhu":108,"-":168}},{"path":"src/test/java/systemtests/ClubBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"import guitests.guihandles.MemberListPanelHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.MainApp;"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.TestApp;"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.EventsCenter;"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.ClearCommand;"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.FindCommand;"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.ListCommand;"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.SelectCommand;"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ClubBook;"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.TypicalMembers;"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.ui.BrowserPanel;"},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.ui.CommandBox;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":" * A system test class for ClubBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":48,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":49,"author":{"gitID":"-"},"content":" */"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"public abstract class ClubBookSystemTest {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"amrut-prabhu"},"content":"    protected ClubBook getInitialData() {"},{"lineNumber":87,"author":{"gitID":"amrut-prabhu"},"content":"        return TypicalMembers.getTypicalClubBook();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"amrut-prabhu"},"content":"    public MemberListPanelHandle getMemberListPanel() {"},{"lineNumber":106,"author":{"gitID":"amrut-prabhu"},"content":"        return mainWindowHandle.getMemberListPanel();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":133,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"amrut-prabhu"},"content":"     * Displays all members in the club book."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"amrut-prabhu"},"content":"    protected void showAllMembers() {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":145,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(getModel().getClubBook().getMemberList().size(), getModel().getFilteredMemberList().size());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"amrut-prabhu"},"content":"     * Displays all members with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"amrut-prabhu"},"content":"    protected void showMembersWithName(String keyword) {"},{"lineNumber":152,"author":{"gitID":"MuhdNurKamal"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" \" + keyword);"},{"lineNumber":153,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(getModel().getFilteredMemberList().size() \u003c getModel().getClubBook().getMemberList().size());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"amrut-prabhu"},"content":"     * Selects the member at {@code index} of the displayed list."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"amrut-prabhu"},"content":"    protected void selectMember(Index index) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":161,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(index.getZeroBased(), getMemberListPanel().getSelectedCardIndex());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"amrut-prabhu"},"content":"     * Deletes all members in the club book."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"amrut-prabhu"},"content":"    protected void deleteAllMembers() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD + \" Y\");"},{"lineNumber":170,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(0, getModel().getClubBook().getMemberList().size());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":175,"author":{"gitID":"amrut-prabhu"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same member objects as {@code expectedModel}"},{"lineNumber":176,"author":{"gitID":"amrut-prabhu"},"content":"     * and the member list panel displays the members in the model correctly."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":183,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(expectedModel.getClubBook(), testApp.readStorageClubBook());"},{"lineNumber":184,"author":{"gitID":"amrut-prabhu"},"content":"        assertListMatching(getMemberListPanel(), expectedModel.getFilteredMemberList());"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"amrut-prabhu"},"content":"     * Calls {@code BrowserPanelHandle}, {@code MemberListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":196,"author":{"gitID":"amrut-prabhu"},"content":"        getMemberListPanel().rememberSelectedMemberCard();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":201,"author":{"gitID":"amrut-prabhu"},"content":"     * of the previously selected member."},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":206,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(getMemberListPanel().isAnyCardSelected());"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":210,"author":{"gitID":"amrut-prabhu"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the member in the member list panel at"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":213,"author":{"gitID":"amrut-prabhu"},"content":"     * @see MemberListPanelHandle#isSelectedMemberCardChanged()"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":216,"author":{"gitID":"amrut-prabhu"},"content":"        String selectedCardName \u003d getMemberListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getMemberListPanel().getSelectedCardIndex());"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":229,"author":{"gitID":"amrut-prabhu"},"content":"     * Asserts that the browser\u0027s url and the selected card in the member list panel remain unchanged."},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":231,"author":{"gitID":"amrut-prabhu"},"content":"     * @see MemberListPanelHandle#isSelectedMemberCardChanged()"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":235,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(getMemberListPanel().isSelectedMemberCardChanged());"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":240,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":247,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":254,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":264,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":275,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":278,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":279,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":280,"author":{"gitID":"amrut-prabhu"},"content":"            assertListMatching(getMemberListPanel(), getModel().getFilteredMemberList());"},{"lineNumber":281,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":282,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":283,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":287,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":290,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":291,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":294,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":2,"amrut-prabhu":53,"-":240}},{"path":"src/test/java/systemtests/SignUpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.club.logic.commands.LogInCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.club.logic.commands.SignUpCommand;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ClubBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Email;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Name;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Phone;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.TestUtil;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class SignUpCommandSystemTest extends ClubBookSystemTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"    protected ClubBook getInitialData() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Returns a non-existent file location to force test app to load sample data."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        String filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        deleteFileIfExists(filePath);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Deletes the file at {@code filePath} if it exists."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private void deleteFileIfExists(String filePath) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            Files.deleteIfExists(Paths.get(filePath));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            throw new AssertionError(ioe);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void signup() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Member[] list \u003d new Member[1];"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        list[0] \u003d  new Member(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                new MatricNumber(\"A5215090A\"), new Group(\"logistics\"),"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                getTagSet(\"friends\"));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        String signupcommand \u003d SignUpCommand.COMMAND_WORD +  \" \""},{"lineNumber":67,"author":{"gitID":"-"},"content":"                + PREFIX_NAME + list[0].getName().toString() + \" \""},{"lineNumber":68,"author":{"gitID":"-"},"content":"                + PREFIX_PHONE + list[0].getPhone().toString() + \" \""},{"lineNumber":69,"author":{"gitID":"-"},"content":"                + PREFIX_EMAIL + list[0].getEmail().value + \" \""},{"lineNumber":70,"author":{"gitID":"-"},"content":"                + PREFIX_MATRIC_NUMBER + list[0].getMatricNumber() + \" \""},{"lineNumber":71,"author":{"gitID":"-"},"content":"                + PREFIX_TAG + \"friends \";"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        String logincommand \u003d LogInCommand.COMMAND_WORD + \" u/\" + list[0].getCredentials().getUsername().value"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                + \" pw/password\";"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        executeCommand(signupcommand);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        executeCommand(logincommand);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertListMatching(getMemberListPanel(), list);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":3,"amrut-prabhu":7,"-":80}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_FIRST_MEMBER;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.DeleteCommand;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.HelpCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.club.logic.commands.LogInCommand;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.SelectCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.ui.BrowserPanel;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.ui.StatusBarFooter;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"public class HelpCommandSystemTest extends ClubBookSystemTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        ObservableList\u003cMember\u003e memberObservableList \u003d getModel().getClubBook().getMemberList();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        String logInCommand \u003d LogInCommand.COMMAND_WORD + \" u/\" + memberObservableList.get(0).getMatricNumber().value"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                + \" pw/password\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        executeCommand(logInCommand);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"        getMemberListPanel().click();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        getBrowserPanel().click();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertHelpWindowNotOpen();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":71,"author":{"gitID":"amrut-prabhu"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MEMBER.getOneBased());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"},{"lineNumber":76,"author":{"gitID":"amrut-prabhu"},"content":"        assertListMatching(getMemberListPanel(), getModel().getFilteredMemberList());"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":80,"author":{"gitID":"amrut-prabhu"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MEMBER.getOneBased());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":12,"-":90}},{"path":"src/test/java/systemtests/RemoveGroupCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_MANDATORY_GROUP;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_NON_EXISTENT_GROUP;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.GROUP_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_GROUP;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_GROUP_DESC;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.MANDATORY_GROUP;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.MANDATORY_GROUP_DESC;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.NON_EXISTENT_GROUP;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.NON_EXISTENT_GROUP_DESC;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_GROUP_AMY;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.RemoveGroupCommand.MESSAGE_SUCCESS;"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.LogInCommand;"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.RedoCommand;"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.RemoveGroupCommand;"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.UndoCommand;"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.Model;"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.group.exceptions.GroupCannotBeRemovedException;"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"public class RemoveGroupCommandSystemTest extends ClubBookSystemTest {"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"    public void removeGroup() {"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"        Model modelBeforeDeletingGroup \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"        ObservableList\u003cMember\u003e memberObservableList \u003d expectedModel.getClubBook().getMemberList();"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"        String logInCommand \u003d LogInCommand.COMMAND_WORD + \" u/\" + memberObservableList.get(0).getMatricNumber().value"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"                + \" pw/password\";"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"        executeCommand(logInCommand);"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.updateFilteredMemberList(expectedModel.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"        modelBeforeDeletingGroup.updateFilteredMemberList(modelBeforeDeletingGroup.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"        Group deletedGroup;"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"        String command;"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"        /* ------------------------ Perform removegroup operations on the shown unfiltered list -------------------- */"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: delete a valid group which is present in the club book */"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d \" \" + RemoveGroupCommand.COMMAND_WORD + \" \" + GROUP_DESC_AMY + \" \";"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"        deletedGroup \u003d deleteGroup(expectedModel, VALID_GROUP_AMY);"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_SUCCESS, deletedGroup);"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: undo deleting the group -\u003e group restored in relevant members */"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(command, modelBeforeDeletingGroup, expectedResultMessage);"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"        /*Case: redo deleting the group -\u003e deleted */"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: delete an invalid group */"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d \" \" + RemoveGroupCommand.COMMAND_WORD + \" \" + INVALID_GROUP_DESC + \" \";"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"        deletedGroup \u003d deleteGroup(expectedModel, INVALID_GROUP);"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(null, deletedGroup);"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, Group.MESSAGE_GROUP_CONSTRAINTS);"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: delete a mandatory group */"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d \" \" + RemoveGroupCommand.COMMAND_WORD + \" \" + MANDATORY_GROUP_DESC + \" \";"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"        deletedGroup \u003d deleteGroup(expectedModel, MANDATORY_GROUP);"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(null, deletedGroup);"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, String.format(MESSAGE_MANDATORY_GROUP, MANDATORY_GROUP));"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: delete a non-existent group */"},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d \" \" + RemoveGroupCommand.COMMAND_WORD + \" \" + NON_EXISTENT_GROUP_DESC + \" \";"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"        deletedGroup \u003d deleteGroup(expectedModel, NON_EXISTENT_GROUP);"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(null, deletedGroup);"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, String.format(MESSAGE_NON_EXISTENT_GROUP, NON_EXISTENT_GROUP));"},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"     * 4. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":"     *"},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":"     * {@code ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":"     * @see ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":"        executeCommand(command);"},{"lineNumber":94,"author":{"gitID":"yash-chowdhary"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.updateFilteredMemberList(expectedModel.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":96,"author":{"gitID":"yash-chowdhary"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":97,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":98,"author":{"gitID":"yash-chowdhary"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":99,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":101,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"yash-chowdhary"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"yash-chowdhary"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"yash-chowdhary"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"yash-chowdhary"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"yash-chowdhary"},"content":"     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"yash-chowdhary"},"content":"     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"yash-chowdhary"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":109,"author":{"gitID":"yash-chowdhary"},"content":"     * {@code ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":110,"author":{"gitID":"yash-chowdhary"},"content":"     * @see ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":111,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"yash-chowdhary"},"content":"    private void assertCommandSuccess(String command, Model model, String expectedResultMessage) {"},{"lineNumber":113,"author":{"gitID":"yash-chowdhary"},"content":"        executeCommand(command);"},{"lineNumber":114,"author":{"gitID":"yash-chowdhary"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, model);"},{"lineNumber":115,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":116,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":117,"author":{"gitID":"yash-chowdhary"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":118,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":120,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"yash-chowdhary"},"content":"     * Removes the group from model"},{"lineNumber":122,"author":{"gitID":"yash-chowdhary"},"content":"     * @param model expected model"},{"lineNumber":123,"author":{"gitID":"yash-chowdhary"},"content":"     * @param group new Group object to be created with this string"},{"lineNumber":124,"author":{"gitID":"yash-chowdhary"},"content":"     * @return either a valid Group object if the group has been deleted; null otherwise"},{"lineNumber":125,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"yash-chowdhary"},"content":"    private Group deleteGroup(Model model, String group) {"},{"lineNumber":127,"author":{"gitID":"yash-chowdhary"},"content":"        if (Group.isValidGroup(group)) {"},{"lineNumber":128,"author":{"gitID":"yash-chowdhary"},"content":"            try {"},{"lineNumber":129,"author":{"gitID":"yash-chowdhary"},"content":"                model.removeGroup(new Group(group));"},{"lineNumber":130,"author":{"gitID":"yash-chowdhary"},"content":"            } catch (GroupNotFoundException gnfe) {"},{"lineNumber":131,"author":{"gitID":"yash-chowdhary"},"content":"                return null;"},{"lineNumber":132,"author":{"gitID":"yash-chowdhary"},"content":"            } catch (GroupCannotBeRemovedException e) {"},{"lineNumber":133,"author":{"gitID":"yash-chowdhary"},"content":"                return null;"},{"lineNumber":134,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":135,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":136,"author":{"gitID":"yash-chowdhary"},"content":"            return new Group(group);"},{"lineNumber":137,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"yash-chowdhary"},"content":"        return null;"},{"lineNumber":139,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":140}},{"path":"src/test/java/systemtests/ClockRule.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.time.Instant;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.TestRule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.runner.Description;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.runners.model.Statement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.ui.StatusBarFooter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * This rule makes the time stamp in the status bar predictable during a test."},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Before the test starts, the rule replaces the clock in the status bar with a fixed clock."},{"lineNumber":16,"author":{"gitID":"-"},"content":" * At the end of the test, the rule restores the original clock."},{"lineNumber":17,"author":{"gitID":"-"},"content":" * @see Clock#fixed(Instant, ZoneId)"},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class ClockRule implements TestRule {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private Clock injectedClock;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Clock originalClock \u003d StatusBarFooter.getClock();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    protected void before() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        setInjectedClockToCurrentTime();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    protected void after() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(originalClock);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public Statement apply(final Statement base, final Description description) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return new Statement() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            public void evaluate() throws Throwable {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                before();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                try {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                    base.evaluate();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                } finally {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                    after();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                }"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Clock getInjectedClock() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return injectedClock;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Replaces the clock in the status bar with a fixed clock having the current time as its instance."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void setInjectedClockToCurrentTime() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(injectedClock);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":56}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Club Connect - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":":repoURL: https://github.com/CS2103JAN2018-W15-B4/main/tree/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"By: `Team W15-B4`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"\u003d\u003d Introduction"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"Club Connect is an application targeted at club members who are students at the National University of Singapore (NUS)."},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"It aims to make the tedious process of club management easier are more effective."},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"It provides features that are essential for a club to function smoothly such as user authentication, assigning tasks, email blasts, conducting polls, and importing and exporting member details."},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"This guide provides the necessary information for developers who are interested in contributing to the application - from the steps required to set-up, to detailed descriptions of the current features that the application sports."},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":33,"author":{"gitID":"-"},"content":"+"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":36,"author":{"gitID":"-"},"content":"+"},{"lineNumber":37,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":38,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":39,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":47,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":48,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":49,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":50,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":51,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":52,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`)."},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"  It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":55,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":". Run the `seedu.club.MainApp` and try a few commands"},{"lineNumber":60,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]."},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":70,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":71,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":74,"author":{"gitID":"amrut-prabhu"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`."},{"lineNumber":75,"author":{"gitID":"amrut-prabhu"},"content":"  Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure IntelliJ to check style-compliance as you write code."},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"amrut-prabhu"},"content":"After forking the repo, links in the documentation will still point to the `CS2103JAN2018-W15-B4/main` repo."},{"lineNumber":82,"author":{"gitID":"amrut-prabhu"},"content":"If you plan to develop this as a separate product (i.e. instead of contributing to `CS2103JAN2018-W15-B4/main`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"amrut-prabhu"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork."},{"lineNumber":87,"author":{"gitID":"amrut-prabhu"},"content":"See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":92,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":97,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":104,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":107,"author":{"gitID":"yash-chowdhary"},"content":"[TIP]"},{"lineNumber":108,"author":{"gitID":"amrut-prabhu"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."},{"lineNumber":109,"author":{"gitID":"amrut-prabhu"},"content":"To update a diagram, modify the diagram in the .pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"amrut-prabhu"},"content":"The *_Architecture Diagram_* (Refer to Figure 1) explains the high-level design of the App."},{"lineNumber":115,"author":{"gitID":"amrut-prabhu"},"content":"Given below is a quick overview of each component."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":118,"author":{"gitID":"yash-chowdhary"},"content":"_Figure 1. Architecture Diagram_"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"amrut-prabhu"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/club/MainApp.java[`MainApp`]."},{"lineNumber":122,"author":{"gitID":"amrut-prabhu"},"content":"It is responsible for the following:"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"yash-chowdhary"},"content":"* At app launch: Initializes the components in the correct sequence and connects them up with each other."},{"lineNumber":125,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"amrut-prabhu"},"content":"`Commons` represents a collection of classes used by multiple other components."},{"lineNumber":128,"author":{"gitID":"amrut-prabhu"},"content":"Two of those classes play important roles at the architecture level. Classes used by multiple components are in the `seedu.club.commons` package."},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"amrut-prabhu"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by a component to communicate with other components using events (i.e. a form of _Event Driven_ design)."},{"lineNumber":131,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":136,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":137,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":138,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"yash-chowdhary"},"content":"Each of the four components:"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":143,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"yash-chowdhary"},"content":"For example, the `Logic` component (Refer to Figure 2) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":148,"author":{"gitID":"yash-chowdhary"},"content":"_Figure 2. Class Diagram of the Logic Component_"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":151,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"yash-chowdhary"},"content":"The _Sequence Diagram_ below (Figure 3) shows how the components interact in the scenario where the user issues the command `delete 1`."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":156,"author":{"gitID":"yash-chowdhary"},"content":"_Figure 3. Component interactions for `delete 1` command (part 1)_"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":159,"author":{"gitID":"yash-chowdhary"},"content":"Note how the `Model` simply raises a `ClubBookChangedEvent` when the Club Book data is changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"yash-chowdhary"},"content":"The diagram below (Figure 4) shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":164,"author":{"gitID":"yash-chowdhary"},"content":"_Figure 4. Component interactions for `delete 1` command (part 2)_"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":167,"author":{"gitID":"amrut-prabhu"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them."},{"lineNumber":168,"author":{"gitID":"amrut-prabhu"},"content":"This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":173,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":174,"author":{"gitID":"yash-chowdhary"},"content":"*API* : link:{repoURL}/src/main/java/seedu/club/ui/Ui.java[`Ui.java`]"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"yash-chowdhary"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `MemberListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"amrut-prabhu"},"content":"The `UI` component uses JavaFx UI framework."},{"lineNumber":179,"author":{"gitID":"amrut-prabhu"},"content":"The layouts of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder."},{"lineNumber":180,"author":{"gitID":"amrut-prabhu"},"content":"For example, the layout of the link:{repoURL}/src/main/java/seedu/club/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"yash-chowdhary"},"content":"The `UI` component:"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":185,"author":{"gitID":"yash-chowdhary"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` changes."},{"lineNumber":186,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"yash-chowdhary"},"content":"Refer to Figure 5 for the structure of the UI component."},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":191,"author":{"gitID":"yash-chowdhary"},"content":"_Figure 5. Structure of the UI Component_"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":194,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":195,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":196,"author":{"gitID":"yash-chowdhary"},"content":"link:{repoURL}/src/main/java/seedu/club/logic/Logic.java[`Logic.java`]"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"yash-chowdhary"},"content":".  `Logic` uses the `ClubBookParser` class to parse the user command."},{"lineNumber":199,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":200,"author":{"gitID":"amrut-prabhu"},"content":".  The command execution can affect the `Model` (e.g. adding a member) and/or raise events."},{"lineNumber":201,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"yash-chowdhary"},"content":"Refer to Figure 6 for the structure of the Logic component."},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":206,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":207,"author":{"gitID":"yash-chowdhary"},"content":"_Figure 6. Structure of the Logic Component_"},{"lineNumber":208,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":209,"author":{"gitID":"yash-chowdhary"},"content":"Figure 7 below shows finer details concerning `XYZCommand` and `Command` depicted in Figure 6."},{"lineNumber":210,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":212,"author":{"gitID":"yash-chowdhary"},"content":"_Figure 7. Structure of Commands in the Logic Component._"},{"lineNumber":213,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":214,"author":{"gitID":"yash-chowdhary"},"content":"Given below (Figure 8) is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":217,"author":{"gitID":"yash-chowdhary"},"content":"_Figure 8. Interactions Inside the Logic Component for the `delete 1` Command_"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":220,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"yash-chowdhary"},"content":"*API* : link:{repoURL}/src/main/java/seedu/club/model/Model.java[`Model.java`]"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"yash-chowdhary"},"content":"The `Model`:"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":227,"author":{"gitID":"yash-chowdhary"},"content":"* stores the Club Book data."},{"lineNumber":228,"author":{"gitID":"amrut-prabhu"},"content":"* exposes an unmodifiable `ObservableList\u003cMember\u003e` that can be \u0027observed\u0027"},{"lineNumber":229,"author":{"gitID":"amrut-prabhu"},"content":"  For example, the UI can be bound to this list so that the UI automatically updates when the data in the list changes."},{"lineNumber":230,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"yash-chowdhary"},"content":"Refer to Figure 9 for the structure of the Model component."},{"lineNumber":233,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":235,"author":{"gitID":"yash-chowdhary"},"content":"_Figure 9. Structure of the Model Component_"},{"lineNumber":236,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":237,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"yash-chowdhary"},"content":"*API* : link:{repoURL}/src/main/java/seedu/club/storage/Storage.java[`Storage.java`]"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"yash-chowdhary"},"content":"The `Storage` component:"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":244,"author":{"gitID":"yash-chowdhary"},"content":"* can save the Club Book data in xml format and read it back."},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"yash-chowdhary"},"content":"Refer to Figure 10 for the structure of the Storage component."},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":249,"author":{"gitID":"yash-chowdhary"},"content":"_Figure 10. Structure of the Storage Component_"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":256,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":257,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"amrut-prabhu"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`."},{"lineNumber":260,"author":{"gitID":"amrut-prabhu"},"content":"It supports undoing and redoing of commands that modifies the state of the club book (e.g. `add`, `edit`)."},{"lineNumber":261,"author":{"gitID":"amrut-prabhu"},"content":"Such commands will inherit from `UndoableCommand`."},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"amrut-prabhu"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead."},{"lineNumber":264,"author":{"gitID":"amrut-prabhu"},"content":"The following diagram (Refer to figure 11) shows the inheritance diagram for commands:"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":267,"author":{"gitID":"MuhdNurKamal"},"content":"_Figure 11. Inheritance Diagram for commands_"},{"lineNumber":268,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":269,"author":{"gitID":"amrut-prabhu"},"content":"As you can see from the diagram (Figure 11), `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`."},{"lineNumber":270,"author":{"gitID":"amrut-prabhu"},"content":"Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the club book before execution."},{"lineNumber":271,"author":{"gitID":"amrut-prabhu"},"content":"`UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implement the details of how to execute the specific command."},{"lineNumber":272,"author":{"gitID":"amrut-prabhu"},"content":"Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in the child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":275,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":276,"author":{"gitID":"-"},"content":"----"},{"lineNumber":277,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":281,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"-"},"content":"}"},{"lineNumber":283,"author":{"gitID":"-"},"content":"----"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":286,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":287,"author":{"gitID":"-"},"content":"----"},{"lineNumber":288,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":294,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"-"},"content":"}"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":298,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":299,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":300,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":301,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":302,"author":{"gitID":"-"},"content":"}"},{"lineNumber":303,"author":{"gitID":"-"},"content":"----"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"amrut-prabhu"},"content":"The user executes a new `UndoableCommand` - `delete 5`, to delete the 5th member in the club book."},{"lineNumber":308,"author":{"gitID":"amrut-prabhu"},"content":"The current state of the club book is saved before the `delete 5` command executes."},{"lineNumber":309,"author":{"gitID":"amrut-prabhu"},"content":"The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":310,"author":{"gitID":"amrut-prabhu"},"content":"(Refer to Figure 12)"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":313,"author":{"gitID":"MuhdNurKamal"},"content":"_Figure 12. Initial state of `undoStack` and `redoStack`_"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"amrut-prabhu"},"content":"As the user continues to use the program, more commands are added into the `undoStack`."},{"lineNumber":316,"author":{"gitID":"amrut-prabhu"},"content":"For example, the user may execute `add n/David ...` to add a new member (Refer to Figure 13)."},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":319,"author":{"gitID":"MuhdNurKamal"},"content":"_Figure 13. State of `undoStack` and `redoStack` after executing `add` command_"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":322,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":323,"author":{"gitID":"-"},"content":""},{"lineNumber":324,"author":{"gitID":"amrut-prabhu"},"content":"The user now decides that adding the member was a mistake, and decides to undo that action using `undo`."},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"amrut-prabhu"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`."},{"lineNumber":327,"author":{"gitID":"amrut-prabhu"},"content":"We will restore the club book to the state before the `add` command executed (Refer to figure 14)."},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":330,"author":{"gitID":"MuhdNurKamal"},"content":"_Figure 14. State of `undoStack` and `redoStack` after executing `undo` command._"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":333,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"yash-chowdhary"},"content":"The following sequence diagram (Figure 15) shows how the undo operation works:"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":338,"author":{"gitID":"MuhdNurKamal"},"content":"_Figure 15. Sequence Diagram of `undo` command_"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"yash-chowdhary"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the club book to the state after the command is executed)."},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":343,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"amrut-prabhu"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`."},{"lineNumber":346,"author":{"gitID":"amrut-prabhu"},"content":"This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow). (Refer to figure 16)"},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":349,"author":{"gitID":"MuhdNurKamal"},"content":"_Figure 16. State of `undoStack` and `redoStack` after executing `clear` command._"},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"amrut-prabhu"},"content":"Commands that are not undoable are not added into the `undoStack`."},{"lineNumber":352,"author":{"gitID":"amrut-prabhu"},"content":"For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution (Refer to Figure 17):"},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":355,"author":{"gitID":"MuhdNurKamal"},"content":"_Figure 17. State of `undoStack` and `redoStack` after executing `list` command._"},{"lineNumber":356,"author":{"gitID":"-"},"content":""},{"lineNumber":357,"author":{"gitID":"yash-chowdhary"},"content":"The following activity diagram (Figure 18) summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":360,"author":{"gitID":"MuhdNurKamal"},"content":"_Figure 18. Activity Diagram for Undo-Redo_"},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"amrut-prabhu"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`."},{"lineNumber":367,"author":{"gitID":"amrut-prabhu"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour."},{"lineNumber":368,"author":{"gitID":"amrut-prabhu"},"content":"   Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":369,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":370,"author":{"gitID":"amrut-prabhu"},"content":"* **Alternative 2:** Just override `execute()`."},{"lineNumber":371,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":372,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":373,"author":{"gitID":"-"},"content":""},{"lineNumber":374,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"amrut-prabhu"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":377,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":378,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":379,"author":{"gitID":"amrut-prabhu"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":380,"author":{"gitID":"amrut-prabhu"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the member being deleted)."},{"lineNumber":381,"author":{"gitID":"yash-chowdhary"},"content":"** Cons: We must ensure that the implementation of each individual command is correct."},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"-"},"content":""},{"lineNumber":384,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"amrut-prabhu"},"content":"* **Alternative 1 (current choice):** Only include commands that modify the club book (`add`, `clear`, `edit`)"},{"lineNumber":387,"author":{"gitID":"yash-chowdhary"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data is * lost)."},{"lineNumber":388,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":389,"author":{"gitID":"amrut-prabhu"},"content":"* **Alternative 2:** Include all commands"},{"lineNumber":390,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":391,"author":{"gitID":"yash-chowdhary"},"content":"** Cons: Users have no way of skipping such commands if they just want to reset the state of the club * book and not the view."},{"lineNumber":392,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":393,"author":{"gitID":"-"},"content":""},{"lineNumber":394,"author":{"gitID":"-"},"content":""},{"lineNumber":395,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":396,"author":{"gitID":"-"},"content":""},{"lineNumber":397,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":398,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":399,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":400,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":401,"author":{"gitID":"yash-chowdhary"},"content":"** Pros: We do not need to maintain a separate stack, and can just reuse what is already in the codebase."},{"lineNumber":402,"author":{"gitID":"amrut-prabhu"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands."},{"lineNumber":403,"author":{"gitID":"amrut-prabhu"},"content":"Furthermore, the \"Single Responsibility\" and \"Separation of Concerns\" principles are violated as `HistoryManager` now needs to do two * different things."},{"lineNumber":404,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":407,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":408,"author":{"gitID":"yash-chowdhary"},"content":"\u003d\u003d\u003d\u003d Rationale"},{"lineNumber":409,"author":{"gitID":"yash-chowdhary"},"content":"Data encryption is key to any App that deals with personal data of individuals."},{"lineNumber":410,"author":{"gitID":"-"},"content":""},{"lineNumber":411,"author":{"gitID":"yash-chowdhary"},"content":"We plan to use Symmetric Key Encryption to ensure the confidentiality of data."},{"lineNumber":412,"author":{"gitID":"-"},"content":""},{"lineNumber":413,"author":{"gitID":"yash-chowdhary"},"content":"\u003d\u003d\u003d\u003d How Symmetric Key Encryption works"},{"lineNumber":414,"author":{"gitID":"amrut-prabhu"},"content":"Symmetric key encryption is an encryption philosophy where the two communicating parties share a pre-established secret key *k*."},{"lineNumber":415,"author":{"gitID":"amrut-prabhu"},"content":"It consists of 2 algorithms `E` (Encrypting or Encoding) and `D` (Decryption or Decoding) which take in the same key *k* to perform their respective operations."},{"lineNumber":416,"author":{"gitID":"-"},"content":""},{"lineNumber":417,"author":{"gitID":"yash-chowdhary"},"content":"The 2 algorithms `E` and `D` are efficient algorithms, such that:"},{"lineNumber":418,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":419,"author":{"gitID":"yash-chowdhary"},"content":"* *D*(*E*(*k*,m)) \u003d m, where \u0027m\u0027 is the message that needs to be kept confidential."},{"lineNumber":420,"author":{"gitID":"yash-chowdhary"},"content":"* For *k* chosen uniformly at random, *E*(*k*,m) gives no additional information about \u0027m\u0027 to an adversary."},{"lineNumber":421,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":422,"author":{"gitID":"yash-chowdhary"},"content":"\u003d\u003d\u003d\u003d Proposed Implementation"},{"lineNumber":423,"author":{"gitID":"yash-chowdhary"},"content":"We plan to make use of classes that are defined in Javax\u0027s Crypto package."},{"lineNumber":424,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":425,"author":{"gitID":"yash-chowdhary"},"content":"The classes that would feature in the implementation are:"},{"lineNumber":426,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":427,"author":{"gitID":"yash-chowdhary"},"content":"* KeyGenerator -\u003e constructs a secret (symmetric) key."},{"lineNumber":428,"author":{"gitID":"yash-chowdhary"},"content":"* Cipher -\u003e  provides the functionality of a cryptographic cipher for encryption and decryption."},{"lineNumber":429,"author":{"gitID":"-"},"content":""},{"lineNumber":430,"author":{"gitID":"amrut-prabhu"},"content":"The construction of a symmetric key is done by passing the algorithm the encryption will use."},{"lineNumber":431,"author":{"gitID":"amrut-prabhu"},"content":"We plan to use the Advanced Encryption Scheme (AES) algorithm. For that reason, we will use a 128-bit AES symmetric key."},{"lineNumber":432,"author":{"gitID":"-"},"content":""},{"lineNumber":433,"author":{"gitID":"yash-chowdhary"},"content":"Once the key is generated, all data will be encrypted with AES. Anyone who wishes to view the decrypted form of the data must possess the secret key."},{"lineNumber":434,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":435,"author":{"gitID":"-"},"content":""},{"lineNumber":436,"author":{"gitID":"amrut-prabhu"},"content":"// tag::email[]"},{"lineNumber":437,"author":{"gitID":"yash-chowdhary"},"content":"\u003d\u003d\u003d Email Mechanism"},{"lineNumber":438,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":439,"author":{"gitID":"yash-chowdhary"},"content":"The `email` mechanism of Club Connect is facilitated by the `EmailCommand` class and is event-driven."},{"lineNumber":440,"author":{"gitID":"yash-chowdhary"},"content":"The `EmailCommand` consists of the following fields:"},{"lineNumber":441,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":442,"author":{"gitID":"yash-chowdhary"},"content":"* Client - the mail client used to send the email (currently restricted to GMail and Outlook)."},{"lineNumber":443,"author":{"gitID":"yash-chowdhary"},"content":"* Subject - the subject of the email (optional field)."},{"lineNumber":444,"author":{"gitID":"yash-chowdhary"},"content":"* Body - the body of the email (optional field)."},{"lineNumber":445,"author":{"gitID":"yash-chowdhary"},"content":"* Group - the club group to whom the user wishes to send an email to."},{"lineNumber":446,"author":{"gitID":"yash-chowdhary"},"content":"* Tag - the tag to which the user wishes to send an email to."},{"lineNumber":447,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":448,"author":{"gitID":"yash-chowdhary"},"content":"[NOTE]"},{"lineNumber":449,"author":{"gitID":"amrut-prabhu"},"content":"Emails can only be sent to members belonging to EITHER a Group OR a Tag."},{"lineNumber":450,"author":{"gitID":"amrut-prabhu"},"content":"ClubConnect currently doesn\u0027t support sending emails to members belonging to BOTH a Group and a Tag."},{"lineNumber":451,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":452,"author":{"gitID":"amrut-prabhu"},"content":"The `EmailCommand` extends from `Command` and not from `UndoableCommand`, as it is not an undoable command."},{"lineNumber":453,"author":{"gitID":"amrut-prabhu"},"content":"Refer to Figure 19 for the UML diagram."},{"lineNumber":454,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":455,"author":{"gitID":"yash-chowdhary"},"content":"image::EmailCommandUML.png[width\u003d\"600\"]"},{"lineNumber":456,"author":{"gitID":"yash-chowdhary"},"content":"_Figure 19. EmailCommand UML Diagram_"},{"lineNumber":457,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":458,"author":{"gitID":"amrut-prabhu"},"content":"`EmailCommandParser` is responsible for parsing the `email` command. It returns a `EmailCommand` object after parsing `Client`, `Subject`, `Body`, `Group`, and `Tag`."},{"lineNumber":459,"author":{"gitID":"amrut-prabhu"},"content":"Figure 20 depicts the sequence of parsing the command."},{"lineNumber":460,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":461,"author":{"gitID":"yash-chowdhary"},"content":"image::SDforEmailCommandParser.png[width\u003d\"650\"]"},{"lineNumber":462,"author":{"gitID":"yash-chowdhary"},"content":"_Figure 20. Sequence Diagram for Email Command parsing_"},{"lineNumber":463,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":464,"author":{"gitID":"yash-chowdhary"},"content":"[NOTE]"},{"lineNumber":465,"author":{"gitID":"yash-chowdhary"},"content":"Since `Subject` and `Body` are optional fields, their default values are `EMPTY_SUBJECT_STRING` and `EMPTY_BODY_STRING` which store blank Strings."},{"lineNumber":466,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":467,"author":{"gitID":"yash-chowdhary"},"content":"[NOTE]"},{"lineNumber":468,"author":{"gitID":"yash-chowdhary"},"content":"As ClubConnect only allows emails to be sent to members of EITHER a `Group` OR a `Tag`, a valid command will result in either one of them being assigned to `null`."},{"lineNumber":469,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":470,"author":{"gitID":"yash-chowdhary"},"content":"The `EmailCommand#execute()` calls the following methods of `model`:"},{"lineNumber":471,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":472,"author":{"gitID":"yash-chowdhary"},"content":". ```generateEmailRecipients()``` - takes in a `Group` and `Tag` object. Depending on the object that is not `null`, it returns a string of recipients."},{"lineNumber":473,"author":{"gitID":"yash-chowdhary"},"content":". ```sendEmail()``` - takes in the recipient string, and an object each of `Client`, `Subject`, and `Body`."},{"lineNumber":474,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":475,"author":{"gitID":"yash-chowdhary"},"content":"`EmailCommand#sendEmail()` raises an event `SendEmailRequestEvent`, which triggers the system\u0027s default browser to open the chosen mail client\u0027s \u0027Compose Message\u0027 page with all the relevant fields filled-in."},{"lineNumber":476,"author":{"gitID":"yash-chowdhary"},"content":"Figure 21 depicts the high-level sequence of events that take place."},{"lineNumber":477,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":478,"author":{"gitID":"yash-chowdhary"},"content":"image::SDforEmail.png[width\u003d\"800\"]"},{"lineNumber":479,"author":{"gitID":"yash-chowdhary"},"content":"_Figure 21. Sequence Diagram for Email Command_"},{"lineNumber":480,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":481,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":482,"author":{"gitID":"yash-chowdhary"},"content":"The browser URL for composing the email is generated as follows:"},{"lineNumber":483,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":484,"author":{"gitID":"yash-chowdhary"},"content":"[source, java]"},{"lineNumber":485,"author":{"gitID":"yash-chowdhary"},"content":"----"},{"lineNumber":486,"author":{"gitID":"yash-chowdhary"},"content":"public static final String GMAIL_EMAIL_URL \u003d"},{"lineNumber":487,"author":{"gitID":"yash-chowdhary"},"content":"            \"https://mail.google.com/mail/?view\u003dcm\u0026fs\u003d1\u0026tf\u003d1\u0026source\u003dmailto\u0026to\u003d%1$s\u0026su\u003d%2$s\u0026body\u003d%3$s"},{"lineNumber":488,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":489,"author":{"gitID":"yash-chowdhary"},"content":"public static final String OUTLOOK_EMAIL_URL \u003d"},{"lineNumber":490,"author":{"gitID":"yash-chowdhary"},"content":"            \"https://outlook.office.com/?path\u003d/mail/action/compose\u0026to\u003d%1$s\u0026subject\u003d%2$s\u0026body\u003d%3$s\";"},{"lineNumber":491,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":492,"author":{"gitID":"yash-chowdhary"},"content":"Desktop.getDesktop().browse(new URI(String.format(GMAIL_EMAIL_URL, recipients, subject, body)));"},{"lineNumber":493,"author":{"gitID":"yash-chowdhary"},"content":"----"},{"lineNumber":494,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":495,"author":{"gitID":"-"},"content":""},{"lineNumber":496,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":497,"author":{"gitID":"yash-chowdhary"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Location of opening the mail client"},{"lineNumber":498,"author":{"gitID":"yash-chowdhary"},"content":"* **Alternative 1 (current choice)**: Open up the mail client in system\u0027s default web browser."},{"lineNumber":499,"author":{"gitID":"yash-chowdhary"},"content":"** Pros: Easy to implement"},{"lineNumber":500,"author":{"gitID":"yash-chowdhary"},"content":"** Cons: Since ClubConnect can be used by multiple people via user authentication, the default browser will have the owner of the system logged into his/her mail account."},{"lineNumber":501,"author":{"gitID":"yash-chowdhary"},"content":"* **Alternative 2:** Open up the mail client in `BrowserPanel`."},{"lineNumber":502,"author":{"gitID":"yash-chowdhary"},"content":"** Pros: No dependency on third party apps."},{"lineNumber":503,"author":{"gitID":"yash-chowdhary"},"content":"** Cons: Older version browser will disallow auto-filling of email fields."},{"lineNumber":504,"author":{"gitID":"amrut-prabhu"},"content":"// end::email[]"},{"lineNumber":505,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":506,"author":{"gitID":"amrut-prabhu"},"content":"// tag::profilephoto[]"},{"lineNumber":507,"author":{"gitID":"amrut-prabhu"},"content":"\u003d\u003d\u003d Changing Profile Photo Mechanism"},{"lineNumber":508,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":509,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":510,"author":{"gitID":"amrut-prabhu"},"content":"The `changepic` mechanism of Club Connect is facilitated by the `ChangeProfilePhotoCommand` class and is event-driven."},{"lineNumber":511,"author":{"gitID":"amrut-prabhu"},"content":"It allows members to modify their profile photos displayed in the application."},{"lineNumber":512,"author":{"gitID":"amrut-prabhu"},"content":"To facilitate this, it makes use of the `ProfilePhoto` class. `ProfilePhoto`"},{"lineNumber":513,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":514,"author":{"gitID":"amrut-prabhu"},"content":"Currently, the `ChangeProfilePhotoCommand` extends from the `Command` class, and not from `UndoableCommand`."},{"lineNumber":515,"author":{"gitID":"amrut-prabhu"},"content":"Refer to Figure 22 for the UML diagram."},{"lineNumber":516,"author":{"gitID":"amrut-prabhu"},"content":"The `ProfilePhoto` class consists of a `String` attribute to store the file path of the profile photo."},{"lineNumber":517,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":518,"author":{"gitID":"amrut-prabhu"},"content":"image::ChangeProfilePhotoCommandUML.png[width\u003d\"350\"]"},{"lineNumber":519,"author":{"gitID":"amrut-prabhu"},"content":"_Figure 22. ChangeProfilePhotoCommand UML Diagram_"},{"lineNumber":520,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":521,"author":{"gitID":"amrut-prabhu"},"content":"The `displaypic` command involves the use of multiple components of Club Connect."},{"lineNumber":522,"author":{"gitID":"amrut-prabhu"},"content":"Below, Figure 23 shows the interactions betweeen these components."},{"lineNumber":523,"author":{"gitID":"amrut-prabhu"},"content":"As you can see, the `ChangeProfilePhotoCommand` is driven by the `ProfilePhotoChangedEvent`."},{"lineNumber":524,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":525,"author":{"gitID":"amrut-prabhu"},"content":"image::SDforChangeProfilePhoto.png[width\u003d\"800\"]"},{"lineNumber":526,"author":{"gitID":"amrut-prabhu"},"content":"_Figure 23. High Level Sequence Diagram for `changepic PATH` Command_"},{"lineNumber":527,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":528,"author":{"gitID":"amrut-prabhu"},"content":"ChangeProfilePhotoCommandParser is responsible for parsing the `changepic` command."},{"lineNumber":529,"author":{"gitID":"amrut-prabhu"},"content":"It returns a `ChangeProfilePhotoCommand` object after parsing the photo file path."},{"lineNumber":530,"author":{"gitID":"amrut-prabhu"},"content":"Figure 24 depicts the Sequence Diagram for interactions within the `Logic` component for the `execute(\"changepic C:/Users/Admin/Desktop/ photo.png\")` API call."},{"lineNumber":531,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":532,"author":{"gitID":"amrut-prabhu"},"content":"image::ChangeProfilePhotoCommandSdForLogic.png[width\u003d\"650\"]"},{"lineNumber":533,"author":{"gitID":"amrut-prabhu"},"content":"_Figure 24. Interactions Inside the Logic Component for the `changepic C:/Users/Admin/Desktop/ photo.png` Command"},{"lineNumber":534,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":535,"author":{"gitID":"amrut-prabhu"},"content":"The `ChangeProfilePhotoCommand#execute()` method invokes the `addProfilePhoto()` method from `model`."},{"lineNumber":536,"author":{"gitID":"amrut-prabhu"},"content":"Complying with the rules of \u003c\u003cabstraction,abstraction\u003e\u003e, the `Logic` component calls on `Model` to handle the internal details for updation."},{"lineNumber":537,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":538,"author":{"gitID":"amrut-prabhu"},"content":"The actual reading of the profile photo from the path provided is done by the `Storage` component."},{"lineNumber":539,"author":{"gitID":"amrut-prabhu"},"content":"It copies the photo to the Club Connect application\u0027s resources."},{"lineNumber":540,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":541,"author":{"gitID":"amrut-prabhu"},"content":"The code used for reading and copying the file is as follows:"},{"lineNumber":542,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":543,"author":{"gitID":"amrut-prabhu"},"content":"[source, java]"},{"lineNumber":544,"author":{"gitID":"amrut-prabhu"},"content":"----"},{"lineNumber":545,"author":{"gitID":"amrut-prabhu"},"content":"@Override"},{"lineNumber":546,"author":{"gitID":"amrut-prabhu"},"content":"public void copyOriginalPhotoFile(String originalPhotoPath, String newPhotoName) throws PhotoException {"},{"lineNumber":547,"author":{"gitID":"amrut-prabhu"},"content":"    BufferedImage originalPhoto \u003d null;"},{"lineNumber":548,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":549,"author":{"gitID":"amrut-prabhu"},"content":"    try {"},{"lineNumber":550,"author":{"gitID":"amrut-prabhu"},"content":"        logger.info(\"Profile Photo is being read from \" + originalPhotoPath);"},{"lineNumber":551,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":552,"author":{"gitID":"amrut-prabhu"},"content":"        URL photoUrl \u003d new URL(URL_PREFIX + originalPhotoPath);"},{"lineNumber":553,"author":{"gitID":"amrut-prabhu"},"content":"        originalPhoto \u003d ImageIO.read(photoUrl);"},{"lineNumber":554,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":555,"author":{"gitID":"amrut-prabhu"},"content":"        String saveAs \u003d newPhotoName + FILE_EXTENSION;"},{"lineNumber":556,"author":{"gitID":"amrut-prabhu"},"content":"        File newPath \u003d new File(getCurrentDirectory() + SAVE_PHOTO_DIRECTORY, saveAs);"},{"lineNumber":557,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":558,"author":{"gitID":"amrut-prabhu"},"content":"        createPhotoFileCopy(originalPhoto, newPath);"},{"lineNumber":559,"author":{"gitID":"amrut-prabhu"},"content":"    } catch (IOException ioe) {"},{"lineNumber":560,"author":{"gitID":"amrut-prabhu"},"content":"        // ... exception handling ..."},{"lineNumber":561,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":562,"author":{"gitID":"amrut-prabhu"},"content":"}"},{"lineNumber":563,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":564,"author":{"gitID":"amrut-prabhu"},"content":"public static String getCurrentDirectory() {"},{"lineNumber":565,"author":{"gitID":"amrut-prabhu"},"content":"    // ... getting current directory logic ..."},{"lineNumber":566,"author":{"gitID":"amrut-prabhu"},"content":"}"},{"lineNumber":567,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":568,"author":{"gitID":"amrut-prabhu"},"content":"public void createPhotoFileCopy(BufferedImage originalPhoto, File newPath) throws IOException {"},{"lineNumber":569,"author":{"gitID":"amrut-prabhu"},"content":"    // ... logging ..."},{"lineNumber":570,"author":{"gitID":"amrut-prabhu"},"content":"    ImageIO.write(originalPhoto, \"png\", newPath);"},{"lineNumber":571,"author":{"gitID":"amrut-prabhu"},"content":"}"},{"lineNumber":572,"author":{"gitID":"amrut-prabhu"},"content":"----"},{"lineNumber":573,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":574,"author":{"gitID":"amrut-prabhu"},"content":"The logged in member\u0027s details are then updated to include this new profile photo."},{"lineNumber":575,"author":{"gitID":"-"},"content":""},{"lineNumber":576,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":577,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":578,"author":{"gitID":"amrut-prabhu"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `ChangeProfilePhotoCommand`"},{"lineNumber":579,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":580,"author":{"gitID":"amrut-prabhu"},"content":"* **Alternative 1 (current choice)**: Logged in member can only change his/her own profile photo."},{"lineNumber":581,"author":{"gitID":"amrut-prabhu"},"content":"** Pros: Makes intuitive sense, easy to implement."},{"lineNumber":582,"author":{"gitID":"amrut-prabhu"},"content":"** Cons: There is no way for Exco members to ensure that members have appropriate profile photos."},{"lineNumber":583,"author":{"gitID":"amrut-prabhu"},"content":"* **Alternative 2**: Exco members can change any member\u0027s profile photo."},{"lineNumber":584,"author":{"gitID":"amrut-prabhu"},"content":"** Pros: Gives Exco members a way to exercise control over members\u0027 profile photos."},{"lineNumber":585,"author":{"gitID":"amrut-prabhu"},"content":"** Cons: Implementation becomes more complicated."},{"lineNumber":586,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":587,"author":{"gitID":"amrut-prabhu"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Source files of profile photos"},{"lineNumber":588,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":589,"author":{"gitID":"amrut-prabhu"},"content":"* **Alternative 1 (current choice)**: Make a copy the source image provided to the applications resources."},{"lineNumber":590,"author":{"gitID":"amrut-prabhu"},"content":"** Pros: Makes application portable and non-dependent on the rest of the system."},{"lineNumber":591,"author":{"gitID":"amrut-prabhu"},"content":"   Members can delete the original file from the computer, without affecting the Club Connect Application."},{"lineNumber":592,"author":{"gitID":"amrut-prabhu"},"content":"** Cons: Changes made to the original source images are not reflected in the application."},{"lineNumber":593,"author":{"gitID":"amrut-prabhu"},"content":"* **Alternative 2**: Always read the profile photo from the file path provided."},{"lineNumber":594,"author":{"gitID":"amrut-prabhu"},"content":"** Pros: Changes made in the source image are reflected in the application."},{"lineNumber":595,"author":{"gitID":"amrut-prabhu"},"content":"** Cons: Application becomes highly dependent on the system, in terms of profile photos."},{"lineNumber":596,"author":{"gitID":"amrut-prabhu"},"content":"// end::profilephoto[]"},{"lineNumber":597,"author":{"gitID":"amrut-prabhu"},"content":"// end::profilephoto[]"},{"lineNumber":598,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":599,"author":{"gitID":"MuhdNurKamal"},"content":"\u003d\u003d\u003d Compress/Decompress Mechanism"},{"lineNumber":600,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":601,"author":{"gitID":"MuhdNurKamal"},"content":"Member details are shown as cards in the GUI. Cards can either be decompressed(Figure 22) or compressed(Figure 23)."},{"lineNumber":602,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":603,"author":{"gitID":"MuhdNurKamal"},"content":"image::DecompressedMemberCards.png[width\u003d\"300\"]"},{"lineNumber":604,"author":{"gitID":"MuhdNurKamal"},"content":"_Figure 22. Decompressed Member Cards_"},{"lineNumber":605,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":606,"author":{"gitID":"MuhdNurKamal"},"content":"image::CompressedCards.png[width\u003d\"300\"]"},{"lineNumber":607,"author":{"gitID":"MuhdNurKamal"},"content":"_Figure 23. Compressed Member Cards_"},{"lineNumber":608,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":609,"author":{"gitID":"MuhdNurKamal"},"content":"The `MemberCard` class provides an abstraction for the member card shown in the GUI. By default, it shows a member card that is decompressed."},{"lineNumber":610,"author":{"gitID":"MuhdNurKamal"},"content":"To differentiate between compressed and decompressed member card, we introduced a `CompressedMemberCard` class. This class extends `MemberCard` (Figure 24) since a `CompressedMemberCard` is a `MemberCard`."},{"lineNumber":611,"author":{"gitID":"MuhdNurKamal"},"content":"Each of these classes contain a different static String showing location of the actual `FXML` file that determines layout of the member card, hence we get different layouts."},{"lineNumber":612,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":613,"author":{"gitID":"MuhdNurKamal"},"content":"image::MemberCardClassDiagram.png[width\u003d\"300\"]"},{"lineNumber":614,"author":{"gitID":"MuhdNurKamal"},"content":"_Figure 24. `MemberCard` class diagram_"},{"lineNumber":615,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":616,"author":{"gitID":"MuhdNurKamal"},"content":"The `compress` and `decompress` commands allows members to select whether they want to see detailed information of members or see a compressed version for easy viewing."},{"lineNumber":617,"author":{"gitID":"MuhdNurKamal"},"content":"These commands do not extend from `UndoableCommand` but just from `Command` since they do not change the state of the club book."},{"lineNumber":618,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":619,"author":{"gitID":"MuhdNurKamal"},"content":"Due to the similar nature of the `compress` and `decompress` commands, only the `compress` command will be discussed."},{"lineNumber":620,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":621,"author":{"gitID":"MuhdNurKamal"},"content":"Suppose that the user has just launched the application. The member cards would be decompressed (Figure 22)."},{"lineNumber":622,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":623,"author":{"gitID":"MuhdNurKamal"},"content":"The user inputs \u0027compress\u0027 and the sequence diagram (Figure 24) below shows how the different components interact."},{"lineNumber":624,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":625,"author":{"gitID":"MuhdNurKamal"},"content":"image::SDforCompressToEventsCenter.png[width\u003d\"800\"]"},{"lineNumber":626,"author":{"gitID":"MuhdNurKamal"},"content":"_Figure 25. Sequence diagram for compress command to Events Center_"},{"lineNumber":627,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":628,"author":{"gitID":"MuhdNurKamal"},"content":"Then, the `MemberListPanel`, which contains the `MemberCard` objects will handle the event (Figure 25). If the cards are already compressed, no changes occur."},{"lineNumber":629,"author":{"gitID":"MuhdNurKamal"},"content":"However, if the cards are decompressed, the `MemberCard` objects would be converted to `CompressedMemberCard` objects."},{"lineNumber":630,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":631,"author":{"gitID":"MuhdNurKamal"},"content":"image::SDforCompressFromEventsCenter.png[width\u003d\"800\"]"},{"lineNumber":632,"author":{"gitID":"MuhdNurKamal"},"content":"_Figure 26. Sequence diagram for compress command from Events Center_"},{"lineNumber":633,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":634,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":635,"author":{"gitID":"MuhdNurKamal"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How to interact from Logic to Ui"},{"lineNumber":636,"author":{"gitID":"MuhdNurKamal"},"content":"* **Alternative 1 (current choice)**: Use Event-Driven approach to interact from `CompressCommand`/`DecompressCommand` to `MemberListPanel`"},{"lineNumber":637,"author":{"gitID":"MuhdNurKamal"},"content":"** Pros: Reduces coupling."},{"lineNumber":638,"author":{"gitID":"MuhdNurKamal"},"content":"** Cons: Slower than just directly changing the `Ui` since a seperate class(`EventsCenter`) has to manage interactions, not"},{"lineNumber":639,"author":{"gitID":"MuhdNurKamal"},"content":"just for compress/decompress but for other events as well."},{"lineNumber":640,"author":{"gitID":"MuhdNurKamal"},"content":"* **Alternative 2:** Keep a `Ui` attribute in every command just like `Model`"},{"lineNumber":641,"author":{"gitID":"MuhdNurKamal"},"content":"** Pros: Easy to implement."},{"lineNumber":642,"author":{"gitID":"MuhdNurKamal"},"content":"** Cons: Increases coupling"},{"lineNumber":643,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":644,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":645,"author":{"gitID":"-"},"content":""},{"lineNumber":646,"author":{"gitID":"amrut-prabhu"},"content":"We are using `java.util.logging` package for logging."},{"lineNumber":647,"author":{"gitID":"amrut-prabhu"},"content":"The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":648,"author":{"gitID":"-"},"content":""},{"lineNumber":649,"author":{"gitID":"yash-chowdhary"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)."},{"lineNumber":650,"author":{"gitID":"yash-chowdhary"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level."},{"lineNumber":651,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":652,"author":{"gitID":"-"},"content":""},{"lineNumber":653,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":654,"author":{"gitID":"-"},"content":""},{"lineNumber":655,"author":{"gitID":"yash-chowdhary"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application."},{"lineNumber":656,"author":{"gitID":"yash-chowdhary"},"content":"* `WARNING` : Can continue, but with caution."},{"lineNumber":657,"author":{"gitID":"yash-chowdhary"},"content":"* `INFO` : Information showing the noteworthy actions by the App."},{"lineNumber":658,"author":{"gitID":"yash-chowdhary"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size."},{"lineNumber":659,"author":{"gitID":"-"},"content":""},{"lineNumber":660,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":661,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":662,"author":{"gitID":"-"},"content":""},{"lineNumber":663,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":664,"author":{"gitID":"-"},"content":""},{"lineNumber":665,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":666,"author":{"gitID":"-"},"content":""},{"lineNumber":667,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":668,"author":{"gitID":"-"},"content":""},{"lineNumber":669,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":670,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":671,"author":{"gitID":"-"},"content":""},{"lineNumber":672,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":673,"author":{"gitID":"-"},"content":""},{"lineNumber":674,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":675,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":676,"author":{"gitID":"-"},"content":""},{"lineNumber":677,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":678,"author":{"gitID":"-"},"content":""},{"lineNumber":679,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":680,"author":{"gitID":"-"},"content":""},{"lineNumber":681,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":682,"author":{"gitID":"-"},"content":""},{"lineNumber":683,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":684,"author":{"gitID":"-"},"content":""},{"lineNumber":685,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":686,"author":{"gitID":"-"},"content":""},{"lineNumber":687,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":688,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":689,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":690,"author":{"gitID":"MuhdNurKamal"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings in Figure 19 below."},{"lineNumber":691,"author":{"gitID":"-"},"content":""},{"lineNumber":692,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":693,"author":{"gitID":"MuhdNurKamal"},"content":"_Figure 19. Screenshot of saving documentation as PDF in Chrome_"},{"lineNumber":694,"author":{"gitID":"-"},"content":""},{"lineNumber":695,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":696,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":697,"author":{"gitID":"-"},"content":""},{"lineNumber":698,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":699,"author":{"gitID":"-"},"content":""},{"lineNumber":700,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":701,"author":{"gitID":"-"},"content":""},{"lineNumber":702,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":703,"author":{"gitID":"amrut-prabhu"},"content":"The most reliable way to run tests is the 3rd one."},{"lineNumber":704,"author":{"gitID":"amrut-prabhu"},"content":"The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":705,"author":{"gitID":"-"},"content":""},{"lineNumber":706,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":707,"author":{"gitID":"-"},"content":""},{"lineNumber":708,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":709,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":710,"author":{"gitID":"-"},"content":""},{"lineNumber":711,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":712,"author":{"gitID":"-"},"content":""},{"lineNumber":713,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":714,"author":{"gitID":"-"},"content":""},{"lineNumber":715,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":716,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":717,"author":{"gitID":"-"},"content":""},{"lineNumber":718,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":719,"author":{"gitID":"-"},"content":""},{"lineNumber":720,"author":{"gitID":"amrut-prabhu"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode."},{"lineNumber":721,"author":{"gitID":"amrut-prabhu"},"content":"In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":722,"author":{"gitID":"-"},"content":""},{"lineNumber":723,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":724,"author":{"gitID":"-"},"content":""},{"lineNumber":725,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":726,"author":{"gitID":"-"},"content":""},{"lineNumber":727,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":728,"author":{"gitID":"-"},"content":""},{"lineNumber":729,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":730,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":731,"author":{"gitID":"amrut-prabhu"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.club.ui` package."},{"lineNumber":732,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":733,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":734,"author":{"gitID":"amrut-prabhu"},"content":"e.g. `seedu.club.commons.StringUtilTest`"},{"lineNumber":735,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":736,"author":{"gitID":"amrut-prabhu"},"content":"e.g. `seedu.club.storage.StorageManagerTest`"},{"lineNumber":737,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":738,"author":{"gitID":"amrut-prabhu"},"content":"e.g. `seedu.club.logic.LogicManagerTest`"},{"lineNumber":739,"author":{"gitID":"-"},"content":""},{"lineNumber":740,"author":{"gitID":"-"},"content":""},{"lineNumber":741,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":742,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":743,"author":{"gitID":"-"},"content":""},{"lineNumber":744,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":745,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":746,"author":{"gitID":"-"},"content":""},{"lineNumber":747,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":748,"author":{"gitID":"-"},"content":""},{"lineNumber":749,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":750,"author":{"gitID":"-"},"content":""},{"lineNumber":751,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":752,"author":{"gitID":"-"},"content":""},{"lineNumber":753,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":754,"author":{"gitID":"-"},"content":""},{"lineNumber":755,"author":{"gitID":"amrut-prabhu"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects."},{"lineNumber":756,"author":{"gitID":"amrut-prabhu"},"content":"See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":757,"author":{"gitID":"-"},"content":""},{"lineNumber":758,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":759,"author":{"gitID":"-"},"content":""},{"lineNumber":760,"author":{"gitID":"amrut-prabhu"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects."},{"lineNumber":761,"author":{"gitID":"amrut-prabhu"},"content":"See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":762,"author":{"gitID":"-"},"content":""},{"lineNumber":763,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":764,"author":{"gitID":"amrut-prabhu"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged."},{"lineNumber":765,"author":{"gitID":"amrut-prabhu"},"content":"See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":766,"author":{"gitID":"-"},"content":""},{"lineNumber":767,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":768,"author":{"gitID":"-"},"content":""},{"lineNumber":769,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":770,"author":{"gitID":"-"},"content":""},{"lineNumber":771,"author":{"gitID":"MuhdNurKamal"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/club/MainApp.java[`MainApp.java`]."},{"lineNumber":772,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":773,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":774,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":775,"author":{"gitID":"-"},"content":""},{"lineNumber":776,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":777,"author":{"gitID":"-"},"content":""},{"lineNumber":778,"author":{"gitID":"MuhdNurKamal"},"content":"A project often depends on third-party libraries. For example, Club Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":779,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":780,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":781,"author":{"gitID":"-"},"content":""},{"lineNumber":782,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":783,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":784,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":785,"author":{"gitID":"-"},"content":""},{"lineNumber":786,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":787,"author":{"gitID":"-"},"content":""},{"lineNumber":788,"author":{"gitID":"amrut-prabhu"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time."},{"lineNumber":789,"author":{"gitID":"amrut-prabhu"},"content":"Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":790,"author":{"gitID":"-"},"content":""},{"lineNumber":791,"author":{"gitID":"amrut-prabhu"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components."},{"lineNumber":792,"author":{"gitID":"amrut-prabhu"},"content":"\u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":793,"author":{"gitID":"-"},"content":""},{"lineNumber":794,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":795,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":796,"author":{"gitID":"-"},"content":""},{"lineNumber":797,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":798,"author":{"gitID":"-"},"content":""},{"lineNumber":799,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":800,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":801,"author":{"gitID":"-"},"content":""},{"lineNumber":802,"author":{"gitID":"amrut-prabhu"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command."},{"lineNumber":803,"author":{"gitID":"amrut-prabhu"},"content":"Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words."},{"lineNumber":804,"author":{"gitID":"amrut-prabhu"},"content":"Your job is to implement such aliases."},{"lineNumber":805,"author":{"gitID":"-"},"content":""},{"lineNumber":806,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":807,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":808,"author":{"gitID":"-"},"content":""},{"lineNumber":809,"author":{"gitID":"amrut-prabhu"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all members in the list."},{"lineNumber":810,"author":{"gitID":"-"},"content":"+"},{"lineNumber":811,"author":{"gitID":"-"},"content":"****"},{"lineNumber":812,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":813,"author":{"gitID":"MuhdNurKamal"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":814,"author":{"gitID":"MuhdNurKamal"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":815,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":816,"author":{"gitID":"MuhdNurKamal"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":817,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":818,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":819,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":820,"author":{"gitID":"-"},"content":"****"},{"lineNumber":821,"author":{"gitID":"-"},"content":""},{"lineNumber":822,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":823,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":824,"author":{"gitID":"-"},"content":""},{"lineNumber":825,"author":{"gitID":"MuhdNurKamal"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":826,"author":{"gitID":"-"},"content":""},{"lineNumber":827,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":828,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":829,"author":{"gitID":"-"},"content":""},{"lineNumber":830,"author":{"gitID":"MuhdNurKamal"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":831,"author":{"gitID":"-"},"content":"+"},{"lineNumber":832,"author":{"gitID":"-"},"content":"****"},{"lineNumber":833,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":834,"author":{"gitID":"MuhdNurKamal"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":835,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":836,"author":{"gitID":"amrut-prabhu"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/member/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a member, and link:{repoURL}/src/main/java/seedu/address/model/member/Person.java[`Person`] allows you to update the tags."},{"lineNumber":837,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":838,"author":{"gitID":"amrut-prabhu"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each member, and remove the `tag` from each member."},{"lineNumber":839,"author":{"gitID":"MuhdNurKamal"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":840,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":841,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":842,"author":{"gitID":"MuhdNurKamal"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":843,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":844,"author":{"gitID":"-"},"content":"****"},{"lineNumber":845,"author":{"gitID":"-"},"content":""},{"lineNumber":846,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":847,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":848,"author":{"gitID":"-"},"content":""},{"lineNumber":849,"author":{"gitID":"amrut-prabhu"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last member in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":850,"author":{"gitID":"-"},"content":""},{"lineNumber":851,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":852,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":853,"author":{"gitID":"-"},"content":""},{"lineNumber":854,"author":{"gitID":"MuhdNurKamal"},"content":". Use different colors for different tags inside member cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow as shown in Figure 21."},{"lineNumber":855,"author":{"gitID":"-"},"content":"+"},{"lineNumber":856,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":857,"author":{"gitID":"-"},"content":"+"},{"lineNumber":858,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":859,"author":{"gitID":"MuhdNurKamal"},"content":"_Figure 20. Member details before modification_"},{"lineNumber":860,"author":{"gitID":"-"},"content":"+"},{"lineNumber":861,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":862,"author":{"gitID":"-"},"content":"+"},{"lineNumber":863,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":864,"author":{"gitID":"MuhdNurKamal"},"content":"_Figure 21. Member details after modification_"},{"lineNumber":865,"author":{"gitID":"-"},"content":"+"},{"lineNumber":866,"author":{"gitID":"-"},"content":"****"},{"lineNumber":867,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":868,"author":{"gitID":"MuhdNurKamal"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":869,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":870,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":871,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":872,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":873,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":874,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":875,"author":{"gitID":"-"},"content":"****"},{"lineNumber":876,"author":{"gitID":"-"},"content":""},{"lineNumber":877,"author":{"gitID":"MuhdNurKamal"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":878,"author":{"gitID":"-"},"content":"+"},{"lineNumber":879,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":880,"author":{"gitID":"-"},"content":"+"},{"lineNumber":881,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":882,"author":{"gitID":"MuhdNurKamal"},"content":"_Figure 22. ResultDisplay before modification_"},{"lineNumber":883,"author":{"gitID":"-"},"content":"+"},{"lineNumber":884,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":885,"author":{"gitID":"-"},"content":"+"},{"lineNumber":886,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":887,"author":{"gitID":"MuhdNurKamal"},"content":"_Figure 23. ResultDisplay after modification_"},{"lineNumber":888,"author":{"gitID":"-"},"content":"+"},{"lineNumber":889,"author":{"gitID":"-"},"content":"****"},{"lineNumber":890,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":891,"author":{"gitID":"MuhdNurKamal"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":892,"author":{"gitID":"MuhdNurKamal"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":893,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":894,"author":{"gitID":"MuhdNurKamal"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":895,"author":{"gitID":"MuhdNurKamal"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":896,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":897,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":898,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":899,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":900,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":901,"author":{"gitID":"-"},"content":"****"},{"lineNumber":902,"author":{"gitID":"-"},"content":""},{"lineNumber":903,"author":{"gitID":"MuhdNurKamal"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":904,"author":{"gitID":"-"},"content":"+"},{"lineNumber":905,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":906,"author":{"gitID":"-"},"content":"+"},{"lineNumber":907,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":908,"author":{"gitID":"MuhdNurKamal"},"content":"_Figure 24. StatusBarFooter before modification_"},{"lineNumber":909,"author":{"gitID":"-"},"content":"+"},{"lineNumber":910,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":911,"author":{"gitID":"-"},"content":"+"},{"lineNumber":912,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":913,"author":{"gitID":"MuhdNurKamal"},"content":"_Figure 25. StatusBarFooter after modification_"},{"lineNumber":914,"author":{"gitID":"-"},"content":"+"},{"lineNumber":915,"author":{"gitID":"-"},"content":"****"},{"lineNumber":916,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":917,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":918,"author":{"gitID":"MuhdNurKamal"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":919,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":920,"author":{"gitID":"amrut-prabhu"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of members when the application just started."},{"lineNumber":921,"author":{"gitID":"amrut-prabhu"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of members whenever there are new changes to the addressbook."},{"lineNumber":922,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":923,"author":{"gitID":"amrut-prabhu"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of members status bar."},{"lineNumber":924,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":925,"author":{"gitID":"-"},"content":"****"},{"lineNumber":926,"author":{"gitID":"-"},"content":""},{"lineNumber":927,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":928,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":929,"author":{"gitID":"-"},"content":""},{"lineNumber":930,"author":{"gitID":"MuhdNurKamal"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":931,"author":{"gitID":"-"},"content":""},{"lineNumber":932,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":933,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":934,"author":{"gitID":"-"},"content":""},{"lineNumber":935,"author":{"gitID":"MuhdNurKamal"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":936,"author":{"gitID":"-"},"content":"+"},{"lineNumber":937,"author":{"gitID":"-"},"content":"****"},{"lineNumber":938,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":939,"author":{"gitID":"MuhdNurKamal"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":940,"author":{"gitID":"MuhdNurKamal"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":941,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":942,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":943,"author":{"gitID":"-"},"content":"****"},{"lineNumber":944,"author":{"gitID":"-"},"content":""},{"lineNumber":945,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":946,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":947,"author":{"gitID":"-"},"content":""},{"lineNumber":948,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":949,"author":{"gitID":"-"},"content":""},{"lineNumber":950,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":951,"author":{"gitID":"-"},"content":""},{"lineNumber":952,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":953,"author":{"gitID":"amrut-prabhu"},"content":"Edits the remark for a member specified in the `INDEX`. +"},{"lineNumber":954,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":955,"author":{"gitID":"-"},"content":""},{"lineNumber":956,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":957,"author":{"gitID":"-"},"content":""},{"lineNumber":958,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":959,"author":{"gitID":"amrut-prabhu"},"content":"Edits the remark for the first member to `Likes to drink coffee.`"},{"lineNumber":960,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":961,"author":{"gitID":"amrut-prabhu"},"content":"Removes the remark for the first member."},{"lineNumber":962,"author":{"gitID":"-"},"content":""},{"lineNumber":963,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":964,"author":{"gitID":"-"},"content":""},{"lineNumber":965,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":966,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":967,"author":{"gitID":"-"},"content":""},{"lineNumber":968,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":969,"author":{"gitID":"-"},"content":""},{"lineNumber":970,"author":{"gitID":"MuhdNurKamal"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":971,"author":{"gitID":"MuhdNurKamal"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":972,"author":{"gitID":"-"},"content":""},{"lineNumber":973,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":974,"author":{"gitID":"-"},"content":""},{"lineNumber":975,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":976,"author":{"gitID":"MuhdNurKamal"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":977,"author":{"gitID":"-"},"content":""},{"lineNumber":978,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":979,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":980,"author":{"gitID":"-"},"content":""},{"lineNumber":981,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":982,"author":{"gitID":"-"},"content":""},{"lineNumber":983,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":984,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":985,"author":{"gitID":"MuhdNurKamal"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":986,"author":{"gitID":"-"},"content":""},{"lineNumber":987,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":988,"author":{"gitID":"-"},"content":""},{"lineNumber":989,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":990,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":991,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":992,"author":{"gitID":"MuhdNurKamal"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":993,"author":{"gitID":"-"},"content":""},{"lineNumber":994,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":995,"author":{"gitID":"amrut-prabhu"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each member later."},{"lineNumber":996,"author":{"gitID":"-"},"content":""},{"lineNumber":997,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":998,"author":{"gitID":"-"},"content":""},{"lineNumber":999,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":1000,"author":{"gitID":"MuhdNurKamal"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":1001,"author":{"gitID":"-"},"content":""},{"lineNumber":1002,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1003,"author":{"gitID":"-"},"content":""},{"lineNumber":1004,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":1005,"author":{"gitID":"-"},"content":""},{"lineNumber":1006,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":1007,"author":{"gitID":"amrut-prabhu"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/member/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":1008,"author":{"gitID":"-"},"content":""},{"lineNumber":1009,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1010,"author":{"gitID":"-"},"content":""},{"lineNumber":1011,"author":{"gitID":"amrut-prabhu"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/member/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":1012,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":1013,"author":{"gitID":"-"},"content":""},{"lineNumber":1014,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1015,"author":{"gitID":"-"},"content":""},{"lineNumber":1016,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":1017,"author":{"gitID":"-"},"content":""},{"lineNumber":1018,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":1019,"author":{"gitID":"amrut-prabhu"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/member/Person.java[`Person`]."},{"lineNumber":1020,"author":{"gitID":"-"},"content":""},{"lineNumber":1021,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1022,"author":{"gitID":"-"},"content":""},{"lineNumber":1023,"author":{"gitID":"amrut-prabhu"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/member/Person.java[`Person`]."},{"lineNumber":1024,"author":{"gitID":"amrut-prabhu"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the member will be created without a remark)."},{"lineNumber":1025,"author":{"gitID":"amrut-prabhu"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `clubBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":1026,"author":{"gitID":"-"},"content":""},{"lineNumber":1027,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":1028,"author":{"gitID":"MuhdNurKamal"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":1029,"author":{"gitID":"-"},"content":""},{"lineNumber":1030,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1031,"author":{"gitID":"-"},"content":""},{"lineNumber":1032,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":1033,"author":{"gitID":"-"},"content":""},{"lineNumber":1034,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1035,"author":{"gitID":"-"},"content":""},{"lineNumber":1036,"author":{"gitID":"amrut-prabhu"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsClubBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":1037,"author":{"gitID":"-"},"content":""},{"lineNumber":1038,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":1039,"author":{"gitID":"amrut-prabhu"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/member/Person.java[`Person`]."},{"lineNumber":1040,"author":{"gitID":"-"},"content":""},{"lineNumber":1041,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1042,"author":{"gitID":"-"},"content":""},{"lineNumber":1043,"author":{"gitID":"amrut-prabhu"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the member that it is currently building."},{"lineNumber":1044,"author":{"gitID":"MuhdNurKamal"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":1045,"author":{"gitID":"-"},"content":""},{"lineNumber":1046,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":1047,"author":{"gitID":"MuhdNurKamal"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":1048,"author":{"gitID":"-"},"content":""},{"lineNumber":1049,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1050,"author":{"gitID":"-"},"content":""},{"lineNumber":1051,"author":{"gitID":"MuhdNurKamal"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":1052,"author":{"gitID":"-"},"content":""},{"lineNumber":1053,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1054,"author":{"gitID":"-"},"content":""},{"lineNumber":1055,"author":{"gitID":"MuhdNurKamal"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":1056,"author":{"gitID":"-"},"content":""},{"lineNumber":1057,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":1058,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":1059,"author":{"gitID":"-"},"content":""},{"lineNumber":1060,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1061,"author":{"gitID":"-"},"content":""},{"lineNumber":1062,"author":{"gitID":"amrut-prabhu"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a member."},{"lineNumber":1063,"author":{"gitID":"-"},"content":""},{"lineNumber":1064,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1065,"author":{"gitID":"-"},"content":""},{"lineNumber":1066,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":1067,"author":{"gitID":"-"},"content":""},{"lineNumber":1068,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":1069,"author":{"gitID":"-"},"content":""},{"lineNumber":1070,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":1071,"author":{"gitID":"-"},"content":""},{"lineNumber":1072,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1073,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1074,"author":{"gitID":"-"},"content":""},{"lineNumber":1075,"author":{"gitID":"-"},"content":"Club Connect is targeted at Student Organizations, such as clubs and societies, that are characterized by a well-established hierarchy."},{"lineNumber":1076,"author":{"gitID":"-"},"content":"Student organizations can have hundreds of members, who are divided into sub-committees that have narrower focuses. These subcommittee members are often assigned individual and group tasks. With time, it becomes very difficult to keep track of everything manually."},{"lineNumber":1077,"author":{"gitID":"-"},"content":"This is why these organizations require a system for enrolling members, delegating tasks, organising events, and opening polls and getting feedback."},{"lineNumber":1078,"author":{"gitID":"-"},"content":"Club Connect provides student organisations with a one-stop shop for all their managerial and organisation needs."},{"lineNumber":1079,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":1080,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":1081,"author":{"gitID":"-"},"content":""},{"lineNumber":1082,"author":{"gitID":"amrut-prabhu"},"content":"* \u003c\u003cexco-member,Exco member\u003e\u003e of a \u003c\u003cclub,Club\u003e\u003e"},{"lineNumber":1083,"author":{"gitID":"-"},"content":"* \u003c\u003cmember,Member\u003e\u003e of a club"},{"lineNumber":1084,"author":{"gitID":"-"},"content":""},{"lineNumber":1085,"author":{"gitID":"-"},"content":"*Value proposition*: clubs can efficiently manage its activities and members faster than a typical mouse/GUI driven application"},{"lineNumber":1086,"author":{"gitID":"-"},"content":""},{"lineNumber":1087,"author":{"gitID":"yash-chowdhary"},"content":"*Feature Contribution:*"},{"lineNumber":1088,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":1089,"author":{"gitID":"yash-chowdhary"},"content":"1. Yash Chowdhary"},{"lineNumber":1090,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":1091,"author":{"gitID":"-"},"content":"* Major Feature: Task Management"},{"lineNumber":1092,"author":{"gitID":"yash-chowdhary"},"content":"+"},{"lineNumber":1093,"author":{"gitID":"yash-chowdhary"},"content":"Each member of a student club / organization is responsible for carrying out tasks that are assigned to him/her. Managing tasks encompasses adding tasks or maintaining a To-Do List for yourself, being assigned tasks by Exco members, removing a task from the list once it has been completed, and updating a task\u0027s status. This ensures transparency and accountability of the club."},{"lineNumber":1094,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":1095,"author":{"gitID":"-"},"content":"* Minor Feature: Email Command"},{"lineNumber":1096,"author":{"gitID":"yash-chowdhary"},"content":"+"},{"lineNumber":1097,"author":{"gitID":"yash-chowdhary"},"content":"Every student club / organisation makes use of email blasts to communicate with its members. Whether it is for general communication or for club-related events, the ability to email members is essential to the smooth functioning of an organization."},{"lineNumber":1098,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":1099,"author":{"gitID":"-"},"content":"2. Amrut Prabhu"},{"lineNumber":1100,"author":{"gitID":"-"},"content":""},{"lineNumber":1101,"author":{"gitID":"-"},"content":"* Major Feature: Importing and Exporting Members List"},{"lineNumber":1102,"author":{"gitID":"yash-chowdhary"},"content":"+"},{"lineNumber":1103,"author":{"gitID":"-"},"content":"After recruitment events like SLF at NUS or other situations in which details of incoming members are recorded on an Excel sheet, the data can be imported from the Club Connect application instead of manually adding all the members."},{"lineNumber":1104,"author":{"gitID":"-"},"content":"The list of members from the Club Connect application can be exported to formats such as .csv or .txt so that the club members can have access to a readable and sharable version of the member list outside the Club Connect application."},{"lineNumber":1105,"author":{"gitID":"-"},"content":""},{"lineNumber":1106,"author":{"gitID":"amrut-prabhu"},"content":"* Minor Feature: Add a profile photo"},{"lineNumber":1107,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1108,"author":{"gitID":"amrut-prabhu"},"content":"All the members of a club are not known by each other, which is especially the case in larger clubs."},{"lineNumber":1109,"author":{"gitID":"amrut-prabhu"},"content":"Adding a profile photo makes it easier to know what other members look like and to differentiate between members with similar names."},{"lineNumber":1110,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":1111,"author":{"gitID":"MuhdNurKamal"},"content":"3. Muhammad Nur Kamal Bin Mohammed Ariff"},{"lineNumber":1112,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1113,"author":{"gitID":"MuhdNurKamal"},"content":"* Major Feature: Polling system"},{"lineNumber":1114,"author":{"gitID":"MuhdNurKamal"},"content":"+"},{"lineNumber":1115,"author":{"gitID":"MuhdNurKamal"},"content":"Exco members can create polls and look at the results to help ascertain the needs and want of other members. Members can vote for polls to express what they require from the club."},{"lineNumber":1116,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1117,"author":{"gitID":"MuhdNurKamal"},"content":"* Minor Feature: Findby Command"},{"lineNumber":1118,"author":{"gitID":"MuhdNurKamal"},"content":"+"},{"lineNumber":1119,"author":{"gitID":"MuhdNurKamal"},"content":"Instead of just finding a member by name, Findby Command is used to search members by a specified field which includes: Name, Phone, Email, Matric Number, Tags and Group. This increases navigability of the contacts inside Club Connect."},{"lineNumber":1120,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1121,"author":{"gitID":"th14thmusician"},"content":"4. Song Weiyang"},{"lineNumber":1122,"author":{"gitID":"th14thmusician"},"content":""},{"lineNumber":1123,"author":{"gitID":"th14thmusician"},"content":"* Major Feature: Log In Function"},{"lineNumber":1124,"author":{"gitID":"th14thmusician"},"content":"+"},{"lineNumber":1125,"author":{"gitID":"th14thmusician"},"content":"Members can log in to their own accounts and excess their unique storage files. This can allow allocation of task to certain members and memebrs can organise their datas uniquely."},{"lineNumber":1126,"author":{"gitID":"th14thmusician"},"content":""},{"lineNumber":1127,"author":{"gitID":"th14thmusician"},"content":"* Minor Feature: AutoSorting"},{"lineNumber":1128,"author":{"gitID":"th14thmusician"},"content":"+"},{"lineNumber":1129,"author":{"gitID":"th14thmusician"},"content":"After Members edited their list of contacts, the contact list will be automatically sorted in alphabetical order."},{"lineNumber":1130,"author":{"gitID":"th14thmusician"},"content":""},{"lineNumber":1131,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1132,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1133,"author":{"gitID":"-"},"content":""},{"lineNumber":1134,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1135,"author":{"gitID":"-"},"content":""},{"lineNumber":1136,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1137,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1138,"author":{"gitID":"yash-chowdhary"},"content":"|Priority |As a/an ... |I want to ... |So that I can..."},{"lineNumber":1139,"author":{"gitID":"MuhdNurKamal"},"content":"|`* * *` |New member |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":1140,"author":{"gitID":"-"},"content":""},{"lineNumber":1141,"author":{"gitID":"amrut-prabhu"},"content":"|`* * *` |\u003c\u003cexco-member,Exco member\u003e\u003e |add a new member to the club | begin assigning groups and tasks to the member"},{"lineNumber":1142,"author":{"gitID":"-"},"content":""},{"lineNumber":1143,"author":{"gitID":"amrut-prabhu"},"content":"|`* * *` |Exco member |delete a member from the club |remove entries that the club no longer needs"},{"lineNumber":1144,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":1145,"author":{"gitID":"yash-chowdhary"},"content":"|`* * *` |Exco member |divide members into groups using tags |manage the committee members more efficiently"},{"lineNumber":1146,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":1147,"author":{"gitID":"amrut-prabhu"},"content":"|`* * *` |Exco member |remove a particular tag/group | remove redundancies or remove irrelevant tags"},{"lineNumber":1148,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":1149,"author":{"gitID":"amrut-prabhu"},"content":"|`* * *` |Exco member |remove a member from a particular group | keep the App up-to-date, and also take into account students that opt-out or graduate"},{"lineNumber":1150,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1151,"author":{"gitID":"amrut-prabhu"},"content":"|`* * *` |Exco member |add a task for certain members | assign members to do a task"},{"lineNumber":1152,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1153,"author":{"gitID":"amrut-prabhu"},"content":"|`* * *` |Exco member |view the status of a task | see the progress made towards completing the task"},{"lineNumber":1154,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1155,"author":{"gitID":"amrut-prabhu"},"content":"|`* * *` |Exco member |remove a task | delete tasks that have been completed"},{"lineNumber":1156,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1157,"author":{"gitID":"amrut-prabhu"},"content":"|`* * *` |Exco member |create a poll | get the opinions of the club members"},{"lineNumber":1158,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1159,"author":{"gitID":"amrut-prabhu"},"content":"|`* * *` |Exco member who created a poll |view results of the poll | see the opinions of the members"},{"lineNumber":1160,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":1161,"author":{"gitID":"MuhdNurKamal"},"content":"|`* * *` |Member |edit my contact details |keep my contact information updated"},{"lineNumber":1162,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":1163,"author":{"gitID":"MuhdNurKamal"},"content":"|`* * *` |Member |undo my command |reverse any undesirable commands or mistakes"},{"lineNumber":1164,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1165,"author":{"gitID":"MuhdNurKamal"},"content":"|`* * *` |Member |redo a command |return to the state before I undid a command"},{"lineNumber":1166,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1167,"author":{"gitID":"MuhdNurKamal"},"content":"|`* * *` |Member |select a member |view the member\u0027s details"},{"lineNumber":1168,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1169,"author":{"gitID":"amrut-prabhu"},"content":"|`* * *` |Member |find a member by name |locate details of members without having to go through the entire list"},{"lineNumber":1170,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1171,"author":{"gitID":"MuhdNurKamal"},"content":"|`* * *` |Member |find members by a specified field |locate details of members without having to go through the entire list"},{"lineNumber":1172,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1173,"author":{"gitID":"MuhdNurKamal"},"content":"|`* * *` |Member |get notifications for new tasks |be aware of new tasks assigned to me"},{"lineNumber":1174,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":1175,"author":{"gitID":"amrut-prabhu"},"content":"|`* * *` |Member |add a profile photo |be identified by others"},{"lineNumber":1176,"author":{"gitID":"-"},"content":""},{"lineNumber":1177,"author":{"gitID":"MuhdNurKamal"},"content":"|`* * *` |Member |add multiple \u003c\u003centry,entries\u003e\u003e for \u003c\u003cattribute,attributes\u003e\u003e |provide all alternative contact details to others"},{"lineNumber":1178,"author":{"gitID":"-"},"content":""},{"lineNumber":1179,"author":{"gitID":"MuhdNurKamal"},"content":"|`* * *` |Member |logout of the application |maintain integrity of my data and actions"},{"lineNumber":1180,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1181,"author":{"gitID":"MuhdNurKamal"},"content":"|`* * *` |Member |login to my account |access my data"},{"lineNumber":1182,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1183,"author":{"gitID":"MuhdNurKamal"},"content":"|`* * *` |Member |vote in a poll |provide my opinions"},{"lineNumber":1184,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1185,"author":{"gitID":"MuhdNurKamal"},"content":"|`* * *` |Member |remove a task assigned to me |focus on the yet to be done tasks"},{"lineNumber":1186,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1187,"author":{"gitID":"MuhdNurKamal"},"content":"|`* * *` |Busy member |be able to directly email members using my default mail client |save time and reduce errors by not needing to add recipients myself"},{"lineNumber":1188,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":1189,"author":{"gitID":"MuhdNurKamal"},"content":"|`* * *` |Member |export members\u0027 info |so that I can share the details easily"},{"lineNumber":1190,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1191,"author":{"gitID":"MuhdNurKamal"},"content":"|`* * *` |Exco member |import data |add members\u0027 info to ClubConnect efficiently"},{"lineNumber":1192,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1193,"author":{"gitID":"MuhdNurKamal"},"content":"|`* *` |Member |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"},{"lineNumber":1194,"author":{"gitID":"-"},"content":""},{"lineNumber":1195,"author":{"gitID":"MuhdNurKamal"},"content":"|`* *` |Member |be notified on members\u0027 birthdays |wish them on time"},{"lineNumber":1196,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1197,"author":{"gitID":"MuhdNurKamal"},"content":"|`* *` |Member |compress the display of members |browse through the list of members with less distractions"},{"lineNumber":1198,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1199,"author":{"gitID":"MuhdNurKamal"},"content":"|`* *` |Efficient member |use shortcuts for commands |enter commands quickly"},{"lineNumber":1200,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1201,"author":{"gitID":"MuhdNurKamal"},"content":"|`* *` |Forgetful member |use multiple names for commands |use the right command by using any intuitive name"},{"lineNumber":1202,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1203,"author":{"gitID":"MuhdNurKamal"},"content":"|`* *` |Forgetful member |add an alternative name for a command |use names that I am used to"},{"lineNumber":1204,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1205,"author":{"gitID":"MuhdNurKamal"},"content":"|`* *` |Forgetful member |have suggestions for commands |correct myself easily when I make a mistake"},{"lineNumber":1206,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1207,"author":{"gitID":"amrut-prabhu"},"content":"|`*` |Exco member |view anonymous feedback |see members\u0027 opinions of how the club can be improved"},{"lineNumber":1208,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1209,"author":{"gitID":"amrut-prabhu"},"content":"|`*` |Member with many members in the address book |sort members by name |locate a member easily"},{"lineNumber":1210,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1211,"author":{"gitID":"MuhdNurKamal"},"content":"|`*` |Member |choose fields that should be displayed in the members list |view only those attributes that I want"},{"lineNumber":1212,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1213,"author":{"gitID":"MuhdNurKamal"},"content":"|`*` |Member |submit anonymous feedback |give my opinions to improve the club system and facilities"},{"lineNumber":1214,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1215,"author":{"gitID":"MuhdNurKamal"},"content":"|`*` |Member |create a group chat |broadcast messages"},{"lineNumber":1216,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1217,"author":{"gitID":"MuhdNurKamal"},"content":"|`*` |Member |chat with other members |communicate with them"},{"lineNumber":1218,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1219,"author":{"gitID":"MuhdNurKamal"},"content":"|`*` |Member |know who is online |I can chat with members in real time."},{"lineNumber":1220,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1221,"author":{"gitID":"MuhdNurKamal"},"content":"|`*` |Member |see a list of my frequently viewed members |I can quickly access them"},{"lineNumber":1222,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1223,"author":{"gitID":"MuhdNurKamal"},"content":"|`*` |Member |email \u003c\u003cprofile,profiles\u003e\u003e of members to others |I can share the information easily"},{"lineNumber":1224,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1225,"author":{"gitID":"MuhdNurKamal"},"content":"|`*` |Member |print profiles of selected members |view the information in the absence of a computer"},{"lineNumber":1226,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1227,"author":{"gitID":"MuhdNurKamal"},"content":"|`*` |Socially active member |link my social media |I can directly post things that I do in the club"},{"lineNumber":1228,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1229,"author":{"gitID":"MuhdNurKamal"},"content":"|`*` |Member |change the theme of the application |use the application with an appearance that I think looks best"},{"lineNumber":1230,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1231,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1232,"author":{"gitID":"-"},"content":""},{"lineNumber":1233,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1234,"author":{"gitID":"-"},"content":""},{"lineNumber":1235,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1236,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1237,"author":{"gitID":"-"},"content":""},{"lineNumber":1238,"author":{"gitID":"MuhdNurKamal"},"content":"(For all use cases below, the *System* is the `ClubConnect` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1239,"author":{"gitID":"-"},"content":""},{"lineNumber":1240,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1241,"author":{"gitID":"MuhdNurKamal"},"content":"\u003d\u003d\u003d Use case: Delete member"},{"lineNumber":1242,"author":{"gitID":"MuhdNurKamal"},"content":"*System* : ClubConnect"},{"lineNumber":1243,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1244,"author":{"gitID":"MuhdNurKamal"},"content":"*Actor* : Exco member"},{"lineNumber":1245,"author":{"gitID":"-"},"content":""},{"lineNumber":1246,"author":{"gitID":"MuhdNurKamal"},"content":"*Precondition* : User is logged in."},{"lineNumber":1247,"author":{"gitID":"-"},"content":""},{"lineNumber":1248,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1249,"author":{"gitID":"-"},"content":""},{"lineNumber":1250,"author":{"gitID":"MuhdNurKamal"},"content":"1.  User requests to list members."},{"lineNumber":1251,"author":{"gitID":"MuhdNurKamal"},"content":"2.  ClubConnect shows a list of members."},{"lineNumber":1252,"author":{"gitID":"MuhdNurKamal"},"content":"3.  User requests to delete a specific member in the list."},{"lineNumber":1253,"author":{"gitID":"MuhdNurKamal"},"content":"4.  ClubConnect deletes the member."},{"lineNumber":1254,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1255,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1256,"author":{"gitID":"-"},"content":""},{"lineNumber":1257,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1258,"author":{"gitID":"-"},"content":""},{"lineNumber":1259,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1260,"author":{"gitID":"MuhdNurKamal"},"content":"* 2a. The list only contains the User."},{"lineNumber":1261,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1262,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1263,"author":{"gitID":"-"},"content":""},{"lineNumber":1264,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1265,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1266,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1267,"author":{"gitID":"MuhdNurKamal"},"content":"** 3a1. ClubConnect shows an error message."},{"lineNumber":1268,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1269,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1270,"author":{"gitID":"-"},"content":""},{"lineNumber":1271,"author":{"gitID":"yash-chowdhary"},"content":"[discrete]"},{"lineNumber":1272,"author":{"gitID":"MuhdNurKamal"},"content":"\u003d\u003d\u003d Use case: Add member"},{"lineNumber":1273,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1274,"author":{"gitID":"MuhdNurKamal"},"content":"*System* : ClubConnect"},{"lineNumber":1275,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1276,"author":{"gitID":"MuhdNurKamal"},"content":"*Actor* : Exco member"},{"lineNumber":1277,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":1278,"author":{"gitID":"MuhdNurKamal"},"content":"*Precondition* : User is logged in."},{"lineNumber":1279,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":1280,"author":{"gitID":"yash-chowdhary"},"content":"*MSS*"},{"lineNumber":1281,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":1282,"author":{"gitID":"MuhdNurKamal"},"content":"1.  User requests to list members."},{"lineNumber":1283,"author":{"gitID":"MuhdNurKamal"},"content":"2.  ClubConnect shows a list of members."},{"lineNumber":1284,"author":{"gitID":"MuhdNurKamal"},"content":"3.  User requests to add a member to the list."},{"lineNumber":1285,"author":{"gitID":"MuhdNurKamal"},"content":"4.  ClubConnect adds the member."},{"lineNumber":1286,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1287,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1288,"author":{"gitID":"-"},"content":""},{"lineNumber":1289,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1290,"author":{"gitID":"-"},"content":""},{"lineNumber":1291,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1292,"author":{"gitID":"MuhdNurKamal"},"content":"* 3a. The syntax of the add command is invalid."},{"lineNumber":1293,"author":{"gitID":"MuhdNurKamal"},"content":"** 3a1. ClubConnect shows an error message."},{"lineNumber":1294,"author":{"gitID":"MuhdNurKamal"},"content":"** 3a1. ClubConnect shows correct format for add command."},{"lineNumber":1295,"author":{"gitID":"yash-chowdhary"},"content":"+"},{"lineNumber":1296,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1297,"author":{"gitID":"-"},"content":""},{"lineNumber":1298,"author":{"gitID":"MuhdNurKamal"},"content":"* 3a. The matric number of member already exists in ClubConnect."},{"lineNumber":1299,"author":{"gitID":"MuhdNurKamal"},"content":"** 3a1. ClubConnect shows an error message."},{"lineNumber":1300,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1301,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1302,"author":{"gitID":"-"},"content":""},{"lineNumber":1303,"author":{"gitID":"yash-chowdhary"},"content":"[discrete]"},{"lineNumber":1304,"author":{"gitID":"MuhdNurKamal"},"content":"\u003d\u003d\u003d Use case: Show Help"},{"lineNumber":1305,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1306,"author":{"gitID":"MuhdNurKamal"},"content":"*System* : ClubConnect"},{"lineNumber":1307,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1308,"author":{"gitID":"MuhdNurKamal"},"content":"*Actor* : Member"},{"lineNumber":1309,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":1310,"author":{"gitID":"MuhdNurKamal"},"content":"*Precondition* : User is logged in."},{"lineNumber":1311,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":1312,"author":{"gitID":"yash-chowdhary"},"content":"*MSS*"},{"lineNumber":1313,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":1314,"author":{"gitID":"MuhdNurKamal"},"content":"1.  User requests help."},{"lineNumber":1315,"author":{"gitID":"MuhdNurKamal"},"content":"2.  ClubConnect shows usage instructions."},{"lineNumber":1316,"author":{"gitID":"yash-chowdhary"},"content":"+"},{"lineNumber":1317,"author":{"gitID":"yash-chowdhary"},"content":"Use case ends."},{"lineNumber":1318,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":1319,"author":{"gitID":"MuhdNurKamal"},"content":"[discrete]"},{"lineNumber":1320,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":1321,"author":{"gitID":"MuhdNurKamal"},"content":"\u003d\u003d\u003d Use case: Sort members"},{"lineNumber":1322,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1323,"author":{"gitID":"MuhdNurKamal"},"content":"*System* : ClubConnect"},{"lineNumber":1324,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1325,"author":{"gitID":"MuhdNurKamal"},"content":"*Actor* : Member"},{"lineNumber":1326,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1327,"author":{"gitID":"MuhdNurKamal"},"content":"*Precondition* : User is logged in."},{"lineNumber":1328,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1329,"author":{"gitID":"MuhdNurKamal"},"content":"*MSS*"},{"lineNumber":1330,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1331,"author":{"gitID":"MuhdNurKamal"},"content":"1.  User requests to sort by specified field."},{"lineNumber":1332,"author":{"gitID":"MuhdNurKamal"},"content":"2.  ClubConnect lists members sorted according to specified field."},{"lineNumber":1333,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1334,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1335,"author":{"gitID":"-"},"content":""},{"lineNumber":1336,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1337,"author":{"gitID":"-"},"content":""},{"lineNumber":1338,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1339,"author":{"gitID":"MuhdNurKamal"},"content":"* 1a. Invalid field specified."},{"lineNumber":1340,"author":{"gitID":"MuhdNurKamal"},"content":"** 1a1. ClubConnect shows an error message and displays all possible valid fields."},{"lineNumber":1341,"author":{"gitID":"MuhdNurKamal"},"content":"+"},{"lineNumber":1342,"author":{"gitID":"MuhdNurKamal"},"content":"Use case resumes at step 1."},{"lineNumber":1343,"author":{"gitID":"MuhdNurKamal"},"content":"* 1b. No field specified."},{"lineNumber":1344,"author":{"gitID":"MuhdNurKamal"},"content":"** 1b2. ClubConnect shows list of members sorted by name."},{"lineNumber":1345,"author":{"gitID":"MuhdNurKamal"},"content":"+"},{"lineNumber":1346,"author":{"gitID":"MuhdNurKamal"},"content":"Use case ends."},{"lineNumber":1347,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1348,"author":{"gitID":"MuhdNurKamal"},"content":"[discrete]"},{"lineNumber":1349,"author":{"gitID":"MuhdNurKamal"},"content":"\u003d\u003d\u003d Use case: Exit"},{"lineNumber":1350,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1351,"author":{"gitID":"MuhdNurKamal"},"content":"*System* : ClubConnect"},{"lineNumber":1352,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1353,"author":{"gitID":"MuhdNurKamal"},"content":"*Actor* : Member"},{"lineNumber":1354,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1355,"author":{"gitID":"MuhdNurKamal"},"content":"*Precondition* : User is logged in."},{"lineNumber":1356,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1357,"author":{"gitID":"MuhdNurKamal"},"content":"*MSS*"},{"lineNumber":1358,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1359,"author":{"gitID":"MuhdNurKamal"},"content":"1.  User requests to exit ClubConnect."},{"lineNumber":1360,"author":{"gitID":"MuhdNurKamal"},"content":"2.  ClubConnect exits."},{"lineNumber":1361,"author":{"gitID":"MuhdNurKamal"},"content":"+"},{"lineNumber":1362,"author":{"gitID":"MuhdNurKamal"},"content":"Use case ends."},{"lineNumber":1363,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1364,"author":{"gitID":"MuhdNurKamal"},"content":"[discrete]"},{"lineNumber":1365,"author":{"gitID":"MuhdNurKamal"},"content":"\u003d\u003d\u003d Use case: Undo command"},{"lineNumber":1366,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1367,"author":{"gitID":"MuhdNurKamal"},"content":"*System* : ClubConnect"},{"lineNumber":1368,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1369,"author":{"gitID":"MuhdNurKamal"},"content":"*Actor* : Member"},{"lineNumber":1370,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1371,"author":{"gitID":"MuhdNurKamal"},"content":"*Precondition* : User is logged in."},{"lineNumber":1372,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1373,"author":{"gitID":"MuhdNurKamal"},"content":"*MSS*"},{"lineNumber":1374,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1375,"author":{"gitID":"MuhdNurKamal"},"content":"1.  User requests to undo previous command."},{"lineNumber":1376,"author":{"gitID":"MuhdNurKamal"},"content":"2.  ClubConnect undoes previous command."},{"lineNumber":1377,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1378,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1379,"author":{"gitID":"-"},"content":""},{"lineNumber":1380,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1381,"author":{"gitID":"-"},"content":""},{"lineNumber":1382,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1383,"author":{"gitID":"MuhdNurKamal"},"content":"* 1a. Previous command is undoable."},{"lineNumber":1384,"author":{"gitID":"MuhdNurKamal"},"content":"** 1a1. ClubConnect undoes latest undoable command."},{"lineNumber":1385,"author":{"gitID":"MuhdNurKamal"},"content":"+"},{"lineNumber":1386,"author":{"gitID":"MuhdNurKamal"},"content":"Use case ends."},{"lineNumber":1387,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1388,"author":{"gitID":"MuhdNurKamal"},"content":"* 1b. No previous commands given."},{"lineNumber":1389,"author":{"gitID":"MuhdNurKamal"},"content":"+"},{"lineNumber":1390,"author":{"gitID":"MuhdNurKamal"},"content":"Use case ends."},{"lineNumber":1391,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1392,"author":{"gitID":"MuhdNurKamal"},"content":"[discrete]"},{"lineNumber":1393,"author":{"gitID":"MuhdNurKamal"},"content":"\u003d\u003d\u003d Use case: Redo command"},{"lineNumber":1394,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1395,"author":{"gitID":"MuhdNurKamal"},"content":"*System* : ClubConnect"},{"lineNumber":1396,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1397,"author":{"gitID":"MuhdNurKamal"},"content":"*Actor* : Member"},{"lineNumber":1398,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1399,"author":{"gitID":"MuhdNurKamal"},"content":"*Precondition* : User is logged in."},{"lineNumber":1400,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1401,"author":{"gitID":"MuhdNurKamal"},"content":"*MSS*"},{"lineNumber":1402,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1403,"author":{"gitID":"MuhdNurKamal"},"content":"1.  User requests to redo."},{"lineNumber":1404,"author":{"gitID":"MuhdNurKamal"},"content":"2.  ClubConnect redoes the change made by previous undo command."},{"lineNumber":1405,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1406,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1407,"author":{"gitID":"-"},"content":""},{"lineNumber":1408,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1409,"author":{"gitID":"-"},"content":""},{"lineNumber":1410,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1411,"author":{"gitID":"MuhdNurKamal"},"content":"* 1a. There are no redoable commands."},{"lineNumber":1412,"author":{"gitID":"MuhdNurKamal"},"content":"+"},{"lineNumber":1413,"author":{"gitID":"MuhdNurKamal"},"content":"Use case ends."},{"lineNumber":1414,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1415,"author":{"gitID":"MuhdNurKamal"},"content":"[discrete]"},{"lineNumber":1416,"author":{"gitID":"MuhdNurKamal"},"content":"\u003d\u003d\u003d Use case: Login"},{"lineNumber":1417,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1418,"author":{"gitID":"MuhdNurKamal"},"content":"*System* : ClubConnect"},{"lineNumber":1419,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1420,"author":{"gitID":"MuhdNurKamal"},"content":"*Actor* : Member"},{"lineNumber":1421,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1422,"author":{"gitID":"MuhdNurKamal"},"content":"*Precondition* : User is logged out."},{"lineNumber":1423,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1424,"author":{"gitID":"MuhdNurKamal"},"content":"*MSS*"},{"lineNumber":1425,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1426,"author":{"gitID":"MuhdNurKamal"},"content":"1.  ClubConnect shows login screen."},{"lineNumber":1427,"author":{"gitID":"MuhdNurKamal"},"content":"2.  User enters username and password."},{"lineNumber":1428,"author":{"gitID":"MuhdNurKamal"},"content":"3.  ClubConnect login as member with given username and password."},{"lineNumber":1429,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1430,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1431,"author":{"gitID":"-"},"content":""},{"lineNumber":1432,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1433,"author":{"gitID":"-"},"content":""},{"lineNumber":1434,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1435,"author":{"gitID":"MuhdNurKamal"},"content":"* 1a. Username and password combination invalid."},{"lineNumber":1436,"author":{"gitID":"MuhdNurKamal"},"content":"** 1a1. ClubConnect shows an error message."},{"lineNumber":1437,"author":{"gitID":"MuhdNurKamal"},"content":"+"},{"lineNumber":1438,"author":{"gitID":"MuhdNurKamal"},"content":"Use case resumes at step 1."},{"lineNumber":1439,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1440,"author":{"gitID":"MuhdNurKamal"},"content":"[discrete]"},{"lineNumber":1441,"author":{"gitID":"MuhdNurKamal"},"content":"\u003d\u003d\u003d Use case: Logout"},{"lineNumber":1442,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1443,"author":{"gitID":"MuhdNurKamal"},"content":"*System* : ClubConnect"},{"lineNumber":1444,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1445,"author":{"gitID":"MuhdNurKamal"},"content":"*Actor* : Member"},{"lineNumber":1446,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1447,"author":{"gitID":"MuhdNurKamal"},"content":"*Precondition* : User is logged in."},{"lineNumber":1448,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1449,"author":{"gitID":"MuhdNurKamal"},"content":"*MSS*"},{"lineNumber":1450,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1451,"author":{"gitID":"MuhdNurKamal"},"content":"1.  User requests to logout."},{"lineNumber":1452,"author":{"gitID":"MuhdNurKamal"},"content":"2.  ClubConnect logouts to login screen."},{"lineNumber":1453,"author":{"gitID":"MuhdNurKamal"},"content":"+"},{"lineNumber":1454,"author":{"gitID":"MuhdNurKamal"},"content":"Use case ends."},{"lineNumber":1455,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1456,"author":{"gitID":"MuhdNurKamal"},"content":"[discrete]"},{"lineNumber":1457,"author":{"gitID":"amrut-prabhu"},"content":"\u003d\u003d\u003d Use case: Find member"},{"lineNumber":1458,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1459,"author":{"gitID":"MuhdNurKamal"},"content":"*System* : ClubConnect"},{"lineNumber":1460,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1461,"author":{"gitID":"MuhdNurKamal"},"content":"*Actor* : Member"},{"lineNumber":1462,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1463,"author":{"gitID":"MuhdNurKamal"},"content":"*Precondition* : User is logged in."},{"lineNumber":1464,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1465,"author":{"gitID":"MuhdNurKamal"},"content":"*MSS*"},{"lineNumber":1466,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":1467,"author":{"gitID":"MuhdNurKamal"},"content":"1.  User requests to find member by specified field using keyword."},{"lineNumber":1468,"author":{"gitID":"amrut-prabhu"},"content":"2.  ClubConnect shows a list of members containing keyword in specified field."},{"lineNumber":1469,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1470,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1471,"author":{"gitID":"-"},"content":""},{"lineNumber":1472,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1473,"author":{"gitID":"-"},"content":""},{"lineNumber":1474,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1475,"author":{"gitID":"MuhdNurKamal"},"content":"* 1a. Invalid field specified."},{"lineNumber":1476,"author":{"gitID":"MuhdNurKamal"},"content":"** 1a1. ClubConnect shows an error message and displays all possible valid fields."},{"lineNumber":1477,"author":{"gitID":"MuhdNurKamal"},"content":"+"},{"lineNumber":1478,"author":{"gitID":"MuhdNurKamal"},"content":"Use case resumes at step 1."},{"lineNumber":1479,"author":{"gitID":"MuhdNurKamal"},"content":"* 1b. No field specified."},{"lineNumber":1480,"author":{"gitID":"amrut-prabhu"},"content":"** 1b2. ClubConnect shows a list of members containing keyword in any possible field."},{"lineNumber":1481,"author":{"gitID":"MuhdNurKamal"},"content":"+"},{"lineNumber":1482,"author":{"gitID":"MuhdNurKamal"},"content":"Use case ends."},{"lineNumber":1483,"author":{"gitID":"-"},"content":""},{"lineNumber":1484,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1485,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1486,"author":{"gitID":"-"},"content":""},{"lineNumber":1487,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1488,"author":{"gitID":"amrut-prabhu"},"content":".  Should be able to hold up to 1000 members without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1489,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1490,"author":{"gitID":"yash-chowdhary"},"content":".  Should respond within 1 second."},{"lineNumber":1491,"author":{"gitID":"yash-chowdhary"},"content":".  Should work on 32- and 64- bit environments."},{"lineNumber":1492,"author":{"gitID":"yash-chowdhary"},"content":".  Should be easy to use for a first-time user."},{"lineNumber":1493,"author":{"gitID":"yash-chowdhary"},"content":".  Should be able to handle any sort of input, i.e. should recover from invalid input."},{"lineNumber":1494,"author":{"gitID":"-"},"content":".  Should have friendly user guides and developer guides."},{"lineNumber":1495,"author":{"gitID":"-"},"content":".  Should allow certain data to be private."},{"lineNumber":1496,"author":{"gitID":"-"},"content":".  Should have command names that concisely describe their function."},{"lineNumber":1497,"author":{"gitID":"-"},"content":".  Should be open-source."},{"lineNumber":1498,"author":{"gitID":"-"},"content":".  Development should not cost money."},{"lineNumber":1499,"author":{"gitID":"-"},"content":".  Should be able to work offline."},{"lineNumber":1500,"author":{"gitID":"-"},"content":".  Should take up as little memory on the hard disk."},{"lineNumber":1501,"author":{"gitID":"-"},"content":".  Should be compatible with all Operating System, i.e Windows and Macintosh."},{"lineNumber":1502,"author":{"gitID":"MuhdNurKamal"},"content":".  Should save data regularly."},{"lineNumber":1503,"author":{"gitID":"-"},"content":".  Current versions must be backward compatible with older versions to support undo."},{"lineNumber":1504,"author":{"gitID":"-"},"content":""},{"lineNumber":1505,"author":{"gitID":"-"},"content":""},{"lineNumber":1506,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1507,"author":{"gitID":"-"},"content":""},{"lineNumber":1508,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1509,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1510,"author":{"gitID":"-"},"content":""},{"lineNumber":1511,"author":{"gitID":"amrut-prabhu"},"content":"[[abstraction]] Abstraction::"},{"lineNumber":1512,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1513,"author":{"gitID":"-"},"content":"[[attribute]] Attribute::"},{"lineNumber":1514,"author":{"gitID":"MuhdNurKamal"},"content":"An attribute is a type of detail of a member. For example, an attribute of a member could be phone number, email, matric number and so on."},{"lineNumber":1515,"author":{"gitID":"-"},"content":""},{"lineNumber":1516,"author":{"gitID":"amrut-prabhu"},"content":"[[club]] Club::"},{"lineNumber":1517,"author":{"gitID":"-"},"content":"A student organisation or association at the National University of Singapore. These include (but are not limited to) Faculty/Non-Faculty clubs, Academic/Non-Academic Societies, Interest Groups and Sports groups. Some examples include Computing Club, Mathematics Society and Basketball Varsity Team."},{"lineNumber":1518,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1519,"author":{"gitID":"-"},"content":"[[cli]] CLI::"},{"lineNumber":1520,"author":{"gitID":"-"},"content":"Acronym for Command Line Inerface. It is a purely text-based interface for software. User respond to visual prompts by typing single commands into the interface and receive results as text as well."},{"lineNumber":1521,"author":{"gitID":"-"},"content":"An example of CLI would be MS-DOS."},{"lineNumber":1522,"author":{"gitID":"-"},"content":""},{"lineNumber":1523,"author":{"gitID":"amrut-prabhu"},"content":"[[csv]] CSV::"},{"lineNumber":1524,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1525,"author":{"gitID":"amrut-prabhu"},"content":"[[entry]] Entry::"},{"lineNumber":1526,"author":{"gitID":"-"},"content":"A value added to a member\u0027s attribute."},{"lineNumber":1527,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1528,"author":{"gitID":"amrut-prabhu"},"content":"[[exco-member]] Exco member::"},{"lineNumber":1529,"author":{"gitID":"amrut-prabhu"},"content":"A member who is part of the Executive committee of the club. Exco members are seen as the leaders of the club. Exco members can execute certain commands and view features that are not available to other members of the club."},{"lineNumber":1530,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1531,"author":{"gitID":"-"},"content":"[[gui]] GUI::"},{"lineNumber":1532,"author":{"gitID":"-"},"content":"Acronnym for Graphical User Interface. In a GUI, the software interface consists of graphical icons, menus and/or other visual indicators to display information. Users can typically interact with these graphics, rather than just using text in the \u003c\u003ccli,command line\u003e\u003e."},{"lineNumber":1533,"author":{"gitID":"-"},"content":"For example, all Windows operating systems have a GUI."},{"lineNumber":1534,"author":{"gitID":"-"},"content":""},{"lineNumber":1535,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1536,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1537,"author":{"gitID":"-"},"content":""},{"lineNumber":1538,"author":{"gitID":"amrut-prabhu"},"content":"[[member]] Member::"},{"lineNumber":1539,"author":{"gitID":"amrut-prabhu"},"content":"One of the members who compose a group organization. They are the target users of our application."},{"lineNumber":1540,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1541,"author":{"gitID":"amrut-prabhu"},"content":"[NOTE]"},{"lineNumber":1542,"author":{"gitID":"amrut-prabhu"},"content":"An Exco member is also regarded as a member."},{"lineNumber":1543,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1544,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1545,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1546,"author":{"gitID":"-"},"content":""},{"lineNumber":1547,"author":{"gitID":"-"},"content":"[[profile]] Profile::"},{"lineNumber":1548,"author":{"gitID":"-"},"content":"Visual display of the information (attributes and entries) of a member."},{"lineNumber":1549,"author":{"gitID":"-"},"content":""},{"lineNumber":1550,"author":{"gitID":"amrut-prabhu"},"content":"[[uml]] UML Diagram::"},{"lineNumber":1551,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":1552,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1553,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1554,"author":{"gitID":"-"},"content":""},{"lineNumber":1555,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1556,"author":{"gitID":"-"},"content":""},{"lineNumber":1557,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1558,"author":{"gitID":"-"},"content":""},{"lineNumber":1559,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1560,"author":{"gitID":"-"},"content":""},{"lineNumber":1561,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1562,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1563,"author":{"gitID":"-"},"content":""},{"lineNumber":1564,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1565,"author":{"gitID":"-"},"content":""},{"lineNumber":1566,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1567,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1568,"author":{"gitID":"-"},"content":""},{"lineNumber":1569,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1570,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1571,"author":{"gitID":"-"},"content":""},{"lineNumber":1572,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1573,"author":{"gitID":"-"},"content":""},{"lineNumber":1574,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1575,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1576,"author":{"gitID":"-"},"content":""},{"lineNumber":1577,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1578,"author":{"gitID":"-"},"content":""},{"lineNumber":1579,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1580,"author":{"gitID":"-"},"content":""},{"lineNumber":1581,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1582,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1583,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1584,"author":{"gitID":"-"},"content":""},{"lineNumber":1585,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1586,"author":{"gitID":"-"},"content":""},{"lineNumber":1587,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1588,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1589,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1590,"author":{"gitID":"-"},"content":""},{"lineNumber":1591,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1592,"author":{"gitID":"-"},"content":""},{"lineNumber":1593,"author":{"gitID":"amrut-prabhu"},"content":"\u003d\u003d\u003d Deleting a member"},{"lineNumber":1594,"author":{"gitID":"-"},"content":""},{"lineNumber":1595,"author":{"gitID":"amrut-prabhu"},"content":". Deleting a member while all members are listed"},{"lineNumber":1596,"author":{"gitID":"-"},"content":""},{"lineNumber":1597,"author":{"gitID":"amrut-prabhu"},"content":".. Prerequisites: List all members using the `list` command. Multiple members in the list."},{"lineNumber":1598,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1599,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1600,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1601,"author":{"gitID":"amrut-prabhu"},"content":"   Expected: No member is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1602,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1603,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1604,"author":{"gitID":"-"},"content":""},{"lineNumber":1605,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1606,"author":{"gitID":"-"},"content":""},{"lineNumber":1607,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1608,"author":{"gitID":"-"},"content":""},{"lineNumber":1609,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1610,"author":{"gitID":"-"},"content":""},{"lineNumber":1611,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1612,"author":{"gitID":"-"},"content":""},{"lineNumber":1613,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"MuhdNurKamal":306,"amrut-prabhu":284,"yash-chowdhary":177,"th14thmusician":10,"-":836}},{"path":"src/test/java/systemtests/ChangePasswordCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_NEWPASSWORD;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.club.logic.commands.ChangePasswordCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.club.logic.commands.LogInCommand;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.UndoCommand;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class ChangePasswordCommandSystemTest extends ClubBookSystemTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public void changepassword() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        ObservableList\u003cMember\u003e observableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        Member member \u003d observableList.get(0);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        String logInCommand \u003d LogInCommand.COMMAND_WORD + \" u/\" + member.getCredentials().getUsername().value"},{"lineNumber":25,"author":{"gitID":"-"},"content":"                + \" pw/password\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        executeCommand(logInCommand);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model \u003d getModel();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        Model modelBeforeChanging \u003d getModel();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        /*Case: Change the currently logged in member sucessfully"},{"lineNumber":31,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        String changePasswordCommand \u003d ChangePasswordCommand.COMMAND_WORD + \" \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"                + PREFIX_USERNAME + member.getCredentials().getUsername().value + \" \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"                + PREFIX_PASSWORD + member.getCredentials().getPassword().value + \" \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"                + PREFIX_NEWPASSWORD + \"newpassword\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d ChangePasswordCommand.MESSAGE_SUCCESS;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(changePasswordCommand, model, expectedMessage);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        /*Case: undo changepassword."},{"lineNumber":40,"author":{"gitID":"-"},"content":"         *Should not be able to undo to change password"},{"lineNumber":41,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /*Case: Changing other member\u0027s password"},{"lineNumber":47,"author":{"gitID":"-"},"content":"         *Returns an error message"},{"lineNumber":48,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Member otherMember \u003d observableList.get(1);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        changePasswordCommand \u003d ChangePasswordCommand.COMMAND_WORD + \" \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"                + PREFIX_USERNAME + otherMember.getCredentials().getUsername().value + \" \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"                + PREFIX_PASSWORD + otherMember.getCredentials().getPassword().value + \" \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"                + PREFIX_NEWPASSWORD + \"newpassword\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        expectedMessage \u003d ChangePasswordCommand.MESSAGE_AUTHENTICATION_FAILED;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandFailure(changePasswordCommand, expectedMessage);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Executes the {@code ChangePasswordCommand} that changes the password to the model and asserts that:\u003cbr\u003e"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code ChangePasswordCommand} with details of"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * {@code newpassword}.\u003cbr\u003e"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"     * 4. {@code Model}, {@code Storage} and {@code MemberListPanel} equal to the corresponding components in"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * the current model added with {@code newpassword}.\u003cbr\u003e"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"     * {@code ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":70,"author":{"gitID":"amrut-prabhu"},"content":"     * @see ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Executes the {@code ChangePasswordCommand} that changes the password to the model and asserts that:\u003cbr\u003e"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * 3. {@code Model}, {@code Storage} and {@code MemberListPanel} equal to the corresponding components in"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * the current model added with {@code newpassword}.\u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * 4. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * 5. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":89,"author":{"gitID":"amrut-prabhu"},"content":"     * {@code ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"amrut-prabhu"},"content":"     * @see ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":9,"-":92}},{"path":"src/test/java/systemtests/EmailCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_NON_EXISTENT_GROUP;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_CLIENT;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_GROUP;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.NON_EXISTENT_GROUP;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_CLIENT;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_BODY;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_CLIENT;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.EmailCommand;"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.LogInCommand;"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.Model;"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Body;"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Client;"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Subject;"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"public class EmailCommandSystemTest extends ClubBookSystemTest {"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"    public void sendEmail() {"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"        Model model \u003d getModel();"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"        ObservableList\u003cMember\u003e memberObservableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"        String logInCommand \u003d LogInCommand.COMMAND_WORD + \" u/\" + memberObservableList.get(0).getMatricNumber().value"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"                + \" pw/password\";"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"        executeCommand(logInCommand);"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"        model \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"        /*Case: invalid client entered -\u003e rejected*/"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"        String command \u003d \"  \" + EmailCommand.COMMAND_WORD + \"  \" + PREFIX_GROUP + \"pr \" + PREFIX_CLIENT"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"                + \"YAHOO \" + \" \" + PREFIX_SUBJECT + Subject.TEST_SUBJECT_STRING"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"                + \" \" + PREFIX_BODY + Body.TEST_BODY_STRING;"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedResultMessage \u003d Client.MESSAGE_CLIENT_CONSTRAINTS;"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"        /*Case: invalid group -\u003e rejected */"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d \"  \" + EmailCommand.COMMAND_WORD + \"  \" + PREFIX_GROUP + INVALID_GROUP + \" \""},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"                + PREFIX_CLIENT + INVALID_CLIENT + \" \" + PREFIX_SUBJECT + Subject.TEST_SUBJECT_STRING"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"                + \" \" + PREFIX_BODY + Body.TEST_BODY_STRING;"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"        expectedResultMessage \u003d Group.MESSAGE_GROUP_CONSTRAINTS;"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"        /*Case: invalid group -\u003e rejected */"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d \"  \" + EmailCommand.COMMAND_WORD + \"  \" + PREFIX_GROUP + NON_EXISTENT_GROUP + \" \""},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"                + PREFIX_CLIENT + VALID_CLIENT + \" \" + PREFIX_SUBJECT + Subject.TEST_SUBJECT_STRING"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"                + \" \" + PREFIX_BODY + Body.TEST_BODY_STRING;"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_NON_EXISTENT_GROUP, NON_EXISTENT_GROUP);"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: valid command entered -\u003e email client opened */"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d \"  \" + EmailCommand.COMMAND_WORD + \"  \" + PREFIX_GROUP + \"pr \" + PREFIX_CLIENT"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"                + VALID_CLIENT + \" \" + PREFIX_SUBJECT + Subject.TEST_SUBJECT_STRING + \" \""},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"                + PREFIX_BODY + Body.TEST_BODY_STRING;"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"        expectedResultMessage \u003d EmailCommand.EMAIL_CLIENT_OPENED;"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"     * 1. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"     * 2. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"        executeCommand(command);"},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.updateFilteredMemberList(Model.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"     *Executes {@code command} and asserts that the:\u003cbr\u003e"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":"     * @see ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":"        executeCommand(command);"},{"lineNumber":94,"author":{"gitID":"yash-chowdhary"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":96,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":97,"author":{"gitID":"yash-chowdhary"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":98,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":100,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":101,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":101}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.SelectCommand.MESSAGE_SELECT_MEMBER_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_FIRST_MEMBER;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.getTypicalMembers;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.club.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.club.logic.commands.LogInCommand;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.SelectCommand;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"public class SelectCommandSystemTest extends ClubBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        ObservableList\u003cMember\u003e memberObservableList \u003d getModel().getClubBook().getMemberList();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String logInCommand \u003d LogInCommand.COMMAND_WORD + \" u/\" + memberObservableList.get(0).getMatricNumber().value"},{"lineNumber":29,"author":{"gitID":"-"},"content":"                + \" pw/password\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        executeCommand(logInCommand);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: select the first card in the member list, command with leading spaces and trailing spaces"},{"lineNumber":34,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":35,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MEMBER.getOneBased() + \"   \";"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandSuccess(command, INDEX_FIRST_MEMBER);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: select the last card in the member list -\u003e selected */"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"        Index memberCount \u003d Index.fromOneBased(getTypicalMembers().size());"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + memberCount.getOneBased();"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandSuccess(command, memberCount);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: select the middle card in the member list -\u003e selected */"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"        Index middleIndex \u003d Index.fromOneBased(memberCount.getOneBased() / 2);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: filtered member list, select index within bounds of club book but out of bounds of member list"},{"lineNumber":65,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":66,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"        showMembersWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":"        int invalidIndex \u003d getModel().getClubBook().getMemberList().size();"},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: filtered member list, select index within bounds of club book and member list -\u003e selected */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":73,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredMemberList().size());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"amrut-prabhu"},"content":"        invalidIndex \u003d getModel().getFilteredMemberList().size() + 1;"},{"lineNumber":89,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":93,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":97,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: select from empty club book -\u003e rejected */"},{"lineNumber":103,"author":{"gitID":"amrut-prabhu"},"content":"        deleteAllMembers();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MEMBER.getOneBased();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_REQUIRE_SIGN_UP);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":114,"author":{"gitID":"amrut-prabhu"},"content":"     * {@code expectedSelectedCardIndex} of the selected member.\u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"amrut-prabhu"},"content":"     * 4. {@code Model}, {@code Storage} and {@code MemberListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":119,"author":{"gitID":"amrut-prabhu"},"content":"     * {@code ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":120,"author":{"gitID":"amrut-prabhu"},"content":"     * @see ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":121,"author":{"gitID":"amrut-prabhu"},"content":"     * @see ClubBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":126,"author":{"gitID":"amrut-prabhu"},"content":"                MESSAGE_SELECT_MEMBER_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":127,"author":{"gitID":"amrut-prabhu"},"content":"        int preExecutionSelectedCardIndex \u003d getMemberListPanel().getSelectedCardIndex();"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"amrut-prabhu"},"content":"     * 4. {@code Model}, {@code Storage} and {@code MemberListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":150,"author":{"gitID":"amrut-prabhu"},"content":"     * {@code ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"amrut-prabhu"},"content":"     * @see ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":42,"-":120}},{"path":"src/test/java/systemtests/AddTaskCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.EMPTY_STRING;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_TIME_DESC;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TASK_DATE_DESC_1;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TASK_DATE_DESC_2;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TASK_DESCRIPTION_DESC_CONFETTI;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TASK_DESCRIPTION_DESC_FOOD;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TASK_TIME_DESC_1;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TASK_TIME_DESC_2;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.AddTaskCommand;"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.LogInCommand;"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.RedoCommand;"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.UndoCommand;"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.Model;"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Date;"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Description;"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Time;"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"public class AddTaskCommandSystemTest extends ClubBookSystemTest {"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"    public void addTask() throws Exception {"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"        Model model \u003d getModel();"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"        Model modelBeforeAdding \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"        ObservableList\u003cMember\u003e memberObservableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"        String logInCommand \u003d LogInCommand.COMMAND_WORD + \" u/\" + memberObservableList.get(0).getMatricNumber().value"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"                + \" pw/password\";"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"        executeCommand(logInCommand);"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"        model \u003d getModel();"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"        modelBeforeAdding \u003d getModel();"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: add a task to a non-empty address book,"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"         * command with leading spaces and trailing spaces -\u003e added"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"         */"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"        String command \u003d \"  \" + AddTaskCommand.COMMAND_WORD + \" \" + TASK_DESCRIPTION_DESC_FOOD"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"                + \"  \" + TASK_DATE_DESC_1 + \"  \" + TASK_TIME_DESC_1 +  \"  \";"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d AddTaskCommand.MESSAGE_SUCCESS;"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(command, model, expectedMessage);"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case:undo adding BUY_FOOD to the list -\u003e BUY_FOOD deleted */"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"        expectedMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(command, modelBeforeAdding, expectedMessage);"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: redo removing BUY_FOOD from the list -\u003e BUY_FOOD re-added */"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"        expectedMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(command, model, expectedMessage);"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: add task with all fields same as another task in address book except task description -\u003e added */"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d AddTaskCommand.COMMAND_WORD + \" \" + TASK_DESCRIPTION_DESC_CONFETTI"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"                + \" \" + TASK_DATE_DESC_1 + \" \" + TASK_TIME_DESC_1 +  \" \";"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"        expectedMessage \u003d AddTaskCommand.MESSAGE_SUCCESS;"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(command, model, expectedMessage);"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: add task with all fields same as another task in address book except task due date -\u003e added */"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d AddTaskCommand.COMMAND_WORD + \" \" + TASK_DESCRIPTION_DESC_CONFETTI + \" \""},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"                + TASK_DATE_DESC_2 + \" \" + TASK_TIME_DESC_1 + \" \";"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"        expectedMessage \u003d AddTaskCommand.MESSAGE_SUCCESS;"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(command, model, expectedMessage);"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: add task with all fields same as another task in address book except task time -\u003e added */"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d AddTaskCommand.COMMAND_WORD + \" \" + TASK_DESCRIPTION_DESC_CONFETTI + \" \""},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"                + TASK_DATE_DESC_1 + \" \" + TASK_TIME_DESC_2 + \" \";"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"        expectedMessage \u003d AddTaskCommand.MESSAGE_SUCCESS;"},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(command, model, expectedMessage);"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case add task with fields in random order -\u003e added */"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d AddTaskCommand.COMMAND_WORD + \" \" + \"desc/Book Auditorium \""},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"                + \"d/02/04/2018 \" + \"ti/13:00 \";"},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(command, model, expectedMessage);"},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"        /* --------------------- Perform addtask operations on the shown filtered list -------------------------- */"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":"        /* --------------------------------- Perform invalid addtask operations --------------------------------- */"},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: missing description -\u003e rejected */"},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d AddTaskCommand.COMMAND_WORD + \" \""},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":"                + TASK_TIME_DESC_1 + \" \" + TASK_DATE_DESC_1;"},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":94,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: missing date -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d AddTaskCommand.COMMAND_WORD + \" \""},{"lineNumber":96,"author":{"gitID":"yash-chowdhary"},"content":"                + TASK_DESCRIPTION_DESC_CONFETTI + \" \" + TASK_TIME_DESC_1;"},{"lineNumber":97,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"},{"lineNumber":98,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":99,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: missing time -\u003e rejected */"},{"lineNumber":100,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d AddTaskCommand.COMMAND_WORD + \" \""},{"lineNumber":101,"author":{"gitID":"yash-chowdhary"},"content":"                + TASK_DESCRIPTION_DESC_CONFETTI + \" \" + TASK_DATE_DESC_1;"},{"lineNumber":102,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"},{"lineNumber":103,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":104,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: invalid command word -\u003e rejected */"},{"lineNumber":105,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d \"addatask\" + \" \" + TASK_DESCRIPTION_DESC_CONFETTI + \" \""},{"lineNumber":106,"author":{"gitID":"yash-chowdhary"},"content":"                + TASK_TIME_DESC_1 + \" \" + TASK_DATE_DESC_1;"},{"lineNumber":107,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":108,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":109,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: invalid description -\u003e rejected */"},{"lineNumber":110,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d AddTaskCommand.COMMAND_WORD + \" \""},{"lineNumber":111,"author":{"gitID":"yash-chowdhary"},"content":"                + PREFIX_DESCRIPTION + EMPTY_STRING + \" \" + TASK_TIME_DESC_1 + \" \" + TASK_DATE_DESC_1;"},{"lineNumber":112,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, Description.MESSAGE_DESCRIPTION_CONSTRAINTS);"},{"lineNumber":113,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":114,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: invalid date -\u003e rejected */"},{"lineNumber":115,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d AddTaskCommand.COMMAND_WORD + \" \""},{"lineNumber":116,"author":{"gitID":"yash-chowdhary"},"content":"                + TASK_DESCRIPTION_DESC_CONFETTI + \" \" + TASK_TIME_DESC_1 + \" \" + INVALID_DATE_DESC;"},{"lineNumber":117,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, Date.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":118,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":119,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: invalid time -\u003e rejected */"},{"lineNumber":120,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d AddTaskCommand.COMMAND_WORD + \" \""},{"lineNumber":121,"author":{"gitID":"yash-chowdhary"},"content":"                + TASK_DESCRIPTION_DESC_CONFETTI + \" \" + INVALID_TIME_DESC + \" \" + TASK_DATE_DESC_1;"},{"lineNumber":122,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, Time.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":123,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":125,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":126,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"yash-chowdhary"},"content":"     * Executes the {@code AddTaskCommand} that adds {@code toAdd} to the model and asserts that:\u003cbr\u003e"},{"lineNumber":128,"author":{"gitID":"yash-chowdhary"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":129,"author":{"gitID":"yash-chowdhary"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":130,"author":{"gitID":"yash-chowdhary"},"content":"     * 3. Result display box displays the success message of executing {@code AddTaskCommand} with details of"},{"lineNumber":131,"author":{"gitID":"yash-chowdhary"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":132,"author":{"gitID":"yash-chowdhary"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":133,"author":{"gitID":"yash-chowdhary"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":134,"author":{"gitID":"yash-chowdhary"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"yash-chowdhary"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"yash-chowdhary"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":137,"author":{"gitID":"yash-chowdhary"},"content":"     * {@code ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"yash-chowdhary"},"content":"     * @see ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":139,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"yash-chowdhary"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":141,"author":{"gitID":"yash-chowdhary"},"content":"        executeCommand(command);"},{"lineNumber":142,"author":{"gitID":"yash-chowdhary"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":143,"author":{"gitID":"yash-chowdhary"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":144,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":145,"author":{"gitID":"yash-chowdhary"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":146,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":148,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"yash-chowdhary"},"content":"     *Executes {@code command} and asserts that the:\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"yash-chowdhary"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"yash-chowdhary"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"yash-chowdhary"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"yash-chowdhary"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"yash-chowdhary"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":155,"author":{"gitID":"yash-chowdhary"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":156,"author":{"gitID":"yash-chowdhary"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":157,"author":{"gitID":"yash-chowdhary"},"content":"     * @see ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":158,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"yash-chowdhary"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":160,"author":{"gitID":"yash-chowdhary"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":161,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":162,"author":{"gitID":"yash-chowdhary"},"content":"        executeCommand(command);"},{"lineNumber":163,"author":{"gitID":"yash-chowdhary"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":164,"author":{"gitID":"yash-chowdhary"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":165,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":166,"author":{"gitID":"yash-chowdhary"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":167,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":168}},{"path":"src/test/java/systemtests/ModelHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Contains helper methods to set up {@code Model} for testing."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ModelHelper {"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"    private static final Predicate\u003cMember\u003e PREDICATE_MATCHING_NO_MEMBERS \u003d unused -\u003e false;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"    public static void setFilteredList(Model model, List\u003cMember\u003e toDisplay) {"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"        Optional\u003cPredicate\u003cMember\u003e\u003e predicate \u003d"},{"lineNumber":22,"author":{"gitID":"-"},"content":"                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"        model.updateFilteredMemberList(predicate.orElse(PREDICATE_MATCHING_NO_MEMBERS));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @see ModelHelper#setFilteredList(Model, List)"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"    public static void setFilteredList(Model model, Member... toDisplay) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        setFilteredList(model, Arrays.asList(toDisplay));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns a predicate that evaluates to true if this {@code member} equals to {@code other}."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"    private static Predicate\u003cMember\u003e getPredicateMatching(Member other) {"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"        return member -\u003e member.equals(other);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":10,"-":29}},{"path":"src/test/java/systemtests/DeleteTagCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_TAG;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TAG_UNUSED_DESC;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.DeleteTagCommand.MESSAGE_DELETE_TAG_SUCCESS;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.DeleteTagCommand.MESSAGE_NON_EXISTENT_TAG;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.DeleteTagCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.club.logic.commands.LogInCommand;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"public class DeleteTagCommandSystemTest extends ClubBookSystemTest {"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"    public void deleteTag() {"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"        Model modelBeforeDeletingGroup \u003d getModel();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        ObservableList\u003cMember\u003e memberObservableList \u003d expectedModel.getClubBook().getMemberList();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredMemberList(expectedModel.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        modelBeforeDeletingGroup.updateFilteredMemberList(expectedModel.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"        Tag deletedTag;"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"        String command;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String logInCommand \u003d LogInCommand.COMMAND_WORD + \" u/\" + memberObservableList.get(0).getMatricNumber().value"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                + \" pw/password\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        executeCommand(logInCommand);"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"        /* ------------------------ Perform deleteTag operations on the shown unfiltered list -------------------- */"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: delete a valid tag which is present in the club book */"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"        command \u003d DeleteTagCommand.COMMAND_WORD + TAG_DESC_FRIEND;"},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"        deletedTag \u003d deleteTagFromModel(expectedModel, VALID_TAG_FRIEND);"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_TAG_SUCCESS, deletedTag);"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: undo deleting the tag -\u003e tag restored in relevant members */"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":51,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandSuccess(command, modelBeforeDeletingGroup, expectedResultMessage);"},{"lineNumber":52,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"        /*Case: redo deleting the tag -\u003e deleted */"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: delete an invalid tag */"},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"        command \u003d DeleteTagCommand.COMMAND_WORD + INVALID_TAG_DESC;"},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"        deletedTag \u003d deleteTagFromModel(expectedModel, INVALID_TAG);"},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(null, deletedTag);"},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: delete a non-existent tag */"},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":"        command \u003d DeleteTagCommand.COMMAND_WORD + VALID_TAG_UNUSED_DESC;"},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":"        deletedTag \u003d deleteTagFromModel(expectedModel, VALID_TAG_UNUSED);"},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(null, deletedTag);"},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(command, MESSAGE_NON_EXISTENT_TAG);"},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":71,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"amrut-prabhu"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":73,"author":{"gitID":"amrut-prabhu"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":74,"author":{"gitID":"amrut-prabhu"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":75,"author":{"gitID":"amrut-prabhu"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":76,"author":{"gitID":"amrut-prabhu"},"content":"     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":77,"author":{"gitID":"amrut-prabhu"},"content":"     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":78,"author":{"gitID":"amrut-prabhu"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":79,"author":{"gitID":"amrut-prabhu"},"content":"     * {@code ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":80,"author":{"gitID":"amrut-prabhu"},"content":"     * @see ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":81,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"amrut-prabhu"},"content":"    private void assertCommandSuccess(String command, Model model, String expectedResultMessage) {"},{"lineNumber":83,"author":{"gitID":"amrut-prabhu"},"content":"        executeCommand(command);"},{"lineNumber":84,"author":{"gitID":"amrut-prabhu"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, model);"},{"lineNumber":85,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":86,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":87,"author":{"gitID":"amrut-prabhu"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":88,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":90,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"amrut-prabhu"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"amrut-prabhu"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"amrut-prabhu"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":94,"author":{"gitID":"amrut-prabhu"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"amrut-prabhu"},"content":"     * 4. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":96,"author":{"gitID":"amrut-prabhu"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":97,"author":{"gitID":"amrut-prabhu"},"content":"     * {@code ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":98,"author":{"gitID":"amrut-prabhu"},"content":"     * @see ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":99,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"amrut-prabhu"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":101,"author":{"gitID":"amrut-prabhu"},"content":"        executeCommand(command);"},{"lineNumber":102,"author":{"gitID":"amrut-prabhu"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":103,"author":{"gitID":"amrut-prabhu"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":104,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":105,"author":{"gitID":"amrut-prabhu"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":106,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":108,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":109,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"amrut-prabhu"},"content":"     * Removes the tag from model"},{"lineNumber":111,"author":{"gitID":"amrut-prabhu"},"content":"     * @param model expected model"},{"lineNumber":112,"author":{"gitID":"amrut-prabhu"},"content":"     * @param tag new Tag object to be created with this string"},{"lineNumber":113,"author":{"gitID":"amrut-prabhu"},"content":"     * @return either a valid Tag object if the group has been deleted; null otherwise"},{"lineNumber":114,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"amrut-prabhu"},"content":"    private Tag deleteTagFromModel(Model model, String tag) {"},{"lineNumber":116,"author":{"gitID":"amrut-prabhu"},"content":"        if (Tag.isValidTagName(tag)) {"},{"lineNumber":117,"author":{"gitID":"amrut-prabhu"},"content":"            try {"},{"lineNumber":118,"author":{"gitID":"amrut-prabhu"},"content":"                model.deleteTag(new Tag(tag));"},{"lineNumber":119,"author":{"gitID":"amrut-prabhu"},"content":"            } catch (TagNotFoundException tnfe) {"},{"lineNumber":120,"author":{"gitID":"amrut-prabhu"},"content":"                return null;"},{"lineNumber":121,"author":{"gitID":"amrut-prabhu"},"content":"            }"},{"lineNumber":122,"author":{"gitID":"amrut-prabhu"},"content":"            return new Tag(tag);"},{"lineNumber":123,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"amrut-prabhu"},"content":"        return null;"},{"lineNumber":125,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":117,"-":9}},{"path":"src/test/java/systemtests/ErrorDialogGuiTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.EventsUtil.postLater;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.ui.UiManager.FILE_OPS_WRITE_ERROR_DIALOG_CONTENT_MESSAGE;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.ui.UiManager.FILE_OPS_WRITE_ERROR_DIALOG_HEADER_MESSAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.AlertDialogHandle;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"public class ErrorDialogGuiTest extends ClubBookSystemTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void showErrorDialogs() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(FILE_OPS_WRITE_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(FILE_OPS_WRITE_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                alertDialog.getContentText());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":8,"-":26}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_MEMBERS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.BENSON;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.CARL;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.DANIEL;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.KEYWORD_MATCHING_MEIER;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.club.commons.core.Messages;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.DeleteCommand;"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.FindCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.club.logic.commands.LogInCommand;"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.RedoCommand;"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.UndoCommand;"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"public class FindCommandSystemTest extends ClubBookSystemTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: find multiple members in club book, command with leading spaces and trailing spaces"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"         * -\u003e 2 members found"},{"lineNumber":38,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        ObservableList\u003cMember\u003e memberObservableList \u003d expectedModel.getClubBook().getMemberList();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String logInCommand \u003d LogInCommand.COMMAND_WORD + \" u/\" + memberObservableList.get(0).getMatricNumber().value"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                + \" pw/password\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        executeCommand(logInCommand);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredMemberList(expectedModel.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: repeat previous find command where member list is displaying the members we are finding"},{"lineNumber":51,"author":{"gitID":"amrut-prabhu"},"content":"         * -\u003e 2 members found"},{"lineNumber":52,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: find member where member list is not displaying the member we are finding -\u003e 1 member found */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: find multiple members in club book, 2 keywords -\u003e 2 members found */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: find multiple members in club book, 2 keywords in reversed order -\u003e 2 members found */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: find multiple members in club book, 2 keywords with 1 repeat -\u003e 2 members found */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: find multiple members in club book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":80,"author":{"gitID":"amrut-prabhu"},"content":"         * -\u003e 2 members found"},{"lineNumber":81,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: find same members in club book after deleting 1 of them -\u003e 1 member found */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":98,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(getModel().getClubBook().getMemberList().contains(BENSON));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredMemberList(expectedModel.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: find member in club book, keyword is same as name but of different case -\u003e 1 member found */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"MuhdNurKamal"},"content":"        /* Case: find member in club book, keyword is substring of name -\u003e 2 members found */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: find member in club book, name is substring of keyword -\u003e 0 members found */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: find member not in club book -\u003e 0 members found */"},{"lineNumber":124,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" Mark\";"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"MuhdNurKamal"},"content":"        /* Case: find phone number of member in club book -\u003e 1 members found */"},{"lineNumber":129,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_PHONE + \" \" + DANIEL.getPhone().value;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"MuhdNurKamal"},"content":"        /* Case: find matric number of member in club book -\u003e 1 members found */"},{"lineNumber":135,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_MATRIC_NUMBER + \" \" + DANIEL.getMatricNumber().value;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"MuhdNurKamal"},"content":"        /* Case: find email of member in club book -\u003e 1 members found */"},{"lineNumber":141,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_EMAIL + \" \" + BENSON.getEmail().value;"},{"lineNumber":142,"author":{"gitID":"MuhdNurKamal"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: find tags of member in club book -\u003e 0 members found */"},{"lineNumber":147,"author":{"gitID":"MuhdNurKamal"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(BENSON.getTags());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":149,"author":{"gitID":"MuhdNurKamal"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: find while a member is selected -\u003e selected card deselected */"},{"lineNumber":154,"author":{"gitID":"amrut-prabhu"},"content":"        showAllMembers();"},{"lineNumber":155,"author":{"gitID":"amrut-prabhu"},"content":"        selectMember(Index.fromOneBased(1));"},{"lineNumber":156,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(getMemberListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        /* Case: find member in empty club book -\u003e requires to sign up to continue */"},{"lineNumber":163,"author":{"gitID":"amrut-prabhu"},"content":"        deleteAllMembers();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_REQUIRE_SIGN_UP);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":178,"author":{"gitID":"amrut-prabhu"},"content":"     * box displays {@code Messages#MESSAGE_MEMBERS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":181,"author":{"gitID":"amrut-prabhu"},"content":"     * {@code ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":184,"author":{"gitID":"amrut-prabhu"},"content":"     * @see ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":188,"author":{"gitID":"amrut-prabhu"},"content":"                MESSAGE_MEMBERS_LISTED_OVERVIEW, expectedModel.getFilteredMemberList().size());"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":200,"author":{"gitID":"amrut-prabhu"},"content":"     * {@code ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":203,"author":{"gitID":"amrut-prabhu"},"content":"     * @see ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":14,"amrut-prabhu":42,"-":158}},{"path":"src/test/java/seedu/club/ui/ResultDisplayTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class ResultDisplayTest extends GuiUnitTest {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final NewResultAvailableEvent NEW_RESULT_EVENT_STUB \u003d new NewResultAvailableEvent(\"Stub\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private ResultDisplayHandle resultDisplayHandle;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(resultDisplay);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"},{"lineNumber":24,"author":{"gitID":"-"},"content":"                ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // default result text"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(\"\", resultDisplayHandle.getText());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // new result received"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        postNow(NEW_RESULT_EVENT_STUB);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(NEW_RESULT_EVENT_STUB.message, resultDisplayHandle.getText());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":3,"-":35}},{"path":"src/test/java/seedu/club/ui/MemberCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.ui.testutil.GuiTestAssert.assertCardDisplaysMember;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import guitests.guihandles.MemberCardHandle;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.MemberBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"public class MemberCardTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        // no tags"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"        Member memberWithNoTags \u003d new MemberBuilder().withTags(new String[0]).build();"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"        MemberCard memberCard \u003d new MemberCard(memberWithNoTags, 1);"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"        uiPartRule.setUiPart(memberCard);"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"        assertCardDisplay(memberCard, memberWithNoTags, 1);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // with tags"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"        Member memberWithTags \u003d new MemberBuilder().build();"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"        memberCard \u003d new MemberCard(memberWithTags, 2);"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"        uiPartRule.setUiPart(memberCard);"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"        assertCardDisplay(memberCard, memberWithTags, 2);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"        Member member \u003d new MemberBuilder().build();"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"        MemberCard memberCard \u003d new MemberCard(member, 0);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"        // same member, same index -\u003e returns true"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"        MemberCard copy \u003d new MemberCard(member, 0);"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(memberCard.equals(copy));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(memberCard.equals(memberCard));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(memberCard.equals(null));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(memberCard.equals(0));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"        // different member, same index -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"        Member differentMember \u003d new MemberBuilder().withName(\"differentName\").build();"},{"lineNumber":51,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(memberCard.equals(new MemberCard(differentMember, 0)));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"        // same member, different index -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(memberCard.equals(new MemberCard(member, 1)));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"     * Asserts that {@code memberCard} displays the details of {@code expectedMember} correctly and matches"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * {@code expectedId}."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":"    private void assertCardDisplay(MemberCard memberCard, Member expectedMember, int expectedId) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"        MemberCardHandle memberCardHandle \u003d new MemberCardHandle(memberCard.getRoot());"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // verify id is displayed correctly"},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", memberCardHandle.getId());"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"        // verify member details are displayed correctly"},{"lineNumber":70,"author":{"gitID":"amrut-prabhu"},"content":"        assertCardDisplaysMember(expectedMember, memberCardHandle);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":33,"-":39}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.GROUP_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.GROUP_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_GROUP_DESC;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_MATRIC_NUMBER_DESC;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.MATRIC_NUMBER_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.MATRIC_NUMBER_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.PASSWORD_DESC;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.club.logic.commands.CommandTestUtil.USERNAME_DESC_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_GROUP_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_BOB;"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.model.Model.PREDICATE_SHOW_ALL_MEMBERS;"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_FIRST_MEMBER;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_SECOND_MEMBER;"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.AMY;"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.BOB;"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.KEYWORD_MATCHING_MEIER;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.Messages;"},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.EditCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.club.logic.commands.LogInCommand;"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.RedoCommand;"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.UndoCommand;"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":51,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Email;"},{"lineNumber":52,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Name;"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Phone;"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.DuplicateMatricNumberException;"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.MemberNotFoundException;"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.MemberBuilder;"},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.MemberUtil;"},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":"public class EditCommandSystemTest extends ClubBookSystemTest {"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        ObservableList\u003cMember\u003e memberObservableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":72,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":73,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":74,"author":{"gitID":"amrut-prabhu"},"content":"        Index index \u003d INDEX_FIRST_MEMBER;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        String logInCommand \u003d LogInCommand.COMMAND_WORD + \" u/\" + memberObservableList.get(0).getMatricNumber().value"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                + \" pw/password\";"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        executeCommand(logInCommand);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":80,"author":{"gitID":"MuhdNurKamal"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + MATRIC_NUMBER_DESC_BOB + \" \""},{"lineNumber":81,"author":{"gitID":"-"},"content":"                + GROUP_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \" + USERNAME_DESC_BOB + \" \" + PASSWORD_DESC;"},{"lineNumber":82,"author":{"gitID":"amrut-prabhu"},"content":"        Member editedMember \u003d new MemberBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":83,"author":{"gitID":"MuhdNurKamal"},"content":"                .withEmail(VALID_EMAIL_BOB).withMatricNumber(VALID_MATRIC_NUMBER_BOB).withGroup(VALID_GROUP_BOB)"},{"lineNumber":84,"author":{"gitID":"MuhdNurKamal"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":85,"author":{"gitID":"th14thmusician"},"content":""},{"lineNumber":86,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandSuccess(command, index, editedMember);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: undo editing the last member in the list -\u003e last member restored */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: redo editing the last member in the list -\u003e last member edited again */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":96,"author":{"gitID":"amrut-prabhu"},"content":"        model.updateMember("},{"lineNumber":97,"author":{"gitID":"amrut-prabhu"},"content":"                getModel().getFilteredMemberList().get(INDEX_FIRST_MEMBER.getZeroBased()), editedMember);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: edit a member with new values same as existing values -\u003e edited */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        index \u003d INDEX_SECOND_MEMBER;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":103,"author":{"gitID":"MuhdNurKamal"},"content":"                + MATRIC_NUMBER_DESC_BOB + GROUP_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":107,"author":{"gitID":"amrut-prabhu"},"content":"        index \u003d INDEX_FIRST_MEMBER;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":109,"author":{"gitID":"amrut-prabhu"},"content":"        Member memberToEdit \u003d getModel().getFilteredMemberList().get(index.getZeroBased());"},{"lineNumber":110,"author":{"gitID":"amrut-prabhu"},"content":"        editedMember \u003d new MemberBuilder(memberToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":111,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandSuccess(command, index, editedMember);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":114,"author":{"gitID":"amrut-prabhu"},"content":"        index \u003d INDEX_FIRST_MEMBER;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":116,"author":{"gitID":"amrut-prabhu"},"content":"        editedMember \u003d new MemberBuilder(memberToEdit).withTags().build();"},{"lineNumber":117,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandSuccess(command, index, editedMember);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: filtered member list, edit index within bounds of club book and member list -\u003e edited */"},{"lineNumber":122,"author":{"gitID":"amrut-prabhu"},"content":"        showMembersWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":123,"author":{"gitID":"amrut-prabhu"},"content":"        index \u003d INDEX_FIRST_MEMBER;"},{"lineNumber":124,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredMemberList().size());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":126,"author":{"gitID":"amrut-prabhu"},"content":"        memberToEdit \u003d getModel().getFilteredMemberList().get(index.getZeroBased());"},{"lineNumber":127,"author":{"gitID":"amrut-prabhu"},"content":"        editedMember \u003d new MemberBuilder(memberToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":128,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandSuccess(command, index, editedMember);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: filtered member list, edit index within bounds of club book but out of bounds of member list"},{"lineNumber":131,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":132,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":133,"author":{"gitID":"amrut-prabhu"},"content":"        showMembersWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":134,"author":{"gitID":"amrut-prabhu"},"content":"        int invalidIndex \u003d getModel().getClubBook().getMemberList().size();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":136,"author":{"gitID":"amrut-prabhu"},"content":"                Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"amrut-prabhu"},"content":"        /* --------------------- Performing edit operation while a member card is selected -------------------------- */"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: selects first card in the member list, edit a member -\u003e edited, card selection remains unchanged but"},{"lineNumber":141,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":142,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":143,"author":{"gitID":"amrut-prabhu"},"content":"        showAllMembers();"},{"lineNumber":144,"author":{"gitID":"amrut-prabhu"},"content":"        index \u003d INDEX_FIRST_MEMBER;"},{"lineNumber":145,"author":{"gitID":"amrut-prabhu"},"content":"        selectMember(index);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":147,"author":{"gitID":"MuhdNurKamal"},"content":"                + MATRIC_NUMBER_DESC_AMY + GROUP_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":149,"author":{"gitID":"amrut-prabhu"},"content":"        // browser\u0027s url is updated to reflect the new member\u0027s name"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":156,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":160,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":163,"author":{"gitID":"amrut-prabhu"},"content":"        invalidIndex \u003d getModel().getFilteredMemberList().size() + 1;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":165,"author":{"gitID":"amrut-prabhu"},"content":"                Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":172,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MEMBER.getOneBased(),"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":176,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MEMBER.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":180,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MEMBER.getOneBased() + INVALID_PHONE_DESC,"},{"lineNumber":181,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":184,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MEMBER.getOneBased() + INVALID_EMAIL_DESC,"},{"lineNumber":185,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"MuhdNurKamal"},"content":"        /* Case: invalid matric number -\u003e rejected */"},{"lineNumber":188,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MEMBER.getOneBased()"},{"lineNumber":189,"author":{"gitID":"MuhdNurKamal"},"content":"                        + INVALID_MATRIC_NUMBER_DESC,"},{"lineNumber":190,"author":{"gitID":"MuhdNurKamal"},"content":"                MatricNumber.MESSAGE_MATRIC_NUMBER_CONSTRAINTS);"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: invalid group -\u003e rejected */"},{"lineNumber":193,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MEMBER.getOneBased() + INVALID_GROUP_DESC,"},{"lineNumber":194,"author":{"gitID":"yash-chowdhary"},"content":"                Group.MESSAGE_GROUP_CONSTRAINTS);"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":197,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MEMBER.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":198,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: edit a member with new values same as another member\u0027s values -\u003e rejected */"},{"lineNumber":201,"author":{"gitID":"amrut-prabhu"},"content":"        executeCommand(MemberUtil.getAddCommand(BOB));"},{"lineNumber":202,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(getModel().getClubBook().getMemberList().contains(BOB));"},{"lineNumber":203,"author":{"gitID":"amrut-prabhu"},"content":"        index \u003d INDEX_FIRST_MEMBER;"},{"lineNumber":204,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(getModel().getFilteredMemberList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":206,"author":{"gitID":"MuhdNurKamal"},"content":"                + MATRIC_NUMBER_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":207,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_MATRIC_NUMBER);"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: edit a member with new values same as another member\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":211,"author":{"gitID":"MuhdNurKamal"},"content":"                + MATRIC_NUMBER_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":212,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_MATRIC_NUMBER);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"amrut-prabhu"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, member, Index)} except that"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":218,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":220,"author":{"gitID":"amrut-prabhu"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Member, Index)"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"amrut-prabhu"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Member editedMember) {"},{"lineNumber":223,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandSuccess(command, toEdit, editedMember, null);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":229,"author":{"gitID":"amrut-prabhu"},"content":"     * 2. Asserts that the model related components are updated to reflect the member at index {@code toEdit} being"},{"lineNumber":230,"author":{"gitID":"amrut-prabhu"},"content":"     * updated to values specified {@code editedMember}.\u003cbr\u003e"},{"lineNumber":231,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":235,"author":{"gitID":"amrut-prabhu"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Member editedMember,"},{"lineNumber":236,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":239,"author":{"gitID":"amrut-prabhu"},"content":"            expectedModel.updateMember("},{"lineNumber":240,"author":{"gitID":"amrut-prabhu"},"content":"                    expectedModel.getFilteredMemberList().get(toEdit.getZeroBased()), editedMember);"},{"lineNumber":241,"author":{"gitID":"amrut-prabhu"},"content":"            expectedModel.updateFilteredMemberList(PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":242,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (DuplicateMatricNumberException | MemberNotFoundException e) {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":244,"author":{"gitID":"amrut-prabhu"},"content":"                    \"editedMember is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":248,"author":{"gitID":"amrut-prabhu"},"content":"                String.format(EditCommand.MESSAGE_EDIT_MEMBER_SUCCESS, editedMember), expectedSelectedCardIndex);"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":254,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":271,"author":{"gitID":"amrut-prabhu"},"content":"     * {@code ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":272,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":273,"author":{"gitID":"amrut-prabhu"},"content":"     * @see ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":274,"author":{"gitID":"amrut-prabhu"},"content":"     * @see ClubBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":277,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":279,"author":{"gitID":"amrut-prabhu"},"content":"        expectedModel.updateFilteredMemberList(PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":288,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":291,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":293,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":294,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":295,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":296,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":297,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":298,"author":{"gitID":"amrut-prabhu"},"content":"     * {@code ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":299,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":300,"author":{"gitID":"amrut-prabhu"},"content":"     * @see ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":301,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":302,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":309,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":310,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":311,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":15,"amrut-prabhu":115,"yash-chowdhary":2,"th14thmusician":1,"-":178}},{"path":"src/test/java/seedu/club/ui/MemberListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.EventsUtil.postNow;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_SECOND_MEMBER;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.getTypicalMembers;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.ui.testutil.GuiTestAssert.assertCardDisplaysMember;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.ui.testutil.GuiTestAssert.assertCardEquals;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import guitests.guihandles.MemberCardHandle;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import guitests.guihandles.MemberListPanelHandle;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.events.ui.CompressMembersRequestEvent;"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.events.ui.DecompressMembersRequestEvent;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"public class MemberListPanelTest extends GuiUnitTest {"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"    private static final ObservableList\u003cMember\u003e TYPICAL_MEMBERS \u003d"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"            FXCollections.observableList(getTypicalMembers());"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final CompressMembersRequestEvent COMPRESS_MEMBERS_REQUEST_EVENT \u003d new CompressMembersRequestEvent();"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final DecompressMembersRequestEvent DECOMPRESS_MEMBERS_REQUEST_EVENT \u003d"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"            new DecompressMembersRequestEvent();"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_MEMBER);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"    private MemberListPanelHandle memberListPanelHandle;"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"    private MemberListPanel memberListPanel;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"        memberListPanel \u003d new MemberListPanel(TYPICAL_MEMBERS);"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"        uiPartRule.setUiPart(memberListPanel);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"        memberListPanelHandle \u003d new MemberListPanelHandle(getChildNode(memberListPanel.getRoot(),"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"                MemberListPanelHandle.MEMBER_LIST_VIEW_ID));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_MEMBERS.size(); i++) {"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"            memberListPanelHandle.navigateToCard(TYPICAL_MEMBERS.get(i));"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"            Member expectedMember \u003d TYPICAL_MEMBERS.get(i);"},{"lineNumber":51,"author":{"gitID":"amrut-prabhu"},"content":"            MemberCardHandle actualCard \u003d memberListPanelHandle.getMemberCardHandle(i);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"            assertCardDisplaysMember(expectedMember, actualCard);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void handleJumpToListRequestEvent() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"        MemberCardHandle expectedCard \u003d memberListPanelHandle.getMemberCardHandle(INDEX_SECOND_MEMBER.getZeroBased());"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"        MemberCardHandle selectedCard \u003d memberListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":"    //@@author MuhdNurKamal"},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"    public void handleCompressMembersRequestEvent() {"},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":"        postNow(COMPRESS_MEMBERS_REQUEST_EVENT);"},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(memberListPanel.isDisplayingCompressedMembers());"},{"lineNumber":73,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":75,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"MuhdNurKamal"},"content":"    public void handleDecompressMembersRequestEvent() {"},{"lineNumber":77,"author":{"gitID":"MuhdNurKamal"},"content":"        postNow(DECOMPRESS_MEMBERS_REQUEST_EVENT);"},{"lineNumber":78,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(memberListPanel.isDisplayingCompressedMembers());"},{"lineNumber":79,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"MuhdNurKamal"},"content":"    //@@author"},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":24,"amrut-prabhu":25,"-":32}},{"path":"src/test/java/seedu/club/ui/GuiUnitTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.exceptions.NodeNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.EventsCenter;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.ui.testutil.UiPartRule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":" * A GUI unit test class for ClubBook."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public abstract class GuiUnitTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public final UiPartRule uiPartRule \u003d new UiPartRule();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    protected final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void tearDown() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Retrieves the {@code query} node owned by the {@code rootNode}."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @param query name of the CSS selector of the node to retrieve."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws NodeNotFoundException if no such node exists."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) throws NodeNotFoundException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return node.orElseThrow(NodeNotFoundException::new);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":1,"amrut-prabhu":4,"-":33}},{"path":"src/test/java/seedu/club/ui/HelpWindowTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.ui.HelpWindow.USERGUIDE_FILE_PATH;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class HelpWindowTest extends GuiUnitTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private HelpWindow helpWindow;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private HelpWindowHandle helpWindowHandle;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        Stage helpWindowStage \u003d FxToolkit.setupStage((stage) -\u003e stage.setScene(helpWindow.getRoot().getScene()));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        FxToolkit.showStage();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        helpWindowHandle \u003d new HelpWindowHandle(helpWindowStage);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        URL expectedHelpPage \u003d HelpWindow.class.getResource(USERGUIDE_FILE_PATH);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(expectedHelpPage, helpWindowHandle.getLoadedUrl());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":2,"-":31}},{"path":"src/test/java/seedu/club/ui/TestFxmlObject.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.beans.DefaultProperty;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A test object which can be constructed via an FXML file."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"@DefaultProperty(\"text\")"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class TestFxmlObject {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private String text;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public TestFxmlObject() {}"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public TestFxmlObject(String text) {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        setText(text);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public String getText() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return text;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void setText(String text) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.text \u003d text;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                || (other instanceof TestFxmlObject // instanceof handles nulls"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.text.equals(((TestFxmlObject) other).getText()));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":34}},{"path":"src/test/java/systemtests/AddPollCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.ANSWER_DESC_FINE;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.ANSWER_DESC_FOUR;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.ANSWER_DESC_NOT_GOOD;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.ANSWER_DESC_ONE;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.ANSWER_DESC_THREE;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.ANSWER_DESC_TWO;"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.ANSWER_DESC_VAMPIRE;"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.ANSWER_DESC_ZOMBIE;"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_ANSWER_DESC;"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_QUESTION_DESC;"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.QUESTION_DESC_HOW;"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.QUESTION_DESC_LIFE;"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.QUESTION_DESC_LOVE;"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.QUESTION_DESC_WHAT;"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_ANSWER_ONE;"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_ANSWER_TWO;"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_ANSWER_VAMPIRE;"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_ANSWER_ZOMBIE;"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_QUESTION_LOVE;"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_QUESTION_WHAT;"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.testutil.TypicalPolls.POLL_HOW;"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.testutil.TypicalPolls.POLL_WHAT;"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"import org.junit.Test;"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.core.Messages;"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.AddPollCommand;"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.LogInCommand;"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.RedoCommand;"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.UndoCommand;"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.Model;"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Answer;"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Question;"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.DuplicatePollException;"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.testutil.PollBuilder;"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.testutil.PollUtil;"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"public class AddPollCommandSystemTest extends ClubBookSystemTest {"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"    public void add() throws Exception {"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"        Model model \u003d getModel();"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"        Model modelBeforeAdding \u003d getModel();"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"        ObservableList\u003cMember\u003e memberObservableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"        String logInCommand \u003d LogInCommand.COMMAND_WORD + \" u/\" + memberObservableList.get(0).getMatricNumber().value"},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"                + \" pw/password\";"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"        executeCommand(logInCommand);"},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"        model \u003d getModel();"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"        /* Case: add a poll without tags to a non-empty club book, command with leading spaces and trailing spaces"},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":"         * -\u003e added"},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":"         */"},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":"        Poll toAdd \u003d POLL_WHAT;"},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":"        String command \u003d \"   \" + AddPollCommand.COMMAND_WORD + \"  \" + QUESTION_DESC_WHAT + \"  \""},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":"                + ANSWER_DESC_VAMPIRE + \" \""},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":"                + ANSWER_DESC_ZOMBIE;"},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":"        /* Case: undo adding \"What poll\" to the list -\u003e \"What poll\" deleted */"},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"        /* Case: redo adding \"What poll\" to the list -\u003e \"What poll\" added again */"},{"lineNumber":73,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":74,"author":{"gitID":"MuhdNurKamal"},"content":"        model.addPoll(toAdd);"},{"lineNumber":75,"author":{"gitID":"MuhdNurKamal"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":76,"author":{"gitID":"MuhdNurKamal"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":77,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":78,"author":{"gitID":"MuhdNurKamal"},"content":"        /* Case: add a poll answers same as another poll in the club book but different question -\u003e added */"},{"lineNumber":79,"author":{"gitID":"MuhdNurKamal"},"content":"        toAdd \u003d new PollBuilder().withQuestion(VALID_QUESTION_LOVE)"},{"lineNumber":80,"author":{"gitID":"MuhdNurKamal"},"content":"                .withAnswers(VALID_ANSWER_VAMPIRE, VALID_ANSWER_ZOMBIE).build();"},{"lineNumber":81,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddPollCommand.COMMAND_WORD + QUESTION_DESC_LOVE + ANSWER_DESC_VAMPIRE + ANSWER_DESC_ZOMBIE;"},{"lineNumber":82,"author":{"gitID":"MuhdNurKamal"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":83,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":84,"author":{"gitID":"MuhdNurKamal"},"content":"        /* Case: add a poll with question same as another poll in the club book but with all different answers"},{"lineNumber":85,"author":{"gitID":"MuhdNurKamal"},"content":"         -\u003e added */"},{"lineNumber":86,"author":{"gitID":"MuhdNurKamal"},"content":"        toAdd \u003d new PollBuilder().withQuestion(VALID_QUESTION_WHAT)"},{"lineNumber":87,"author":{"gitID":"MuhdNurKamal"},"content":"                .withAnswers(VALID_ANSWER_ONE, VALID_ANSWER_TWO).build();"},{"lineNumber":88,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddPollCommand.COMMAND_WORD + QUESTION_DESC_WHAT + ANSWER_DESC_ONE + ANSWER_DESC_TWO;"},{"lineNumber":89,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":90,"author":{"gitID":"MuhdNurKamal"},"content":"        /* Case: add a poll with question same as another poll in the club book but with exactly one different answer"},{"lineNumber":91,"author":{"gitID":"MuhdNurKamal"},"content":"         -\u003e added */"},{"lineNumber":92,"author":{"gitID":"MuhdNurKamal"},"content":"        toAdd \u003d new PollBuilder().withQuestion(VALID_QUESTION_WHAT)"},{"lineNumber":93,"author":{"gitID":"MuhdNurKamal"},"content":"                .withAnswers(VALID_ANSWER_ONE, VALID_ANSWER_VAMPIRE).build();"},{"lineNumber":94,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddPollCommand.COMMAND_WORD + QUESTION_DESC_WHAT + ANSWER_DESC_ONE + ANSWER_DESC_VAMPIRE;"},{"lineNumber":95,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":96,"author":{"gitID":"MuhdNurKamal"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":97,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":98,"author":{"gitID":"MuhdNurKamal"},"content":"        /* Case: add a poll with fields in random order -\u003e added */"},{"lineNumber":99,"author":{"gitID":"MuhdNurKamal"},"content":"        toAdd \u003d POLL_HOW;"},{"lineNumber":100,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddPollCommand.COMMAND_WORD + ANSWER_DESC_FINE + QUESTION_DESC_HOW + ANSWER_DESC_NOT_GOOD;"},{"lineNumber":101,"author":{"gitID":"MuhdNurKamal"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":102,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":103,"author":{"gitID":"MuhdNurKamal"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":104,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":105,"author":{"gitID":"MuhdNurKamal"},"content":"        /* Case: add a duplicate poll -\u003e rejected */"},{"lineNumber":106,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d PollUtil.getAddPollCommand(POLL_WHAT);"},{"lineNumber":107,"author":{"gitID":"MuhdNurKamal"},"content":"        assertCommandFailure(command, AddPollCommand.MESSAGE_DUPLICATE_POLL);"},{"lineNumber":108,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":109,"author":{"gitID":"MuhdNurKamal"},"content":"        /* Case: missing question -\u003e rejected */"},{"lineNumber":110,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddPollCommand.COMMAND_WORD + ANSWER_DESC_FOUR + ANSWER_DESC_THREE;"},{"lineNumber":111,"author":{"gitID":"MuhdNurKamal"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPollCommand.MESSAGE_USAGE));"},{"lineNumber":112,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":113,"author":{"gitID":"MuhdNurKamal"},"content":"        /* Case: missing answer -\u003e rejected */"},{"lineNumber":114,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddPollCommand.COMMAND_WORD + QUESTION_DESC_LIFE;"},{"lineNumber":115,"author":{"gitID":"MuhdNurKamal"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPollCommand.MESSAGE_USAGE));"},{"lineNumber":116,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":117,"author":{"gitID":"MuhdNurKamal"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":118,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d \"addpolls \" + PollUtil.getPollDetails(toAdd);"},{"lineNumber":119,"author":{"gitID":"MuhdNurKamal"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":120,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":121,"author":{"gitID":"MuhdNurKamal"},"content":"        /* Case: invalid question -\u003e rejected */"},{"lineNumber":122,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddPollCommand.COMMAND_WORD + INVALID_QUESTION_DESC + ANSWER_DESC_FOUR + ANSWER_DESC_VAMPIRE;"},{"lineNumber":123,"author":{"gitID":"MuhdNurKamal"},"content":"        assertCommandFailure(command, Question.MESSAGE_QUESTION_CONSTRAINTS);"},{"lineNumber":124,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":125,"author":{"gitID":"MuhdNurKamal"},"content":"        /* Case: invalid answer -\u003e rejected */"},{"lineNumber":126,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddPollCommand.COMMAND_WORD + QUESTION_DESC_LIFE + INVALID_ANSWER_DESC + ANSWER_DESC_ONE;"},{"lineNumber":127,"author":{"gitID":"MuhdNurKamal"},"content":"        assertCommandFailure(command, Answer.MESSAGE_ANSWER_CONSTRAINTS);"},{"lineNumber":128,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":130,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"MuhdNurKamal"},"content":"     * Executes the {@code AddPollCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":132,"author":{"gitID":"MuhdNurKamal"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":133,"author":{"gitID":"MuhdNurKamal"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":134,"author":{"gitID":"MuhdNurKamal"},"content":"     * 3. Result display box displays the success message of executing {@code AddPollCommand} with the details of"},{"lineNumber":135,"author":{"gitID":"MuhdNurKamal"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"MuhdNurKamal"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PollListPanel} equal to the corresponding components in"},{"lineNumber":137,"author":{"gitID":"MuhdNurKamal"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"MuhdNurKamal"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"MuhdNurKamal"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"MuhdNurKamal"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":141,"author":{"gitID":"MuhdNurKamal"},"content":"     * {@code ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"MuhdNurKamal"},"content":"     * @see ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":143,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"MuhdNurKamal"},"content":"    private void assertCommandSuccess(Poll toAdd) {"},{"lineNumber":145,"author":{"gitID":"MuhdNurKamal"},"content":"        assertCommandSuccess(PollUtil.getAddPollCommand(toAdd), toAdd);"},{"lineNumber":146,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":148,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"MuhdNurKamal"},"content":"     * Performs the same verification as {@code assertCommandSuccess(poll)}. Executes {@code command}"},{"lineNumber":150,"author":{"gitID":"MuhdNurKamal"},"content":"     * instead."},{"lineNumber":151,"author":{"gitID":"MuhdNurKamal"},"content":"     * @see AddPollCommandSystemTest#assertCommandSuccess(Poll)"},{"lineNumber":152,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"MuhdNurKamal"},"content":"    private void assertCommandSuccess(String command, Poll toAdd) {"},{"lineNumber":154,"author":{"gitID":"MuhdNurKamal"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":155,"author":{"gitID":"MuhdNurKamal"},"content":"        try {"},{"lineNumber":156,"author":{"gitID":"MuhdNurKamal"},"content":"            expectedModel.addPoll(toAdd);"},{"lineNumber":157,"author":{"gitID":"MuhdNurKamal"},"content":"        } catch (DuplicatePollException dpe) {"},{"lineNumber":158,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":159,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"MuhdNurKamal"},"content":"        String expectedResultMessage \u003d String.format(AddPollCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":161,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":162,"author":{"gitID":"MuhdNurKamal"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":163,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":165,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"MuhdNurKamal"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, poll)} except asserts that"},{"lineNumber":167,"author":{"gitID":"MuhdNurKamal"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":168,"author":{"gitID":"MuhdNurKamal"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":169,"author":{"gitID":"MuhdNurKamal"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PollListPanel} equal to the corresponding components in"},{"lineNumber":170,"author":{"gitID":"MuhdNurKamal"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":171,"author":{"gitID":"MuhdNurKamal"},"content":"     * @see AddPollCommandSystemTest#assertCommandSuccess(String, Poll)"},{"lineNumber":172,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"MuhdNurKamal"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":174,"author":{"gitID":"MuhdNurKamal"},"content":"        executeCommand(command);"},{"lineNumber":175,"author":{"gitID":"MuhdNurKamal"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":176,"author":{"gitID":"MuhdNurKamal"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":177,"author":{"gitID":"MuhdNurKamal"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":178,"author":{"gitID":"MuhdNurKamal"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":179,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":181,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"MuhdNurKamal"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":183,"author":{"gitID":"MuhdNurKamal"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"MuhdNurKamal"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"MuhdNurKamal"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"MuhdNurKamal"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PollListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"MuhdNurKamal"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":188,"author":{"gitID":"MuhdNurKamal"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":189,"author":{"gitID":"MuhdNurKamal"},"content":"     * {@code ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":190,"author":{"gitID":"MuhdNurKamal"},"content":"     * @see ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":191,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"MuhdNurKamal"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":193,"author":{"gitID":"MuhdNurKamal"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":194,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":195,"author":{"gitID":"MuhdNurKamal"},"content":"        executeCommand(command);"},{"lineNumber":196,"author":{"gitID":"MuhdNurKamal"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":197,"author":{"gitID":"MuhdNurKamal"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":198,"author":{"gitID":"MuhdNurKamal"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":199,"author":{"gitID":"MuhdNurKamal"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":200,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":201}},{"path":"src/test/java/seedu/club/ui/UiPartTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.MainApp;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.Assert;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class UiPartTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void constructor_nullFileUrl_throwsNullPointerException() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        URL missingFileUrl \u003d new URL(testFolder.getRoot().toURI().toURL(), MISSING_FILE_PATH);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void constructor_invalidFileUrl_throwsAssertionError() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void constructor_validFileUrl_loadsFile() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void constructor_validFileWithFxRootUrl_loadsFile() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        TestFxmlObject root \u003d new TestFxmlObject();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void constructor_nullFileName_throwsNullPointerException() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void constructor_missingFileName_throwsNullPointerException() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void constructor_invalidFileName_throwsAssertionError() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private URL getTestFileUrl(String testFilePath) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertNotNull(testFilePathInView + \" does not exist.\", testFileUrl);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return testFileUrl;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * UiPart used for testing."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        @FXML"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        TestUiPart(URL fxmlFileUrl, T root) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            super(fxmlFileUrl, root);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        TestUiPart(String fxmlFileName, T root) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            super(fxmlFileName, root);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        TestUiPart(URL fxmlFileUrl) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            super(fxmlFileUrl);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        TestUiPart(String fxmlFileName) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            super(fxmlFileName);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":3,"-":115}},{"path":"src/test/java/seedu/club/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import guitests.guihandles.MemberCardHandle;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import guitests.guihandles.MemberListPanelHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"    public static void assertCardEquals(MemberCardHandle expectedCard, MemberCardHandle actualCard) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(expectedCard.getMatricNumber(), actualCard.getMatricNumber());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedMember}."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"    public static void assertCardDisplaysMember(Member expectedMember, MemberCardHandle actualCard) {"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(expectedMember.getName().fullName, actualCard.getName());"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(expectedMember.getPhone().value, actualCard.getPhone());"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(expectedMember.getEmail().value, actualCard.getEmail());"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(expectedMember.getMatricNumber().value, actualCard.getMatricNumber());"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(expectedMember.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"     * Asserts that the list in {@code memberListPanelHandle} displays the details of {@code members} correctly and"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"    public static void assertListMatching(MemberListPanelHandle memberListPanelHandle, Member... members) {"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"        for (int i \u003d 0; i \u003c members.length; i++) {"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"            assertCardDisplaysMember(members[i], memberListPanelHandle.getMemberCardHandle(i));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"amrut-prabhu"},"content":"     * Asserts that the list in {@code memberListPanelHandle} displays the details of {@code members} correctly and"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"    public static void assertListMatching(MemberListPanelHandle memberListPanelHandle, List\u003cMember\u003e members) {"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"        assertListMatching(memberListPanelHandle, members.toArray(new Member[0]));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"     * Asserts the size of the list in {@code memberListPanelHandle} equals to {@code size}."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":"    public static void assertListSize(MemberListPanelHandle memberListPanelHandle, int size) {"},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"        int numberOfPeople \u003d memberListPanelHandle.getListSize();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":1,"amrut-prabhu":22,"-":50}},{"path":"src/test/java/seedu/club/ui/testutil/StageRule.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.rules.TestRule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.runner.Description;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.runners.model.Statement;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Properly sets up and tears down a JavaFx stage for our testing purposes."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class StageRule implements TestRule {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    protected void before() throws Throwable {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"        FxToolkit.registerPrimaryStage();"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    protected void after() throws Throwable {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        FxToolkit.cleanupStages();"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public Statement apply(final Statement base, final Description description) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return new Statement() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            @Override"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            public void evaluate() throws Throwable {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"                before();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"                try {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                    base.evaluate();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                } finally {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"                    after();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                }"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":33}},{"path":"src/test/java/seedu/club/ui/testutil/UiPartRule.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.Parent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.ui.UiPart;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Provides an isolated stage to test an individual {@code UiPart}."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class UiPartRule extends StageRule {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String[] CSS_FILES \u003d {\"view/DarkTheme.css\", \"view/Extensions.css\"};"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            FxToolkit.setupScene(() -\u003e {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"                Scene scene \u003d new Scene(uiPart.getRoot());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"                scene.getStylesheets().setAll(CSS_FILES);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"                return scene;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            });"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            FxToolkit.showStage();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Timeout should not happen.\", te);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":2,"-":27}},{"path":"src/test/java/seedu/club/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.club.testutil.TypicalMembers.getTypicalClubBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.Logic;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.LogicManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.EmailCommand;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.ListCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.club.logic.commands.LogInCommand;"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.RedoCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"    private static final String BLANK_COMMAND \u003d \"\";"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"    private static final String INCOMPLETE_EMAIL_COMMAND \u003d \"em\";"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"    private static final String COMPLETE_EMAIL_COMMAND \u003d EmailCommand.COMMAND_FORMAT;"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"    private static final String INCOMPLETE_REDO_COMMAND \u003d \"r\";"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"    private static final String COMPLETE_REDO_COMMAND \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void setUp() throws CommandException {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ObservableList\u003cMember\u003e observableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Member member \u003d observableList.get(0);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        LogInCommand command \u003d new LogInCommand(member.getCredentials().getUsername(),"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                member.getCredentials().getPassword());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command.execute();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"yash-chowdhary"},"content":"    public void commandBox_handleKeyPressTab() {"},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":"        commandBoxHandle.setInput(COMMAND_THAT_FAILS);"},{"lineNumber":96,"author":{"gitID":"yash-chowdhary"},"content":"        assertInputHistory(KeyCode.TAB, BLANK_COMMAND);"},{"lineNumber":97,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":98,"author":{"gitID":"yash-chowdhary"},"content":"        commandBoxHandle.setInput(INCOMPLETE_EMAIL_COMMAND);"},{"lineNumber":99,"author":{"gitID":"yash-chowdhary"},"content":"        assertInputHistory(KeyCode.TAB, COMPLETE_EMAIL_COMMAND);"},{"lineNumber":100,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":101,"author":{"gitID":"yash-chowdhary"},"content":"        commandBoxHandle.setInput(INCOMPLETE_REDO_COMMAND);"},{"lineNumber":102,"author":{"gitID":"yash-chowdhary"},"content":"        assertInputHistory(KeyCode.TAB, COMPLETE_REDO_COMMAND);"},{"lineNumber":103,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":185,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":6,"yash-chowdhary":19,"-":165}},{"path":"src/test/java/seedu/club/ui/testutil/EventsCollectorRule.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.rules.TestRule;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.runner.Description;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.runners.model.Statement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.EventsCenter;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.BaseEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Sets up an {@code EventsCollector} and tears it down after each test."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class EventsCollectorRule implements TestRule {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public final EventsCollector eventsCollector \u003d new EventsCollector();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    protected void after() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Statement apply(final Statement base, final Description description) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return new Statement() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            public void evaluate() throws Throwable {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                try {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                    base.evaluate();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                } finally {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                    after();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                }"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * A class that collects events raised by other classes."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public class EventsCollector {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        private List\u003cBaseEvent\u003e events \u003d new ArrayList\u003cBaseEvent\u003e();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        public EventsCollector() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"         * Collects any event raised by any class"},{"lineNumber":51,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        @Subscribe"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        public void collectEvent(BaseEvent event) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            events.add(event);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         * Removes collected events from the collected list"},{"lineNumber":59,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        public void reset() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            events.clear();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        public int getSize() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return events.size();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         * Returns the most recent event collected"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        public BaseEvent getMostRecent() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            if (events.isEmpty()) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                return null;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return events.get(events.size() - 1);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"         * Returns true if the collector did not receive any events"},{"lineNumber":81,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        public boolean isEmpty() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return events.isEmpty();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":3,"-":83}},{"path":"src/test/java/seedu/club/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.ALICE;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.MainApp;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.ui.MemberPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"    private MemberPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"        selectionChangedEventStub \u003d new MemberPanelSelectionChangedEvent(new MemberCard(ALICE, 0));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void display() throws Exception {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"        // associated web page of a member"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"        URL expectedMemberUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE.getName().fullName.replaceAll(\" \", \"%20\"));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(expectedMemberUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":12,"-":36}},{"path":"src/test/java/seedu/club/commons/core/VersionTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class VersionTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        Version.fromString(\"This is not a version string\");"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void versionConstructor_correctParameter_valueAsExpected() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        Version version \u003d new Version(19, 10, 20, true);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(19, version.getMajor());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(10, version.getMinor());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(20, version.getPatch());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(true, version.isEarlyAccess());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void versionToString_validVersion_correctStringRepresentation() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // boundary at 0"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Version version \u003d new Version(0, 0, 0, true);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(\"V0.0.0ea\", version.toString());"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // normal values"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        version \u003d new Version(4, 10, 5, false);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertEquals(\"V4.10.5\", version.toString());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // big numbers"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        version \u003d new Version(100, 100, 100, true);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(\"V100.100.100ea\", version.toString());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void versionComparable_validVersion_compareToIsCorrect() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Version one;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Version another;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // Tests equality"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        one \u003d new Version(0, 0, 0, true);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        another \u003d new  Version(0, 0, 0, true);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        one \u003d new Version(11, 12, 13, false);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        another \u003d new  Version(11, 12, 13, false);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Tests different patch"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        one \u003d new Version(0, 0, 5, false);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        another \u003d new  Version(0, 0, 0, false);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // Tests different minor"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        one \u003d new Version(0, 0, 0, false);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        another \u003d new  Version(0, 5, 0, false);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // Tests different major"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        one \u003d new Version(10, 0, 0, true);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        another \u003d new  Version(0, 0, 0, true);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // Tests high major vs low minor"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        one \u003d new Version(10, 0, 0, true);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        another \u003d new  Version(0, 1, 0, true);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // Tests high patch vs low minor"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        one \u003d new Version(0, 0, 10, false);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        another \u003d new  Version(0, 1, 0, false);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // Tests same major minor different patch"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        one \u003d new Version(2, 15, 0, false);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        another \u003d new  Version(2, 15, 5, false);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // Tests early access vs not early access on same version number"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        one \u003d new Version(2, 15, 0, true);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        another \u003d new  Version(2, 15, 0, false);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // Tests early access lower version vs not early access higher version compare by version number first"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        one \u003d new Version(2, 15, 0, true);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        another \u003d new  Version(2, 15, 5, false);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // Tests early access higher version vs not early access lower version compare by version number first"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        one \u003d new Version(2, 15, 0, false);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        another \u003d new  Version(2, 15, 5, true);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void versionComparable_validVersion_hashCodeIsCorrect() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Version version \u003d new Version(100, 100, 100, true);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertEquals(100100100, version.hashCode());"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        version \u003d new Version(10, 10, 10, false);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertEquals(1010010010, version.hashCode());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void versionComparable_validVersion_equalIsCorrect() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        Version one;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Version another;"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        one \u003d new Version(0, 0, 0, false);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        another \u003d new  Version(0, 0, 0, false);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertTrue(one.equals(another));"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        one \u003d new Version(100, 191, 275, true);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        another \u003d new  Version(100, 191, 275, true);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertTrue(one.equals(another));"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    private void verifyVersionParsedCorrectly(String versionString,"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                                              int major, int minor, int patch, boolean isEarlyAccess) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":138}},{"path":"src/test/java/seedu/club/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"        String defaultConfigAsString \u003d \"App title : Club Connect\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":2,"-":30}},{"path":"src/test/java/seedu/club/ui/StatusBarFooterTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.time.Instant;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.AfterClass;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.model.ClubBookChangedEvent;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ClubBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StatusBarFooterTest extends GuiUnitTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String STUB_SAVE_LOCATION \u003d \"Stub\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String RELATIVE_PATH \u003d \"./\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"    private static final ClubBookChangedEvent EVENT_STUB \u003d new ClubBookChangedEvent(new ClubBook());"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final Clock originalClock \u003d StatusBarFooter.getClock();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private StatusBarFooterHandle statusBarFooterHandle;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static void setUpBeforeClass() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // inject fixed clock"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(injectedClock);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @AfterClass"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static void tearDownAfterClass() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // restore original clock"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(originalClock);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(statusBarFooter);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // initial state"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION, SYNC_STATUS_INITIAL);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"        // after club book is updated"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        postNow(EVENT_STUB);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * sync status matches that of {@code expectedSyncStatus}."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":8,"-":67}},{"path":"src/test/java/seedu/club/commons/util/FileUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class FileUtilTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void getPath() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"        // valid case"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertEquals(\"folder\" + File.separator + \"sub-folder\", FileUtil.getPath(\"folder/sub-folder\"));"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"        // null parameter -\u003e throws NullPointerException"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        FileUtil.getPath(null);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // no forwards slash -\u003e assertion failure"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        FileUtil.getPath(\"folder\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":30}},{"path":"src/test/java/systemtests/DeleteTaskCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.DeleteTaskCommand.MESSAGE_DELETE_TASK_SUCCESS;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TestUtil.getTask;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalMembers.ALICE;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalTasks.getTypicalClubBookWithTasks;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.commons.core.Messages;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.DeleteTaskCommand;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.LogInCommand;"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.Model;"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TaskCannotBeDeletedException;"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"public class DeleteTaskCommandSystemTest extends ClubBookSystemTest {"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"    private static final String MESSAGE_INVALID_DELETE_TASK_COMMAND_FORMAT \u003d"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE);"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"    public void deleteTask() {"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: delete the first member in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"        String command;"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"        ObservableList\u003cMember\u003e memberObservableList \u003d expectedModel.getClubBook().getMemberList();"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"        String logInCommand \u003d LogInCommand.COMMAND_WORD + \" u/\" + memberObservableList.get(0).getMatricNumber().value"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"                + \" pw/password\";"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"        executeCommand(logInCommand);"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel \u003d new ModelManager(getTypicalClubBookWithTasks(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d DeleteTaskCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_TASK_COMMAND_FORMAT);"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d DeleteTaskCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_TASK_COMMAND_FORMAT);"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"                getModel().getClubBook().getTaskList().size() + 1);"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d DeleteTaskCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(DeleteTaskCommand.COMMAND_WORD + \" abc\","},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"                MESSAGE_INVALID_DELETE_TASK_COMMAND_FORMAT);"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(DeleteTaskCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"                MESSAGE_INVALID_DELETE_TASK_COMMAND_FORMAT);"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(\"DelETETAsk 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"     * Deletes the member at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"        Task deletedTask \u003d removeTask(expectedModel, toDelete);"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_TASK_SUCCESS, deletedTask);"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess("},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"                DeleteTaskCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel,"},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"                expectedResultMessage);"},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":94,"author":{"gitID":"yash-chowdhary"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":"     * {@code ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":96,"author":{"gitID":"yash-chowdhary"},"content":"     * @see ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":97,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"yash-chowdhary"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":99,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":100,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":102,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"yash-chowdhary"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":104,"author":{"gitID":"yash-chowdhary"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":105,"author":{"gitID":"yash-chowdhary"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":106,"author":{"gitID":"yash-chowdhary"},"content":"     * @see ClubBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":107,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"yash-chowdhary"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":109,"author":{"gitID":"yash-chowdhary"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":110,"author":{"gitID":"yash-chowdhary"},"content":"        executeCommand(command);"},{"lineNumber":111,"author":{"gitID":"yash-chowdhary"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":112,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":113,"author":{"gitID":"yash-chowdhary"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":114,"author":{"gitID":"yash-chowdhary"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":115,"author":{"gitID":"yash-chowdhary"},"content":"        } else {"},{"lineNumber":116,"author":{"gitID":"yash-chowdhary"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":117,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":119,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":120,"author":{"gitID":"yash-chowdhary"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":121,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":123,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"yash-chowdhary"},"content":"     * Removes the {@code task} at the specified {@code index} in {@code model}\u0027s club book."},{"lineNumber":125,"author":{"gitID":"yash-chowdhary"},"content":"     * @return the removed task"},{"lineNumber":126,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"yash-chowdhary"},"content":"    private Task removeTask(Model model, Index index) {"},{"lineNumber":128,"author":{"gitID":"yash-chowdhary"},"content":"        Task targetTask \u003d getTask(model, index);"},{"lineNumber":129,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":130,"author":{"gitID":"yash-chowdhary"},"content":"            model.deleteTask(targetTask);"},{"lineNumber":131,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (TaskNotFoundException tnfe) {"},{"lineNumber":132,"author":{"gitID":"yash-chowdhary"},"content":"            throw new AssertionError(\"targetTask is retrieved from model\");"},{"lineNumber":133,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (TaskCannotBeDeletedException tcbde) {"},{"lineNumber":134,"author":{"gitID":"yash-chowdhary"},"content":"            throw new AssertionError(\"targetTask cannot be deleted\");"},{"lineNumber":135,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"yash-chowdhary"},"content":"        return targetTask;"},{"lineNumber":137,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":139,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"yash-chowdhary"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"yash-chowdhary"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"yash-chowdhary"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":143,"author":{"gitID":"yash-chowdhary"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":144,"author":{"gitID":"yash-chowdhary"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":145,"author":{"gitID":"yash-chowdhary"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"yash-chowdhary"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":147,"author":{"gitID":"yash-chowdhary"},"content":"     * {@code ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"yash-chowdhary"},"content":"     * @see ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":149,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"yash-chowdhary"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":151,"author":{"gitID":"yash-chowdhary"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":152,"author":{"gitID":"yash-chowdhary"},"content":"        executeCommand(command);"},{"lineNumber":153,"author":{"gitID":"yash-chowdhary"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":154,"author":{"gitID":"yash-chowdhary"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":155,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":156,"author":{"gitID":"yash-chowdhary"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":157,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":158}},{"path":"src/test/java/seedu/club/commons/core/index/IndexTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.core.index;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class IndexTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void createOneBasedIndex() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        // invalid index"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        assertCreateOneBasedFailure(0);"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"        // check equality using the same base"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        // convert from one-based index to zero-based index"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void createZeroBasedIndex() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid index"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCreateZeroBasedFailure(-1);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // check equality using the same base"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // convert from zero-based index to one-based index"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * {@code IndexOutOfBoundsException} is thrown."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCreateFailure(invalidZeroBasedIndex, true);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * {@code IndexOutOfBoundsException} is thrown."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCreateFailure(invalidOneBasedIndex, false);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            if (isZeroBased) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                Index.fromZeroBased(invalidIndex);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                Index.fromOneBased(invalidIndex);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            fail(\"The expected IndexOutOfBoundsException was not thrown.\");"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        } catch (IndexOutOfBoundsException ie) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            // expected behaviour"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":75,"author":{"gitID":"amrut-prabhu"},"content":"        final Index fifthMemberIndex \u003d Index.fromOneBased(5);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(fifthMemberIndex.equals(Index.fromOneBased(5)));"},{"lineNumber":79,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(fifthMemberIndex.equals(Index.fromZeroBased(4)));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(fifthMemberIndex.equals(fifthMemberIndex));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(fifthMemberIndex.equals(null));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(fifthMemberIndex.equals(5.0f));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(fifthMemberIndex.equals(Index.fromOneBased(1)));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":8,"-":85}},{"path":"src/test/java/seedu/club/commons/util/JsonUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.SerializableTestClass;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.TestUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Tests JSON Read and Write"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class JsonUtilTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final File SERIALIZATION_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"serialize.json\"));"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        serializableTestClass.setTestValues();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        SerializableTestClass serializableTestClass \u003d JsonUtil"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":3,"-":42}},{"path":"src/test/java/seedu/club/commons/util/AppUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class AppUtilTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void getImage_exitingImage() {"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"        assertNotNull(AppUtil.getImage(\"/images/club_connect_256.png\"));"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        AppUtil.getImage(null);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void checkArgument_true_nothingHappens() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true, \"\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String errorMessage \u003d \"error message\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        thrown.expectMessage(errorMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false,  errorMessage);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":2,"-":45}},{"path":"src/test/java/seedu/club/commons/util/StringUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.hamcrest.CoreMatchers.containsString;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.hamcrest.MatcherAssert.assertThat;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class StringUtilTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void isUnsignedPositiveInteger() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // EP: empty strings"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // EP: not a number"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // EP: zero"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // EP: zero as prefix"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // EP: signed numbers"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // EP: numbers with white space"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\"));  // Spaces in the middle"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // EP: valid numbers, should return true"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Invalid equivalence partitions for sentence: null"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * The four test cases below test one invalid input at a time."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            Optional\u003cString\u003e errorMessage) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(exceptionClass);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        StringUtil.containsWordIgnoreCase(sentence, word);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","},{"lineNumber":79,"author":{"gitID":"-"},"content":"                Optional.of(\"Word parameter cannot be empty\"));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","},{"lineNumber":85,"author":{"gitID":"-"},"content":"                Optional.of(\"Word parameter should be a single word\"));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Valid equivalence partitions for word:"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     *   - any word"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     *   - word containing symbols/numbers"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     *   - word with leading/trailing spaces"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Valid equivalence partitions for sentence:"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     *   - empty string"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     *   - one word"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     *   - multiple words"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *   - sentence with extra spaces"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Possible scenarios returning true:"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     *   - matches first word in sentence"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     *   - last word in sentence"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     *   - middle word in sentence"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     *   - matches multiple words"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Possible scenarios returning false:"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     *   - query word matches part of a sentence word"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     *   - sentence word matches part of the query word"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // Empty sentence"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // Matches a partial word only"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // Matches multiple words in sentence"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Equivalence Partitions: null, valid throwable object"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public void getDetails_exceptionGiven() {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                   containsString(\"java.io.FileNotFoundException: file not found\"));"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        StringUtil.getDetails(null);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"MuhdNurKamal"},"content":"    //---------------- Tests for partiallyContainsWordIgnoreCase --------------------------------------"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * Invalid equivalence partitions for sentence: null"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * The four test cases below test one invalid input at a time."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":167,"author":{"gitID":"MuhdNurKamal"},"content":"    public void partiallyContainsWordIgnoreCase_nullWord_throwsNullPointerException() {"},{"lineNumber":168,"author":{"gitID":"MuhdNurKamal"},"content":"        assertExceptionThrown_partiallyContainsWordIgnoreCase(NullPointerException.class, \"typical sentence\","},{"lineNumber":169,"author":{"gitID":"MuhdNurKamal"},"content":"                null, Optional.empty());"},{"lineNumber":170,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":172,"author":{"gitID":"MuhdNurKamal"},"content":"    private void assertExceptionThrown_partiallyContainsWordIgnoreCase("},{"lineNumber":173,"author":{"gitID":"MuhdNurKamal"},"content":"            Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word, Optional\u003cString\u003e errorMessage) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        thrown.expect(exceptionClass);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"},{"lineNumber":176,"author":{"gitID":"MuhdNurKamal"},"content":"        StringUtil.partiallyContainsWordIgnoreCase(sentence, word);"},{"lineNumber":177,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":179,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":180,"author":{"gitID":"MuhdNurKamal"},"content":"    public void partiallyContainsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"},{"lineNumber":181,"author":{"gitID":"MuhdNurKamal"},"content":"        assertExceptionThrown_partiallyContainsWordIgnoreCase(IllegalArgumentException.class, \"typical sentence\", \"  \","},{"lineNumber":182,"author":{"gitID":"-"},"content":"                Optional.of(\"Word parameter cannot be empty\"));"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":186,"author":{"gitID":"MuhdNurKamal"},"content":"    public void partiallyContainsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"},{"lineNumber":187,"author":{"gitID":"MuhdNurKamal"},"content":"        assertExceptionThrown_partiallyContainsWordIgnoreCase(IllegalArgumentException.class,"},{"lineNumber":188,"author":{"gitID":"MuhdNurKamal"},"content":"                \"typical sentence\", \"aaa BBB\","},{"lineNumber":189,"author":{"gitID":"-"},"content":"                Optional.of(\"Word parameter should be a single word\"));"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":193,"author":{"gitID":"MuhdNurKamal"},"content":"    public void partiallyContainsWordIgnoreCase_nullSentence_throwsNullPointerException() {"},{"lineNumber":194,"author":{"gitID":"MuhdNurKamal"},"content":"        assertExceptionThrown_partiallyContainsWordIgnoreCase(NullPointerException.class,"},{"lineNumber":195,"author":{"gitID":"MuhdNurKamal"},"content":"                null, \"abc\", Optional.empty());"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * Valid equivalence partitions for word:"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     *   - any word"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     *   - word containing symbols/numbers"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     *   - word with leading/trailing spaces"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * Valid equivalence partitions for sentence:"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     *   - empty string"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     *   - one word"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     *   - multiple words"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     *   - sentence with extra spaces"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * Possible scenarios returning true:"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     *   - matches first word in sentence"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     *   - last word in sentence"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     *   - middle word in sentence"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     *   - matches multiple words"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     *   - query word matches part of a sentence word"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     *   - sentence word matches part of the query word"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * Possible scenarios returning false:"},{"lineNumber":219,"author":{"gitID":"MuhdNurKamal"},"content":"     *   - query word does not match sentence at all"},{"lineNumber":220,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases."},{"lineNumber":222,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":225,"author":{"gitID":"MuhdNurKamal"},"content":"    public void partiallyContainsWordIgnoreCase_validInputs_correctResult() {"},{"lineNumber":226,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":227,"author":{"gitID":"MuhdNurKamal"},"content":"        // Empty sentence"},{"lineNumber":228,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(StringUtil.partiallyContainsWordIgnoreCase(\"\", \"abc\")); // Boundary case"},{"lineNumber":229,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(StringUtil.partiallyContainsWordIgnoreCase(\"    \", \"123\"));"},{"lineNumber":230,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":231,"author":{"gitID":"MuhdNurKamal"},"content":"        // Does not match at all"},{"lineNumber":232,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(StringUtil.partiallyContainsWordIgnoreCase(\"aaa bbb ccc\","},{"lineNumber":233,"author":{"gitID":"MuhdNurKamal"},"content":"                \"zz\")); // Sentence word bigger than query word"},{"lineNumber":234,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(StringUtil.partiallyContainsWordIgnoreCase(\"aaa bbb ccc\","},{"lineNumber":235,"author":{"gitID":"MuhdNurKamal"},"content":"                \"ddd\")); // Query word bigger than sentence word"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters"},{"lineNumber":238,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(StringUtil.partiallyContainsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"},{"lineNumber":239,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(StringUtil.partiallyContainsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"},{"lineNumber":240,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(StringUtil.partiallyContainsWordIgnoreCase(\"  AAA   bBb   ccc  \","},{"lineNumber":241,"author":{"gitID":"MuhdNurKamal"},"content":"                \"aaa\")); // Sentence has extra spaces"},{"lineNumber":242,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(StringUtil.partiallyContainsWordIgnoreCase(\"Aaa\","},{"lineNumber":243,"author":{"gitID":"MuhdNurKamal"},"content":"                \"aaa\")); // Only one word in sentence (boundary case)"},{"lineNumber":244,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(StringUtil.partiallyContainsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"        // Matches multiple words in sentence"},{"lineNumber":247,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(StringUtil.partiallyContainsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"},{"lineNumber":248,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":42,"amrut-prabhu":1,"-":207}},{"path":"src/test/java/seedu/club/TestApp.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.Config;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.GuiSettings;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ClubBook;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ReadOnlyClubBook;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.storage.UserPrefsStorage;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.storage.XmlSerializableClubBook;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.TestUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import systemtests.ModelHelper;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * This class is meant to override some properties of MainApp so that it will be suited for"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * testing"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TestApp extends MainApp {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String APP_TITLE \u003d \"Test App\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"    protected static final String CLUB_BOOK_NAME \u003d \"Test\";"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"    protected Supplier\u003cReadOnlyClubBook\u003e initialDataSupplier \u003d () -\u003e null;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    protected String saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public TestApp() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"    public TestApp(Supplier\u003cReadOnlyClubBook\u003e initialDataSupplier, String saveFileLocation) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.initialDataSupplier \u003d initialDataSupplier;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.saveFileLocation \u003d saveFileLocation;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // If some initial local data has been provided, write those to the file"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (initialDataSupplier.get() !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"            createDataFileWithData(new XmlSerializableClubBook(this.initialDataSupplier.get()),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    this.saveFileLocation);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Config config \u003d super.initConfig(configFilePath);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        config.setAppTitle(APP_TITLE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d super.initPrefs(storage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":"        userPrefs.setClubBookFilePath(saveFileLocation);"},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"        userPrefs.setClubBookName(CLUB_BOOK_NAME);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns a defensive copy of the club book data stored inside the storage file."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"amrut-prabhu"},"content":"    public ClubBook readStorageClubBook() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"amrut-prabhu"},"content":"            return new ClubBook(storage.readClubBook().get());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":80,"author":{"gitID":"amrut-prabhu"},"content":"            throw new AssertionError(\"Data is not in the ClubBook format.\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns the file path of the storage file."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public String getStorageSaveLocation() {"},{"lineNumber":90,"author":{"gitID":"amrut-prabhu"},"content":"        return storage.getClubBookFilePath();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the model."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public Model getModel() {"},{"lineNumber":97,"author":{"gitID":"amrut-prabhu"},"content":"        Model copy \u003d new ModelManager((model.getClubBook()), new UserPrefs());"},{"lineNumber":98,"author":{"gitID":"amrut-prabhu"},"content":"        ModelHelper.setFilteredList(copy, model.getFilteredMemberList());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return copy;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Creates an XML file at the {@code filePath} with the {@code data}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            File saveFileForTesting \u003d new File(filePath);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            FileUtil.createIfMissing(saveFileForTesting);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(saveFileForTesting, data);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":27,"-":96}},{"path":"src/test/java/seedu/club/commons/util/CollectionUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class CollectionUtilTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void requireAllNonNullVarargs() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        // no arguments"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionNotThrown();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        // any non-empty argument list"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionNotThrown(new Object(), new Object());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionNotThrown(\"test\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionNotThrown(\"\");"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // argument lists with just one null at the beginning"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown((Object) null);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(null, \"\", new Object());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(null, new Object(), new Object());"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // argument lists with nulls in the middle"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(\"\", null, new Object());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // argument lists with one null as the last argument"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(\"\", new Object(), null);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), new Object(), null);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // null reference"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown((Object[]) null);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // confirms nulls inside lists in the argument list are not considered"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionNotThrown(containingNull, new Object());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void requireAllNonNullCollection() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // lists containing nulls in the front"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // lists containing nulls in the middle"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // lists containing nulls at the end"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // null reference"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // empty list"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionNotThrown(Collections.emptyList());"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // list with all non-null elements"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", new Integer(1)));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // confirms nulls inside nested lists are not considered"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void isAnyNonNull() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void elementsAreUnique() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // empty list"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertAreUnique();"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // only one object"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertAreUnique((Object) null);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertAreUnique(1);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertAreUnique(\"\");"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertAreUnique(\"abc\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // all objects unique"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertAreUnique(\"abc\", \"ab\", \"a\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertAreUnique(1, 2);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // some identical objects"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertNotUnique(\"abc\", \"abc\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertNotUnique(\"abc\", \"\", \"abc\", \"ABC\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertNotUnique(\"\", \"abc\", \"a\", \"abc\");"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertNotUnique(1, new Integer(1));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertNotUnique(null, 1, new Integer(1));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertNotUnique(null, null);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertNotUnique(null, \"a\", \"b\", null);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * if {@code objects} or any element of {@code objects} is null."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertNullPointerExceptionThrown(Object... objects) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            requireAllNonNull(objects);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            fail(\"The expected NullPointerException was not thrown\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        } catch (NullPointerException npe) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            // expected behavior"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * if {@code collection} or any element of {@code collection} is null."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            requireAllNonNull(collection);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            fail(\"The expected NullPointerException was not thrown\");"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        } catch (NullPointerException npe) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            // expected behavior"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Object... objects) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        requireAllNonNull(objects);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        requireAllNonNull(collection);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void assertAreUnique(Object... objects) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertTrue(CollectionUtil.elementsAreUnique(Arrays.asList(objects)));"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    private void assertNotUnique(Object... objects) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertFalse(CollectionUtil.elementsAreUnique(Arrays.asList(objects)));"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":2,"-":149}},{"path":"src/test/java/seedu/club/commons/util/ConfigUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.Config;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class ConfigUtilTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/ConfigUtilTest/\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void read_null_throwsNullPointerException() throws DataConversionException {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        read(null);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertFalse(read(\"NonExistentFile.json\").isPresent());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() throws DataConversionException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        read(\"NotJsonFormatConfig.json\");"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":47,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":48,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void read_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Config expected \u003d getTypicalConfig();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Config actual \u003d read(\"TypicalConfig.json\").get();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Config actual \u003d read(\"EmptyConfig.json\").get();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(new Config(), actual);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Config expected \u003d getTypicalConfig();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private Config getTypicalConfig() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Config config \u003d new Config();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        config.setAppTitle(\"Typical App Title\");"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        config.setLogLevel(Level.INFO);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(\"C:\\\\preferences.json\");"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        String configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return ConfigUtil.readConfig(configFilePath);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void save_nullConfig_throwsNullPointerException() throws IOException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        save(null, \"SomeFile.json\");"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void save_nullFile_throwsNullPointerException() throws IOException {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        save(new Config(), null);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Config original \u003d getTypicalConfig();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        String configFilePath \u003d testFolder.getRoot() + File.separator + \"TempConfig.json\";"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        original.setAppTitle(\"Updated Title\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        original.setLogLevel(Level.FINE);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    private void save(Config config, String configFileInTestDataFolder) throws IOException {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        String configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        ConfigUtil.saveConfig(config, configFilePath);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return configFileInTestDataFolder !\u003d null"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                                  ? TEST_DATA_FOLDER + configFileInTestDataFolder"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                                  : null;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":3,"-":127}},{"path":"src/test/java/seedu/club/logic/CommandHistoryTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class CommandHistoryTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private CommandHistory history;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void add() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        final String validCommand \u003d \"clear\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        final String invalidCommand \u003d \"adds Bob\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        history.add(validCommand);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        history.add(invalidCommand);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validCommand, invalidCommand), history.getHistory());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":26}},{"path":"src/test/java/systemtests/AssignTaskCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.EMPTY_STRING;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_MATRIC_NUMBER_DESC;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_TIME_DESC;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.MATRIC_NUMBER_DESC_BENSON;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.MATRIC_NUMBER_DESC_BOB;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.MATRIC_NUMBER_DESC_CARL;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TASK_DATE_DESC_1;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TASK_DATE_DESC_2;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TASK_DESCRIPTION_DESC_CONFETTI;"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TASK_DESCRIPTION_DESC_FOOD;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TASK_TIME_DESC_1;"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TASK_TIME_DESC_2;"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_BENSON;"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_CARL;"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Test;"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.commons.core.Messages;"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.AssignTaskCommand;"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.LogInCommand;"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.LogOutCommand;"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.RedoCommand;"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.UndoCommand;"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.Model;"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Date;"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Description;"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Time;"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"public class AssignTaskCommandSystemTest extends ClubBookSystemTest {"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"    public void assignTask() throws Exception {"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"        Model model \u003d getModel();"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"        Model modelBeforeAdding \u003d getModel();"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"        ObservableList\u003cMember\u003e memberObservableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"        String logInCommand \u003d LogInCommand.COMMAND_WORD + \" u/\" + memberObservableList.get(0).getMatricNumber().value"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"                + \" pw/password\";"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"        executeCommand(logInCommand);"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"        model \u003d getModel();"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"        modelBeforeAdding \u003d getModel();"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: add a task to a non-empty address book,"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"         * command with leading spaces and trailing spaces -\u003e added"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"         */"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"        String command \u003d \" \" + AssignTaskCommand.COMMAND_WORD + \" \" + TASK_DESCRIPTION_DESC_FOOD + \" \""},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"                + TASK_DATE_DESC_1 + \" \" + TASK_TIME_DESC_1 + \" \" + MATRIC_NUMBER_DESC_BENSON;"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d String.format(AssignTaskCommand.MESSAGE_SUCCESS, VALID_MATRIC_NUMBER_BENSON);"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(command, model, expectedMessage);"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case:undo assigning BUY_FOOD to Benson -\u003e BUY_FOOD deleted */"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"        expectedMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(command, modelBeforeAdding, expectedMessage);"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: redo removing BUY_FOOD from the list -\u003e BUY_FOOD re-added and re-assigned to Benson*/"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"        expectedMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(command, model, expectedMessage);"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: assign task with all fields same as another task in address book except task description -\u003e added */"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d \" \" + AssignTaskCommand.COMMAND_WORD + \" \" + TASK_DESCRIPTION_DESC_CONFETTI + \" \""},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"                + TASK_DATE_DESC_1 + \" \" + TASK_TIME_DESC_1 + \" \" + MATRIC_NUMBER_DESC_BENSON;"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"        expectedMessage \u003d String.format(AssignTaskCommand.MESSAGE_SUCCESS, VALID_MATRIC_NUMBER_BENSON);"},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(command, model, expectedMessage);"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: assign task with all fields same as another task in address book except task date -\u003e added */"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d \" \" + AssignTaskCommand.COMMAND_WORD + \" \" + TASK_DESCRIPTION_DESC_FOOD + \" \""},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"                + TASK_DATE_DESC_2 + \" \" + TASK_TIME_DESC_1 + \" \" + MATRIC_NUMBER_DESC_BENSON;"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"        expectedMessage \u003d String.format(AssignTaskCommand.MESSAGE_SUCCESS, VALID_MATRIC_NUMBER_BENSON);"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(command, model, expectedMessage);"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: assign task with all fields same as another task in address book except task time -\u003e added */"},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d \" \" + AssignTaskCommand.COMMAND_WORD + \" \" + TASK_DESCRIPTION_DESC_FOOD + \" \""},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":"                + TASK_DATE_DESC_1 + \" \" + TASK_TIME_DESC_2 + \" \" + MATRIC_NUMBER_DESC_BENSON;"},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"        expectedMessage \u003d String.format(AssignTaskCommand.MESSAGE_SUCCESS, VALID_MATRIC_NUMBER_BENSON);"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(command, model, expectedMessage);"},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: assign task with all fields same as another task in address book except task assignee -\u003e added */"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d \" \" + AssignTaskCommand.COMMAND_WORD + \" \" + TASK_DESCRIPTION_DESC_FOOD + \" \""},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":"                + TASK_DATE_DESC_2 + \" \" + TASK_TIME_DESC_1 + \" \" + MATRIC_NUMBER_DESC_CARL;"},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":"        expectedMessage \u003d String.format(AssignTaskCommand.MESSAGE_SUCCESS, VALID_MATRIC_NUMBER_CARL);"},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(command, model, expectedMessage);"},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":94,"author":{"gitID":"yash-chowdhary"},"content":"        /* --------------------------------- Perform invalid assigntask operations ------------------------------ */"},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: member not found -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d AssignTaskCommand.COMMAND_WORD + \" \""},{"lineNumber":97,"author":{"gitID":"yash-chowdhary"},"content":"                + TASK_DESCRIPTION_DESC_FOOD + \" \" + TASK_TIME_DESC_1 + \" \" + TASK_DATE_DESC_1 + \" \""},{"lineNumber":98,"author":{"gitID":"yash-chowdhary"},"content":"                + MATRIC_NUMBER_DESC_BOB;"},{"lineNumber":99,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, AssignTaskCommand.MESSAGE_MEMBER_NOT_FOUND);"},{"lineNumber":100,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":101,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d \" \" + AssignTaskCommand.COMMAND_WORD + \" \" + TASK_DESCRIPTION_DESC_FOOD + \" \""},{"lineNumber":102,"author":{"gitID":"yash-chowdhary"},"content":"                + TASK_DATE_DESC_1 + \" \" + TASK_TIME_DESC_1 + \" \" + MATRIC_NUMBER_DESC_BENSON;"},{"lineNumber":103,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, AssignTaskCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":104,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":105,"author":{"gitID":"yash-chowdhary"},"content":"        /* --------------------- Perform assigntask operations on the shown filtered list ----------------------- */"},{"lineNumber":106,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":107,"author":{"gitID":"yash-chowdhary"},"content":"        /* --------------------------------- Perform invalid assigntask operations ------------------------------ */"},{"lineNumber":108,"author":{"gitID":"yash-chowdhary"},"content":"        String logoutCommand \u003d \" \" + LogOutCommand.COMMAND_WORD;"},{"lineNumber":109,"author":{"gitID":"yash-chowdhary"},"content":"        executeCommand(logoutCommand);"},{"lineNumber":110,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":111,"author":{"gitID":"yash-chowdhary"},"content":"        // login Benson"},{"lineNumber":112,"author":{"gitID":"yash-chowdhary"},"content":"        logInCommand \u003d LogInCommand.COMMAND_WORD + \" u/\" + memberObservableList.get(1).getMatricNumber().value"},{"lineNumber":113,"author":{"gitID":"yash-chowdhary"},"content":"                + \" pw/password\";"},{"lineNumber":114,"author":{"gitID":"yash-chowdhary"},"content":"        executeCommand(logInCommand);"},{"lineNumber":115,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":116,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: add a task to a non-empty address book,"},{"lineNumber":117,"author":{"gitID":"yash-chowdhary"},"content":"         * command with leading spaces and trailing spaces -\u003e REJECTED because Benson is not an EXCO member."},{"lineNumber":118,"author":{"gitID":"yash-chowdhary"},"content":"         */"},{"lineNumber":119,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d \" \" + AssignTaskCommand.COMMAND_WORD + \" \" + TASK_DESCRIPTION_DESC_FOOD + \" \""},{"lineNumber":120,"author":{"gitID":"yash-chowdhary"},"content":"                + TASK_DATE_DESC_1 + \" \" + TASK_TIME_DESC_1 + \" \" + MATRIC_NUMBER_DESC_CARL;"},{"lineNumber":121,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":122,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, Messages.MESSAGE_REQUIRE_EXCO_LOG_IN);"},{"lineNumber":123,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":124,"author":{"gitID":"yash-chowdhary"},"content":"        logoutCommand \u003d \" \" + LogOutCommand.COMMAND_WORD;"},{"lineNumber":125,"author":{"gitID":"yash-chowdhary"},"content":"        executeCommand(logoutCommand);"},{"lineNumber":126,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":127,"author":{"gitID":"yash-chowdhary"},"content":"        // login Alice"},{"lineNumber":128,"author":{"gitID":"yash-chowdhary"},"content":"        logInCommand \u003d LogInCommand.COMMAND_WORD + \" u/\" + memberObservableList.get(0).getMatricNumber().value"},{"lineNumber":129,"author":{"gitID":"yash-chowdhary"},"content":"                + \" pw/password\";"},{"lineNumber":130,"author":{"gitID":"yash-chowdhary"},"content":"        executeCommand(logInCommand);"},{"lineNumber":131,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":132,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":133,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: missing description -\u003e rejected */"},{"lineNumber":134,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d AssignTaskCommand.COMMAND_WORD + \" \""},{"lineNumber":135,"author":{"gitID":"yash-chowdhary"},"content":"                + TASK_TIME_DESC_1 + \" \" + TASK_DATE_DESC_1 + \" \" + MATRIC_NUMBER_DESC_BENSON;"},{"lineNumber":136,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignTaskCommand.MESSAGE_USAGE));"},{"lineNumber":137,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":138,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: missing date -\u003e rejected */"},{"lineNumber":139,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d AssignTaskCommand.COMMAND_WORD + \" \""},{"lineNumber":140,"author":{"gitID":"yash-chowdhary"},"content":"                + TASK_TIME_DESC_1 + \" \" + TASK_DESCRIPTION_DESC_FOOD + \" \" + MATRIC_NUMBER_DESC_BENSON;"},{"lineNumber":141,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignTaskCommand.MESSAGE_USAGE));"},{"lineNumber":142,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":143,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: missing time -\u003e rejected */"},{"lineNumber":144,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d AssignTaskCommand.COMMAND_WORD + \" \""},{"lineNumber":145,"author":{"gitID":"yash-chowdhary"},"content":"                + TASK_DESCRIPTION_DESC_FOOD + \" \" + TASK_DATE_DESC_1 + \" \" + MATRIC_NUMBER_DESC_BENSON;"},{"lineNumber":146,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignTaskCommand.MESSAGE_USAGE));"},{"lineNumber":147,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":148,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: missing assignee -\u003e rejected */"},{"lineNumber":149,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d AssignTaskCommand.COMMAND_WORD + \" \""},{"lineNumber":150,"author":{"gitID":"yash-chowdhary"},"content":"                + TASK_TIME_DESC_1 + \" \" + TASK_DATE_DESC_1 + \" \" + TASK_DESCRIPTION_DESC_FOOD;"},{"lineNumber":151,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignTaskCommand.MESSAGE_USAGE));"},{"lineNumber":152,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":153,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: invalid command word -\u003e rejected */"},{"lineNumber":154,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d \"assignatask\" + \" \" + TASK_DESCRIPTION_DESC_FOOD + \" \""},{"lineNumber":155,"author":{"gitID":"yash-chowdhary"},"content":"                + TASK_TIME_DESC_1 + \" \" + TASK_DATE_DESC_1 + \" \" + MATRIC_NUMBER_DESC_BENSON;"},{"lineNumber":156,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":157,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":158,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: invalid description -\u003e rejected */"},{"lineNumber":159,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d AssignTaskCommand.COMMAND_WORD + \" \""},{"lineNumber":160,"author":{"gitID":"yash-chowdhary"},"content":"                + PREFIX_DESCRIPTION + EMPTY_STRING + \" \" + TASK_TIME_DESC_1 + \" \" + TASK_DATE_DESC_1 + \" \""},{"lineNumber":161,"author":{"gitID":"yash-chowdhary"},"content":"                + MATRIC_NUMBER_DESC_BENSON;"},{"lineNumber":162,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, Description.MESSAGE_DESCRIPTION_CONSTRAINTS);"},{"lineNumber":163,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":164,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: invalid date -\u003e rejected */"},{"lineNumber":165,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d AssignTaskCommand.COMMAND_WORD + \" \""},{"lineNumber":166,"author":{"gitID":"yash-chowdhary"},"content":"                + TASK_DESCRIPTION_DESC_FOOD + \" \" + TASK_TIME_DESC_1 + \" \" + INVALID_DATE_DESC + \" \""},{"lineNumber":167,"author":{"gitID":"yash-chowdhary"},"content":"                + MATRIC_NUMBER_DESC_BENSON;"},{"lineNumber":168,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, Date.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":169,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":170,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: invalid time -\u003e rejected */"},{"lineNumber":171,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d AssignTaskCommand.COMMAND_WORD + \" \""},{"lineNumber":172,"author":{"gitID":"yash-chowdhary"},"content":"                + TASK_DESCRIPTION_DESC_FOOD + \" \" + INVALID_TIME_DESC + \" \" + TASK_DATE_DESC_1 + \" \""},{"lineNumber":173,"author":{"gitID":"yash-chowdhary"},"content":"                + MATRIC_NUMBER_DESC_BENSON;"},{"lineNumber":174,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, Time.MESSAGE_TIME_CONSTRAINTS"},{"lineNumber":175,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":176,"author":{"gitID":"yash-chowdhary"},"content":"        );"},{"lineNumber":177,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":178,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: invalid matric number -\u003e rejected */"},{"lineNumber":179,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d AssignTaskCommand.COMMAND_WORD + \" \""},{"lineNumber":180,"author":{"gitID":"yash-chowdhary"},"content":"                + TASK_DESCRIPTION_DESC_FOOD + \" \" + TASK_TIME_DESC_1 + \" \" + TASK_DATE_DESC_1 + \" \""},{"lineNumber":181,"author":{"gitID":"yash-chowdhary"},"content":"                + INVALID_MATRIC_NUMBER_DESC;"},{"lineNumber":182,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, MatricNumber.MESSAGE_MATRIC_NUMBER_CONSTRAINTS);"},{"lineNumber":183,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":184,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":186,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"yash-chowdhary"},"content":"     * Executes the {@code AssignTaskCommand} that adds {@code toAdd} to the model and asserts that:\u003cbr\u003e"},{"lineNumber":188,"author":{"gitID":"yash-chowdhary"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":189,"author":{"gitID":"yash-chowdhary"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":190,"author":{"gitID":"yash-chowdhary"},"content":"     * 3. Result display box displays the success message of executing {@code AddTaskCommand} with details of"},{"lineNumber":191,"author":{"gitID":"yash-chowdhary"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":192,"author":{"gitID":"yash-chowdhary"},"content":"     * 4. {@code Model}, {@code Storage} and {@code TaskListPanel} equal to the corresponding components in"},{"lineNumber":193,"author":{"gitID":"yash-chowdhary"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":194,"author":{"gitID":"yash-chowdhary"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":195,"author":{"gitID":"yash-chowdhary"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":196,"author":{"gitID":"yash-chowdhary"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":197,"author":{"gitID":"yash-chowdhary"},"content":"     * {@code ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":198,"author":{"gitID":"yash-chowdhary"},"content":"     * @see ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":199,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"yash-chowdhary"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":201,"author":{"gitID":"yash-chowdhary"},"content":"        executeCommand(command);"},{"lineNumber":202,"author":{"gitID":"yash-chowdhary"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":203,"author":{"gitID":"yash-chowdhary"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":204,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":205,"author":{"gitID":"yash-chowdhary"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":206,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":208,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"yash-chowdhary"},"content":"     *Executes {@code command} and asserts that the:\u003cbr\u003e"},{"lineNumber":210,"author":{"gitID":"yash-chowdhary"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":211,"author":{"gitID":"yash-chowdhary"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":212,"author":{"gitID":"yash-chowdhary"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":213,"author":{"gitID":"yash-chowdhary"},"content":"     * 4. {@code Model}, {@code Storage} and {@code TaskListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":214,"author":{"gitID":"yash-chowdhary"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":215,"author":{"gitID":"yash-chowdhary"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":216,"author":{"gitID":"yash-chowdhary"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":217,"author":{"gitID":"yash-chowdhary"},"content":"     * @see ClubBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":218,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"yash-chowdhary"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":220,"author":{"gitID":"yash-chowdhary"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":221,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":222,"author":{"gitID":"yash-chowdhary"},"content":"        executeCommand(command);"},{"lineNumber":223,"author":{"gitID":"yash-chowdhary"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":224,"author":{"gitID":"yash-chowdhary"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":225,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":226,"author":{"gitID":"yash-chowdhary"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":227,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":228}},{"path":"src/test/java/seedu/club/logic/UndoRedoStackUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.UndoableCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Contains helper methods for testing {@code UndoRedoStack}."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class UndoRedoStackUtil {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"-"},"content":"     * Adds {@code undoElements} into {@code UndoRedoStack#undoStack} and adds {@code redoElements}"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * into {@code UndoRedoStack#redoStack}. The first element in both {@code undoElements} and {@code redoElements}"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * will be the bottommost element in the respective stack in {@code undoRedoStack}, while the last element will"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * be the topmost element."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static UndoRedoStack prepareStack(List\u003cUndoableCommand\u003e undoElements,"},{"lineNumber":19,"author":{"gitID":"-"},"content":"                                             List\u003cUndoableCommand\u003e redoElements) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        undoElements.forEach(undoRedoStack::push);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        Collections.reverse(redoElements);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        redoElements.forEach(undoRedoStack::push);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        redoElements.forEach(unused -\u003e undoRedoStack.popUndo());"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return undoRedoStack;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":2,"-":27}},{"path":"src/test/java/seedu/club/commons/events/ui/SendEmailRequestEventTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Body;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Client;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Subject;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"public class SendEmailRequestEventTest {"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"    public void testSendEmailRequestEvent() throws Exception {"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedRecipients \u003d \"abc@example.com,xyz@test.com,pqr@gmail.com\";"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"        Subject expectedSubject \u003d new Subject(Subject.TEST_SUBJECT_STRING);"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"        Body expectedBody \u003d new Body(Body.TEST_BODY_STRING);"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"        Client expectedClient \u003d new Client(Client.VALID_CLIENT_GMAIL);"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"        SendEmailRequestEvent sendEmailRequestEvent \u003d new SendEmailRequestEvent(expectedRecipients,"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"                expectedSubject, expectedBody, expectedClient);"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(sendEmailRequestEvent.getRecipients().equals(expectedRecipients));"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(sendEmailRequestEvent.getSubject().equals(expectedSubject));"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(sendEmailRequestEvent.getBody().equals(expectedBody));"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(sendEmailRequestEvent.getClient().equals(expectedClient));"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":24,"-":4}},{"path":"src/test/java/seedu/club/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ClubBook;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.storage.XmlAdaptedMember;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.storage.XmlSerializableClubBook;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.ClubBookBuilder;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.MemberBuilder;"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validClubBook.xml\");"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"    private static final File MISSING_MEMBER_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingMemberField.xml\");"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"    private static final File INVALID_MEMBER_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidMemberField.xml\");"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"    private static final File VALID_MEMBER_FILE \u003d new File(TEST_DATA_FOLDER + \"validMember.xml\");"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempClubBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final String VALID_MATRIC_NUMBER \u003d \"A1234567H\";"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"    private static final String VALID_GROUP \u003d \"logistics\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String VALID_USERNAME \u003d \"HansMuster\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final String VALID_PASSWORD \u003d \"password\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"        XmlUtil.getDataFromFile(null, ClubBook.class);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, ClubBook.class);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":71,"author":{"gitID":"amrut-prabhu"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, ClubBook.class);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":76,"author":{"gitID":"amrut-prabhu"},"content":"        ClubBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableClubBook.class).toModelType();"},{"lineNumber":77,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(9, dataFromFile.getMemberList().size());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"amrut-prabhu"},"content":"    public void xmlAdaptedMemberFromFile_fileWithMissingMemberField_validResult() throws Exception {"},{"lineNumber":83,"author":{"gitID":"amrut-prabhu"},"content":"        XmlAdaptedMember actualMember \u003d XmlUtil.getDataFromFile("},{"lineNumber":84,"author":{"gitID":"amrut-prabhu"},"content":"                MISSING_MEMBER_FIELD_FILE, XmlAdaptedMemberWithRootElement.class);"},{"lineNumber":85,"author":{"gitID":"amrut-prabhu"},"content":"        XmlAdaptedMember expectedMember \u003d new XmlAdaptedMember("},{"lineNumber":86,"author":{"gitID":"-"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_MATRIC_NUMBER, VALID_GROUP, VALID_TAGS);"},{"lineNumber":87,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(expectedMember, actualMember);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"amrut-prabhu"},"content":"    public void xmlAdaptedMemberFromFile_fileWithInvalidMemberField_validResult() throws Exception {"},{"lineNumber":92,"author":{"gitID":"amrut-prabhu"},"content":"        XmlAdaptedMember actualMember \u003d XmlUtil.getDataFromFile("},{"lineNumber":93,"author":{"gitID":"amrut-prabhu"},"content":"                INVALID_MEMBER_FIELD_FILE, XmlAdaptedMemberWithRootElement.class);"},{"lineNumber":94,"author":{"gitID":"amrut-prabhu"},"content":"        XmlAdaptedMember expectedMember \u003d new XmlAdaptedMember("},{"lineNumber":95,"author":{"gitID":"-"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_MATRIC_NUMBER, VALID_GROUP, VALID_TAGS);"},{"lineNumber":96,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(expectedMember, actualMember);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"amrut-prabhu"},"content":"    public void xmlAdaptedMemberFromFile_fileWithValidMember_validResult() throws Exception {"},{"lineNumber":101,"author":{"gitID":"amrut-prabhu"},"content":"        XmlAdaptedMember actualMember \u003d XmlUtil.getDataFromFile("},{"lineNumber":102,"author":{"gitID":"amrut-prabhu"},"content":"                VALID_MEMBER_FILE, XmlAdaptedMemberWithRootElement.class);"},{"lineNumber":103,"author":{"gitID":"amrut-prabhu"},"content":"        XmlAdaptedMember expectedMember \u003d new XmlAdaptedMember("},{"lineNumber":104,"author":{"gitID":"-"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_MATRIC_NUMBER, VALID_GROUP,"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                VALID_TAGS);"},{"lineNumber":106,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(expectedMember, actualMember);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":112,"author":{"gitID":"amrut-prabhu"},"content":"        XmlUtil.saveDataToFile(null, new ClubBook());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":124,"author":{"gitID":"amrut-prabhu"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new ClubBook());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":130,"author":{"gitID":"amrut-prabhu"},"content":"        XmlSerializableClubBook dataToWrite \u003d new XmlSerializableClubBook(new ClubBook());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":132,"author":{"gitID":"amrut-prabhu"},"content":"        XmlSerializableClubBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableClubBook.class);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"amrut-prabhu"},"content":"        ClubBookBuilder builder \u003d new ClubBookBuilder(new ClubBook());"},{"lineNumber":136,"author":{"gitID":"amrut-prabhu"},"content":"        dataToWrite \u003d new XmlSerializableClubBook("},{"lineNumber":137,"author":{"gitID":"amrut-prabhu"},"content":"                builder.withMember(new MemberBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":140,"author":{"gitID":"amrut-prabhu"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableClubBook.class);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"amrut-prabhu"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedMember}"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"amrut-prabhu"},"content":"    @XmlRootElement(name \u003d \"member\")"},{"lineNumber":149,"author":{"gitID":"amrut-prabhu"},"content":"    private static class XmlAdaptedMemberWithRootElement extends XmlAdaptedMember {}"},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":1,"amrut-prabhu":44,"yash-chowdhary":1,"-":104}},{"path":"src/test/java/seedu/club/logic/parser/DeleteTagCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.DeleteTagCommand;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":" * outside of the DeleteTagCommand code. For example, inputs \"friend\" and \"friend 1\" take the"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":" * same path through the DeleteTagCommand, and therefore we test only one of them."},{"lineNumber":17,"author":{"gitID":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"public class DeleteTagCommandParserTest {"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"    private DeleteTagCommandParser parser \u003d new DeleteTagCommandParser();"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"    public void parse_validArgs_returnsDeleteTagCommand() {"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"        assertParseSuccess(parser, \" t/friends\", new DeleteTagCommand(new Tag(VALID_TAG_FRIEND)));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTagCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":23,"-":10}},{"path":"src/test/java/seedu/club/logic/parser/DeleteTaskCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.DeleteTaskCommand;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"public class DeleteTaskCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"    private DeleteTaskCommandParser parser \u003d new DeleteTaskCommandParser();"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"    public void parse_validArgs_returnsDeleteTaskCommand() {"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseSuccess(parser, \"1\", new DeleteTaskCommand(INDEX_FIRST_TASK));"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseSuccess(parser, \"2\", new DeleteTaskCommand(INDEX_SECOND_TASK));"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, \" a\","},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, \" one\","},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":29}},{"path":"src/test/java/seedu/club/logic/parser/CommandParserTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.Command;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Contains helper methods for testing command parsers."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class CommandParserTestUtil {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * equals to {@code expectedCommand}."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            Command command \u003d parser.parse(userInput);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            assertEquals(expectedCommand, command);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * equals to {@code expectedMessage}."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            parser.parse(userInput);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, pe.getMessage());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":3,"-":36}},{"path":"src/test/java/seedu/club/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.getTypicalClubBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.CommandResult;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.HistoryCommand;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.ListCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.club.logic.commands.LogInCommand;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private ObservableList\u003cMember\u003e observableList;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Member member;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void setUp() throws CommandException {"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"        model \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"        expectedModel \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        observableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        member \u003d observableList.get(0);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        LogInCommand command \u003d new LogInCommand(member.getCredentials().getUsername(),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                member.getCredentials().getPassword());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        command.execute();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        command.setData(expectedModel, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        command.execute();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"amrut-prabhu"},"content":"    public void getFilteredMemberList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":75,"author":{"gitID":"amrut-prabhu"},"content":"        logic.getFilteredMemberList().remove(0);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"MuhdNurKamal"},"content":"    public void getFilteredPoll_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":81,"author":{"gitID":"MuhdNurKamal"},"content":"        logic.getFilteredPollList().remove(0);"},{"lineNumber":82,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":121,"author":{"gitID":"amrut-prabhu"},"content":"     *      - {@code expectedModel}\u0027s club book was saved to the storage file."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":146,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":5,"amrut-prabhu":18,"-":129}},{"path":"src/test/java/seedu/club/logic/parser/SelectCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_FIRST_MEMBER;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.SelectCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Test scope: similar to {@code DeleteCommandParserTest}."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * @see DeleteCommandParserTest"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SelectCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private SelectCommandParser parser \u003d new SelectCommandParser();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsSelectCommand() {"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_MEMBER));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":7,"-":22}},{"path":"src/test/java/seedu/club/logic/parser/ArgumentTokenizerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ArgumentTokenizerTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final Prefix pSlash \u003d new Prefix(\"p/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final Prefix dashT \u003d new Prefix(\"-t\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private final Prefix hatQ \u003d new Prefix(\"^Q\");"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void tokenize_emptyArgsString_noValues() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String argsString \u003d \"  \";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // Verify the last value is returned"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // Verify the number of values returned is as expected"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // Verify all values returned are as expected and in order"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void tokenize_noPrefixes_allTakenAsPreamble() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void tokenize_oneArgument() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // Preamble present"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        String argsString \u003d \"  Some preamble string p/ Argument value \";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // No preamble"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        argsString \u003d \" p/   Argument value \";"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void tokenize_multipleArguments() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // Only two arguments are present"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // All three arguments are present"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"111\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* Also covers: Reusing of the tokenizer multiple times */"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        argsString \u003d \"\";"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /** Also covers: testing for prefixes not specified as a prefix **/"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // Prefixes not previously given to the tokenizer should not return any values"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        argsString \u003d unknownPrefix + \"some value\";"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, unknownPrefix);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void tokenize_multipleArgumentsWithRepeats() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // Two arguments repeated, some have empty values"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void tokenize_multipleArgumentsJoined() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Prefix aaa \u003d new Prefix(\"aaa\");"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertEquals(aaa, aaa);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertEquals(aaa, new Prefix(\"aaa\"));"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertNotEquals(aaa, \"aaa\");"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertNotEquals(aaa, new Prefix(\"aab\"));"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":149}},{"path":"src/test/java/seedu/club/logic/parser/VoteCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.VoteCommand;"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"public class VoteCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, VoteCommand.MESSAGE_USAGE);"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"    private VoteCommandParser parser \u003d new VoteCommandParser();"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parse_twoIndicesPresent_success() {"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseSuccess(parser, \"1 2\","},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"                new VoteCommand(Index.fromOneBased(1), Index.fromOneBased(2)));"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseSuccess(parser, \"2 99\","},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"                new VoteCommand(Index.fromOneBased(2), Index.fromOneBased(99)));"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseSuccess(parser, \"10 1\","},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"                new VoteCommand(Index.fromOneBased(10), Index.fromOneBased(1)));"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parse_negativeIndices_failure() {"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, \"-1 2\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, \"1 -2\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, \"-1 -2\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parse_oneIndexMissing_failure() {"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, \"2\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, \"1 \", MESSAGE_INVALID_FORMAT);"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, \"  8  \", MESSAGE_INVALID_FORMAT);"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parse_moreThanTwoIndices_failure() {"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, \"2 2  22  11 1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, \"2  3   1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, \"2 1 11\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":56}},{"path":"src/test/java/seedu/club/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_MATRIC_NUMBER_DESC;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.MATRIC_NUMBER_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.MATRIC_NUMBER_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_AMY;"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_BOB;"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_FIRST_MEMBER;"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_SECOND_MEMBER;"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_THIRD_MEMBER;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.EditCommand;"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.EditCommand.EditMemberDescriptor;"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Email;"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Name;"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Phone;"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.EditMemberDescriptorBuilder;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"},{"lineNumber":90,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, \"1\" + INVALID_MATRIC_NUMBER_DESC,"},{"lineNumber":91,"author":{"gitID":"amrut-prabhu"},"content":"                MatricNumber.MESSAGE_MATRIC_NUMBER_CONSTRAINTS); // invalid club"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"amrut-prabhu"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code member} being edited,"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":108,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC"},{"lineNumber":109,"author":{"gitID":"MuhdNurKamal"},"content":"                        + VALID_MATRIC_NUMBER_AMY + VALID_PHONE_AMY, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":114,"author":{"gitID":"amrut-prabhu"},"content":"        Index targetIndex \u003d INDEX_SECOND_MEMBER;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":116,"author":{"gitID":"MuhdNurKamal"},"content":"                + EMAIL_DESC_AMY + MATRIC_NUMBER_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"amrut-prabhu"},"content":"        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":119,"author":{"gitID":"MuhdNurKamal"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withMatricNumber(VALID_MATRIC_NUMBER_AMY)"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":128,"author":{"gitID":"amrut-prabhu"},"content":"        Index targetIndex \u003d INDEX_FIRST_MEMBER;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"amrut-prabhu"},"content":"        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":141,"author":{"gitID":"amrut-prabhu"},"content":"        Index targetIndex \u003d INDEX_THIRD_MEMBER;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":143,"author":{"gitID":"amrut-prabhu"},"content":"        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":149,"author":{"gitID":"amrut-prabhu"},"content":"        descriptor \u003d new EditMemberDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // email"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":155,"author":{"gitID":"amrut-prabhu"},"content":"        descriptor \u003d new EditMemberDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"amrut-prabhu"},"content":"        // club"},{"lineNumber":160,"author":{"gitID":"MuhdNurKamal"},"content":"        userInput \u003d targetIndex.getOneBased() + MATRIC_NUMBER_DESC_AMY;"},{"lineNumber":161,"author":{"gitID":"amrut-prabhu"},"content":"        descriptor \u003d new EditMemberDescriptorBuilder().withMatricNumber(VALID_MATRIC_NUMBER_AMY).build();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":167,"author":{"gitID":"amrut-prabhu"},"content":"        descriptor \u003d new EditMemberDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":174,"author":{"gitID":"amrut-prabhu"},"content":"        Index targetIndex \u003d INDEX_FIRST_MEMBER;"},{"lineNumber":175,"author":{"gitID":"MuhdNurKamal"},"content":"        String userInput \u003d targetIndex.getOneBased()  + PHONE_DESC_AMY + MATRIC_NUMBER_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":176,"author":{"gitID":"MuhdNurKamal"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + MATRIC_NUMBER_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":177,"author":{"gitID":"MuhdNurKamal"},"content":"                + PHONE_DESC_BOB + MATRIC_NUMBER_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"amrut-prabhu"},"content":"        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":180,"author":{"gitID":"MuhdNurKamal"},"content":"                .withEmail(VALID_EMAIL_BOB).withMatricNumber(VALID_MATRIC_NUMBER_BOB)"},{"lineNumber":181,"author":{"gitID":"MuhdNurKamal"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                .build();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":191,"author":{"gitID":"amrut-prabhu"},"content":"        Index targetIndex \u003d INDEX_FIRST_MEMBER;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":193,"author":{"gitID":"amrut-prabhu"},"content":"        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":198,"author":{"gitID":"MuhdNurKamal"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + MATRIC_NUMBER_DESC_BOB"},{"lineNumber":199,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":200,"author":{"gitID":"amrut-prabhu"},"content":"        descriptor \u003d new EditMemberDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":201,"author":{"gitID":"MuhdNurKamal"},"content":"                .withMatricNumber(VALID_MATRIC_NUMBER_BOB).build();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":208,"author":{"gitID":"amrut-prabhu"},"content":"        Index targetIndex \u003d INDEX_THIRD_MEMBER;"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"amrut-prabhu"},"content":"        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder().withTags().build();"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":217,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":218,"author":{"gitID":"MuhdNurKamal"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"},{"lineNumber":219,"author":{"gitID":"MuhdNurKamal"},"content":"     * equals to {@code expectedMessage}."},{"lineNumber":220,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":221,"author":{"gitID":"MuhdNurKamal"},"content":"    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"},{"lineNumber":222,"author":{"gitID":"MuhdNurKamal"},"content":"        try {"},{"lineNumber":223,"author":{"gitID":"MuhdNurKamal"},"content":"            parser.parse(userInput);"},{"lineNumber":224,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":225,"author":{"gitID":"MuhdNurKamal"},"content":"        } catch (ParseException pe) {"},{"lineNumber":226,"author":{"gitID":"MuhdNurKamal"},"content":"            assertEquals(expectedMessage, pe.getMessage());"},{"lineNumber":227,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":28,"amrut-prabhu":62,"-":139}},{"path":"src/test/java/seedu/club/logic/parser/ChangeTaskStatusCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.ChangeTaskStatusCommand;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Status;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"public class ChangeTaskStatusCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"    private ChangeTaskStatusCommandParser parser \u003d new ChangeTaskStatusCommandParser();"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"    public void parse_validArgs_returnsChangeTaskStatusCommand() {"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseSuccess(parser, \" 1 \""},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"                        + \" \" + PREFIX_STATUS + Status.IN_PROGRESS_STATUS,"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"                new ChangeTaskStatusCommand(INDEX_FIRST_TASK, new Status(Status.IN_PROGRESS_STATUS)));"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseSuccess(parser, \" 2 \""},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"                        + \" \" + PREFIX_STATUS + Status.COMPLETED_STATUS,"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"                new ChangeTaskStatusCommand(INDEX_SECOND_TASK, new Status(Status.COMPLETED_STATUS)));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, \" a\","},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeTaskStatusCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, \" one\","},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeTaskStatusCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"    public void parse_invalidIndex_throwsParseException() {"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, \" -1\" + PREFIX_STATUS + Status.COMPLETED_STATUS,"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeTaskStatusCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, \" -1\" + PREFIX_STATUS + Status.IN_PROGRESS_STATUS,"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeTaskStatusCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"    public void parse_invalidStatus_throwsParseException() {"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"        // no such status"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, \" 1 st/invalid status\","},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"                Status.MESSAGE_INVALID_STATUS);"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"        // no space between the words"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, \" 1 st/inprogress\","},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"                Status.MESSAGE_INVALID_STATUS);"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":3,"yash-chowdhary":46,"-":4}},{"path":"src/test/java/seedu/club/logic/parser/FindCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.FindCommand;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.FieldContainsKeywordsPredicate;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parse_findNameValidArgs_returnsFindCommand() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"                new FindCommand(new FieldContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"), null));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parse_findPhoneValidArgs_returnsFindCommand() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"                new FindCommand(new FieldContainsKeywordsPredicate(Arrays.asList(\"123\", \"321\"), PREFIX_PHONE));"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseSuccess(parser, PREFIX_PHONE + \" 123 321\", expectedFindCommand);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseSuccess(parser, PREFIX_PHONE + \" \\n 123 \\n \\t 321  \\t\", expectedFindCommand);"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parse_findEmailValidArgs_returnsFindCommand() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"                new FindCommand(new FieldContainsKeywordsPredicate(Arrays.asList(\"lalala\", \"blablabla\"), PREFIX_EMAIL));"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseSuccess(parser, PREFIX_EMAIL + \" lalala blablabla\", expectedFindCommand);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseSuccess(parser, PREFIX_EMAIL + \" \\n lalala \\n \\t blablabla  \\t\", expectedFindCommand);"},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parse_findMatricNumberValidArgs_returnsFindCommand() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":"                new FindCommand(new FieldContainsKeywordsPredicate(Arrays.asList(\"123\", \"321\"), PREFIX_MATRIC_NUMBER));"},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseSuccess(parser, PREFIX_MATRIC_NUMBER + \" 123 321\", expectedFindCommand);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseSuccess(parser, PREFIX_MATRIC_NUMBER + \" \\n 123 \\n \\t 321  \\t\", expectedFindCommand);"},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parse_findGroupValidArgs_returnsFindCommand() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":76,"author":{"gitID":"MuhdNurKamal"},"content":"                new FindCommand(new FieldContainsKeywordsPredicate(Arrays.asList(\"klan\", \"vampyr\"), PREFIX_GROUP));"},{"lineNumber":77,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseSuccess(parser, PREFIX_GROUP + \" klan vampyr\", expectedFindCommand);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":80,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseSuccess(parser, PREFIX_GROUP + \" \\n klan \\n \\t vampyr  \\t\", expectedFindCommand);"},{"lineNumber":81,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":83,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parse_findTagValidArgs_returnsFindCommand() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":87,"author":{"gitID":"MuhdNurKamal"},"content":"                new FindCommand(new FieldContainsKeywordsPredicate(Arrays.asList(\"123\", \"321\"), PREFIX_TAG));"},{"lineNumber":88,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseSuccess(parser, PREFIX_TAG + \" 123 321\", expectedFindCommand);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":91,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseSuccess(parser, PREFIX_TAG + \" \\n 123 \\n \\t 321  \\t\", expectedFindCommand);"},{"lineNumber":92,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":94,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parse_findAllValidArgs_returnsFindCommand() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":98,"author":{"gitID":"MuhdNurKamal"},"content":"                new FindCommand(new FieldContainsKeywordsPredicate(Arrays.asList(\"123\", \"321\"), null));"},{"lineNumber":99,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseSuccess(parser,  \" 123 321\", expectedFindCommand);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":102,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseSuccess(parser, \" \\n 123 \\n \\t 321  \\t\", expectedFindCommand);"},{"lineNumber":103,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":48,"amrut-prabhu":6,"-":50}},{"path":"src/test/java/seedu/club/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_FIRST_MEMBER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Body;"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Client;"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Subject;"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Email;"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Name;"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Phone;"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.Assert;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final String INVALID_MATRIC_NUMBER \u003d \"1234567\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"    private static final String INVALID_CLIENT \u003d \"yahoo\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final String VALID_MATRIC_NUMBER \u003d \"A1234567Y\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"    private static final String VALID_CLIENT \u003d \"gmail\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(INDEX_FIRST_MEMBER, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":71,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(INDEX_FIRST_MEMBER, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((Optional\u003cString\u003e) null));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(Optional.of(INVALID_PHONE)));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(VALID_PHONE)));"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(phoneWithWhitespace)));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parseMatricNumber_null_throwsNullPointerException() {"},{"lineNumber":140,"author":{"gitID":"MuhdNurKamal"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMatricNumber((String) null));"},{"lineNumber":141,"author":{"gitID":"MuhdNurKamal"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMatricNumber((Optional\u003cString\u003e) null));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parseMatricNumber_invalidValue_throwsIllegalValueException() {"},{"lineNumber":146,"author":{"gitID":"MuhdNurKamal"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseMatricNumber(INVALID_MATRIC_NUMBER));"},{"lineNumber":147,"author":{"gitID":"MuhdNurKamal"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil"},{"lineNumber":148,"author":{"gitID":"MuhdNurKamal"},"content":"                .parseMatricNumber(Optional.of(INVALID_MATRIC_NUMBER)));"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parseMatricNumber_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":153,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(ParserUtil.parseMatricNumber(Optional.empty()).isPresent());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parseMatricNumber_validValueWithoutWhitespace_returnsMatricNumber() throws Exception {"},{"lineNumber":158,"author":{"gitID":"MuhdNurKamal"},"content":"        MatricNumber expectedMatricNumber \u003d new MatricNumber(VALID_MATRIC_NUMBER);"},{"lineNumber":159,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(expectedMatricNumber, ParserUtil.parseMatricNumber(VALID_MATRIC_NUMBER));"},{"lineNumber":160,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(Optional.of(expectedMatricNumber), ParserUtil.parseMatricNumber(Optional.of(VALID_MATRIC_NUMBER)));"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":164,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parseMatricNumber_validValueWithWhitespace_returnsTrimmedMatricNumber() throws Exception {"},{"lineNumber":165,"author":{"gitID":"MuhdNurKamal"},"content":"        String matricNumberWithWhitespace \u003d WHITESPACE + VALID_MATRIC_NUMBER + WHITESPACE;"},{"lineNumber":166,"author":{"gitID":"MuhdNurKamal"},"content":"        MatricNumber expectedMatricNumber \u003d new MatricNumber(VALID_MATRIC_NUMBER);"},{"lineNumber":167,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(expectedMatricNumber, ParserUtil.parseMatricNumber(matricNumberWithWhitespace));"},{"lineNumber":168,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(Optional.of(expectedMatricNumber), ParserUtil"},{"lineNumber":169,"author":{"gitID":"MuhdNurKamal"},"content":"                .parseMatricNumber(Optional.of(matricNumberWithWhitespace)));"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((Optional\u003cString\u003e) null));"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    public void parseEmail_invalidValue_throwsIllegalValueException() {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(Optional.of(INVALID_EMAIL)));"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(VALID_EMAIL)));"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(emailWithWhitespace)));"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":205,"author":{"gitID":"yash-chowdhary"},"content":"    public void parseSubject_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":206,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(ParserUtil.parseSubject(Optional.empty()).isPresent());"},{"lineNumber":207,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":209,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":210,"author":{"gitID":"yash-chowdhary"},"content":"    public void parseSubject_validValue_returnsTrimmedSubject() throws Exception {"},{"lineNumber":211,"author":{"gitID":"yash-chowdhary"},"content":"        String validSubject \u003d WHITESPACE + Subject.TEST_SUBJECT_STRING + WHITESPACE;"},{"lineNumber":212,"author":{"gitID":"yash-chowdhary"},"content":"        Subject expectedSubject \u003d new Subject(Subject.TEST_SUBJECT_STRING);"},{"lineNumber":213,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(expectedSubject, ParserUtil.parseSubject(validSubject));"},{"lineNumber":214,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(Optional.of(expectedSubject), ParserUtil.parseSubject(Optional.of(validSubject)));"},{"lineNumber":215,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":217,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":218,"author":{"gitID":"yash-chowdhary"},"content":"    public void parseSubject_null_throwsNullPointerException() throws Exception {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":220,"author":{"gitID":"yash-chowdhary"},"content":"        ParserUtil.parseSubject((String) null);"},{"lineNumber":221,"author":{"gitID":"yash-chowdhary"},"content":"        ParserUtil.parseSubject((Optional\u003cString\u003e) null);"},{"lineNumber":222,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":224,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":225,"author":{"gitID":"yash-chowdhary"},"content":"    public void parseBody_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":226,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(ParserUtil.parseBody(Optional.empty()).isPresent());"},{"lineNumber":227,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":229,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":230,"author":{"gitID":"yash-chowdhary"},"content":"    public void parseBody_validValue_returnsTrimmedBody() throws Exception {"},{"lineNumber":231,"author":{"gitID":"yash-chowdhary"},"content":"        String validBody \u003d WHITESPACE + Body.TEST_BODY_STRING + WHITESPACE;"},{"lineNumber":232,"author":{"gitID":"yash-chowdhary"},"content":"        Body expectedBody \u003d new Body(Body.TEST_BODY_STRING);"},{"lineNumber":233,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(expectedBody, ParserUtil.parseBody(validBody));"},{"lineNumber":234,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(Optional.of(expectedBody), ParserUtil.parseBody(Optional.of(validBody)));"},{"lineNumber":235,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":237,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":238,"author":{"gitID":"yash-chowdhary"},"content":"    public void parseBody_null_throwsNullPointerException() throws Exception {"},{"lineNumber":239,"author":{"gitID":"yash-chowdhary"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseBody((String) null));"},{"lineNumber":240,"author":{"gitID":"yash-chowdhary"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseBody((Optional\u003cString\u003e) null));"},{"lineNumber":241,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":243,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":244,"author":{"gitID":"yash-chowdhary"},"content":"    public void parseClient_null_throwsNullPointerException() throws Exception {"},{"lineNumber":245,"author":{"gitID":"yash-chowdhary"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseClient((String) null));"},{"lineNumber":246,"author":{"gitID":"yash-chowdhary"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseClient((Optional\u003cString\u003e) null));"},{"lineNumber":247,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":249,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":250,"author":{"gitID":"yash-chowdhary"},"content":"    public void parseClient_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":251,"author":{"gitID":"yash-chowdhary"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseClient(INVALID_CLIENT));"},{"lineNumber":252,"author":{"gitID":"yash-chowdhary"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(Optional.of(INVALID_CLIENT)));"},{"lineNumber":253,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":255,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":256,"author":{"gitID":"yash-chowdhary"},"content":"    public void parseClient_validValue_returnsTrimmedClient() throws Exception {"},{"lineNumber":257,"author":{"gitID":"yash-chowdhary"},"content":"        String validClient \u003d WHITESPACE + VALID_CLIENT + WHITESPACE;"},{"lineNumber":258,"author":{"gitID":"yash-chowdhary"},"content":"        Client expectedClient \u003d new Client(Client.VALID_CLIENT_GMAIL);"},{"lineNumber":259,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(expectedClient, ParserUtil.parseClient(validClient));"},{"lineNumber":260,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(Optional.of(expectedClient), ParserUtil.parseClient(Optional.of(validClient)));"},{"lineNumber":261,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    public void parseTag_null_throwsNullPointerException() throws Exception {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(null);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(INVALID_TAG);"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":298,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":301,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":306,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":311,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":312,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":21,"amrut-prabhu":12,"yash-chowdhary":63,"-":216}},{"path":"src/test/java/seedu/club/logic/parser/ExportCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"//@@author amrut-prabhu"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.ExportCommand;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"public class ExportCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"    @Rule"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"    private ExportCommandParser parser \u003d new ExportCommandParser();"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"    private String currentDirectoryPath \u003d \".\";"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"    private File currentDirectory \u003d new File(currentDirectoryPath);"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"    public void parse_validArgs_returnsExportCommand() throws Exception {"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"        File exportFile \u003d temporaryFolder.newFile(\"actual.csv\");"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"        String expectedExportFilePath \u003d exportFile.getAbsolutePath();"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"        File expectedExportFile \u003d new File(expectedExportFilePath);"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"        assertParseSuccess(parser, expectedExportFile.getAbsolutePath(), new ExportCommand(expectedExportFile));"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"        //non absolute file path"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"        assertParseFailure(parser, \"data/exportTestFile.csv\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"                ExportCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"        //invalid file path"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"        assertParseFailure(parser, currentDirectory.getAbsolutePath() + \"/data/\","},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"        //invalid file type"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"        assertParseFailure(parser, currentDirectory.getAbsolutePath() + \"/data/exportTestFile.txt\","},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":48}},{"path":"src/test/java/seedu/club/logic/parser/DeleteCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_FIRST_MEMBER;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.DeleteCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitID":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class DeleteCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_MEMBER));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":7,"-":25}},{"path":"src/test/java/seedu/club/logic/parser/DeletePollCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_FIRST_POLL;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.DeletePollCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":" * outside of the DeletePollCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":" * same path through the DeletePollCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitID":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"public class DeletePollCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"    private DeletePollCommandParser parser \u003d new DeletePollCommandParser();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseSuccess(parser, \"1\", new DeletePollCommand(INDEX_FIRST_POLL));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePollCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":14,"amrut-prabhu":4,"-":14}},{"path":"src/test/java/seedu/club/logic/parser/AddTaskCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TASK_DATE_DESC_1;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TASK_DESCRIPTION_DESC_FOOD;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TASK_TIME_DESC_1;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TASK_DATE_1;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TASK_DESCRIPTION_CONFETTI;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TASK_DESCRIPTION_FOOD;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TASK_STATUS_TO_BEGIN;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TASK_TIME_1;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.AddTaskCommand;"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.testutil.TaskBuilder;"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"public class AddTaskCommandParserTest {"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"    private static final String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"            AddTaskCommand.MESSAGE_USAGE);"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"    private AddTaskCommandParser parser \u003d new AddTaskCommandParser();"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"        Task expectedTask \u003d new TaskBuilder()"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"                .withDescription(VALID_TASK_DESCRIPTION_FOOD)"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"                .withDate(VALID_TASK_DATE_1)"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"                .withTime(VALID_TASK_TIME_1)"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"                .withAssignor(\"\")"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"                .withAssignee(\"\")"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"                .withStatus(VALID_TASK_STATUS_TO_BEGIN)"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"                .build();"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseSuccess(parser, \" \" + TASK_DESCRIPTION_DESC_FOOD + TASK_DATE_DESC_1"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"                + TASK_TIME_DESC_1,"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"                new AddTaskCommand(expectedTask));"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"    public void parse_fieldsMissing_failure() {"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, TASK_DESCRIPTION_DESC_FOOD + TASK_DATE_DESC_1"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"                + VALID_TASK_TIME_1, expectedMessage);"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, TASK_DATE_DESC_1 + TASK_TIME_DESC_1 + VALID_TASK_DESCRIPTION_CONFETTI,"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"                expectedMessage);"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser,  TASK_TIME_DESC_1 + TASK_DESCRIPTION_DESC_FOOD + VALID_TASK_DATE_1,"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"                expectedMessage);"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, TASK_DATE_DESC_1 + VALID_TASK_DATE_1, expectedMessage);"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, VALID_TASK_DESCRIPTION_FOOD + VALID_TASK_DATE_1, expectedMessage);"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, VALID_TASK_DESCRIPTION_FOOD + VALID_TASK_TIME_1, expectedMessage);"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":61}},{"path":"src/test/java/seedu/club/logic/parser/AddPollCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.ANSWER_DESC_FOUR;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.ANSWER_DESC_ONE;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.ANSWER_DESC_THREE;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.ANSWER_DESC_TWO;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_ANSWER_DESC;"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_QUESTION_DESC;"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.QUESTION_DESC_LIFE;"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.QUESTION_DESC_LOVE;"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_ANSWER_FOUR;"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_ANSWER_ONE;"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_ANSWER_THREE;"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_ANSWER_TWO;"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_QUESTION_LIFE;"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_QUESTION_LOVE;"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"import org.junit.Test;"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.AddPollCommand;"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Answer;"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Question;"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.testutil.PollBuilder;"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"public class AddPollCommandParserTest {"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"    private AddPollCommandParser parser \u003d new AddPollCommandParser();"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"        Poll expectedPoll \u003d new PollBuilder().withQuestion(VALID_QUESTION_LIFE)"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"                .withAnswers(VALID_ANSWER_ONE, VALID_ANSWER_THREE).withNoPollessMatricNumbers().build();"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"        // whitespace only preamble"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseSuccess(parser, QUESTION_DESC_LIFE + ANSWER_DESC_ONE + ANSWER_DESC_THREE,"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"                new AddPollCommand(expectedPoll));"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"        // multiple questions - last question accepted"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseSuccess(parser, QUESTION_DESC_LOVE + QUESTION_DESC_LIFE"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"                + ANSWER_DESC_ONE + ANSWER_DESC_THREE, new AddPollCommand(expectedPoll));"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"        // multiple answers - all accepted"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"        Poll expectedPollMultipleAnswers \u003d new PollBuilder().withQuestion(VALID_QUESTION_LOVE)"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"                .withAnswers(VALID_ANSWER_ONE, VALID_ANSWER_TWO, VALID_ANSWER_THREE, VALID_ANSWER_FOUR)"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"                .withNoPollessMatricNumbers().build();"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseSuccess(parser, QUESTION_DESC_LOVE + ANSWER_DESC_ONE + ANSWER_DESC_TWO"},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"                + ANSWER_DESC_THREE + ANSWER_DESC_FOUR, new AddPollCommand(expectedPollMultipleAnswers));"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPollCommand.MESSAGE_USAGE);"},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":"        // missing question prefix"},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, VALID_QUESTION_LIFE + ANSWER_DESC_ONE + ANSWER_DESC_TWO,"},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":"                expectedMessage);"},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":"        // missing answer prefix"},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, QUESTION_DESC_LOVE + VALID_ANSWER_TWO,"},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":"                expectedMessage);"},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"        // invalid question"},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, INVALID_QUESTION_DESC + ANSWER_DESC_ONE + ANSWER_DESC_TWO,"},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"                Question.MESSAGE_QUESTION_CONSTRAINTS);"},{"lineNumber":73,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":74,"author":{"gitID":"MuhdNurKamal"},"content":"        // invalid answer"},{"lineNumber":75,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, QUESTION_DESC_LOVE + INVALID_ANSWER_DESC,"},{"lineNumber":76,"author":{"gitID":"MuhdNurKamal"},"content":"                Answer.MESSAGE_ANSWER_CONSTRAINTS);"},{"lineNumber":77,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":78,"author":{"gitID":"MuhdNurKamal"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":79,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, INVALID_QUESTION_DESC + INVALID_ANSWER_DESC,"},{"lineNumber":80,"author":{"gitID":"MuhdNurKamal"},"content":"                Question.MESSAGE_QUESTION_CONSTRAINTS);"},{"lineNumber":81,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":82,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, INVALID_ANSWER_DESC + QUESTION_DESC_LOVE,"},{"lineNumber":83,"author":{"gitID":"MuhdNurKamal"},"content":"                Answer.MESSAGE_ANSWER_CONSTRAINTS);"},{"lineNumber":84,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":85,"author":{"gitID":"MuhdNurKamal"},"content":"        // non-empty preamble"},{"lineNumber":86,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + QUESTION_DESC_LOVE + ANSWER_DESC_ONE + ANSWER_DESC_TWO,"},{"lineNumber":87,"author":{"gitID":"MuhdNurKamal"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPollCommand.MESSAGE_USAGE));"},{"lineNumber":88,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":89}},{"path":"src/test/java/seedu/club/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.GROUP_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_GROUP_DESC;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_MATRIC_NUMBER_DESC;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.MATRIC_NUMBER_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.MATRIC_NUMBER_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.PASSWORD_DESC;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.USERNAME_DESC_AMY;"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.USERNAME_DESC_BOB;"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_GROUP_BOB;"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_AMY;"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_BOB;"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.AddCommand;"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Email;"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Name;"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Phone;"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.MemberBuilder;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"        Member expectedMember \u003d new MemberBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"                .withEmail(VALID_EMAIL_BOB).withMatricNumber(VALID_MATRIC_NUMBER_BOB)"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"                .withGroup(VALID_GROUP_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                + MATRIC_NUMBER_DESC_BOB + GROUP_DESC_BOB + TAG_DESC_FRIEND"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"                + USERNAME_DESC_BOB + PASSWORD_DESC, new AddCommand(expectedMember));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                + MATRIC_NUMBER_DESC_BOB + GROUP_DESC_BOB + TAG_DESC_FRIEND"},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"                + USERNAME_DESC_BOB + PASSWORD_DESC, new AddCommand(expectedMember));"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                + MATRIC_NUMBER_DESC_BOB + GROUP_DESC_BOB + TAG_DESC_FRIEND"},{"lineNumber":74,"author":{"gitID":"amrut-prabhu"},"content":"                + USERNAME_DESC_BOB + PASSWORD_DESC, new AddCommand(expectedMember));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                + MATRIC_NUMBER_DESC_BOB + GROUP_DESC_BOB + TAG_DESC_FRIEND"},{"lineNumber":79,"author":{"gitID":"amrut-prabhu"},"content":"                + USERNAME_DESC_BOB + PASSWORD_DESC, new AddCommand(expectedMember));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"amrut-prabhu"},"content":"        // multiple matriculation numbers - last club accepted"},{"lineNumber":82,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + MATRIC_NUMBER_DESC_AMY"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                + MATRIC_NUMBER_DESC_BOB + GROUP_DESC_BOB + TAG_DESC_FRIEND"},{"lineNumber":84,"author":{"gitID":"amrut-prabhu"},"content":"                + USERNAME_DESC_BOB + PASSWORD_DESC, new AddCommand(expectedMember));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":87,"author":{"gitID":"amrut-prabhu"},"content":"        Member expectedMemberMultipleTags \u003d new MemberBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":88,"author":{"gitID":"MuhdNurKamal"},"content":"                .withEmail(VALID_EMAIL_BOB).withMatricNumber(VALID_MATRIC_NUMBER_BOB)"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":"                .withGroup(VALID_GROUP_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":90,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + MATRIC_NUMBER_DESC_BOB"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                + GROUP_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND"},{"lineNumber":92,"author":{"gitID":"amrut-prabhu"},"content":"                + USERNAME_DESC_BOB + PASSWORD_DESC, new AddCommand(expectedMemberMultipleTags));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":98,"author":{"gitID":"amrut-prabhu"},"content":"        Member expectedMemberAmy \u003d new MemberBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":99,"author":{"gitID":"MuhdNurKamal"},"content":"                .withEmail(VALID_EMAIL_AMY).withMatricNumber(VALID_MATRIC_NUMBER_AMY).withTags().build();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + MATRIC_NUMBER_DESC_AMY"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                        + USERNAME_DESC_AMY + PASSWORD_DESC,"},{"lineNumber":102,"author":{"gitID":"amrut-prabhu"},"content":"                new AddCommand(expectedMemberAmy));"},{"lineNumber":103,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":104,"author":{"gitID":"yash-chowdhary"},"content":"        // no group"},{"lineNumber":105,"author":{"gitID":"amrut-prabhu"},"content":"        Member expectedMemberBob \u003d new MemberBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":106,"author":{"gitID":"MuhdNurKamal"},"content":"                .withEmail(VALID_EMAIL_BOB).withMatricNumber(VALID_MATRIC_NUMBER_BOB).withGroup().withTags().build();"},{"lineNumber":107,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + MATRIC_NUMBER_DESC_BOB"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                        + USERNAME_DESC_BOB + PASSWORD_DESC,"},{"lineNumber":109,"author":{"gitID":"amrut-prabhu"},"content":"                new AddCommand(expectedMemberBob));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":117,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + MATRIC_NUMBER_DESC_BOB"},{"lineNumber":118,"author":{"gitID":"yash-chowdhary"},"content":"                + GROUP_DESC_BOB,"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":122,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + MATRIC_NUMBER_DESC_BOB"},{"lineNumber":123,"author":{"gitID":"yash-chowdhary"},"content":"                + GROUP_DESC_BOB,"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":127,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + MATRIC_NUMBER_DESC_BOB,"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"amrut-prabhu"},"content":"        // missing club prefix"},{"lineNumber":131,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_MATRIC_NUMBER_BOB,"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":135,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_MATRIC_NUMBER_BOB,"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":142,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + MATRIC_NUMBER_DESC_BOB"},{"lineNumber":143,"author":{"gitID":"yash-chowdhary"},"content":"                + GROUP_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":146,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + MATRIC_NUMBER_DESC_BOB"},{"lineNumber":147,"author":{"gitID":"yash-chowdhary"},"content":"                + GROUP_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":150,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + MATRIC_NUMBER_DESC_BOB"},{"lineNumber":151,"author":{"gitID":"yash-chowdhary"},"content":"                + GROUP_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"amrut-prabhu"},"content":"        // invalid club"},{"lineNumber":154,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_MATRIC_NUMBER_DESC"},{"lineNumber":155,"author":{"gitID":"MuhdNurKamal"},"content":"                + GROUP_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, MatricNumber.MESSAGE_MATRIC_NUMBER_CONSTRAINTS);"},{"lineNumber":156,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":157,"author":{"gitID":"yash-chowdhary"},"content":"        //invalid group"},{"lineNumber":158,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + MATRIC_NUMBER_DESC_BOB"},{"lineNumber":159,"author":{"gitID":"yash-chowdhary"},"content":"                + INVALID_GROUP_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Group.MESSAGE_GROUP_CONSTRAINTS);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":162,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + MATRIC_NUMBER_DESC_BOB"},{"lineNumber":163,"author":{"gitID":"yash-chowdhary"},"content":"                + GROUP_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":166,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_MATRIC_NUMBER_DESC"},{"lineNumber":167,"author":{"gitID":"yash-chowdhary"},"content":"                + GROUP_DESC_BOB,"},{"lineNumber":168,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":172,"author":{"gitID":"MuhdNurKamal"},"content":"                + MATRIC_NUMBER_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":21,"amrut-prabhu":62,"yash-chowdhary":14,"-":78}},{"path":"src/test/java/seedu/club/logic/parser/RemoveGroupCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.GROUP_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.GROUP_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_GROUP_DESC;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.MATRIC_NUMBER_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_GROUP_AMY;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_GROUP_BOB;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.RemoveGroupCommand;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"public class RemoveGroupCommandParserTest {"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"    private RemoveGroupCommandParser parser \u003d new RemoveGroupCommandParser();"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    public void parse_fieldPresent_success() {"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseSuccess(parser, GROUP_DESC_BOB, new RemoveGroupCommand(new Group(VALID_GROUP_BOB)));"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseSuccess(parser, GROUP_DESC_AMY, new RemoveGroupCommand(new Group(VALID_GROUP_AMY)));"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"    public void parse_incorrectField_failure() {"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveGroupCommand.MESSAGE_USAGE);"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, NAME_DESC_AMY, expectedMessage);"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, MATRIC_NUMBER_DESC_AMY, expectedMessage);"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"    public void parse_invalidGroupFormat_failure() {"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d Group.MESSAGE_GROUP_CONSTRAINTS;"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, INVALID_GROUP_DESC, Group.MESSAGE_GROUP_CONSTRAINTS);"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, \" \" + PREFIX_GROUP.toString() + \" \", expectedMessage);"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"    public void parse_fieldNotPresent_failure() {"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveGroupCommand.MESSAGE_USAGE);"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"        // blank space"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, \" \", expectedMessage);"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"        // newline character"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, \"\\n\", expectedMessage);"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"        // group should be preceded by group prefix \u0027g/\u0027"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, VALID_GROUP_AMY, expectedMessage);"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, VALID_GROUP_BOB, expectedMessage);"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":14,"yash-chowdhary":42}},{"path":"src/test/java/seedu/club/logic/UndoRedoStackTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.EmptyStackException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.Command;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.CommandResult;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.UndoableCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UndoRedoStackTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommandOne \u003d new DummyCommand();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final DummyUndoableCommand dummyUndoableCommandOne \u003d new DummyUndoableCommand();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final DummyUndoableCommand dummyUndoableCommandTwo \u003d new DummyUndoableCommand();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void push_nonUndoableCommand_redoStackClearedAndCommandNotAdded() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // non-empty redoStack"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        undoRedoStack.push(dummyCommandOne);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // empty redoStack"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        undoRedoStack.push(dummyCommandOne);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void push_undoableCommand_redoStackClearedAndCommandAdded() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // non-empty redoStack"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        undoRedoStack.push(dummyUndoableCommandOne);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertStackStatus(Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandOne),"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                Collections.emptyList());"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // empty redoStack"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        undoRedoStack.push(dummyUndoableCommandOne);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertStackStatus(Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandOne, dummyUndoableCommandOne),"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                Collections.emptyList());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void push_undoCommand_stackRemainsUnchanged() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // non-empty redoStack"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        undoRedoStack.push(new UndoCommand());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // empty redoStack"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        undoRedoStack.push(new UndoCommand());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void push_redoCommand_stackRemainsUnchanged() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // non-empty redoStack"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        undoRedoStack.push(new RedoCommand());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // empty redoStack"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        undoRedoStack.push(new RedoCommand());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void canUndo() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // empty undo stack"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.canUndo());"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // non-empty undo stack"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertTrue(undoRedoStack.canUndo());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void canRedo() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // empty redo stack"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.canRedo());"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // non-empty redo stack"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.emptyList(), Collections.singletonList(dummyUndoableCommandOne));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertTrue(undoRedoStack.canRedo());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void popUndo() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo),"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                Collections.emptyList());"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertPopUndoSuccess(dummyUndoableCommandTwo, Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                Collections.singletonList(dummyUndoableCommandTwo));"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertPopUndoSuccess(dummyUndoableCommandOne, Collections.emptyList(),"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne));"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertPopUndoFailure(Collections.emptyList(),"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void popRedo() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.emptyList(),"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertPopRedoSuccess(dummyUndoableCommandTwo, Collections.singletonList(dummyUndoableCommandTwo),"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                Collections.singletonList(dummyUndoableCommandOne));"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertPopRedoSuccess(dummyUndoableCommandOne,"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertPopRedoFailure(Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne),"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                Collections.emptyList());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne),"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        UndoRedoStack copy \u003d prepareStack(Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne),"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertTrue(undoRedoStack.equals(copy));"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertTrue(undoRedoStack.equals(undoRedoStack));"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.equals(null));"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.equals(1));"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // different undoStack -\u003e returns false"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        UndoRedoStack differentUndoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandTwo),"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.equals(differentUndoStack));"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // different redoStack -\u003e returns false"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        UndoRedoStack differentRedoStack \u003d"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                prepareStack(Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne),"},{"lineNumber":170,"author":{"gitID":"-"},"content":"                Collections.singletonList(dummyUndoableCommandTwo));"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.equals(differentRedoStack));"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * Asserts that the result of {@code undoRedoStack#popUndo()} equals {@code expectedCommand}."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * Also asserts that the content of the {@code undoRedoStack#undoStack} equals {@code undoElements},"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * and {@code undoRedoStack#redoStack} equals {@code redoElements}."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    private void assertPopUndoSuccess(UndoableCommand expectedCommand, List\u003cUndoableCommand\u003e expectedUndoElements,"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                                      List\u003cUndoableCommand\u003e expectedRedoElements) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, undoRedoStack.popUndo());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertStackStatus(expectedUndoElements, expectedRedoElements);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Asserts that the result of {@code undoRedoStack#popRedo()} equals {@code expectedCommand}."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Also asserts that the content of the {@code undoRedoStack#undoStack} equals {@code undoElements},"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * and {@code undoRedoStack#redoStack} equals {@code redoElements}."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    private void assertPopRedoSuccess(UndoableCommand expectedCommand, List\u003cUndoableCommand\u003e expectedUndoElements,"},{"lineNumber":191,"author":{"gitID":"-"},"content":"                                      List\u003cUndoableCommand\u003e expectedRedoElements) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, undoRedoStack.popRedo());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertStackStatus(expectedUndoElements, expectedRedoElements);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Asserts that the execution of {@code undoRedoStack#popUndo()} fails and {@code EmptyStackException} is thrown."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Also asserts that the content of the {@code undoRedoStack#undoStack} equals {@code undoElements},"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * and {@code undoRedoStack#redoStack} equals {@code redoElements}."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    private void assertPopUndoFailure(List\u003cUndoableCommand\u003e expectedUndoElements,"},{"lineNumber":202,"author":{"gitID":"-"},"content":"                                      List\u003cUndoableCommand\u003e expectedRedoElements) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            undoRedoStack.popUndo();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            fail(\"The expected EmptyStackException was not thrown.\");"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        } catch (EmptyStackException ese) {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            assertStackStatus(expectedUndoElements, expectedRedoElements);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * Asserts that the execution of {@code undoRedoStack#popRedo()} fails and {@code EmptyStackException} is thrown."},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * Also asserts that the content of the {@code undoRedoStack#undoStack} equals {@code undoElements},"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * and {@code undoRedoStack#redoStack} equals {@code redoElements}."},{"lineNumber":215,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    private void assertPopRedoFailure(List\u003cUndoableCommand\u003e expectedUndoElements,"},{"lineNumber":217,"author":{"gitID":"-"},"content":"                                      List\u003cUndoableCommand\u003e expectedRedoElements) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            undoRedoStack.popRedo();"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            fail(\"The expected EmptyStackException was not thrown.\");"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        } catch (EmptyStackException ese) {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            assertStackStatus(expectedUndoElements, expectedRedoElements);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Asserts that {@code undoRedoStack#undoStack} equals {@code undoElements}, and {@code undoRedoStack#redoStack}"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * equals {@code redoElements}."},{"lineNumber":229,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    private void assertStackStatus(List\u003cUndoableCommand\u003e undoElements, List\u003cUndoableCommand\u003e redoElements) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertEquals(prepareStack(undoElements, redoElements), undoRedoStack);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    class DummyCommand extends Command {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        public CommandResult execute() {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    class DummyUndoableCommand extends UndoableCommand {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":7,"-":240}},{"path":"src/test/java/seedu/club/logic/parser/ClubBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.GROUP_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_CLIENT;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_CLIENT_DESC;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_GROUP_AMY;"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_FIRST_MEMBER;"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_FIRST_POLL;"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.AddCommand;"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.AddPollCommand;"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.AddTaskCommand;"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.ClearCommand;"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.CompressCommand;"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.DecompressCommand;"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.DeleteCommand;"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.DeletePollCommand;"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.DeleteTaskCommand;"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.EditCommand;"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.EditCommand.EditMemberDescriptor;"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.EmailCommand;"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.ExitCommand;"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.FindCommand;"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.HelpCommand;"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.HideResultsCommand;"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.HistoryCommand;"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.ListCommand;"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.RedoCommand;"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.RemoveGroupCommand;"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.SelectCommand;"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.ShowResultsCommand;"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.UndoCommand;"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.ViewAllTasksCommand;"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.ViewMyTasksCommand;"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Body;"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Client;"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Subject;"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.FieldContainsKeywordsPredicate;"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.EditMemberDescriptorBuilder;"},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.MemberBuilder;"},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.MemberUtil;"},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.testutil.PollBuilder;"},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.testutil.PollUtil;"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.testutil.TaskBuilder;"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.testutil.TaskUtil;"},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"public class ClubBookParserTest {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"amrut-prabhu"},"content":"    private final ClubBookParser parser \u003d new ClubBookParser();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":75,"author":{"gitID":"amrut-prabhu"},"content":"        Member member \u003d new MemberBuilder().build();"},{"lineNumber":76,"author":{"gitID":"amrut-prabhu"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(MemberUtil.getAddCommand(member));"},{"lineNumber":77,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(new AddCommand(member), command);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parseCommand_addPoll() throws Exception {"},{"lineNumber":82,"author":{"gitID":"MuhdNurKamal"},"content":"        Poll poll \u003d new PollBuilder().withNoPollessMatricNumbers().build();"},{"lineNumber":83,"author":{"gitID":"MuhdNurKamal"},"content":"        AddPollCommand command \u003d (AddPollCommand) parser.parseCommand(PollUtil.getAddPollCommand(poll));"},{"lineNumber":84,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(new AddPollCommand(poll), command);"},{"lineNumber":85,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":87,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":"    public void parseCommand_addTask() throws Exception {"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":"        Task task \u003d new TaskBuilder().build();"},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":"        AddTaskCommand command \u003d (AddTaskCommand) parser.parseCommand(TaskUtil.getAddTaskCommand(task));"},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(new AddTaskCommand(task), command);"},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":103,"author":{"gitID":"amrut-prabhu"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MEMBER.getOneBased());"},{"lineNumber":104,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_MEMBER), command);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parseCommand_deletePoll() throws Exception {"},{"lineNumber":109,"author":{"gitID":"MuhdNurKamal"},"content":"        DeletePollCommand command \u003d (DeletePollCommand) parser.parseCommand("},{"lineNumber":110,"author":{"gitID":"MuhdNurKamal"},"content":"                DeletePollCommand.COMMAND_WORD + \" \" + INDEX_FIRST_POLL.getOneBased());"},{"lineNumber":111,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(new DeletePollCommand(INDEX_FIRST_POLL), command);"},{"lineNumber":112,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":114,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"yash-chowdhary"},"content":"    public void parseCommand_deleteTask() throws Exception {"},{"lineNumber":116,"author":{"gitID":"yash-chowdhary"},"content":"        DeleteTaskCommand command \u003d (DeleteTaskCommand) parser.parseCommand("},{"lineNumber":117,"author":{"gitID":"yash-chowdhary"},"content":"                DeleteTaskCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"},{"lineNumber":118,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(new DeleteTaskCommand(INDEX_FIRST_TASK), command);"},{"lineNumber":119,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":123,"author":{"gitID":"amrut-prabhu"},"content":"        Member member \u003d new MemberBuilder().build();"},{"lineNumber":124,"author":{"gitID":"amrut-prabhu"},"content":"        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder(member).build();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":126,"author":{"gitID":"amrut-prabhu"},"content":"                + INDEX_FIRST_MEMBER.getOneBased() + \" \" + MemberUtil.getMemberDetails(member));"},{"lineNumber":127,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_MEMBER, descriptor), command);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":139,"author":{"gitID":"MuhdNurKamal"},"content":"        Prefix prefix \u003d PREFIX_NAME;"},{"lineNumber":140,"author":{"gitID":"MuhdNurKamal"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":141,"author":{"gitID":"MuhdNurKamal"},"content":"                FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" \""},{"lineNumber":142,"author":{"gitID":"MuhdNurKamal"},"content":"                        + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":143,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(new FindCommand(new FieldContainsKeywordsPredicate(keywords, prefix)), command);"},{"lineNumber":144,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"yash-chowdhary"},"content":"    public void parseCommand_viewAllTasks() throws Exception {"},{"lineNumber":173,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(parser.parseCommand(ViewAllTasksCommand.COMMAND_WORD) instanceof ViewAllTasksCommand);"},{"lineNumber":174,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(parser.parseCommand(ViewAllTasksCommand.COMMAND_WORD + \" 1\") instanceof ViewAllTasksCommand);"},{"lineNumber":175,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":177,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":178,"author":{"gitID":"yash-chowdhary"},"content":"    public void parseCommand_viewMyTasks() throws Exception {"},{"lineNumber":179,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(parser.parseCommand(ViewMyTasksCommand.COMMAND_WORD) instanceof ViewMyTasksCommand);"},{"lineNumber":180,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(parser.parseCommand(ViewMyTasksCommand.COMMAND_WORD + \" 1\") instanceof ViewMyTasksCommand);"},{"lineNumber":181,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":183,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":184,"author":{"gitID":"yash-chowdhary"},"content":"    public void parseCommand_email() throws Exception {"},{"lineNumber":185,"author":{"gitID":"yash-chowdhary"},"content":"        EmailCommand command \u003d (EmailCommand) parser.parseCommand("},{"lineNumber":186,"author":{"gitID":"yash-chowdhary"},"content":"                EmailCommand.COMMAND_WORD + GROUP_DESC_AMY + VALID_CLIENT_DESC);"},{"lineNumber":187,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(new EmailCommand(new Group(VALID_GROUP_AMY), null, new Client(VALID_CLIENT),"},{"lineNumber":188,"author":{"gitID":"yash-chowdhary"},"content":"                new Subject(Subject.TEST_SUBJECT_STRING), new Body(Body.TEST_BODY_STRING)), command);"},{"lineNumber":189,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":191,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":192,"author":{"gitID":"yash-chowdhary"},"content":"    public void parseCommand_removeGroup() throws Exception {"},{"lineNumber":193,"author":{"gitID":"yash-chowdhary"},"content":"        RemoveGroupCommand removeGroupCommand \u003d (RemoveGroupCommand) parser.parseCommand("},{"lineNumber":194,"author":{"gitID":"yash-chowdhary"},"content":"                RemoveGroupCommand.COMMAND_WORD + GROUP_DESC_AMY);"},{"lineNumber":195,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(new RemoveGroupCommand(new Group(VALID_GROUP_AMY)), removeGroupCommand);"},{"lineNumber":196,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":201,"author":{"gitID":"amrut-prabhu"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MEMBER.getOneBased());"},{"lineNumber":202,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_MEMBER), command);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":231,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":232,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parseCommand_compress() throws Exception {"},{"lineNumber":233,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(parser.parseCommand(CompressCommand.COMMAND_WORD) instanceof CompressCommand);"},{"lineNumber":234,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":236,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":237,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parseCommand_decompress() throws Exception {"},{"lineNumber":238,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(parser.parseCommand(DecompressCommand.COMMAND_WORD) instanceof DecompressCommand);"},{"lineNumber":239,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":241,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":242,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parseCommand_showResults() throws Exception {"},{"lineNumber":243,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(parser.parseCommand(ShowResultsCommand.COMMAND_WORD) instanceof ShowResultsCommand);"},{"lineNumber":244,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":246,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":247,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parseCommand_hideResults() throws Exception {"},{"lineNumber":248,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(parser.parseCommand(HideResultsCommand.COMMAND_WORD) instanceof HideResultsCommand);"},{"lineNumber":249,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":56,"amrut-prabhu":38,"yash-chowdhary":56,"-":100}},{"path":"src/test/java/seedu/club/logic/parser/AssignTaskCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.MATRIC_NUMBER_DESC_BOB;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TASK_DATE_DESC_1;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TASK_DATE_DESC_2;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TASK_DESCRIPTION_DESC_FOOD;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TASK_TIME_DESC_1;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TASK_TIME_DESC_2;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_BOB;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TASK_DATE_1;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TASK_DESCRIPTION_CONFETTI;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TASK_DESCRIPTION_FOOD;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TASK_STATUS_TO_BEGIN;"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TASK_TIME_1;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalMembers.BOB;"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.AssignTaskCommand;"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.testutil.TaskBuilder;"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"public class AssignTaskCommandParserTest {"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"    private static final String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"            AssignTaskCommand.MESSAGE_USAGE);"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"    private AssignTaskCommandParser parser \u003d new AssignTaskCommandParser();"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"        Task expectedTask \u003d new TaskBuilder()"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"                .withDescription(VALID_TASK_DESCRIPTION_FOOD)"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"                .withDate(VALID_TASK_DATE_1)"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"                .withTime(VALID_TASK_TIME_1)"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"                .withAssignor(\"\")"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"                .withAssignee(\"\")"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"                .withStatus(VALID_TASK_STATUS_TO_BEGIN)"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"                .build();"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"        MatricNumber matricNumber \u003d BOB.getMatricNumber();"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseSuccess(parser, \" \" + TASK_DESCRIPTION_DESC_FOOD + TASK_DATE_DESC_1"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"                        + TASK_TIME_DESC_1 + MATRIC_NUMBER_DESC_BOB,"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"                new AssignTaskCommand(expectedTask, matricNumber));"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"    public void parse_fieldsMissing_failure() {"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"        // missing time prefix"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, TASK_DESCRIPTION_DESC_FOOD + TASK_DATE_DESC_1"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"                + VALID_TASK_TIME_1 + MATRIC_NUMBER_DESC_BOB, expectedMessage);"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"        // missing description prefix"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, TASK_DATE_DESC_2 + TASK_TIME_DESC_2 + VALID_TASK_DESCRIPTION_CONFETTI"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"                + MATRIC_NUMBER_DESC_BOB,"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"                expectedMessage);"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"        // missing date prefix"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser,  TASK_TIME_DESC_1 + TASK_DESCRIPTION_DESC_FOOD + VALID_TASK_DATE_1"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"                + MATRIC_NUMBER_DESC_BOB,"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"                expectedMessage);"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"        // missing matric number prefix"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser,  TASK_TIME_DESC_1 + TASK_DESCRIPTION_DESC_FOOD + TASK_DATE_DESC_1"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"                + VALID_MATRIC_NUMBER_BOB,"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"                expectedMessage);"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"        /*------------------------------------MISSING PARAMETERS------------------------------------------------------*/"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, TASK_DATE_DESC_1 + VALID_TASK_DATE_1, expectedMessage);"},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, VALID_TASK_DESCRIPTION_FOOD + VALID_TASK_DATE_1, expectedMessage);"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, VALID_TASK_DESCRIPTION_FOOD + VALID_TASK_TIME_1, expectedMessage);"},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":80}},{"path":"src/test/java/seedu/club/logic/commands/CompressCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.testutil.TypicalMembers.getTypicalClubBook;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.events.ui.CompressMembersRequestEvent;"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.Model;"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"public class CompressCommandTest {"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"    private Model model;"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"    private ObservableList\u003cMember\u003e observableList;"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"    private Member member;"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"    public void setUp() throws CommandException {"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"        model \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"        observableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"        member \u003d observableList.get(0);"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"        LogInCommand command \u003d new LogInCommand(member.getCredentials().getUsername(),"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"                member.getCredentials().getPassword());"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"        command.execute();"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"    public void execute_help_success() throws CommandException {"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"        CompressCommand compressCommand \u003d new CompressCommand();"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"        compressCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"        CommandResult result \u003d compressCommand.execute();"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(CompressCommand.MESSAGE_SUCCESS, result.feedbackToUser);"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof CompressMembersRequestEvent);"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":50}},{"path":"src/test/java/seedu/club/logic/commands/ExitCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.ui.testutil.EventsCollectorRule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class ExitCommandTest {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void execute_exit_success() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        CommandResult result \u003d new ExitCommand().execute();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertEquals(MESSAGE_EXIT_ACKNOWLEDGEMENT, result.feedbackToUser);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":4,"-":20}},{"path":"src/test/java/seedu/club/logic/commands/ViewAllTasksCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalMembers.BENSON;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalMembers.getTypicalClubBook;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.Model;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ViewAllTasksCommand."},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"public class ViewAllTasksCommandTest {"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    private Model model;"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"    private Model expectedModel;"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"    private ViewAllTasksCommand viewAllTasksCommand;"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"    private ObservableList\u003cMember\u003e observableList;"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"    private Member member;"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"    public void setUp() throws CommandException {"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"        model \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel \u003d new ModelManager(model.getClubBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"        observableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"        member \u003d observableList.get(0);"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"        LogInCommand command \u003d new LogInCommand(member.getCredentials().getUsername(),"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"                member.getCredentials().getPassword());"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"        command.execute();"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"        command.setData(expectedModel, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"        command.execute();"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"        viewAllTasksCommand \u003d new ViewAllTasksCommand();"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"        viewAllTasksCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(viewAllTasksCommand, model, ViewAllTasksCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"    public void execute_taskCannotBeDisplayed_noChange() {"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"        model.logsInMember(BENSON.getCredentials().getUsername().value,"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"                BENSON.getCredentials().getPassword().value);"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"        model.updateFilteredTaskList(Model.PREDICATE_NOT_SHOW_ALL_TASKS);"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d ViewAllTasksCommand.MESSAGE_CANNOT_VIEW;"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(viewAllTasksCommand, model, expectedMessage);"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":62}},{"path":"src/test/java/seedu/club/logic/parser/EmailCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.GROUP_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_GROUP_DESC;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.MATRIC_NUMBER_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_CLIENT;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_CLIENT_DESC;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_GROUP_AMY;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_GROUP_BOB;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.EmailCommand;"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Body;"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Client;"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Subject;"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"public class EmailCommandParserTest {"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"    private EmailCommandParser parser \u003d new EmailCommandParser();"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"    public void parse_fieldNotPresent_failure() {"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.COMMAND_USAGE);"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"        //blank space"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, \" \", expectedMessage);"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"        //newline character"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, \"\\n\", expectedMessage);"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"        //group should be preceded with \u0027g/\u0027 prefix"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, VALID_GROUP_AMY, expectedMessage);"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, VALID_GROUP_BOB, expectedMessage);"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"        //tag should be preceded with \u0027t/\u0027 prefix"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, VALID_TAG_FRIEND, expectedMessage);"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"    public void parse_incorrectField_failure() {"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.COMMAND_USAGE);"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, NAME_DESC_AMY, expectedMessage);"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, MATRIC_NUMBER_DESC_AMY, expectedMessage);"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"    public void parse_invalidGroupFormat_failure() {"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d Group.MESSAGE_GROUP_CONSTRAINTS;"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"        String invalidCommandOne \u003d INVALID_GROUP_DESC + VALID_CLIENT_DESC;"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"        String invalidCommandTwo \u003d \" \" + PREFIX_GROUP.toString() + \" \" + VALID_CLIENT_DESC;"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, invalidCommandOne, expectedMessage);"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, invalidCommandTwo, expectedMessage);"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"    public void parse_invalidTagFormat_failure() {"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d Tag.MESSAGE_TAG_CONSTRAINTS;"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"        String invalidCommandOne \u003d INVALID_TAG_DESC + VALID_CLIENT_DESC;"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"        String invalidCommandTwo \u003d \" \" + PREFIX_TAG.toString() + \" \" + VALID_CLIENT_DESC;"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, invalidCommandOne, expectedMessage);"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, invalidCommandTwo, expectedMessage);"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"    public void parse_bothGroupAndTagPresent_failure() {"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.COMMAND_USAGE);"},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"        String invalidCommand \u003d GROUP_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, invalidCommand, expectedMessage);"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"    public void parse_allFieldPresent_success() {"},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":"        String command \u003d VALID_CLIENT_DESC + GROUP_DESC_AMY;"},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"        Tag tagToEmail \u003d null;"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseSuccess(parser, command, new EmailCommand(new Group(VALID_GROUP_AMY),"},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":"                tagToEmail, new Client(VALID_CLIENT), new Subject(Subject.TEST_SUBJECT_STRING),"},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":"                new Body(Body.TEST_BODY_STRING)));"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":"    public void parse_clientMissing_failure() {"},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.COMMAND_USAGE);"},{"lineNumber":94,"author":{"gitID":"yash-chowdhary"},"content":"        String invalidCommand \u003d GROUP_DESC_AMY;"},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, invalidCommand, expectedMessage);"},{"lineNumber":96,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":98,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"yash-chowdhary"},"content":"    public void parse_emptyCommand_failure() {"},{"lineNumber":100,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.COMMAND_USAGE);"},{"lineNumber":101,"author":{"gitID":"yash-chowdhary"},"content":"        String invalidCommand \u003d \" \";"},{"lineNumber":102,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, invalidCommand, expectedMessage);"},{"lineNumber":103,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":17,"yash-chowdhary":86,"-":1}},{"path":"src/test/java/seedu/club/logic/commands/DeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.showMemberAtIndex;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_FIRST_MEMBER;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_SECOND_MEMBER;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.getTypicalClubBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private ObservableList\u003cMember\u003e observableList;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Member member;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void setUp() throws CommandException {"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"        model \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"        expectedModel \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        observableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        member \u003d observableList.get(0);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        LogInCommand command \u003d new LogInCommand(member.getCredentials().getUsername(),"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                member.getCredentials().getPassword());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command.execute();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        command.setData(expectedModel, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        command.execute();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"        Member memberToDelete \u003d model.getFilteredMemberList().get(INDEX_FIRST_MEMBER.getZeroBased());"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_MEMBER);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_MEMBER_SUCCESS, memberToDelete);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"        expectedModel.deleteMember(memberToDelete);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredMemberList().size() + 1);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":75,"author":{"gitID":"amrut-prabhu"},"content":"        showMemberAtIndex(model, INDEX_FIRST_MEMBER);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"amrut-prabhu"},"content":"        Member memberToDelete \u003d model.getFilteredMemberList().get(INDEX_FIRST_MEMBER.getZeroBased());"},{"lineNumber":78,"author":{"gitID":"amrut-prabhu"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_MEMBER);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"amrut-prabhu"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_MEMBER_SUCCESS, memberToDelete);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"amrut-prabhu"},"content":"        expectedModel.deleteMember(memberToDelete);"},{"lineNumber":83,"author":{"gitID":"amrut-prabhu"},"content":"        showNoMember(expectedModel);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":90,"author":{"gitID":"amrut-prabhu"},"content":"        showMemberAtIndex(model, INDEX_FIRST_MEMBER);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"amrut-prabhu"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_MEMBER;"},{"lineNumber":93,"author":{"gitID":"amrut-prabhu"},"content":"        // ensures that outOfBoundIndex is still in bounds of club book list"},{"lineNumber":94,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getClubBook().getMemberList().size());"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":106,"author":{"gitID":"amrut-prabhu"},"content":"        Member memberToDelete \u003d model.getFilteredMemberList().get(INDEX_FIRST_MEMBER.getZeroBased());"},{"lineNumber":107,"author":{"gitID":"amrut-prabhu"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_MEMBER);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredMemberList(expectedModel.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"amrut-prabhu"},"content":"        // delete -\u003e first member deleted"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"amrut-prabhu"},"content":"        // undo -\u003e reverts clubbook back to previous state and filtered member list to show all members"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"amrut-prabhu"},"content":"        // redo -\u003e same first member deleted again"},{"lineNumber":118,"author":{"gitID":"amrut-prabhu"},"content":"        expectedModel.deleteMember(memberToDelete);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":127,"author":{"gitID":"amrut-prabhu"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredMemberList().size() + 1);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":131,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"amrut-prabhu"},"content":"     * 1. Deletes a {@code member} from a filtered list."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * 2. Undo the deletion."},{"lineNumber":141,"author":{"gitID":"amrut-prabhu"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted member in the"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":143,"author":{"gitID":"amrut-prabhu"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the member object regardless of indexing."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"amrut-prabhu"},"content":"    public void executeUndoRedo_validIndexFilteredList_sameMemberDeleted() throws Exception {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        model.updateFilteredMemberList(Model.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":151,"author":{"gitID":"amrut-prabhu"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_MEMBER);"},{"lineNumber":152,"author":{"gitID":"amrut-prabhu"},"content":"        Model expectedModel \u003d new ModelManager(model.getClubBook(), new UserPrefs());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredMemberList(expectedModel.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":154,"author":{"gitID":"amrut-prabhu"},"content":"        showMemberAtIndex(model, INDEX_SECOND_MEMBER);"},{"lineNumber":155,"author":{"gitID":"amrut-prabhu"},"content":"        Member memberToDelete \u003d model.getFilteredMemberList().get(INDEX_FIRST_MEMBER.getZeroBased());"},{"lineNumber":156,"author":{"gitID":"amrut-prabhu"},"content":"        // delete -\u003e deletes second member in unfiltered member list / first member in filtered member list"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"amrut-prabhu"},"content":"        // undo -\u003e reverts clubbook back to previous state and filtered member list to show all members"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"amrut-prabhu"},"content":"        expectedModel.deleteMember(memberToDelete);"},{"lineNumber":164,"author":{"gitID":"amrut-prabhu"},"content":"        assertNotEquals(memberToDelete, model.getFilteredMemberList().get(INDEX_FIRST_MEMBER.getZeroBased()));"},{"lineNumber":165,"author":{"gitID":"amrut-prabhu"},"content":"        // redo -\u003e deletes same second member in unfiltered member list"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        model.updateFilteredMemberList(Model.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":172,"author":{"gitID":"amrut-prabhu"},"content":"        DeleteCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_MEMBER);"},{"lineNumber":173,"author":{"gitID":"amrut-prabhu"},"content":"        DeleteCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_MEMBER);"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":179,"author":{"gitID":"amrut-prabhu"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_MEMBER);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"amrut-prabhu"},"content":"        // different member -\u003e returns false"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    private DeleteCommand prepareCommand(Index index) {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":207,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":208,"author":{"gitID":"amrut-prabhu"},"content":"    private void showNoMember(Model model) {"},{"lineNumber":209,"author":{"gitID":"amrut-prabhu"},"content":"        model.updateFilteredMemberList(p -\u003e false);"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(model.getFilteredMemberList().isEmpty());"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":65,"-":148}},{"path":"src/test/java/seedu/club/logic/commands/EditMemberDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_BOB;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.EditCommand.EditMemberDescriptor;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.EditMemberDescriptorBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"public class EditMemberDescriptorTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"        EditMemberDescriptor descriptorWithSameValues \u003d new EditMemberDescriptor(DESC_AMY);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"        EditMemberDescriptor editedAmy \u003d new EditMemberDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"        editedAmy \u003d new EditMemberDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"        editedAmy \u003d new EditMemberDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"        // different club -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"amrut-prabhu"},"content":"        editedAmy \u003d new EditMemberDescriptorBuilder(DESC_AMY).withMatricNumber(VALID_MATRIC_NUMBER_BOB).build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"        editedAmy \u003d new EditMemberDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":18,"-":40}},{"path":"src/test/java/seedu/club/logic/commands/EmailCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_NON_EXISTENT_GROUP;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.NON_EXISTENT_GROUP;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_FIRST_MEMBER;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_FIRST_TAG;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_SECOND_MEMBER;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.getTypicalClubBook;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Body;"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Client;"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Subject;"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":" * Contains unit tests for {@code EmailCommand}."},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"public class EmailCommandTest {"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"    private Client gmailClient \u003d new Client(Client.VALID_CLIENT_GMAIL);"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"    private Client outlookClient \u003d new Client(Client.VALID_CLIENT_OUTLOOK);"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"    private Subject testSubject \u003d new Subject(Subject.TEST_SUBJECT_STRING);"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"    private Subject emptySubject \u003d new Subject(Subject.EMPTY_SUBJECT_STRING);"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"    private Body testBody \u003d new Body(Body.TEST_BODY_STRING);"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"    private Body emptyBody \u003d new Body(Body.EMPTY_BODY_STRING);"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"    private Group groupToEmail;"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"    private Tag tagToEmail;"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"    private Model model;"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"    private Model expectedModel;"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"    private ObservableList\u003cMember\u003e observableList;"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"    private Member member;"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"    @Before"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"    public void setUp() throws CommandException {"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"        model \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"        observableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"        member \u003d observableList.get(0);"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"        LogInCommand command \u003d new LogInCommand(member.getCredentials().getUsername(),"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"                member.getCredentials().getPassword());"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"        command.execute();"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"        command.setData(expectedModel, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"        command.execute();"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"    public void execute_validCommandToEmailGroupGmail_success() throws Exception {"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"        groupToEmail \u003d model.getFilteredMemberList().get(INDEX_FIRST_MEMBER.getZeroBased()).getGroup();"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"        tagToEmail \u003d null;"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"        EmailCommand emailCommand \u003d prepareCommand(groupToEmail, tagToEmail, gmailClient,"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"                testSubject, testBody);"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d EmailCommand.EMAIL_CLIENT_OPENED;"},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedRecipients \u003d expectedModel.generateEmailRecipients(groupToEmail, tagToEmail);"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.sendEmail(expectedRecipients, gmailClient, testSubject, testBody);"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(emailCommand, model, expectedMessage, expectedModel);"},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"    public void execute_validCommandToEmailGroupOutlook_success() throws Exception {"},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"        groupToEmail \u003d model.getFilteredMemberList().get(INDEX_FIRST_MEMBER.getZeroBased()).getGroup();"},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"        tagToEmail \u003d null;"},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"        EmailCommand emailCommand \u003d prepareCommand(groupToEmail, tagToEmail, outlookClient,"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":"                testSubject, testBody);"},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d EmailCommand.EMAIL_CLIENT_OPENED;"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedRecipients \u003d expectedModel.generateEmailRecipients(groupToEmail, tagToEmail);"},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.sendEmail(expectedRecipients, gmailClient, testSubject, testBody);"},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(emailCommand, model, expectedMessage, expectedModel);"},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"yash-chowdhary"},"content":"    public void execute_validCommandToEmailTagGmail_success() throws Exception {"},{"lineNumber":97,"author":{"gitID":"yash-chowdhary"},"content":"        groupToEmail \u003d null;"},{"lineNumber":98,"author":{"gitID":"yash-chowdhary"},"content":"        tagToEmail \u003d model.getFilteredTagList().get(INDEX_FIRST_TAG.getZeroBased());"},{"lineNumber":99,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":100,"author":{"gitID":"yash-chowdhary"},"content":"        EmailCommand emailCommand \u003d prepareCommand(groupToEmail, tagToEmail, gmailClient,"},{"lineNumber":101,"author":{"gitID":"yash-chowdhary"},"content":"                testSubject, testBody);"},{"lineNumber":102,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":103,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d EmailCommand.EMAIL_CLIENT_OPENED;"},{"lineNumber":104,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedRecipients \u003d expectedModel.generateEmailRecipients(groupToEmail, tagToEmail);"},{"lineNumber":105,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.sendEmail(expectedRecipients, outlookClient, testSubject, testBody);"},{"lineNumber":106,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":107,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(emailCommand, model, expectedMessage, expectedModel);"},{"lineNumber":108,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":110,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"yash-chowdhary"},"content":"    public void execute_validCommandToEmailTagOutlook_success() throws Exception {"},{"lineNumber":112,"author":{"gitID":"yash-chowdhary"},"content":"        groupToEmail \u003d null;"},{"lineNumber":113,"author":{"gitID":"yash-chowdhary"},"content":"        tagToEmail \u003d model.getFilteredTagList().get(INDEX_FIRST_TAG.getZeroBased());"},{"lineNumber":114,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":115,"author":{"gitID":"yash-chowdhary"},"content":"        EmailCommand emailCommand \u003d prepareCommand(groupToEmail, tagToEmail, outlookClient,"},{"lineNumber":116,"author":{"gitID":"yash-chowdhary"},"content":"                testSubject, testBody);"},{"lineNumber":117,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":118,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d EmailCommand.EMAIL_CLIENT_OPENED;"},{"lineNumber":119,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedRecipients \u003d expectedModel.generateEmailRecipients(groupToEmail, tagToEmail);"},{"lineNumber":120,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.sendEmail(expectedRecipients, outlookClient, testSubject, testBody);"},{"lineNumber":121,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":122,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(emailCommand, model, expectedMessage, expectedModel);"},{"lineNumber":123,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":125,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"yash-chowdhary"},"content":"    public void execute_nonExistentGroup_throwCommandException() {"},{"lineNumber":127,"author":{"gitID":"yash-chowdhary"},"content":"        Group nonExistentGroup \u003d new Group(NON_EXISTENT_GROUP);"},{"lineNumber":128,"author":{"gitID":"yash-chowdhary"},"content":"        tagToEmail \u003d null;"},{"lineNumber":129,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":130,"author":{"gitID":"yash-chowdhary"},"content":"        EmailCommand emailCommand \u003d prepareCommand(nonExistentGroup, tagToEmail, gmailClient,"},{"lineNumber":131,"author":{"gitID":"yash-chowdhary"},"content":"                testSubject, testBody);"},{"lineNumber":132,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d String.format(MESSAGE_NON_EXISTENT_GROUP, nonExistentGroup);"},{"lineNumber":133,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":134,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(emailCommand, model, expectedMessage);"},{"lineNumber":135,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":137,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"yash-chowdhary"},"content":"    public void execute_nonExistentTag_throwCommandException() {"},{"lineNumber":139,"author":{"gitID":"yash-chowdhary"},"content":"        Tag nonExistentTag \u003d new Tag(VALID_TAG_UNUSED);"},{"lineNumber":140,"author":{"gitID":"yash-chowdhary"},"content":"        groupToEmail \u003d null;"},{"lineNumber":141,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":142,"author":{"gitID":"yash-chowdhary"},"content":"        EmailCommand emailCommand \u003d prepareCommand(groupToEmail, nonExistentTag, outlookClient,"},{"lineNumber":143,"author":{"gitID":"yash-chowdhary"},"content":"                testSubject, testBody);"},{"lineNumber":144,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d DeleteTagCommand.MESSAGE_NON_EXISTENT_TAG;"},{"lineNumber":145,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":146,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(emailCommand, model, expectedMessage);"},{"lineNumber":147,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":149,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":150,"author":{"gitID":"yash-chowdhary"},"content":"    public void execute_optionalSubject_success() throws Exception {"},{"lineNumber":151,"author":{"gitID":"yash-chowdhary"},"content":"        groupToEmail \u003d model.getFilteredMemberList().get(INDEX_FIRST_MEMBER.getZeroBased()).getGroup();"},{"lineNumber":152,"author":{"gitID":"yash-chowdhary"},"content":"        tagToEmail \u003d null;"},{"lineNumber":153,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":154,"author":{"gitID":"yash-chowdhary"},"content":"        EmailCommand emailCommand \u003d prepareCommand(groupToEmail, tagToEmail, gmailClient, emptySubject,"},{"lineNumber":155,"author":{"gitID":"yash-chowdhary"},"content":"                testBody);"},{"lineNumber":156,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":157,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d EmailCommand.EMAIL_CLIENT_OPENED;"},{"lineNumber":158,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedRecipients \u003d expectedModel.generateEmailRecipients(groupToEmail, tagToEmail);"},{"lineNumber":159,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.sendEmail(expectedRecipients, gmailClient, emptySubject, testBody);"},{"lineNumber":160,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":161,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(emailCommand, model, expectedMessage, expectedModel);"},{"lineNumber":162,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":164,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":165,"author":{"gitID":"yash-chowdhary"},"content":"    public void execute_optionalBody_success() throws Exception {"},{"lineNumber":166,"author":{"gitID":"yash-chowdhary"},"content":"        groupToEmail \u003d null;"},{"lineNumber":167,"author":{"gitID":"yash-chowdhary"},"content":"        tagToEmail \u003d model.getFilteredTagList().get(INDEX_FIRST_TAG.getZeroBased());"},{"lineNumber":168,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":169,"author":{"gitID":"yash-chowdhary"},"content":"        EmailCommand emailCommand \u003d prepareCommand(groupToEmail, tagToEmail, outlookClient, testSubject,"},{"lineNumber":170,"author":{"gitID":"yash-chowdhary"},"content":"                emptyBody);"},{"lineNumber":171,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":172,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d EmailCommand.EMAIL_CLIENT_OPENED;"},{"lineNumber":173,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedRecipients \u003d expectedModel.generateEmailRecipients(groupToEmail, tagToEmail);"},{"lineNumber":174,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.sendEmail(expectedRecipients, gmailClient, testSubject, emptyBody);"},{"lineNumber":175,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":176,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(emailCommand, model, expectedMessage, expectedModel);"},{"lineNumber":177,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":179,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":180,"author":{"gitID":"yash-chowdhary"},"content":"    public void execute_optionalSubjectAndBody_success() throws Exception {"},{"lineNumber":181,"author":{"gitID":"yash-chowdhary"},"content":"        groupToEmail \u003d null;"},{"lineNumber":182,"author":{"gitID":"yash-chowdhary"},"content":"        tagToEmail \u003d model.getFilteredTagList().get(INDEX_FIRST_TAG.getZeroBased());"},{"lineNumber":183,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":184,"author":{"gitID":"yash-chowdhary"},"content":"        EmailCommand emailCommand \u003d prepareCommand(groupToEmail, tagToEmail, outlookClient, emptySubject,"},{"lineNumber":185,"author":{"gitID":"yash-chowdhary"},"content":"                emptyBody);"},{"lineNumber":186,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":187,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d EmailCommand.EMAIL_CLIENT_OPENED;"},{"lineNumber":188,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedRecipients \u003d expectedModel.generateEmailRecipients(groupToEmail, tagToEmail);"},{"lineNumber":189,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.sendEmail(expectedRecipients, gmailClient, emptySubject, emptyBody);"},{"lineNumber":190,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":191,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(emailCommand, model, expectedMessage, expectedModel);"},{"lineNumber":192,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":194,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":195,"author":{"gitID":"yash-chowdhary"},"content":"    public void equals() {"},{"lineNumber":196,"author":{"gitID":"yash-chowdhary"},"content":"        Group groupToEmailOne \u003d model.getFilteredMemberList().get(INDEX_FIRST_MEMBER.getZeroBased()).getGroup();"},{"lineNumber":197,"author":{"gitID":"yash-chowdhary"},"content":"        Group groupToEmailTwo \u003d model.getFilteredMemberList().get(INDEX_SECOND_MEMBER.getZeroBased()).getGroup();"},{"lineNumber":198,"author":{"gitID":"yash-chowdhary"},"content":"        Tag tagToEmailOne \u003d new Tag(VALID_TAG_UNUSED);"},{"lineNumber":199,"author":{"gitID":"yash-chowdhary"},"content":"        Tag tagToEmailTwo \u003d new Tag(VALID_TAG_UNUSED);"},{"lineNumber":200,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":201,"author":{"gitID":"yash-chowdhary"},"content":"        EmailCommand firstCommand \u003d prepareCommand(groupToEmailOne, tagToEmailOne, gmailClient,"},{"lineNumber":202,"author":{"gitID":"yash-chowdhary"},"content":"                testSubject, testBody);"},{"lineNumber":203,"author":{"gitID":"yash-chowdhary"},"content":"        EmailCommand secondCommand \u003d prepareCommand(groupToEmailTwo, tagToEmailTwo, gmailClient,"},{"lineNumber":204,"author":{"gitID":"yash-chowdhary"},"content":"                emptySubject, emptyBody);"},{"lineNumber":205,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":206,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstCommand.equals(firstCommand));"},{"lineNumber":207,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(secondCommand.equals(secondCommand));"},{"lineNumber":208,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":209,"author":{"gitID":"yash-chowdhary"},"content":"        EmailCommand firstCommandCopy \u003d prepareCommand(model.getFilteredMemberList().get(INDEX_FIRST_MEMBER"},{"lineNumber":210,"author":{"gitID":"yash-chowdhary"},"content":"                .getZeroBased()).getGroup(), tagToEmailOne, gmailClient, testSubject, emptyBody);"},{"lineNumber":211,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstCommand.equals(firstCommandCopy));"},{"lineNumber":212,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":213,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(secondCommand.equals(true));"},{"lineNumber":214,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":215,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(secondCommand.equals(null));"},{"lineNumber":216,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":217,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstCommand.equals(secondCommand));"},{"lineNumber":218,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":219,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns a {@code EmailCommand} object with the parameters {@code group}, {@code tag},"},{"lineNumber":222,"author":{"gitID":"yash-chowdhary"},"content":"     * {@code client}, {@code subject}, and {@code body}"},{"lineNumber":223,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"yash-chowdhary"},"content":"    private EmailCommand prepareCommand(Group group, Tag tag, Client client, Subject subject, Body body) {"},{"lineNumber":225,"author":{"gitID":"yash-chowdhary"},"content":"        EmailCommand emailCommand \u003d new EmailCommand(group, tag, client, subject, body);"},{"lineNumber":226,"author":{"gitID":"yash-chowdhary"},"content":"        emailCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":227,"author":{"gitID":"yash-chowdhary"},"content":"        return emailCommand;"},{"lineNumber":228,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":14,"yash-chowdhary":212,"-":3}},{"path":"src/test/java/seedu/club/logic/commands/HistoryCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.club.testutil.TypicalMembers.getTypicalClubBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class HistoryCommandTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private HistoryCommand historyCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private CommandHistory history;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void setUp() throws CommandException {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        ObservableList\u003cMember\u003e observableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Member member \u003d observableList.get(0);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        LogInCommand logInCommand \u003d new LogInCommand(member.getCredentials().getUsername(),"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                member.getCredentials().getPassword());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        logInCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        logInCommand.execute();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        historyCommand \u003d new HistoryCommand();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        historyCommand.setData(model, history, new UndoRedoStack());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void execute() throws CommandException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        System.out.println(model.getLoggedInMember());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandResult(historyCommand, HistoryCommand.MESSAGE_NO_HISTORY);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        String command1 \u003d \"clear\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        history.add(command1);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandResult(historyCommand, String.format(HistoryCommand.MESSAGE_SUCCESS, command1));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        String command2 \u003d \"randomCommand\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        String command3 \u003d \"select 1\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        history.add(command2);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        history.add(command3);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                String.join(\"\\n\", command3, command2, command1));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandResult(historyCommand, expectedMessage);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Asserts that the result message from the execution of {@code historyCommand} equals to {@code expectedMessage}"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private void assertCommandResult(HistoryCommand historyCommand, String expectedMessage) throws CommandException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, historyCommand.execute().feedbackToUser);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":5,"-":57}},{"path":"src/test/java/seedu/club/logic/commands/ListCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.showMemberAtIndex;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_FIRST_MEMBER;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.getTypicalClubBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class ListCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private ListCommand listCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private ObservableList\u003cMember\u003e observableList;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Member member;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() throws CommandException {"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"        model \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"        expectedModel \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        observableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        member \u003d observableList.get(0);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        LogInCommand command \u003d new LogInCommand(member.getCredentials().getUsername(),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                member.getCredentials().getPassword());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        command.execute();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        command.setData(expectedModel, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        command.execute();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        listCommand \u003d new ListCommand();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        listCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        model.updateFilteredMemberList(Model.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredMemberList(expectedModel.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        model.updateFilteredMemberList(Model.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredMemberList(expectedModel.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"        showMemberAtIndex(model, INDEX_FIRST_MEMBER);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":14,"-":47}},{"path":"src/test/java/seedu/club/logic/commands/ShowResultsCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.testutil.TypicalMembers.getTypicalClubBook;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.events.ui.ShowResultsRequestEvent;"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.Model;"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"public class ShowResultsCommandTest {"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"    private Model model;"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"    private ObservableList\u003cMember\u003e observableList;"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"    private Member member;"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"    @Before"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"    public void setUp() throws CommandException {"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"        model \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"        observableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"        member \u003d observableList.get(0);"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"        LogInCommand command \u003d new LogInCommand(member.getCredentials().getUsername(),"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"                member.getCredentials().getPassword());"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"        command.execute();"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"    public void execute_help_success() throws CommandException {"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"        ShowResultsCommand resultsCommand \u003d new ShowResultsCommand();"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"        resultsCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"        CommandResult result \u003d resultsCommand.execute();"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(ShowResultsCommand.MESSAGE_SUCCESS, result.feedbackToUser);"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowResultsRequestEvent);"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":48}},{"path":"src/test/java/seedu/club/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.showMemberAtIndex;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_FIRST_MEMBER;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_SECOND_MEMBER;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.getTypicalClubBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.Messages;"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.EditCommand.EditMemberDescriptor;"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.EditMemberDescriptorBuilder;"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.MemberBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":39,"author":{"gitID":"-"},"content":" */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private ObservableList\u003cMember\u003e observableList;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private Member member;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void setUp() throws CommandException {"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"        model \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"        expectedModel \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        observableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        member \u003d observableList.get(0);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        LogInCommand command \u003d new LogInCommand(member.getCredentials().getUsername(),"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                member.getCredentials().getPassword());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        command.execute();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        command.setData(expectedModel, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        command.execute();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"        Member editedMember \u003d new MemberBuilder().build();"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder(editedMember).build();"},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_MEMBER, descriptor);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_MEMBER_SUCCESS, editedMember);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"        expectedModel.updateMember(model.getFilteredMemberList().get(0), editedMember);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":76,"author":{"gitID":"amrut-prabhu"},"content":"        Index indexLastMember \u003d Index.fromOneBased(model.getFilteredMemberList().size());"},{"lineNumber":77,"author":{"gitID":"amrut-prabhu"},"content":"        Member lastMember \u003d model.getFilteredMemberList().get(indexLastMember.getZeroBased());"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"amrut-prabhu"},"content":"        MemberBuilder memberInList \u003d new MemberBuilder(lastMember);"},{"lineNumber":80,"author":{"gitID":"amrut-prabhu"},"content":"        Member editedMember \u003d memberInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"amrut-prabhu"},"content":"        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":85,"author":{"gitID":"amrut-prabhu"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastMember, descriptor);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"amrut-prabhu"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_MEMBER_SUCCESS, editedMember);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"amrut-prabhu"},"content":"        expectedModel.updateMember(lastMember, editedMember);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":96,"author":{"gitID":"amrut-prabhu"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_MEMBER, new EditMemberDescriptor());"},{"lineNumber":97,"author":{"gitID":"amrut-prabhu"},"content":"        Member editedMember \u003d model.getFilteredMemberList().get(INDEX_FIRST_MEMBER.getZeroBased());"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"amrut-prabhu"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_MEMBER_SUCCESS, editedMember);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":106,"author":{"gitID":"amrut-prabhu"},"content":"        showMemberAtIndex(model, INDEX_FIRST_MEMBER);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"amrut-prabhu"},"content":"        Member memberInFilteredList \u003d model.getFilteredMemberList().get(INDEX_FIRST_MEMBER.getZeroBased());"},{"lineNumber":109,"author":{"gitID":"amrut-prabhu"},"content":"        Member editedMember \u003d new MemberBuilder(memberInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":110,"author":{"gitID":"amrut-prabhu"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_MEMBER,"},{"lineNumber":111,"author":{"gitID":"amrut-prabhu"},"content":"                new EditMemberDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"amrut-prabhu"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_MEMBER_SUCCESS, editedMember);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"amrut-prabhu"},"content":"        expectedModel.updateMember(model.getFilteredMemberList().get(0), editedMember);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"amrut-prabhu"},"content":"    public void execute_duplicateMemberUnfilteredList_failure() {"},{"lineNumber":122,"author":{"gitID":"amrut-prabhu"},"content":"        Member firstMember \u003d model.getFilteredMemberList().get(INDEX_FIRST_MEMBER.getZeroBased());"},{"lineNumber":123,"author":{"gitID":"amrut-prabhu"},"content":"        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder(firstMember).build();"},{"lineNumber":124,"author":{"gitID":"amrut-prabhu"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_MEMBER, descriptor);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_MATRIC_NUMBER);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"amrut-prabhu"},"content":"    public void execute_duplicateMemberFilteredList_failure() {"},{"lineNumber":131,"author":{"gitID":"amrut-prabhu"},"content":"        showMemberAtIndex(model, INDEX_FIRST_MEMBER);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"amrut-prabhu"},"content":"        // edit member in filtered list into a duplicate in club book"},{"lineNumber":134,"author":{"gitID":"amrut-prabhu"},"content":"        Member memberInList \u003d model.getClubBook().getMemberList().get(INDEX_SECOND_MEMBER.getZeroBased());"},{"lineNumber":135,"author":{"gitID":"amrut-prabhu"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_MEMBER,"},{"lineNumber":136,"author":{"gitID":"amrut-prabhu"},"content":"                new EditMemberDescriptorBuilder(memberInList).build());"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_MATRIC_NUMBER);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"amrut-prabhu"},"content":"    public void execute_invalidMemberIndexUnfilteredList_failure() {"},{"lineNumber":143,"author":{"gitID":"amrut-prabhu"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredMemberList().size() + 1);"},{"lineNumber":144,"author":{"gitID":"amrut-prabhu"},"content":"        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":152,"author":{"gitID":"amrut-prabhu"},"content":"     * but smaller than size of club book"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":155,"author":{"gitID":"amrut-prabhu"},"content":"    public void execute_invalidMemberIndexFilteredList_failure() {"},{"lineNumber":156,"author":{"gitID":"amrut-prabhu"},"content":"        showMemberAtIndex(model, INDEX_FIRST_MEMBER);"},{"lineNumber":157,"author":{"gitID":"amrut-prabhu"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_MEMBER;"},{"lineNumber":158,"author":{"gitID":"amrut-prabhu"},"content":"        // ensures that outOfBoundIndex is still in bounds of club book list"},{"lineNumber":159,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getClubBook().getMemberList().size());"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":162,"author":{"gitID":"amrut-prabhu"},"content":"                new EditMemberDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":172,"author":{"gitID":"amrut-prabhu"},"content":"        Member editedMember \u003d new MemberBuilder().build();"},{"lineNumber":173,"author":{"gitID":"amrut-prabhu"},"content":"        Member memberToEdit \u003d model.getFilteredMemberList().get(INDEX_FIRST_MEMBER.getZeroBased());"},{"lineNumber":174,"author":{"gitID":"amrut-prabhu"},"content":"        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder(editedMember).build();"},{"lineNumber":175,"author":{"gitID":"amrut-prabhu"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_MEMBER, descriptor);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"amrut-prabhu"},"content":"        // edit -\u003e first member edited"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"amrut-prabhu"},"content":"        // undo -\u003e reverts clubbook back to previous state and filtered member list to show all members"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"amrut-prabhu"},"content":"        // redo -\u003e same first member edited again"},{"lineNumber":185,"author":{"gitID":"amrut-prabhu"},"content":"        expectedModel.updateMember(memberToEdit, editedMember);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":194,"author":{"gitID":"amrut-prabhu"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredMemberList().size() + 1);"},{"lineNumber":195,"author":{"gitID":"amrut-prabhu"},"content":"        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":199,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"amrut-prabhu"},"content":"     * 1. Edits a {@code member} from a filtered list."},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * 2. Undo the edit."},{"lineNumber":209,"author":{"gitID":"amrut-prabhu"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited member in the"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":211,"author":{"gitID":"amrut-prabhu"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the member object regardless of indexing."},{"lineNumber":212,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":214,"author":{"gitID":"amrut-prabhu"},"content":"    public void executeUndoRedo_validIndexFilteredList_sameMemberEdited() throws Exception {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":218,"author":{"gitID":"amrut-prabhu"},"content":"        Member editedMember \u003d new MemberBuilder().build();"},{"lineNumber":219,"author":{"gitID":"amrut-prabhu"},"content":"        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder(editedMember).build();"},{"lineNumber":220,"author":{"gitID":"amrut-prabhu"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_MEMBER, descriptor);"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"amrut-prabhu"},"content":"        showMemberAtIndex(model, INDEX_SECOND_MEMBER);"},{"lineNumber":223,"author":{"gitID":"amrut-prabhu"},"content":"        Member memberToEdit \u003d model.getFilteredMemberList().get(INDEX_FIRST_MEMBER.getZeroBased());"},{"lineNumber":224,"author":{"gitID":"amrut-prabhu"},"content":"        // edit -\u003e edits second member in unfiltered member list / first member in filtered member list"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"amrut-prabhu"},"content":"        // undo -\u003e reverts clubbook back to previous state and filtered member list to show all members"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"amrut-prabhu"},"content":"        expectedModel.updateMember(memberToEdit, editedMember);"},{"lineNumber":232,"author":{"gitID":"amrut-prabhu"},"content":"        assertNotEquals(model.getFilteredMemberList().get(INDEX_FIRST_MEMBER.getZeroBased()), memberToEdit);"},{"lineNumber":233,"author":{"gitID":"amrut-prabhu"},"content":"        // redo -\u003e edits same second member in unfiltered member list"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":239,"author":{"gitID":"amrut-prabhu"},"content":"        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST_MEMBER, DESC_AMY);"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":242,"author":{"gitID":"amrut-prabhu"},"content":"        EditMemberDescriptor copyDescriptor \u003d new EditMemberDescriptor(DESC_AMY);"},{"lineNumber":243,"author":{"gitID":"amrut-prabhu"},"content":"        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_MEMBER, copyDescriptor);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":260,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_MEMBER, DESC_AMY)));"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":263,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_MEMBER, DESC_BOB)));"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":269,"author":{"gitID":"amrut-prabhu"},"content":"    private EditCommand prepareCommand(Index index, EditMemberDescriptor descriptor) {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        return editCommand;"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":106,"-":168}},{"path":"src/test/java/seedu/club/logic/commands/SignUpCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.PhotoReadException;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ClubBook;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ReadOnlyClubBook;"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Body;"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Client;"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Subject;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.DuplicateMatricNumberException;"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.MemberNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.club.model.member.exceptions.PasswordIncorrectException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.AnswerNotFoundException;"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.PollNotFoundException;"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.UserAlreadyVotedException;"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TaskCannotBeDeletedException;"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TasksAlreadyListedException;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.club.model.task.exceptions.TasksCannotBeDisplayedException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.club.testutil.MemberBuilder;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"public class SignUpCommandTest {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private Member member \u003d new MemberBuilder().build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void executeMemberSuccessfullySigningUp() throws CommandException {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        ModelStubAcceptingMemberSignUp modelStubAcceptingMemberSignUp \u003d new ModelStubAcceptingMemberSignUp();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getSignUpCommandForMember(member, modelStubAcceptingMemberSignUp).execute();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertEquals(SignUpCommand.MESSAGE_SUCCESS, commandResult.feedbackToUser);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Generates a new LogInCommand with the details of the given member."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private SignUpCommand getSignUpCommandForMember(Member member, Model model) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        SignUpCommand command \u003d new SignUpCommand(member);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"        public void voteInPoll(Poll poll, Index answerIndex) throws"},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":"                PollNotFoundException, AnswerNotFoundException, UserAlreadyVotedException {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":73,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"        public void changeStatus(Task taskToEdit, Task editedTask) throws TaskNotFoundException,"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"                DuplicateTaskException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":82,"author":{"gitID":"MuhdNurKamal"},"content":"        public void updateFilteredPollList(Predicate\u003cPoll\u003e predicate) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":87,"author":{"gitID":"MuhdNurKamal"},"content":"        public void addPoll(Poll poll) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":92,"author":{"gitID":"MuhdNurKamal"},"content":"        public void deletePoll(Poll poll) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":94,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":97,"author":{"gitID":"amrut-prabhu"},"content":"        public void addMember(Member member) throws DuplicateMatricNumberException {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":102,"author":{"gitID":"yash-chowdhary"},"content":"        public void viewMyTasks() throws TasksAlreadyListedException {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        public void removeGroup(Group toRemove) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        public String generateEmailRecipients(Group group, Tag tag) {"},{"lineNumber":113,"author":{"gitID":"amrut-prabhu"},"content":"            return null;"},{"lineNumber":114,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":116,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":117,"author":{"gitID":"yash-chowdhary"},"content":"        public void sendEmail(String recipients, Client client, Subject subject, Body body) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":122,"author":{"gitID":"yash-chowdhary"},"content":"        public void addTaskToTaskList(Task toAdd) throws DuplicateTaskException {"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":126,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":127,"author":{"gitID":"yash-chowdhary"},"content":"        public void deleteTask(Task taskToDelete) throws TaskNotFoundException, TaskCannotBeDeletedException {"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":132,"author":{"gitID":"yash-chowdhary"},"content":"        public void assignTask(Task toAdd, MatricNumber matricNumber) throws MemberNotFoundException,"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                DuplicateTaskException {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        public void logOutMember() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":143,"author":{"gitID":"amrut-prabhu"},"content":"        public void resetData(ReadOnlyClubBook newData) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":148,"author":{"gitID":"amrut-prabhu"},"content":"        public ReadOnlyClubBook getClubBook() {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":154,"author":{"gitID":"amrut-prabhu"},"content":"        public void deleteMember(Member target) throws MemberNotFoundException {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":159,"author":{"gitID":"amrut-prabhu"},"content":"        public void updateMember(Member target, Member editedMember)"},{"lineNumber":160,"author":{"gitID":"amrut-prabhu"},"content":"                throws DuplicateMatricNumberException {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":165,"author":{"gitID":"amrut-prabhu"},"content":"        public void deleteTag(Tag tag) throws TagNotFoundException {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":170,"author":{"gitID":"amrut-prabhu"},"content":"        public int importMembers(File importFile) throws IOException {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":172,"author":{"gitID":"amrut-prabhu"},"content":"            return 0;"},{"lineNumber":173,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":176,"author":{"gitID":"amrut-prabhu"},"content":"        public void addProfilePhoto(String originalPhotoPath) throws PhotoReadException {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":181,"author":{"gitID":"amrut-prabhu"},"content":"        public void exportClubConnectMembers(File exportFile) throws IOException {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":186,"author":{"gitID":"amrut-prabhu"},"content":"        public ObservableList\u003cMember\u003e getFilteredMemberList() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":192,"author":{"gitID":"MuhdNurKamal"},"content":"        public ObservableList\u003cPoll\u003e getFilteredPollList() {"},{"lineNumber":193,"author":{"gitID":"MuhdNurKamal"},"content":"            return null;"},{"lineNumber":194,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":196,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":197,"author":{"gitID":"yash-chowdhary"},"content":"        public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":202,"author":{"gitID":"amrut-prabhu"},"content":"        public void updateFilteredMemberList(Predicate\u003cMember\u003e predicate) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        public void logsInMember(String username, String password) {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        public Member getLoggedInMember() {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"amrut-prabhu"},"content":"        public void updateFilteredTagList(Predicate\u003cTag\u003e predicate) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":221,"author":{"gitID":"amrut-prabhu"},"content":"        public ObservableList\u003cTag\u003e getFilteredTagList() {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":223,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":229,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":230,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        public void changePassword(String username, String oldPassword, String newPassword)"},{"lineNumber":234,"author":{"gitID":"-"},"content":"                throws PasswordIncorrectException {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":236,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        public void signUpMember(Member member) {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":242,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        public void clearClubBook() {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        public boolean getClearConfirmation() {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":253,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        public void setClearConfirmation(Boolean b) {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        public void viewAllTasks() throws TasksCannotBeDisplayedException {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":264,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":269,"author":{"gitID":"amrut-prabhu"},"content":"     * A Model stub that always accept the member being added."},{"lineNumber":270,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingMemberSignUp extends ModelStub {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        private ReadOnlyClubBook clubBook \u003d new ClubBook();"},{"lineNumber":273,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        public void signUpMember(Member member) {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"            requireNonNull(member);"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":280,"author":{"gitID":"amrut-prabhu"},"content":"        public ReadOnlyClubBook getClubBook() {"},{"lineNumber":281,"author":{"gitID":"amrut-prabhu"},"content":"            return clubBook;"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":22,"amrut-prabhu":37,"yash-chowdhary":30,"-":195}},{"path":"src/test/java/seedu/club/logic/commands/HelpCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.ui.testutil.EventsCollectorRule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class HelpCommandTest {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void execute_help_success() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        CommandResult result \u003d new HelpCommand().execute();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertEquals(SHOWING_HELP_MESSAGE, result.feedbackToUser);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowHelpRequestEvent);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":4,"-":20}},{"path":"src/test/java/seedu/club/logic/commands/LogInCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.PhotoReadException;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ClubBook;"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ReadOnlyClubBook;"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Body;"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Client;"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Subject;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Email;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.member.Name;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Phone;"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.DuplicateMatricNumberException;"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.MemberNotFoundException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.club.model.member.exceptions.PasswordIncorrectException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TaskCannotBeDeletedException;"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TasksAlreadyListedException;"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TasksCannotBeDisplayedException;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"public class LogInCommandTest {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private final Member member \u003d new Member(new Name(\"Alex Yeoh\"),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            new MatricNumber(\"A5215090A\"), new Group(\"logistics\"),"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            getTagSet(\"friends\"));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void executeMemberSuccessfullyLogIn() throws CommandException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        ModelStubAcceptingMemberLoggingIn modelStubAcceptingMemberLoggingIn \u003d new ModelStubAcceptingMemberLoggingIn();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getLogInCommandForMember(member, modelStubAcceptingMemberLoggingIn).execute();"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(String.format(LogInCommand.MESSAGE_SUCCESS, member.getName().toString()),"},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"                commandResult.feedbackToUser);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void executeMemberUnsuccessfullyLogIn() throws CommandException {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        ModelStubRejectingMemberLoggingIn modelStubRejectingMemberLoggingIn \u003d new ModelStubRejectingMemberLoggingIn();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getLogInCommandForMember(member, modelStubRejectingMemberLoggingIn).execute();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertEquals(LogInCommand.MESSAGE_FAILURE, commandResult.feedbackToUser);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Generates a new LogInCommand with the details of the given member."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private LogInCommand getLogInCommandForMember(Member member, Model model) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        LogInCommand command \u003d new LogInCommand(member.getCredentials().getUsername(),"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                member.getCredentials().getPassword());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":93,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":94,"author":{"gitID":"MuhdNurKamal"},"content":"        public void voteInPoll(Poll poll, Index answerIndex) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":99,"author":{"gitID":"yash-chowdhary"},"content":"        public void changeStatus(Task taskToEdit, Task editedTask) throws TaskNotFoundException,"},{"lineNumber":100,"author":{"gitID":"yash-chowdhary"},"content":"                DuplicateTaskException {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":105,"author":{"gitID":"MuhdNurKamal"},"content":"        public void updateFilteredPollList(Predicate\u003cPoll\u003e predicate) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":110,"author":{"gitID":"MuhdNurKamal"},"content":"        public void addPoll(Poll poll) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":115,"author":{"gitID":"MuhdNurKamal"},"content":"        public void deletePoll(Poll poll) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":117,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":120,"author":{"gitID":"amrut-prabhu"},"content":"        public void addMember(Member member) throws DuplicateMatricNumberException {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":125,"author":{"gitID":"yash-chowdhary"},"content":"        public void viewAllTasks() throws TasksCannotBeDisplayedException {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":130,"author":{"gitID":"yash-chowdhary"},"content":"        public void assignTask(Task toAdd, MatricNumber matricNumber) throws MemberNotFoundException,"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                DuplicateTaskException {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":133,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":135,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":136,"author":{"gitID":"yash-chowdhary"},"content":"        public void viewMyTasks() throws TasksAlreadyListedException {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        public void removeGroup(Group toRemove) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        public String generateEmailRecipients(Group group, Tag tag) {"},{"lineNumber":147,"author":{"gitID":"amrut-prabhu"},"content":"            return null;"},{"lineNumber":148,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":150,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":151,"author":{"gitID":"yash-chowdhary"},"content":"        public void sendEmail(String recipients, Client client, Subject subject, Body body) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":156,"author":{"gitID":"yash-chowdhary"},"content":"        public void addTaskToTaskList(Task toAdd) throws DuplicateTaskException {"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":160,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":161,"author":{"gitID":"yash-chowdhary"},"content":"        public void deleteTask(Task taskToDelete) throws TaskNotFoundException, TaskCannotBeDeletedException {"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public void logOutMember() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":171,"author":{"gitID":"amrut-prabhu"},"content":"        public void resetData(ReadOnlyClubBook newData) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":176,"author":{"gitID":"amrut-prabhu"},"content":"        public ReadOnlyClubBook getClubBook() {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":182,"author":{"gitID":"amrut-prabhu"},"content":"        public void deleteMember(Member target) throws MemberNotFoundException {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":187,"author":{"gitID":"amrut-prabhu"},"content":"        public void updateMember(Member target, Member editedMember)"},{"lineNumber":188,"author":{"gitID":"amrut-prabhu"},"content":"                throws DuplicateMatricNumberException {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":193,"author":{"gitID":"amrut-prabhu"},"content":"        public int importMembers(File importFile) throws IOException {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":195,"author":{"gitID":"amrut-prabhu"},"content":"            return 0;"},{"lineNumber":196,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":198,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":199,"author":{"gitID":"amrut-prabhu"},"content":"        public void deleteTag(Tag tag) throws TagNotFoundException {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":204,"author":{"gitID":"amrut-prabhu"},"content":"        public void addProfilePhoto(String originalPhotoPath) throws PhotoReadException {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":206,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":208,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":209,"author":{"gitID":"amrut-prabhu"},"content":"        public void exportClubConnectMembers(File exportFile) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":214,"author":{"gitID":"amrut-prabhu"},"content":"        public ObservableList\u003cMember\u003e getFilteredMemberList() {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":220,"author":{"gitID":"MuhdNurKamal"},"content":"        public ObservableList\u003cPoll\u003e getFilteredPollList() {"},{"lineNumber":221,"author":{"gitID":"MuhdNurKamal"},"content":"            return null;"},{"lineNumber":222,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":224,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":225,"author":{"gitID":"yash-chowdhary"},"content":"        public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":230,"author":{"gitID":"amrut-prabhu"},"content":"        public void updateFilteredMemberList(Predicate\u003cMember\u003e predicate) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        public void logsInMember(String username, String password) {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        public Member getLoggedInMember() {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"amrut-prabhu"},"content":"        public void updateFilteredTagList(Predicate\u003cTag\u003e predicate) {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":249,"author":{"gitID":"amrut-prabhu"},"content":"        public ObservableList\u003cTag\u003e getFilteredTagList() {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":251,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":257,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":258,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        public void changePassword(String username, String oldPassword, String newPassword)"},{"lineNumber":262,"author":{"gitID":"-"},"content":"                throws PasswordIncorrectException {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":264,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":265,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"        public void signUpMember(Member member) {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":269,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        public void clearClubBook() {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        public boolean getClearConfirmation() {"},{"lineNumber":279,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":280,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        public void setClearConfirmation(Boolean b) {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":287,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":289,"author":{"gitID":"amrut-prabhu"},"content":"     * A Model stub that always accept the member being added."},{"lineNumber":290,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingMemberLoggingIn extends ModelStub {"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        private HashMap\u003cString, Member\u003e usernameMemberHashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        private HashMap\u003cString, String\u003e usernamePasswordHashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        private Member currentlyLoggedIn \u003d null;"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        private final Member memberStub \u003d new Member(new Name(\"Alex Yeoh\"),"},{"lineNumber":296,"author":{"gitID":"-"},"content":"                new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":297,"author":{"gitID":"-"},"content":"                new MatricNumber(\"A5215090A\"), new Group(\"logistics\"),"},{"lineNumber":298,"author":{"gitID":"-"},"content":"                getTagSet(\"friends\"));"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        public void logsInMember(String username, String password) {"},{"lineNumber":302,"author":{"gitID":"-"},"content":"            requireNonNull(username, password);"},{"lineNumber":303,"author":{"gitID":"-"},"content":"            addMember(member);"},{"lineNumber":304,"author":{"gitID":"-"},"content":"            Member checkMember \u003d usernameMemberHashMap.get(username);"},{"lineNumber":305,"author":{"gitID":"-"},"content":"            if (checkMember !\u003d null \u0026\u0026 usernamePasswordHashMap.get(username).equals(password)) {"},{"lineNumber":306,"author":{"gitID":"-"},"content":"                currentlyLoggedIn \u003d checkMember;"},{"lineNumber":307,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":311,"author":{"gitID":"-"},"content":"        public void addMember(Member member) {"},{"lineNumber":312,"author":{"gitID":"-"},"content":"            requireNonNull(member);"},{"lineNumber":313,"author":{"gitID":"-"},"content":"            usernameMemberHashMap.put(member.getCredentials().getUsername().value, member);"},{"lineNumber":314,"author":{"gitID":"-"},"content":"            usernamePasswordHashMap.put(member.getCredentials().getUsername().value,"},{"lineNumber":315,"author":{"gitID":"-"},"content":"                    member.getCredentials().getPassword().value);"},{"lineNumber":316,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"th14thmusician"},"content":"        //@@author th14thmusician"},{"lineNumber":319,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":320,"author":{"gitID":"th14thmusician"},"content":"        public ReadOnlyClubBook getClubBook() {"},{"lineNumber":321,"author":{"gitID":"th14thmusician"},"content":"            ClubBook clubBook \u003d new ClubBook();"},{"lineNumber":322,"author":{"gitID":"th14thmusician"},"content":"            try {"},{"lineNumber":323,"author":{"gitID":"th14thmusician"},"content":"                clubBook.addMember(memberStub);"},{"lineNumber":324,"author":{"gitID":"th14thmusician"},"content":"            } catch (DuplicateMatricNumberException e) {"},{"lineNumber":325,"author":{"gitID":"th14thmusician"},"content":"                e.printStackTrace();"},{"lineNumber":326,"author":{"gitID":"th14thmusician"},"content":"            }"},{"lineNumber":327,"author":{"gitID":"th14thmusician"},"content":"            return clubBook;"},{"lineNumber":328,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":329,"author":{"gitID":"th14thmusician"},"content":""},{"lineNumber":330,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":331,"author":{"gitID":"th14thmusician"},"content":"        public Member getLoggedInMember() {"},{"lineNumber":332,"author":{"gitID":"th14thmusician"},"content":"            return currentlyLoggedIn;"},{"lineNumber":333,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":334,"author":{"gitID":"th14thmusician"},"content":"        //@@author"},{"lineNumber":335,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":338,"author":{"gitID":"-"},"content":"     * A Model stub that always rejects the member to log in."},{"lineNumber":339,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":340,"author":{"gitID":"-"},"content":"    private class ModelStubRejectingMemberLoggingIn extends ModelStub {"},{"lineNumber":341,"author":{"gitID":"-"},"content":"        private HashMap\u003cString, Member\u003e usernameMemberHashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":342,"author":{"gitID":"-"},"content":"        private HashMap\u003cString, String\u003e usernamePasswordHashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":343,"author":{"gitID":"-"},"content":"        private Member currentlyLoggedIn \u003d null;"},{"lineNumber":344,"author":{"gitID":"-"},"content":"        private final Member memberStub \u003d new Member(new Name(\"Alex Yeoh\"),"},{"lineNumber":345,"author":{"gitID":"-"},"content":"                new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":346,"author":{"gitID":"-"},"content":"                new MatricNumber(\"A5215090A\"), new Group(\"logistics\"),"},{"lineNumber":347,"author":{"gitID":"-"},"content":"                getTagSet(\"friends\"));"},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":350,"author":{"gitID":"-"},"content":"        public void logsInMember(String username, String password) {"},{"lineNumber":351,"author":{"gitID":"-"},"content":"            requireNonNull(username, password);"},{"lineNumber":352,"author":{"gitID":"-"},"content":"            addMember(member);"},{"lineNumber":353,"author":{"gitID":"-"},"content":"            Member checkMember \u003d usernameMemberHashMap.get(username);"},{"lineNumber":354,"author":{"gitID":"-"},"content":"            if (checkMember !\u003d null \u0026\u0026 usernamePasswordHashMap.get(username).equals(password)) {"},{"lineNumber":355,"author":{"gitID":"-"},"content":"                currentlyLoggedIn \u003d checkMember;"},{"lineNumber":356,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":357,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":360,"author":{"gitID":"-"},"content":"        public void addMember(Member member) {"},{"lineNumber":361,"author":{"gitID":"-"},"content":"            requireNonNull(member);"},{"lineNumber":362,"author":{"gitID":"-"},"content":"            usernameMemberHashMap.put(member.getCredentials().getUsername().value, member);"},{"lineNumber":363,"author":{"gitID":"-"},"content":"            usernamePasswordHashMap.put(member.getCredentials().getUsername().value,"},{"lineNumber":364,"author":{"gitID":"-"},"content":"                    member.getCredentials().getUsername().value); //purposely to have a wrong password"},{"lineNumber":365,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"author":{"gitID":"th14thmusician"},"content":"        //@@author th14thmusician"},{"lineNumber":368,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":369,"author":{"gitID":"th14thmusician"},"content":"        public ReadOnlyClubBook getClubBook() {"},{"lineNumber":370,"author":{"gitID":"th14thmusician"},"content":"            ClubBook clubBook \u003d new ClubBook();"},{"lineNumber":371,"author":{"gitID":"th14thmusician"},"content":"            try {"},{"lineNumber":372,"author":{"gitID":"th14thmusician"},"content":"                clubBook.addMember(memberStub);"},{"lineNumber":373,"author":{"gitID":"th14thmusician"},"content":"            } catch (DuplicateMatricNumberException e) {"},{"lineNumber":374,"author":{"gitID":"th14thmusician"},"content":"                e.printStackTrace();"},{"lineNumber":375,"author":{"gitID":"th14thmusician"},"content":"            }"},{"lineNumber":376,"author":{"gitID":"th14thmusician"},"content":"            return clubBook;"},{"lineNumber":377,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":378,"author":{"gitID":"th14thmusician"},"content":""},{"lineNumber":379,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":380,"author":{"gitID":"th14thmusician"},"content":"        public Member getLoggedInMember() {"},{"lineNumber":381,"author":{"gitID":"th14thmusician"},"content":"            return null;"},{"lineNumber":382,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":383,"author":{"gitID":"th14thmusician"},"content":"        //@@author"},{"lineNumber":384,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":385,"author":{"gitID":"-"},"content":"}"},{"lineNumber":386,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"MuhdNurKamal":14,"amrut-prabhu":40,"yash-chowdhary":37,"th14thmusician":34,"-":261}},{"path":"src/test/java/seedu/club/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_ANSWER;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_CLIENT;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_QUESTION;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_TIME;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ClubBook;"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.NameContainsKeywordsPredicate;"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.MemberNotFoundException;"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.QuestionContainsAnyKeywordsPredicate;"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.EditMemberDescriptorBuilder;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String VALID_NAME_BENSON \u003d \"Benson Meier\";"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String VALID_NAME_CARL \u003d \"Carl Kurz\";"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String VALID_MATRIC_NUMBER_AMY \u003d \"A0214701B\";"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String VALID_MATRIC_NUMBER_BOB \u003d \"A0784539B\";"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String VALID_MATRIC_NUMBER_BENSON \u003d \"A8389539B\";"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String VALID_MATRIC_NUMBER_CARL \u003d \"A6076201A\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String VALID_GROUP_AMY \u003d \"Exco\";"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String VALID_GROUP_BOB \u003d \"logistics\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friends\";"},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String VALID_TAG_UNUSED \u003d \"unused\"; //this tag should not be used when creating a member"},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String VALID_TAG_UNUSED_DESC \u003d \" \" + PREFIX_TAG + VALID_TAG_UNUSED;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String VALID_USERNAME_AMY \u003d \"AmyBee\";"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String VALID_USERNAME_BOB \u003d \"BobChoo\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String VALID_PASSWORD \u003d \"password\";"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String VALID_MATRIC_NUMBER \u003d \"A1234567E\";"},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String VALID_QUESTION_LIFE \u003d \"What is the meaning of life?\";"},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String VALID_QUESTION_LOVE \u003d \"What is love?\";"},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String VALID_QUESTION_WHAT \u003d \"What are you?\";"},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String VALID_QUESTION_HOW \u003d \"How are you?\";"},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String VALID_ANSWER_ONE \u003d \"this is an answer\";"},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String VALID_ANSWER_TWO \u003d \"this is also an answer\";"},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String VALID_ANSWER_THREE \u003d \"42\";"},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String VALID_ANSWER_FOUR \u003d \"i dono\";"},{"lineNumber":73,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String VALID_ANSWER_VAMPIRE \u003d \"A vampire\";"},{"lineNumber":74,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String VALID_ANSWER_ZOMBIE \u003d \"A zombie\";"},{"lineNumber":75,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String VALID_ANSWER_FINE \u003d \"I\u0027m fine\";"},{"lineNumber":76,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String VALID_ANSWER_NOT_GOOD \u003d \"Not good man\";"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String VALID_CLIENT \u003d \"gmail\";"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String VALID_CLIENT_DESC \u003d \" \" + PREFIX_CLIENT + VALID_CLIENT;"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String INVALID_CLIENT \u003d \"yahoo\";"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String INVALID_CLIENT_DESC \u003d \" \" + PREFIX_CLIENT + INVALID_CLIENT;"},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String VALID_TASK_DESCRIPTION_FOOD \u003d \"Buy Food\";"},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String VALID_TASK_DESCRIPTION_CONFETTI \u003d \"Buy Confetti\";"},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String VALID_TASK_DATE_1 \u003d \"02/05/2018\";"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String VALID_TASK_DATE_2 \u003d \"03/05/2018\";"},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String VALID_TASK_TIME_1 \u003d \"19:00\";"},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String VALID_TASK_TIME_2 \u003d \"19:01\";"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String VALID_TASK_ASSIGNOR \u003d \"Alice Pauline\";"},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String VALID_TASK_ASSIGNEE \u003d \"Alice Pauline\";"},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String VALID_TASK_STATUS_TO_BEGIN \u003d \"Yet To Begin\";"},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String VALID_TASK_STATUS_IN_PROGRESS \u003d \"In Progress\";"},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":96,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String NAME_DESC_BENSON \u003d \" \" + PREFIX_NAME + VALID_NAME_BENSON;"},{"lineNumber":97,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String NAME_DESC_CARL \u003d \" \" + PREFIX_NAME + VALID_NAME_CARL;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":102,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String MATRIC_NUMBER_DESC_AMY \u003d \" \" + PREFIX_MATRIC_NUMBER + VALID_MATRIC_NUMBER_AMY;"},{"lineNumber":103,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String MATRIC_NUMBER_DESC_BOB \u003d \" \" + PREFIX_MATRIC_NUMBER + VALID_MATRIC_NUMBER_BOB;"},{"lineNumber":104,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MATRIC_NUMBER_DESC_BENSON \u003d \" \" + PREFIX_MATRIC_NUMBER + VALID_MATRIC_NUMBER_BENSON;"},{"lineNumber":105,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MATRIC_NUMBER_DESC_CARL \u003d \" \" + PREFIX_MATRIC_NUMBER + VALID_MATRIC_NUMBER_CARL;"},{"lineNumber":106,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String GROUP_DESC_AMY \u003d \" \" + PREFIX_GROUP + VALID_GROUP_AMY;"},{"lineNumber":107,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String GROUP_DESC_BOB \u003d \" \" + PREFIX_GROUP + VALID_GROUP_BOB;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public static final String USERNAME_DESC_AMY \u003d \" \" + PREFIX_USERNAME + VALID_USERNAME_AMY;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public static final String USERNAME_DESC_BOB \u003d \" \" + PREFIX_USERNAME + VALID_USERNAME_BOB;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public static final String PASSWORD_DESC \u003d \" \" + PREFIX_PASSWORD + VALID_PASSWORD;"},{"lineNumber":113,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String QUESTION_DESC_LIFE \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_LIFE;"},{"lineNumber":114,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String QUESTION_DESC_LOVE \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_LOVE;"},{"lineNumber":115,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String QUESTION_DESC_WHAT \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_WHAT;"},{"lineNumber":116,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String QUESTION_DESC_HOW \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_HOW;"},{"lineNumber":117,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String ANSWER_DESC_ONE \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_ONE;"},{"lineNumber":118,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String ANSWER_DESC_TWO \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_TWO;"},{"lineNumber":119,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String ANSWER_DESC_THREE \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_THREE;"},{"lineNumber":120,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String ANSWER_DESC_FOUR \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_FOUR;"},{"lineNumber":121,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String ANSWER_DESC_VAMPIRE \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_VAMPIRE;"},{"lineNumber":122,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String ANSWER_DESC_ZOMBIE \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_ZOMBIE;"},{"lineNumber":123,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String ANSWER_DESC_FINE \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_FINE;"},{"lineNumber":124,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String ANSWER_DESC_NOT_GOOD \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_NOT_GOOD;"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":129,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String INVALID_MATRIC_NUMBER_DESC \u003d \" \" + PREFIX_MATRIC_NUMBER; // must follow format"},{"lineNumber":130,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String INVALID_GROUP \u003d \"public relations\"; // no spaces allowed"},{"lineNumber":131,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String INVALID_GROUP_DESC \u003d \" \" + PREFIX_GROUP + INVALID_GROUP; // no spaces allowed"},{"lineNumber":132,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String INVALID_TAG \u003d \"hubby*\";"},{"lineNumber":133,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + INVALID_TAG; // \u0027*\u0027 not allowed in tags"},{"lineNumber":134,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String INVALID_MATRIC_NUMBER \u003d \"A1234F\";"},{"lineNumber":135,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String INVALID_QUESTION \u003d \" \";"},{"lineNumber":136,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String INVALID_QUESTION_DESC \u003d \" \" + PREFIX_QUESTION + INVALID_QUESTION;"},{"lineNumber":137,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String INVALID_ANSWER \u003d \"   \";"},{"lineNumber":138,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String INVALID_ANSWER_DESC \u003d \" \" + PREFIX_ANSWER + INVALID_ANSWER;"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String NON_EXISTENT_GROUP \u003d \"broadcasting\";"},{"lineNumber":141,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String NON_EXISTENT_GROUP_DESC \u003d PREFIX_GROUP + NON_EXISTENT_GROUP;"},{"lineNumber":142,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MANDATORY_GROUP \u003d \"Member\";"},{"lineNumber":143,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MANDATORY_GROUP_DESC \u003d PREFIX_GROUP + MANDATORY_GROUP;"},{"lineNumber":144,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":145,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String INVALID_TASK_DESCRIPTION \u003d \"Buy* Books\"; // no special characters allowed"},{"lineNumber":146,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String INVALID_TASK_DATE \u003d \"01/13/2018\";    // invalid month"},{"lineNumber":147,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String INVALID_TASK_TIME \u003d \"8 AM\";  // invalid time format"},{"lineNumber":148,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":149,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String EMPTY_STRING \u003d \"\";"},{"lineNumber":150,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String BLANK_STRING_WITH_SPACE \u003d \" \";"},{"lineNumber":151,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":152,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String TASK_DESCRIPTION_DESC_FOOD \u003d \" \" + PREFIX_DESCRIPTION + VALID_TASK_DESCRIPTION_FOOD;"},{"lineNumber":153,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String TASK_DESCRIPTION_DESC_CONFETTI \u003d \" \" + PREFIX_DESCRIPTION"},{"lineNumber":154,"author":{"gitID":"yash-chowdhary"},"content":"            + VALID_TASK_DESCRIPTION_CONFETTI;"},{"lineNumber":155,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String TASK_DATE_DESC_1 \u003d \" \" + PREFIX_DATE + VALID_TASK_DATE_1;"},{"lineNumber":156,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String TASK_DATE_DESC_2 \u003d \" \" + PREFIX_DATE + VALID_TASK_DATE_2;"},{"lineNumber":157,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String TASK_TIME_DESC_1 \u003d \" \" + PREFIX_TIME + VALID_TASK_TIME_1;"},{"lineNumber":158,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String TASK_TIME_DESC_2 \u003d \" \" + PREFIX_TIME + VALID_TASK_TIME_2;"},{"lineNumber":159,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":160,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION + INVALID_TASK_DESCRIPTION;"},{"lineNumber":161,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + INVALID_TASK_DATE;"},{"lineNumber":162,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String INVALID_TIME_DESC \u003d \" \" + PREFIX_TIME + INVALID_TASK_TIME;"},{"lineNumber":163,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"amrut-prabhu"},"content":"    public static final EditCommand.EditMemberDescriptor DESC_AMY;"},{"lineNumber":168,"author":{"gitID":"amrut-prabhu"},"content":"    public static final EditCommand.EditMemberDescriptor DESC_BOB;"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":171,"author":{"gitID":"amrut-prabhu"},"content":"        DESC_AMY \u003d new EditMemberDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":172,"author":{"gitID":"MuhdNurKamal"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withMatricNumber(VALID_MATRIC_NUMBER_AMY)"},{"lineNumber":173,"author":{"gitID":"yash-chowdhary"},"content":"                .withGroup(VALID_GROUP_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":174,"author":{"gitID":"amrut-prabhu"},"content":"        DESC_BOB \u003d new EditMemberDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":175,"author":{"gitID":"MuhdNurKamal"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withMatricNumber(VALID_MATRIC_NUMBER_BOB)"},{"lineNumber":176,"author":{"gitID":"yash-chowdhary"},"content":"                .withGroup(VALID_GROUP_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":199,"author":{"gitID":"amrut-prabhu"},"content":"     * - the club book and the filtered member list in the {@code actualModel} remain unchanged"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":204,"author":{"gitID":"amrut-prabhu"},"content":"        ClubBook expectedClubBook \u003d new ClubBook(actualModel.getClubBook());"},{"lineNumber":205,"author":{"gitID":"amrut-prabhu"},"content":"        List\u003cMember\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredMemberList());"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":212,"author":{"gitID":"amrut-prabhu"},"content":"            assertEquals(expectedClubBook, actualModel.getClubBook());"},{"lineNumber":213,"author":{"gitID":"amrut-prabhu"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredMemberList());"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":218,"author":{"gitID":"amrut-prabhu"},"content":"     * Updates {@code model}\u0027s filtered list to show only the member at the given {@code targetIndex} in the"},{"lineNumber":219,"author":{"gitID":"amrut-prabhu"},"content":"     * {@code model}\u0027s club book."},{"lineNumber":220,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":221,"author":{"gitID":"amrut-prabhu"},"content":"    public static void showMemberAtIndex(Model model, Index targetIndex) {"},{"lineNumber":222,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredMemberList().size());"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"amrut-prabhu"},"content":"        Member member \u003d model.getFilteredMemberList().get(targetIndex.getZeroBased());"},{"lineNumber":225,"author":{"gitID":"amrut-prabhu"},"content":"        final String[] splitName \u003d member.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":226,"author":{"gitID":"amrut-prabhu"},"content":"        model.updateFilteredMemberList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(1, model.getFilteredMemberList().size());"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"MuhdNurKamal"},"content":"     * Updates {@code model}\u0027s filtered list to show only the poll at the given {@code targetIndex} in the"},{"lineNumber":233,"author":{"gitID":"MuhdNurKamal"},"content":"     * {@code model}\u0027s club book."},{"lineNumber":234,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":235,"author":{"gitID":"MuhdNurKamal"},"content":"    public static void showPollAtIndex(Model model, Index targetIndex) {"},{"lineNumber":236,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPollList().size());"},{"lineNumber":237,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":238,"author":{"gitID":"MuhdNurKamal"},"content":"        Poll poll \u003d model.getFilteredPollList().get(targetIndex.getZeroBased());"},{"lineNumber":239,"author":{"gitID":"MuhdNurKamal"},"content":"        final String[] splitQuestion \u003d poll.getQuestion().getValue().split(\"\\\\s+\");"},{"lineNumber":240,"author":{"gitID":"MuhdNurKamal"},"content":"        model.updateFilteredPollList(new QuestionContainsAnyKeywordsPredicate(Arrays.asList(splitQuestion[0])));"},{"lineNumber":241,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(1, model.getFilteredPollList().size());"},{"lineNumber":242,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":245,"author":{"gitID":"amrut-prabhu"},"content":"     * Deletes the first member in {@code model}\u0027s filtered list from {@code model}\u0027s club book."},{"lineNumber":246,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":247,"author":{"gitID":"amrut-prabhu"},"content":"    public static void deleteFirstMember(Model model) {"},{"lineNumber":248,"author":{"gitID":"amrut-prabhu"},"content":"        Member firstMember \u003d model.getFilteredMemberList().get(0);"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":250,"author":{"gitID":"amrut-prabhu"},"content":"            model.deleteMember(firstMember);"},{"lineNumber":251,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (MemberNotFoundException mnfe) {"},{"lineNumber":252,"author":{"gitID":"amrut-prabhu"},"content":"            throw new AssertionError(\"member in filtered list must exist in model.\", mnfe);"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":258,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":267,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":50,"amrut-prabhu":51,"yash-chowdhary":60,"-":112}},{"path":"src/test/java/seedu/club/logic/commands/UndoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.deleteFirstMember;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_FIRST_MEMBER;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.getTypicalClubBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class UndoCommandTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_MEMBER);"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_FIRST_MEMBER);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private ObservableList\u003cMember\u003e observableList;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Member member;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void setUp() throws CommandException {"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"        model \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"        expectedModel \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        observableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        member \u003d observableList.get(0);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        LogInCommand command \u003d new LogInCommand(member.getCredentials().getUsername(),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                member.getCredentials().getPassword());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        command.execute();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        command.setData(expectedModel, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        command.execute();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void execute() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":55,"author":{"gitID":"-"},"content":"                Arrays.asList(deleteCommandOne, deleteCommandTwo), Collections.emptyList());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        deleteCommandOne.execute();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        deleteCommandTwo.execute();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredMemberList(expectedModel.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"        deleteFirstMember(expectedModel);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":"        expectedModel \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredMemberList(expectedModel.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":20,"-":55}},{"path":"src/test/java/seedu/club/logic/commands/AddCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.getTypicalClubBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.MemberBuilder;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private ObservableList\u003cMember\u003e memberObservableList;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Member member;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void setUp() throws CommandException {"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"        model \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        memberObservableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        member \u003d memberObservableList.get(0);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        LogInCommand logInCommand \u003d new LogInCommand(member.getCredentials().getUsername(),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                member.getCredentials().getPassword());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        logInCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        logInCommand.execute();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        logInCommand.setData(expectedModel, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        logInCommand.execute();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"    public void execute_newMember_success() throws Exception {"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"        Member validMember \u003d new MemberBuilder().build();"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"        expectedModel.addMember(validMember);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandSuccess(prepareCommand(validMember, model), model,"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validMember), expectedModel);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"    public void execute_duplicateMember_throwsCommandException() {"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"        Member memberInList \u003d model.getClubBook().getMemberList().get(0);"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(prepareCommand(memberInList, model), model, AddCommand.MESSAGE_DUPLICATE_MATRIC_NUMBER);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code member} into the {@code model}."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":"    private AddCommand prepareCommand(Member member, Model model) {"},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"        AddCommand command \u003d new AddCommand(member);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":24,"-":43}},{"path":"src/test/java/seedu/club/logic/commands/ViewMyTasksCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalMembers.ALICE;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalTasks.getTypicalClubBookWithTasks;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.Model;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.TaskIsRelatedToMemberPredicate;"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ViewAllTasksCommand."},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"public class ViewMyTasksCommandTest {"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"    private Model expectedModel;"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    private ViewMyTasksCommand viewMyTasksCommand;"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"    @Before"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"    public void setUp() {"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"        model \u003d new ModelManager(getTypicalClubBookWithTasks(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel \u003d new ModelManager(model.getClubBook(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"        model.updateFilteredTaskList(Model.PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"        viewMyTasksCommand \u003d new ViewMyTasksCommand();"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"        viewMyTasksCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"    public void execute_listIsNotFiltered_showsMemberTasks() {"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"        model.logsInMember(ALICE.getCredentials().getUsername().value, ALICE.getCredentials().getPassword().value);"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"        model.updateFilteredTaskList(Model.PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"        TaskIsRelatedToMemberPredicate predicateAlice \u003d new TaskIsRelatedToMemberPredicate(ALICE);"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.updateFilteredTaskList(predicateAlice);"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(viewMyTasksCommand, model, ViewMyTasksCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"    public void execute_listAlreadyFiltered_throwsException() {"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"        model.logsInMember(ALICE.getCredentials().getUsername().value, ALICE.getCredentials().getPassword().value);"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"        TaskIsRelatedToMemberPredicate predicateAlice \u003d new TaskIsRelatedToMemberPredicate(ALICE);"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"        model.updateFilteredTaskList(predicateAlice);"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d ViewMyTasksCommand.MESSAGE_ALREADY_LISTED;"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(viewMyTasksCommand, model, expectedMessage);"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":55}},{"path":"src/test/java/seedu/club/logic/commands/ClearCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.getTypicalClubBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.club.commons.core.Messages;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private ObservableList\u003cMember\u003e observableList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Member member;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() throws CommandException {"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"        model \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        observableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        member \u003d observableList.get(0);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        LogInCommand command \u003d new LogInCommand(member.getCredentials().getUsername(),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                member.getCredentials().getPassword());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        command.execute();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"    public void execute_emptyClubBook_success() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Model emptyModel \u003d new ModelManager();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandFailure(prepareCommand(emptyModel), emptyModel, Messages.MESSAGE_REQUIRE_SIGN_UP);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"    public void execute_nonEmptyClubBook_success() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_CONFRIMATION, model);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Generates a new {@code ClearCommand} which upon execution, clears the contents in {@code model}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private ClearCommand prepareCommand(Model model) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        ClearCommand command \u003d new ClearCommand();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":12,"-":43}},{"path":"src/test/java/seedu/club/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.deleteFirstMember;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.showMemberAtIndex;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_FIRST_MEMBER;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.getTypicalClubBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.MemberNotFoundException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private DummyCommand dummyCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private ObservableList\u003cMember\u003e observableList;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Member member;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void setUp() throws CommandException {"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"        model \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"        expectedModel \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        observableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        member \u003d observableList.get(0);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        LogInCommand command \u003d new LogInCommand(member.getCredentials().getUsername(),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                member.getCredentials().getPassword());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        command.execute();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        command.setData(expectedModel, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        command.execute();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        model.updateFilteredMemberList(model.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredMemberList(expectedModel.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"        deleteFirstMember(expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"amrut-prabhu"},"content":"        showMemberAtIndex(model, INDEX_FIRST_MEMBER);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"        // undo() should cause the model\u0027s filtered list to show all members"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"        expectedModel \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredMemberList(expectedModel.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void redo() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        model.updateFilteredMemberList(model.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"        showMemberAtIndex(model, INDEX_FIRST_MEMBER);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredMemberList(expectedModel.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"        // redo() should cause the model\u0027s filtered list to show all members"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"        deleteFirstMember(expectedModel);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"amrut-prabhu"},"content":"     * Deletes the first member in the model\u0027s filtered list."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":83,"author":{"gitID":"amrut-prabhu"},"content":"            Member memberToDelete \u003d model.getFilteredMemberList().get(0);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":85,"author":{"gitID":"amrut-prabhu"},"content":"                model.deleteMember(memberToDelete);"},{"lineNumber":86,"author":{"gitID":"amrut-prabhu"},"content":"            } catch (MemberNotFoundException mnfe) {"},{"lineNumber":87,"author":{"gitID":"amrut-prabhu"},"content":"                fail(\"Impossible: memberToDelete was retrieved from model.\");"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":27,"-":65}},{"path":"src/test/java/seedu/club/logic/commands/HideResultsCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.getTypicalClubBook;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.events.ui.HideResultsRequestEvent;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"public class HideResultsCommandTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private ObservableList\u003cMember\u003e observableList;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Member member;"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setUp() throws CommandException {"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"        model \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        observableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        member \u003d observableList.get(0);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        LogInCommand command \u003d new LogInCommand(member.getCredentials().getUsername(),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                member.getCredentials().getPassword());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        command.execute();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void execute_help_success() throws CommandException {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        HideResultsCommand hideResultsCommand \u003d new HideResultsCommand();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        hideResultsCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        CommandResult result \u003d hideResultsCommand.execute();"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(HideResultsCommand.MESSAGE_SUCCESS, result.feedbackToUser);"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof HideResultsRequestEvent);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":10,"amrut-prabhu":11,"-":27}},{"path":"src/test/java/seedu/club/logic/commands/RedoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.deleteFirstMember;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_FIRST_MEMBER;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_SECOND_MEMBER;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.getTypicalClubBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class RedoCommandTest {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"    private final Model model \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_MEMBER);"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_SECOND_MEMBER);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private ObservableList\u003cMember\u003e observableList;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Member member;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUp() throws CommandException {"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"        expectedModel \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        observableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        member \u003d observableList.get(0);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        LogInCommand command \u003d new LogInCommand(member.getCredentials().getUsername(),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                member.getCredentials().getPassword());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        command.execute();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        command.setData(expectedModel, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        command.execute();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        deleteCommandOne.preprocessUndoableCommand();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        deleteCommandTwo.preprocessUndoableCommand();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void execute() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":57,"author":{"gitID":"-"},"content":"                Collections.emptyList(), Arrays.asList(deleteCommandTwo, deleteCommandOne));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":"        deleteFirstMember(expectedModel);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":"        deleteFirstMember(expectedModel);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":20,"-":52}},{"path":"src/test/java/seedu/club/logic/commands/AddTaskCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalTasks.BOOK_AUDITORIUM;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalTasks.BUY_CONFETTI;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.File;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.IOException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.PhotoReadException;"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ClubBook;"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ReadOnlyClubBook;"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Body;"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Client;"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Subject;"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.exceptions.GroupCannotBeRemovedException;"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Email;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.member.Name;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Phone;"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.DuplicateMatricNumberException;"},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.MemberNotFoundException;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.club.model.member.exceptions.PasswordIncorrectException;"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.DuplicatePollException;"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.PollNotFoundException;"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TaskCannotBeDeletedException;"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TasksAlreadyListedException;"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TasksCannotBeDisplayedException;"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.testutil.TaskBuilder;"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"public class AddTaskCommandTest {"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"    @Rule"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"    public void constructor_nullTask_throwsNullPointerException() {"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"        new AddTaskCommand(null);"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"    public void execute_taskAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"        ModelStubAcceptingTaskAdded modelStub \u003d new ModelStubAcceptingTaskAdded();"},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"        Task validTask \u003d new TaskBuilder().build();"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"        CommandResult commandResult \u003d getAddTaskCommandForTask(validTask, modelStub).executeUndoableCommand();"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(AddTaskCommand.MESSAGE_SUCCESS, commandResult.feedbackToUser);"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(Arrays.asList(validTask), modelStub.tasksAdded);"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"    public void execute_duplicateTask_throwsCommandException() throws Exception {"},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateTaskException();"},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"        Task validTask \u003d new TaskBuilder().build();"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":"        thrown.expectMessage(AddTaskCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":"        getAddTaskCommandForTask(validTask, modelStub).executeUndoableCommand();"},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"yash-chowdhary"},"content":"    public void equals() {"},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":"        Task firstTask \u003d BOOK_AUDITORIUM;"},{"lineNumber":96,"author":{"gitID":"yash-chowdhary"},"content":"        Task secondTask \u003d BUY_CONFETTI;"},{"lineNumber":97,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":98,"author":{"gitID":"yash-chowdhary"},"content":"        AddTaskCommand firstAddTaskCommand \u003d new AddTaskCommand(firstTask);"},{"lineNumber":99,"author":{"gitID":"yash-chowdhary"},"content":"        AddTaskCommand secondAddTaskCommand \u003d new AddTaskCommand(secondTask);"},{"lineNumber":100,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":101,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstAddTaskCommand.equals(firstAddTaskCommand));"},{"lineNumber":102,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstAddTaskCommand.equals(null));"},{"lineNumber":103,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstAddTaskCommand.equals(true));"},{"lineNumber":104,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":105,"author":{"gitID":"yash-chowdhary"},"content":"        AddTaskCommand firstCommandCopy \u003d new AddTaskCommand(firstTask);"},{"lineNumber":106,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstAddTaskCommand.equals(firstCommandCopy));"},{"lineNumber":107,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":108,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstAddTaskCommand.equals(secondAddTaskCommand));"},{"lineNumber":109,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":111,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":112,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"yash-chowdhary"},"content":"     * Generates a new AddTaskCommand with the details of the given task."},{"lineNumber":114,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"yash-chowdhary"},"content":"    private AddTaskCommand getAddTaskCommandForTask(Task task, Model model) {"},{"lineNumber":116,"author":{"gitID":"yash-chowdhary"},"content":"        AddTaskCommand command \u003d new AddTaskCommand(task);"},{"lineNumber":117,"author":{"gitID":"yash-chowdhary"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":118,"author":{"gitID":"yash-chowdhary"},"content":"        return command;"},{"lineNumber":119,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":121,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":123,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"yash-chowdhary"},"content":"    private static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":125,"author":{"gitID":"yash-chowdhary"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":126,"author":{"gitID":"yash-chowdhary"},"content":"        for (String s : strings) {"},{"lineNumber":127,"author":{"gitID":"yash-chowdhary"},"content":"            tags.add(new Tag(s));"},{"lineNumber":128,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":130,"author":{"gitID":"yash-chowdhary"},"content":"        return tags;"},{"lineNumber":131,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":133,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"yash-chowdhary"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":135,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"yash-chowdhary"},"content":"    private class ModelStub implements Model {"},{"lineNumber":137,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":138,"author":{"gitID":"yash-chowdhary"},"content":"        public void voteInPoll(Poll poll, Index answerIndex) {"},{"lineNumber":139,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":140,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":142,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":143,"author":{"gitID":"yash-chowdhary"},"content":"        public void changeStatus(Task taskToEdit, Task editedTask) throws TaskNotFoundException,"},{"lineNumber":144,"author":{"gitID":"yash-chowdhary"},"content":"                DuplicateTaskException {"},{"lineNumber":145,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":146,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":148,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":149,"author":{"gitID":"yash-chowdhary"},"content":"        public void resetData(ReadOnlyClubBook newData) {"},{"lineNumber":150,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":151,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":153,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":154,"author":{"gitID":"yash-chowdhary"},"content":"        public ReadOnlyClubBook getClubBook() {"},{"lineNumber":155,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":156,"author":{"gitID":"yash-chowdhary"},"content":"            return null;"},{"lineNumber":157,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":159,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":160,"author":{"gitID":"yash-chowdhary"},"content":"        public void viewAllTasks() throws TasksCannotBeDisplayedException {"},{"lineNumber":161,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":162,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":164,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":165,"author":{"gitID":"yash-chowdhary"},"content":"        public void viewMyTasks() throws TasksAlreadyListedException {"},{"lineNumber":166,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":167,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":169,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":170,"author":{"gitID":"yash-chowdhary"},"content":"        public void assignTask(Task toAdd, MatricNumber matricNumber) throws MemberNotFoundException,"},{"lineNumber":171,"author":{"gitID":"yash-chowdhary"},"content":"                DuplicateTaskException {"},{"lineNumber":172,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":173,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":175,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":176,"author":{"gitID":"yash-chowdhary"},"content":"        public void deleteTask(Task taskToDelete) throws TaskNotFoundException, TaskCannotBeDeletedException {"},{"lineNumber":177,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":178,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":179,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":181,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":182,"author":{"gitID":"yash-chowdhary"},"content":"        public void deleteMember(Member target) throws MemberNotFoundException {"},{"lineNumber":183,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":184,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":185,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":187,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":188,"author":{"gitID":"yash-chowdhary"},"content":"        public void addMember(Member member) throws DuplicateMatricNumberException {"},{"lineNumber":189,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":190,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":191,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":193,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":194,"author":{"gitID":"yash-chowdhary"},"content":"        public void updateMember(Member target, Member editedMember) throws DuplicateMatricNumberException,"},{"lineNumber":195,"author":{"gitID":"yash-chowdhary"},"content":"                MemberNotFoundException {"},{"lineNumber":196,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":197,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":198,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":200,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":201,"author":{"gitID":"yash-chowdhary"},"content":"        /** Adds the given poll */"},{"lineNumber":202,"author":{"gitID":"yash-chowdhary"},"content":"        public void addPoll(Poll poll) throws DuplicatePollException {"},{"lineNumber":203,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":204,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":206,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":207,"author":{"gitID":"yash-chowdhary"},"content":"        /** Deletes the given member. */"},{"lineNumber":208,"author":{"gitID":"yash-chowdhary"},"content":"        public void deletePoll(Poll poll) throws PollNotFoundException {"},{"lineNumber":209,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":210,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":212,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":213,"author":{"gitID":"yash-chowdhary"},"content":"        public void updateFilteredPollList(Predicate\u003cPoll\u003e predicate) {"},{"lineNumber":214,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":215,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":217,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":218,"author":{"gitID":"yash-chowdhary"},"content":"        public ObservableList\u003cMember\u003e getFilteredMemberList() {"},{"lineNumber":219,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":220,"author":{"gitID":"yash-chowdhary"},"content":"            return null;"},{"lineNumber":221,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":223,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":224,"author":{"gitID":"yash-chowdhary"},"content":"        public ObservableList\u003cPoll\u003e getFilteredPollList() {"},{"lineNumber":225,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":226,"author":{"gitID":"yash-chowdhary"},"content":"            return null;"},{"lineNumber":227,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":229,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":230,"author":{"gitID":"yash-chowdhary"},"content":"        public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":231,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":232,"author":{"gitID":"yash-chowdhary"},"content":"            return null;"},{"lineNumber":233,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":235,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":236,"author":{"gitID":"yash-chowdhary"},"content":"        public void updateFilteredMemberList(Predicate\u003cMember\u003e predicate) {"},{"lineNumber":237,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":238,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":239,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":240,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":241,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":242,"author":{"gitID":"yash-chowdhary"},"content":"        public void logsInMember(String username, String password) {"},{"lineNumber":243,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":244,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":245,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":247,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":248,"author":{"gitID":"yash-chowdhary"},"content":"        public Member getLoggedInMember() {"},{"lineNumber":249,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":250,"author":{"gitID":"yash-chowdhary"},"content":"            return null;"},{"lineNumber":251,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":252,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":253,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":254,"author":{"gitID":"yash-chowdhary"},"content":"        public void deleteTag(Tag tag) throws TagNotFoundException {"},{"lineNumber":255,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":256,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":257,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":258,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":259,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":260,"author":{"gitID":"yash-chowdhary"},"content":"        public void addProfilePhoto(String originalPhotoPath) throws PhotoReadException {"},{"lineNumber":261,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":262,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":263,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":264,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":265,"author":{"gitID":"yash-chowdhary"},"content":"        public ObservableList\u003cTag\u003e getFilteredTagList() {"},{"lineNumber":266,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":267,"author":{"gitID":"yash-chowdhary"},"content":"            return null;"},{"lineNumber":268,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":269,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":270,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":271,"author":{"gitID":"yash-chowdhary"},"content":"        public void updateFilteredTagList(Predicate\u003cTag\u003e predicate) {"},{"lineNumber":272,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":273,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":274,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":275,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":276,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":277,"author":{"gitID":"yash-chowdhary"},"content":"        public void removeGroup(Group toRemove) throws GroupNotFoundException, GroupCannotBeRemovedException {"},{"lineNumber":278,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":279,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":280,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":281,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":282,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":283,"author":{"gitID":"yash-chowdhary"},"content":"        public String generateEmailRecipients(Group group, Tag tag) throws GroupNotFoundException,"},{"lineNumber":284,"author":{"gitID":"yash-chowdhary"},"content":"                TagNotFoundException {"},{"lineNumber":285,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":286,"author":{"gitID":"yash-chowdhary"},"content":"            return null;"},{"lineNumber":287,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":288,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":289,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":290,"author":{"gitID":"yash-chowdhary"},"content":"        public void sendEmail(String recipients, Client client, Subject subject, Body body) {"},{"lineNumber":291,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":292,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":293,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":294,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":295,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":296,"author":{"gitID":"yash-chowdhary"},"content":"        public void logOutMember() {"},{"lineNumber":297,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":298,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":299,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":300,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":301,"author":{"gitID":"yash-chowdhary"},"content":"        public void exportClubConnectMembers(File exportFilePath) {"},{"lineNumber":302,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":303,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":304,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":305,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":306,"author":{"gitID":"yash-chowdhary"},"content":"        public int importMembers(File importFile) throws IOException {"},{"lineNumber":307,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":308,"author":{"gitID":"yash-chowdhary"},"content":"            return 0;"},{"lineNumber":309,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":310,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":311,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":312,"author":{"gitID":"yash-chowdhary"},"content":"        public void addTaskToTaskList(Task toAdd) throws DuplicateTaskException {"},{"lineNumber":313,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":314,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":315,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":316,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":317,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":318,"author":{"gitID":"yash-chowdhary"},"content":"        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":319,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":320,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":321,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":322,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":323,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":324,"author":{"gitID":"yash-chowdhary"},"content":"        public void changePassword(String username, String oldPassword, String newPassword)"},{"lineNumber":325,"author":{"gitID":"yash-chowdhary"},"content":"                throws PasswordIncorrectException {"},{"lineNumber":326,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":327,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":328,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":329,"author":{"gitID":"yash-chowdhary"},"content":"        public void signUpMember(Member member) {"},{"lineNumber":330,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":331,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":332,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":333,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":334,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":335,"author":{"gitID":"yash-chowdhary"},"content":"        public void clearClubBook() {"},{"lineNumber":336,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":337,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":338,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":339,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":340,"author":{"gitID":"yash-chowdhary"},"content":"        public boolean getClearConfirmation() {"},{"lineNumber":341,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":342,"author":{"gitID":"yash-chowdhary"},"content":"            return false;"},{"lineNumber":343,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":344,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":345,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":346,"author":{"gitID":"yash-chowdhary"},"content":"        public void setClearConfirmation(Boolean b) {"},{"lineNumber":347,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":348,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":349,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":350,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":351,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":352,"author":{"gitID":"yash-chowdhary"},"content":"     * A Model stub that always throw a DuplicateTaskException when trying to add a task."},{"lineNumber":353,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":354,"author":{"gitID":"yash-chowdhary"},"content":"    private class ModelStubThrowingDuplicateTaskException extends ModelStub {"},{"lineNumber":355,"author":{"gitID":"yash-chowdhary"},"content":"        private final Member memberStub \u003d new Member(new Name(\"Alex Yeoh\"),"},{"lineNumber":356,"author":{"gitID":"yash-chowdhary"},"content":"                new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":357,"author":{"gitID":"yash-chowdhary"},"content":"                new MatricNumber(\"A5215090A\"), new Group(\"logistics\"),"},{"lineNumber":358,"author":{"gitID":"yash-chowdhary"},"content":"                getTagSet(\"friends\"));"},{"lineNumber":359,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":360,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":361,"author":{"gitID":"yash-chowdhary"},"content":"        public void addTaskToTaskList(Task toAdd) throws DuplicateTaskException {"},{"lineNumber":362,"author":{"gitID":"yash-chowdhary"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":363,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":364,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":365,"author":{"gitID":"th14thmusician"},"content":"        //@@author th14thmusician"},{"lineNumber":366,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":367,"author":{"gitID":"th14thmusician"},"content":"        public ReadOnlyClubBook getClubBook() {"},{"lineNumber":368,"author":{"gitID":"th14thmusician"},"content":"            ClubBook clubBook \u003d new ClubBook();"},{"lineNumber":369,"author":{"gitID":"th14thmusician"},"content":"            try {"},{"lineNumber":370,"author":{"gitID":"th14thmusician"},"content":"                clubBook.addMember(memberStub);"},{"lineNumber":371,"author":{"gitID":"th14thmusician"},"content":"                clubBook.logInMember(\"A5215090A\", \"password\");"},{"lineNumber":372,"author":{"gitID":"th14thmusician"},"content":"            } catch (DuplicateMatricNumberException e) {"},{"lineNumber":373,"author":{"gitID":"th14thmusician"},"content":"                e.printStackTrace();"},{"lineNumber":374,"author":{"gitID":"th14thmusician"},"content":"            }"},{"lineNumber":375,"author":{"gitID":"th14thmusician"},"content":"            return clubBook;"},{"lineNumber":376,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":377,"author":{"gitID":"th14thmusician"},"content":""},{"lineNumber":378,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":379,"author":{"gitID":"th14thmusician"},"content":"        public Member getLoggedInMember() {"},{"lineNumber":380,"author":{"gitID":"th14thmusician"},"content":"            return memberStub;"},{"lineNumber":381,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":382,"author":{"gitID":"th14thmusician"},"content":"        //@@author"},{"lineNumber":383,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":384,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":385,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":386,"author":{"gitID":"yash-chowdhary"},"content":"     * A Model stub that always accept the task being added."},{"lineNumber":387,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":388,"author":{"gitID":"yash-chowdhary"},"content":"    private class ModelStubAcceptingTaskAdded extends ModelStub {"},{"lineNumber":389,"author":{"gitID":"yash-chowdhary"},"content":"        final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":390,"author":{"gitID":"-"},"content":"        private final Member memberStub \u003d new Member(new Name(\"Alex Yeoh\"),"},{"lineNumber":391,"author":{"gitID":"-"},"content":"                new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":392,"author":{"gitID":"-"},"content":"                new MatricNumber(\"A5215090A\"), new Group(\"logistics\"),"},{"lineNumber":393,"author":{"gitID":"-"},"content":"                getTagSet(\"friends\"));"},{"lineNumber":394,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":395,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":396,"author":{"gitID":"yash-chowdhary"},"content":"        public void addTaskToTaskList(Task toAdd) throws DuplicateTaskException {"},{"lineNumber":397,"author":{"gitID":"yash-chowdhary"},"content":"            requireNonNull(toAdd);"},{"lineNumber":398,"author":{"gitID":"yash-chowdhary"},"content":"            tasksAdded.add(toAdd);"},{"lineNumber":399,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":400,"author":{"gitID":"th14thmusician"},"content":"        //@@author th14thmusician"},{"lineNumber":401,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":402,"author":{"gitID":"th14thmusician"},"content":"        public ReadOnlyClubBook getClubBook() {"},{"lineNumber":403,"author":{"gitID":"th14thmusician"},"content":"            ClubBook clubBook \u003d new ClubBook();"},{"lineNumber":404,"author":{"gitID":"th14thmusician"},"content":"            try {"},{"lineNumber":405,"author":{"gitID":"th14thmusician"},"content":"                clubBook.addMember(memberStub);"},{"lineNumber":406,"author":{"gitID":"th14thmusician"},"content":"                clubBook.logInMember(\"A5215090A\", \"password\");"},{"lineNumber":407,"author":{"gitID":"th14thmusician"},"content":"            } catch (DuplicateMatricNumberException e) {"},{"lineNumber":408,"author":{"gitID":"th14thmusician"},"content":"                e.printStackTrace();"},{"lineNumber":409,"author":{"gitID":"th14thmusician"},"content":"            }"},{"lineNumber":410,"author":{"gitID":"th14thmusician"},"content":"            return clubBook;"},{"lineNumber":411,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":412,"author":{"gitID":"th14thmusician"},"content":""},{"lineNumber":413,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":414,"author":{"gitID":"th14thmusician"},"content":"        public Member getLoggedInMember() {"},{"lineNumber":415,"author":{"gitID":"th14thmusician"},"content":"            return memberStub;"},{"lineNumber":416,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":417,"author":{"gitID":"th14thmusician"},"content":"        //@@author"},{"lineNumber":418,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":419,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":4,"amrut-prabhu":17,"yash-chowdhary":337,"th14thmusician":36,"-":25}},{"path":"src/test/java/seedu/club/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.showMemberAtIndex;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_FIRST_MEMBER;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_SECOND_MEMBER;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_THIRD_MEMBER;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.getTypicalClubBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.ui.testutil.EventsCollectorRule;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private ObservableList\u003cMember\u003e observableList;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Member member;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void setUp() throws CommandException {"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"        model \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        observableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        member \u003d observableList.get(0);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        LogInCommand command \u003d new LogInCommand(member.getCredentials().getUsername(),"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                member.getCredentials().getPassword());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command.execute();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"        Index lastMemberIndex \u003d Index.fromOneBased(model.getFilteredMemberList().size());"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"        assertExecutionSuccess(INDEX_FIRST_MEMBER);"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"        assertExecutionSuccess(INDEX_THIRD_MEMBER);"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"        assertExecutionSuccess(lastMemberIndex);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredMemberList().size() + 1);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"        showMemberAtIndex(model, INDEX_FIRST_MEMBER);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"amrut-prabhu"},"content":"        assertExecutionSuccess(INDEX_FIRST_MEMBER);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":76,"author":{"gitID":"amrut-prabhu"},"content":"        showMemberAtIndex(model, INDEX_FIRST_MEMBER);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"amrut-prabhu"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_MEMBER;"},{"lineNumber":79,"author":{"gitID":"amrut-prabhu"},"content":"        // ensures that outOfBoundIndex is still in bounds of club book list"},{"lineNumber":80,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getClubBook().getMemberList().size());"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"amrut-prabhu"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":87,"author":{"gitID":"amrut-prabhu"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_MEMBER);"},{"lineNumber":88,"author":{"gitID":"amrut-prabhu"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_MEMBER);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":94,"author":{"gitID":"amrut-prabhu"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_MEMBER);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"amrut-prabhu"},"content":"        // different member -\u003e returns false"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":116,"author":{"gitID":"amrut-prabhu"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_MEMBER_SUCCESS, index.getOneBased()),"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":35,"-":115}},{"path":"src/test/java/seedu/club/logic/commands/DecompressCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.getTypicalClubBook;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.events.ui.DecompressMembersRequestEvent;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"public class DecompressCommandTest {"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private ObservableList\u003cMember\u003e observableList;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Member member;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setUp() throws CommandException {"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"        model \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        observableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        member \u003d observableList.get(0);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        LogInCommand command \u003d new LogInCommand(member.getCredentials().getUsername(),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                member.getCredentials().getPassword());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        command.execute();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void execute_help_success() throws CommandException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        DecompressCommand decompressCommand \u003d new DecompressCommand();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        decompressCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        CommandResult result \u003d decompressCommand.execute();"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(DecompressCommand.MESSAGE_SUCCESS, result.feedbackToUser);"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DecompressMembersRequestEvent);"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":19,"amrut-prabhu":9,"-":21}},{"path":"src/test/java/seedu/club/logic/commands/ChangeTaskStatusCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalMembers.ALICE;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalTasks.getTypicalClubBookWithTasks;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.commons.core.Messages;"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.Model;"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Status;"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"public class ChangeTaskStatusCommandTest {"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"    private Model model;"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"    private Model expectedModel;"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"    private ObservableList\u003cTask\u003e taskList;"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"    private ObservableList\u003cMember\u003e memberList;"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"    private Member member;"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"    @Before"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"    public void setUp() {"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"        model \u003d new ModelManager(getTypicalClubBookWithTasks(), new UserPrefs());"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"        model.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"    public void constructor_nullTask_throwsNullPointerException() {"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"        new AssignTaskCommand(null, null);"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"    public void execute_taskAccepted_changeSuccessful() throws Exception {"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"        Task taskToEdit \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"        ChangeTaskStatusCommand changeTaskStatusCommand \u003d prepareCommand(INDEX_FIRST_TASK,"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"                new Status(Status.IN_PROGRESS_STATUS));"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"        changeTaskStatusCommand.preprocessUndoableCommand();"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel \u003d new ModelManager(getTypicalClubBookWithTasks(), new UserPrefs());"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d String.format(ChangeTaskStatusCommand.MESSAGE_CHANGE_SUCCESS,"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"                taskToEdit.getDescription().getDescription());"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"        Task editedTask \u003d new Task(taskToEdit);"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"        editedTask.setStatus(new Status(Status.IN_PROGRESS_STATUS));"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.changeStatus(taskToEdit, editedTask);"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(changeTaskStatusCommand, model, expectedMessage, expectedModel);"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"        ChangeTaskStatusCommand changeTaskStatusCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"                new Status(Status.IN_PROGRESS_STATUS));"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(changeTaskStatusCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":"        Task taskToEdit \u003d model.getClubBook().getTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":"        Task editedTask \u003d new Task(taskToEdit);"},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":"        editedTask.setStatus(new Status(Status.COMPLETED_STATUS));"},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":"        ChangeTaskStatusCommand changeTaskStatusCommand \u003d prepareCommand(INDEX_FIRST_TASK,"},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":"                new Status(Status.IN_PROGRESS_STATUS));"},{"lineNumber":94,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel \u003d new ModelManager(getTypicalClubBookWithTasks(), new UserPrefs());"},{"lineNumber":96,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":97,"author":{"gitID":"yash-chowdhary"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":98,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":99,"author":{"gitID":"yash-chowdhary"},"content":"        changeTaskStatusCommand.execute();"},{"lineNumber":100,"author":{"gitID":"yash-chowdhary"},"content":"        undoRedoStack.push(changeTaskStatusCommand);"},{"lineNumber":101,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":102,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":103,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.changeStatus(taskToEdit, editedTask);"},{"lineNumber":104,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":105,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":107,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"yash-chowdhary"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":109,"author":{"gitID":"yash-chowdhary"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":110,"author":{"gitID":"yash-chowdhary"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":111,"author":{"gitID":"yash-chowdhary"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":112,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":113,"author":{"gitID":"yash-chowdhary"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":114,"author":{"gitID":"yash-chowdhary"},"content":"        ChangeTaskStatusCommand changeTaskStatusCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":115,"author":{"gitID":"yash-chowdhary"},"content":"                new Status(Status.IN_PROGRESS_STATUS));"},{"lineNumber":116,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":117,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(changeTaskStatusCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":118,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":119,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":120,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":121,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":123,"author":{"gitID":"yash-chowdhary"},"content":"    private ChangeTaskStatusCommand prepareCommand(Index index, Status status) {"},{"lineNumber":124,"author":{"gitID":"yash-chowdhary"},"content":"        ChangeTaskStatusCommand changeTaskStatusCommand \u003d new ChangeTaskStatusCommand(index, status);"},{"lineNumber":125,"author":{"gitID":"yash-chowdhary"},"content":"        changeTaskStatusCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":126,"author":{"gitID":"yash-chowdhary"},"content":"        return changeTaskStatusCommand;"},{"lineNumber":127,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":129,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"yash-chowdhary"},"content":"    public void equals() throws Exception {"},{"lineNumber":131,"author":{"gitID":"yash-chowdhary"},"content":"        ChangeTaskStatusCommand changeTaskStatusFirstCommand \u003d prepareCommand(INDEX_FIRST_TASK,"},{"lineNumber":132,"author":{"gitID":"yash-chowdhary"},"content":"                new Status(Status.IN_PROGRESS_STATUS));"},{"lineNumber":133,"author":{"gitID":"yash-chowdhary"},"content":"        ChangeTaskStatusCommand changeTaskStatusSecondCommand \u003d prepareCommand(INDEX_SECOND_TASK,"},{"lineNumber":134,"author":{"gitID":"yash-chowdhary"},"content":"                new Status(Status.COMPLETED_STATUS));"},{"lineNumber":135,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":136,"author":{"gitID":"yash-chowdhary"},"content":"        changeTaskStatusFirstCommand.preprocessUndoableCommand();"},{"lineNumber":137,"author":{"gitID":"yash-chowdhary"},"content":"        changeTaskStatusSecondCommand.preprocessUndoableCommand();"},{"lineNumber":138,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":139,"author":{"gitID":"yash-chowdhary"},"content":"        // same object -\u003e returns true"},{"lineNumber":140,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(changeTaskStatusFirstCommand.equals(changeTaskStatusFirstCommand));"},{"lineNumber":141,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":142,"author":{"gitID":"yash-chowdhary"},"content":"        // same values -\u003e returns true"},{"lineNumber":143,"author":{"gitID":"yash-chowdhary"},"content":"        ChangeTaskStatusCommand changeTaskStatusFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_TASK,"},{"lineNumber":144,"author":{"gitID":"yash-chowdhary"},"content":"                new Status(Status.IN_PROGRESS_STATUS));"},{"lineNumber":145,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(changeTaskStatusFirstCommand.equals(changeTaskStatusFirstCommandCopy));"},{"lineNumber":146,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":147,"author":{"gitID":"yash-chowdhary"},"content":"        // different types -\u003e returns false"},{"lineNumber":148,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(changeTaskStatusFirstCommand.equals(1));"},{"lineNumber":149,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":150,"author":{"gitID":"yash-chowdhary"},"content":"        // null -\u003e returns false"},{"lineNumber":151,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(changeTaskStatusFirstCommand.equals(null));"},{"lineNumber":152,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":153,"author":{"gitID":"yash-chowdhary"},"content":"        // different member -\u003e returns false"},{"lineNumber":154,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(changeTaskStatusFirstCommand.equals(changeTaskStatusSecondCommand));"},{"lineNumber":155,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":156}},{"path":"src/test/java/seedu/club/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.File;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.PhotoReadException;"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ClubBook;"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ReadOnlyClubBook;"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Body;"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Client;"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Subject;"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Email;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.member.Name;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Phone;"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.DuplicateMatricNumberException;"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.MemberNotFoundException;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.club.model.member.exceptions.PasswordIncorrectException;"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.DuplicatePollException;"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.PollNotFoundException;"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TaskCannotBeDeletedException;"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TasksAlreadyListedException;"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TasksCannotBeDisplayedException;"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.MemberBuilder;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"    public void constructor_nullMember_throwsNullPointerException() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"amrut-prabhu"},"content":"    public void execute_memberAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":71,"author":{"gitID":"amrut-prabhu"},"content":"        ModelStubAcceptingMemberAdded modelStub \u003d new ModelStubAcceptingMemberAdded();"},{"lineNumber":72,"author":{"gitID":"amrut-prabhu"},"content":"        Member validMember \u003d new MemberBuilder().build();"},{"lineNumber":73,"author":{"gitID":"amrut-prabhu"},"content":"        CommandResult commandResult \u003d getAddCommandForMember(validMember, modelStub).execute();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validMember), commandResult.feedbackToUser);"},{"lineNumber":76,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(Arrays.asList(validMember), modelStub.membersAdded);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"amrut-prabhu"},"content":"    public void execute_duplicateMember_throwsCommandException() throws Exception {"},{"lineNumber":81,"author":{"gitID":"amrut-prabhu"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateMemberException();"},{"lineNumber":82,"author":{"gitID":"amrut-prabhu"},"content":"        Member validMember \u003d new MemberBuilder().build();"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":85,"author":{"gitID":"amrut-prabhu"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_MATRIC_NUMBER);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"amrut-prabhu"},"content":"        getAddCommandForMember(validMember, modelStub).execute();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":92,"author":{"gitID":"amrut-prabhu"},"content":"        Member alice \u003d new MemberBuilder().withName(\"Alice\").build();"},{"lineNumber":93,"author":{"gitID":"amrut-prabhu"},"content":"        Member bob \u003d new MemberBuilder().withName(\"Bob\").build();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"amrut-prabhu"},"content":"        // different member -\u003e returns false"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"amrut-prabhu"},"content":"     * Generates a new AddCommand with the details of the given member."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"amrut-prabhu"},"content":"    private AddCommand getAddCommandForMember(Member member, Model model) {"},{"lineNumber":118,"author":{"gitID":"amrut-prabhu"},"content":"        AddCommand command \u003d new AddCommand(member);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    private static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":139,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":140,"author":{"gitID":"MuhdNurKamal"},"content":"        public void voteInPoll(Poll poll, Index answerIndex) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":144,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":145,"author":{"gitID":"MuhdNurKamal"},"content":"        public FilteredList\u003cPoll\u003e getFilteredPollList() {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":148,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":150,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":151,"author":{"gitID":"yash-chowdhary"},"content":"        public void changeStatus(Task taskToEdit, Task editedTask) throws TaskNotFoundException,"},{"lineNumber":152,"author":{"gitID":"yash-chowdhary"},"content":"                DuplicateTaskException {"},{"lineNumber":153,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":154,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":156,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":157,"author":{"gitID":"yash-chowdhary"},"content":"        public void viewAllTasks() throws TasksCannotBeDisplayedException {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":162,"author":{"gitID":"yash-chowdhary"},"content":"        public void viewMyTasks() throws TasksAlreadyListedException {"},{"lineNumber":163,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":164,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":166,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":167,"author":{"gitID":"yash-chowdhary"},"content":"        public void assignTask(Task toAdd, MatricNumber matricNumber) throws MemberNotFoundException,"},{"lineNumber":168,"author":{"gitID":"-"},"content":"                DuplicateTaskException {"},{"lineNumber":169,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":170,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":173,"author":{"gitID":"amrut-prabhu"},"content":"        public void addMember(Member member) throws DuplicateMatricNumberException {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":178,"author":{"gitID":"MuhdNurKamal"},"content":"        public void addPoll(Poll poll) throws DuplicatePollException {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":180,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":182,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":183,"author":{"gitID":"MuhdNurKamal"},"content":"        public void deletePoll(Poll target) throws PollNotFoundException {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":185,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":187,"author":{"gitID":"yash-chowdhary"},"content":"        public void deleteTask(Task taskToDelete) throws TaskNotFoundException, TaskCannotBeDeletedException {"},{"lineNumber":188,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":189,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":190,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":192,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":193,"author":{"gitID":"amrut-prabhu"},"content":"        public void addProfilePhoto(String originalPhotoPath) throws PhotoReadException {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":195,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":197,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        public void removeGroup(Group toRemove) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":203,"author":{"gitID":"amrut-prabhu"},"content":"        public void resetData(ReadOnlyClubBook newData) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":208,"author":{"gitID":"amrut-prabhu"},"content":"        public ReadOnlyClubBook getClubBook() {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":214,"author":{"gitID":"amrut-prabhu"},"content":"        public void deleteMember(Member target) throws MemberNotFoundException {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":219,"author":{"gitID":"amrut-prabhu"},"content":"        public void updateMember(Member target, Member editedMember)"},{"lineNumber":220,"author":{"gitID":"amrut-prabhu"},"content":"                throws DuplicateMatricNumberException {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":225,"author":{"gitID":"amrut-prabhu"},"content":"        public void deleteTag(Tag tag) throws TagNotFoundException {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":230,"author":{"gitID":"amrut-prabhu"},"content":"        public ObservableList\u003cMember\u003e getFilteredMemberList() {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":232,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":236,"author":{"gitID":"amrut-prabhu"},"content":"        public void updateFilteredMemberList(Predicate\u003cMember\u003e predicate) {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        public void logsInMember(String username, String password) {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        public Member getLoggedInMember() {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":251,"author":{"gitID":"MuhdNurKamal"},"content":"        public void updateFilteredPollList(Predicate\u003cPoll\u003e poll) {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"amrut-prabhu"},"content":"        public void updateFilteredTagList(Predicate\u003cTag\u003e predicate) {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":260,"author":{"gitID":"amrut-prabhu"},"content":"        public ObservableList\u003cTag\u003e getFilteredTagList() {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":262,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":263,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":264,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":265,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":266,"author":{"gitID":"yash-chowdhary"},"content":"        public void sendEmail(String recipients, Client client, Subject subject, Body body) {"},{"lineNumber":267,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":268,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":269,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":270,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        public void logOutMember() {"},{"lineNumber":273,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":277,"author":{"gitID":"yash-chowdhary"},"content":"        public String generateEmailRecipients(Group group, Tag tag) throws GroupNotFoundException,"},{"lineNumber":278,"author":{"gitID":"yash-chowdhary"},"content":"                TagNotFoundException {"},{"lineNumber":279,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":280,"author":{"gitID":"yash-chowdhary"},"content":"            return null;"},{"lineNumber":281,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":282,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":283,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":284,"author":{"gitID":"amrut-prabhu"},"content":"        public void exportClubConnectMembers(File exportFilePath) throws IOException {"},{"lineNumber":285,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":286,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":287,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":288,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":289,"author":{"gitID":"amrut-prabhu"},"content":"        public int importMembers(File importFile) throws IOException {"},{"lineNumber":290,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":291,"author":{"gitID":"amrut-prabhu"},"content":"            return 0;"},{"lineNumber":292,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":293,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":294,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":295,"author":{"gitID":"yash-chowdhary"},"content":"        public void addTaskToTaskList(Task toAdd) throws DuplicateTaskException {"},{"lineNumber":296,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":297,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":298,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":299,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":300,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":301,"author":{"gitID":"yash-chowdhary"},"content":"        public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":302,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":303,"author":{"gitID":"yash-chowdhary"},"content":"            return null;"},{"lineNumber":304,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":308,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":309,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":310,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        public void changePassword(String username, String oldPassword, String newPassword)"},{"lineNumber":314,"author":{"gitID":"-"},"content":"                throws PasswordIncorrectException {"},{"lineNumber":315,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":316,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":317,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"        public void signUpMember(Member member) {"},{"lineNumber":320,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":321,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":322,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":323,"author":{"gitID":"-"},"content":""},{"lineNumber":324,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":325,"author":{"gitID":"-"},"content":"        public void clearClubBook() {"},{"lineNumber":326,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":327,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":330,"author":{"gitID":"-"},"content":"        public boolean getClearConfirmation() {"},{"lineNumber":331,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":332,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":333,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":336,"author":{"gitID":"-"},"content":"        public void setClearConfirmation(Boolean b) {"},{"lineNumber":337,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":338,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":339,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":340,"author":{"gitID":"-"},"content":""},{"lineNumber":341,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":342,"author":{"gitID":"amrut-prabhu"},"content":"     * A Model stub that always throw a DuplicateMemberException when trying to add a member."},{"lineNumber":343,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":344,"author":{"gitID":"amrut-prabhu"},"content":"    private class ModelStubThrowingDuplicateMemberException extends ModelStub {"},{"lineNumber":345,"author":{"gitID":"-"},"content":"        final Member memberStub \u003d new Member(new Name(\"Alex Yeoh\"),"},{"lineNumber":346,"author":{"gitID":"-"},"content":"                new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":347,"author":{"gitID":"-"},"content":"                new MatricNumber(\"A5215090A\"), new Group(\"exco\"),"},{"lineNumber":348,"author":{"gitID":"-"},"content":"                getTagSet(\"friends\"));"},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":351,"author":{"gitID":"amrut-prabhu"},"content":"        public void addMember(Member member) throws DuplicateMatricNumberException {"},{"lineNumber":352,"author":{"gitID":"amrut-prabhu"},"content":"            throw new DuplicateMatricNumberException();"},{"lineNumber":353,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"th14thmusician"},"content":"        //@@author th14thmusician"},{"lineNumber":356,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":357,"author":{"gitID":"th14thmusician"},"content":"        public ReadOnlyClubBook getClubBook() {"},{"lineNumber":358,"author":{"gitID":"th14thmusician"},"content":"            ClubBook clubBook \u003d new ClubBook();"},{"lineNumber":359,"author":{"gitID":"th14thmusician"},"content":"            try {"},{"lineNumber":360,"author":{"gitID":"th14thmusician"},"content":"                clubBook.addMember(memberStub);"},{"lineNumber":361,"author":{"gitID":"th14thmusician"},"content":"                clubBook.logInMember(\"A5215090A\", \"password\");"},{"lineNumber":362,"author":{"gitID":"th14thmusician"},"content":"            } catch (DuplicateMatricNumberException e) {"},{"lineNumber":363,"author":{"gitID":"th14thmusician"},"content":"                e.printStackTrace();"},{"lineNumber":364,"author":{"gitID":"th14thmusician"},"content":"            }"},{"lineNumber":365,"author":{"gitID":"th14thmusician"},"content":"            return clubBook;"},{"lineNumber":366,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":367,"author":{"gitID":"th14thmusician"},"content":""},{"lineNumber":368,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":369,"author":{"gitID":"th14thmusician"},"content":"        public Member getLoggedInMember() {"},{"lineNumber":370,"author":{"gitID":"th14thmusician"},"content":"            return memberStub;"},{"lineNumber":371,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":372,"author":{"gitID":"th14thmusician"},"content":"        //@@author"},{"lineNumber":373,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":374,"author":{"gitID":"-"},"content":""},{"lineNumber":375,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":376,"author":{"gitID":"amrut-prabhu"},"content":"     * A Model stub that always accept the member being added."},{"lineNumber":377,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":378,"author":{"gitID":"amrut-prabhu"},"content":"    private class ModelStubAcceptingMemberAdded extends ModelStub {"},{"lineNumber":379,"author":{"gitID":"amrut-prabhu"},"content":"        final ArrayList\u003cMember\u003e membersAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":380,"author":{"gitID":"-"},"content":"        final Member memberStub \u003d new Member(new Name(\"Alex Yeoh\"),"},{"lineNumber":381,"author":{"gitID":"-"},"content":"                new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":382,"author":{"gitID":"-"},"content":"                new MatricNumber(\"A5215090A\"), new Group(\"exco\"),"},{"lineNumber":383,"author":{"gitID":"-"},"content":"                getTagSet(\"friends\"));"},{"lineNumber":384,"author":{"gitID":"-"},"content":""},{"lineNumber":385,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":386,"author":{"gitID":"amrut-prabhu"},"content":"        public void addMember(Member member) throws DuplicateMatricNumberException {"},{"lineNumber":387,"author":{"gitID":"amrut-prabhu"},"content":"            requireNonNull(member);"},{"lineNumber":388,"author":{"gitID":"amrut-prabhu"},"content":"            membersAdded.add(member);"},{"lineNumber":389,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":390,"author":{"gitID":"-"},"content":""},{"lineNumber":391,"author":{"gitID":"th14thmusician"},"content":"        //@@author th14thmusician"},{"lineNumber":392,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":393,"author":{"gitID":"th14thmusician"},"content":"        public ReadOnlyClubBook getClubBook() {"},{"lineNumber":394,"author":{"gitID":"th14thmusician"},"content":"            ClubBook clubBook \u003d new ClubBook();"},{"lineNumber":395,"author":{"gitID":"th14thmusician"},"content":"            try {"},{"lineNumber":396,"author":{"gitID":"th14thmusician"},"content":"                clubBook.addMember(memberStub);"},{"lineNumber":397,"author":{"gitID":"th14thmusician"},"content":"                clubBook.logInMember(\"A5215090A\", \"password\");"},{"lineNumber":398,"author":{"gitID":"th14thmusician"},"content":"            } catch (DuplicateMatricNumberException e) {"},{"lineNumber":399,"author":{"gitID":"th14thmusician"},"content":"                e.printStackTrace();"},{"lineNumber":400,"author":{"gitID":"th14thmusician"},"content":"            }"},{"lineNumber":401,"author":{"gitID":"th14thmusician"},"content":"            return clubBook;"},{"lineNumber":402,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":403,"author":{"gitID":"th14thmusician"},"content":""},{"lineNumber":404,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":405,"author":{"gitID":"th14thmusician"},"content":"        public Member getLoggedInMember() {"},{"lineNumber":406,"author":{"gitID":"th14thmusician"},"content":"            return memberStub;"},{"lineNumber":407,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":408,"author":{"gitID":"th14thmusician"},"content":"        //@@author"},{"lineNumber":409,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":410,"author":{"gitID":"-"},"content":""},{"lineNumber":411,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":19,"amrut-prabhu":74,"yash-chowdhary":70,"th14thmusician":36,"-":212}},{"path":"src/test/java/seedu/club/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_MEMBERS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.ALICE;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.BENSON;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.CARL;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.DANIEL;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.ELLE;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.FIONA;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.GEORGE;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.getTypicalClubBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.parser.Prefix;"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ClubBook;"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.FieldContainsKeywordsPredicate;"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":42,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":43,"author":{"gitID":"-"},"content":" */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"public class FindCommandTest {"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final Prefix[] prefixes \u003d {PREFIX_NAME, PREFIX_EMAIL, PREFIX_PHONE,"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"        PREFIX_MATRIC_NUMBER, PREFIX_TAG, PREFIX_GROUP};"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private ObservableList\u003cMember\u003e observableList;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private Member member;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void setUp() throws CommandException {"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"        model \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        observableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        member \u003d observableList.get(0);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        LogInCommand command \u003d new LogInCommand(member.getCredentials().getUsername(),"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                member.getCredentials().getPassword());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        command.execute();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":"    public void equals_namePrefix() {"},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(Collections.singletonList(\"first\"), PREFIX_NAME);"},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(Collections.singletonList(\"second\"), PREFIX_NAME);"},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":"        FindCommand findByFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"        FindCommand findBySecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":75,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(findByFirstCommand.equals(findByFirstCommand));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"MuhdNurKamal"},"content":"        FindCommand findByFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":79,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(findByFirstCommand.equals(findByFirstCommandCopy));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":82,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(findByFirstCommand.equals(1));"},{"lineNumber":83,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":84,"author":{"gitID":"MuhdNurKamal"},"content":"        // null -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(findByFirstCommand \u003d\u003d null);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"amrut-prabhu"},"content":"        // different member -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(findByFirstCommand.equals(findBySecondCommand));"},{"lineNumber":89,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":91,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"MuhdNurKamal"},"content":"    public void equals_emailPrefix() {"},{"lineNumber":93,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":94,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(Collections.singletonList(\"first\"), PREFIX_EMAIL);"},{"lineNumber":95,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":96,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(Collections.singletonList(\"second\"), PREFIX_EMAIL);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"MuhdNurKamal"},"content":"        FindCommand findByFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":99,"author":{"gitID":"MuhdNurKamal"},"content":"        FindCommand findBySecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":102,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(findByFirstCommand.equals(findByFirstCommand));"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":105,"author":{"gitID":"MuhdNurKamal"},"content":"        FindCommand findByFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":106,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(findByFirstCommand.equals(findByFirstCommandCopy));"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":109,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(findByFirstCommand.equals(1));"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":112,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(findByFirstCommand \u003d\u003d null);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"amrut-prabhu"},"content":"        // different member -\u003e returns false"},{"lineNumber":115,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(findByFirstCommand.equals(findBySecondCommand));"},{"lineNumber":116,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":118,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"MuhdNurKamal"},"content":"    public void equals_phonePrefix() {"},{"lineNumber":120,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":121,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(Collections.singletonList(\"first\"), PREFIX_PHONE);"},{"lineNumber":122,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":123,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(Collections.singletonList(\"second\"), PREFIX_PHONE);"},{"lineNumber":124,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":125,"author":{"gitID":"MuhdNurKamal"},"content":"        FindCommand findByFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":126,"author":{"gitID":"MuhdNurKamal"},"content":"        FindCommand findBySecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":127,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":128,"author":{"gitID":"MuhdNurKamal"},"content":"        // same object -\u003e returns true"},{"lineNumber":129,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(findByFirstCommand.equals(findByFirstCommand));"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":132,"author":{"gitID":"MuhdNurKamal"},"content":"        FindCommand findByFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":133,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(findByFirstCommand.equals(findByFirstCommandCopy));"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":136,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(findByFirstCommand.equals(1));"},{"lineNumber":137,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":138,"author":{"gitID":"MuhdNurKamal"},"content":"        // null -\u003e returns false"},{"lineNumber":139,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(findByFirstCommand \u003d\u003d null);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"amrut-prabhu"},"content":"        // different member -\u003e returns false"},{"lineNumber":142,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(findByFirstCommand.equals(findBySecondCommand));"},{"lineNumber":143,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":145,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"MuhdNurKamal"},"content":"    public void equals_matricNumberPrefix() {"},{"lineNumber":147,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":148,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(Collections.singletonList(\"first\"), PREFIX_MATRIC_NUMBER);"},{"lineNumber":149,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":150,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(Collections.singletonList(\"second\"), PREFIX_MATRIC_NUMBER);"},{"lineNumber":151,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":152,"author":{"gitID":"MuhdNurKamal"},"content":"        FindCommand findByFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":153,"author":{"gitID":"MuhdNurKamal"},"content":"        FindCommand findBySecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":154,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":155,"author":{"gitID":"MuhdNurKamal"},"content":"        // same object -\u003e returns true"},{"lineNumber":156,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(findByFirstCommand.equals(findByFirstCommand));"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":159,"author":{"gitID":"MuhdNurKamal"},"content":"        FindCommand findByFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":160,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(findByFirstCommand.equals(findByFirstCommandCopy));"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":163,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(findByFirstCommand.equals(1));"},{"lineNumber":164,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":165,"author":{"gitID":"MuhdNurKamal"},"content":"        // null -\u003e returns false"},{"lineNumber":166,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(findByFirstCommand \u003d\u003d null);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"amrut-prabhu"},"content":"        // different member -\u003e returns false"},{"lineNumber":169,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(findByFirstCommand.equals(findBySecondCommand));"},{"lineNumber":170,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":172,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":173,"author":{"gitID":"MuhdNurKamal"},"content":"    public void equals_groupPrefix() {"},{"lineNumber":174,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":175,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(Collections.singletonList(\"first\"), PREFIX_GROUP);"},{"lineNumber":176,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":177,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(Collections.singletonList(\"second\"), PREFIX_GROUP);"},{"lineNumber":178,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":179,"author":{"gitID":"MuhdNurKamal"},"content":"        FindCommand findByFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":180,"author":{"gitID":"MuhdNurKamal"},"content":"        FindCommand findBySecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":181,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":182,"author":{"gitID":"MuhdNurKamal"},"content":"        // same object -\u003e returns true"},{"lineNumber":183,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(findByFirstCommand.equals(findByFirstCommand));"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":186,"author":{"gitID":"MuhdNurKamal"},"content":"        FindCommand findByFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":187,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(findByFirstCommand.equals(findByFirstCommandCopy));"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":190,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(findByFirstCommand.equals(1));"},{"lineNumber":191,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":192,"author":{"gitID":"MuhdNurKamal"},"content":"        // null -\u003e returns false"},{"lineNumber":193,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(findByFirstCommand \u003d\u003d null);"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"amrut-prabhu"},"content":"        // different member -\u003e returns false"},{"lineNumber":196,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(findByFirstCommand.equals(findBySecondCommand));"},{"lineNumber":197,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":199,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":200,"author":{"gitID":"MuhdNurKamal"},"content":"    public void equals_tagPrefix() {"},{"lineNumber":201,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":202,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(Collections.singletonList(\"first\"), PREFIX_TAG);"},{"lineNumber":203,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":204,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(Collections.singletonList(\"second\"), PREFIX_TAG);"},{"lineNumber":205,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":206,"author":{"gitID":"MuhdNurKamal"},"content":"        FindCommand findByFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":207,"author":{"gitID":"MuhdNurKamal"},"content":"        FindCommand findBySecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":208,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":209,"author":{"gitID":"MuhdNurKamal"},"content":"        // same object -\u003e returns true"},{"lineNumber":210,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(findByFirstCommand.equals(findByFirstCommand));"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":213,"author":{"gitID":"MuhdNurKamal"},"content":"        FindCommand findByFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":214,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(findByFirstCommand.equals(findByFirstCommandCopy));"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":217,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(findByFirstCommand.equals(1));"},{"lineNumber":218,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":219,"author":{"gitID":"MuhdNurKamal"},"content":"        // null -\u003e returns false"},{"lineNumber":220,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(findByFirstCommand \u003d\u003d null);"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"amrut-prabhu"},"content":"        // different member -\u003e returns false"},{"lineNumber":223,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(findByFirstCommand.equals(findBySecondCommand));"},{"lineNumber":224,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":226,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":227,"author":{"gitID":"MuhdNurKamal"},"content":"    public void equals_differentPrefix_returnFalse() {"},{"lineNumber":228,"author":{"gitID":"MuhdNurKamal"},"content":"        Prefix[] prefixes \u003d {PREFIX_NAME, PREFIX_EMAIL, PREFIX_PHONE, PREFIX_MATRIC_NUMBER, PREFIX_TAG, PREFIX_GROUP};"},{"lineNumber":229,"author":{"gitID":"MuhdNurKamal"},"content":"        FindCommand[] commands \u003d new FindCommand[prefixes.length];"},{"lineNumber":230,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":231,"author":{"gitID":"MuhdNurKamal"},"content":"        for (int index \u003d 0; index \u003c prefixes.length; index++) {"},{"lineNumber":232,"author":{"gitID":"MuhdNurKamal"},"content":"            commands[index] \u003d"},{"lineNumber":233,"author":{"gitID":"MuhdNurKamal"},"content":"                    new FindCommand("},{"lineNumber":234,"author":{"gitID":"MuhdNurKamal"},"content":"                            new FieldContainsKeywordsPredicate(Collections.singletonList(\"first\"), prefixes[index]));"},{"lineNumber":235,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":237,"author":{"gitID":"MuhdNurKamal"},"content":"        // Check across all pairs"},{"lineNumber":238,"author":{"gitID":"MuhdNurKamal"},"content":"        for (int i \u003d 0; i \u003c commands.length; i++) {"},{"lineNumber":239,"author":{"gitID":"MuhdNurKamal"},"content":"            for (int j \u003d 0; j \u003c commands.length; j++) {"},{"lineNumber":240,"author":{"gitID":"MuhdNurKamal"},"content":"                if (i !\u003d j) {"},{"lineNumber":241,"author":{"gitID":"MuhdNurKamal"},"content":"                    assertFalse(commands[i].equals(commands[j]));"},{"lineNumber":242,"author":{"gitID":"MuhdNurKamal"},"content":"                }"},{"lineNumber":243,"author":{"gitID":"MuhdNurKamal"},"content":"            }"},{"lineNumber":244,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":245,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    public void execute_zeroKeywords_noMemberFound() throws CommandException {"},{"lineNumber":250,"author":{"gitID":"amrut-prabhu"},"content":"        String expectedMessage \u003d String.format(MESSAGE_MEMBERS_LISTED_OVERVIEW, 0);"},{"lineNumber":251,"author":{"gitID":"MuhdNurKamal"},"content":"        for (Prefix prefix : prefixes) {"},{"lineNumber":252,"author":{"gitID":"MuhdNurKamal"},"content":"            assertCommandSuccess(prepareCommand(\" \", prefix), expectedMessage, Collections.emptyList());"},{"lineNumber":253,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    public void execute_multipleKeywords_multipleMembersFound() throws CommandException {"},{"lineNumber":258,"author":{"gitID":"amrut-prabhu"},"content":"        String expectedMessage \u003d String.format(MESSAGE_MEMBERS_LISTED_OVERVIEW, 3);"},{"lineNumber":259,"author":{"gitID":"MuhdNurKamal"},"content":"        FindCommand command \u003d prepareCommand(\"Kurz Elle Kunz\", PREFIX_NAME);"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":261,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":262,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d prepareCommand(\"95352563 9482224 9482427\", PREFIX_PHONE);"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":264,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":265,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d prepareCommand(\"heinz@example.com werner@example.com lydia@example.com\", PREFIX_EMAIL);"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":267,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":268,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d prepareCommand(\"A6076201A A1932279G A9662042H\", PREFIX_MATRIC_NUMBER);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":270,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":271,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d prepareCommand(\"marketing operations\", PREFIX_GROUP);"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":273,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":274,"author":{"gitID":"amrut-prabhu"},"content":"        expectedMessage \u003d String.format(MESSAGE_MEMBERS_LISTED_OVERVIEW, 7);"},{"lineNumber":275,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d prepareCommand(\"friend friends owesMoney\", PREFIX_TAG);"},{"lineNumber":276,"author":{"gitID":"MuhdNurKamal"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON, CARL,"},{"lineNumber":277,"author":{"gitID":"MuhdNurKamal"},"content":"                DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":281,"author":{"gitID":"MuhdNurKamal"},"content":"     * Parses {@code userInput} and {@code prefix} into a {@code FindCommand}."},{"lineNumber":282,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":283,"author":{"gitID":"MuhdNurKamal"},"content":"    private FindCommand prepareCommand(String userInput, Prefix prefix) {"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        FindCommand command \u003d"},{"lineNumber":285,"author":{"gitID":"MuhdNurKamal"},"content":"                new FindCommand(new FieldContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")),"},{"lineNumber":286,"author":{"gitID":"MuhdNurKamal"},"content":"                        prefix));"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":293,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":294,"author":{"gitID":"amrut-prabhu"},"content":"     *     - the {@code FilteredList\u003cmember\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":295,"author":{"gitID":"amrut-prabhu"},"content":"     *     - the {@code ClubBook} in model remains the same after executing the {@code command}"},{"lineNumber":296,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(FindCommand command, String expectedMessage, List\u003cMember\u003e expectedList)"},{"lineNumber":298,"author":{"gitID":"-"},"content":"            throws CommandException {"},{"lineNumber":299,"author":{"gitID":"amrut-prabhu"},"content":"        ClubBook expectedClubBook \u003d new ClubBook(model.getClubBook());"},{"lineNumber":300,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":303,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(expectedList, model.getFilteredMemberList());"},{"lineNumber":304,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(expectedClubBook, model.getClubBook());"},{"lineNumber":305,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":306,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":169,"amrut-prabhu":34,"-":103}},{"path":"src/test/java/seedu/club/logic/commands/ChangeProfilePhotoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"//@@author amrut-prabhu"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.File;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.function.Predicate;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.PhotoReadException;"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ClubBook;"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ReadOnlyClubBook;"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.email.Body;"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.email.Client;"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.email.Subject;"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Email;"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Name;"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Phone;"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.ProfilePhoto;"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.DataToChangeIsNotCurrentlyLoggedInMemberException;"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.DuplicateMatricNumberException;"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.MemberNotFoundException;"},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.PasswordIncorrectException;"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.poll.exceptions.AnswerNotFoundException;"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.poll.exceptions.DuplicatePollException;"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.poll.exceptions.PollNotFoundException;"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.poll.exceptions.UserAlreadyVotedException;"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":51,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":52,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.task.exceptions.TaskCannotBeDeletedException;"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.task.exceptions.TasksAlreadyListedException;"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.task.exceptions.TasksCannotBeDisplayedException;"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"public class ChangeProfilePhotoCommandTest {"},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":"    @Rule"},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"    private String currentDirectoryPath \u003d \".\";"},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":"    private File currentDirectory \u003d new File(currentDirectoryPath);"},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"    private String testPhotoPath \u003d \"./src/test/resources/photos/testPhoto.png\";"},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":"    private File testPhotoFile \u003d new File(testPhotoPath);"},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":70,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"amrut-prabhu"},"content":"    public void constructor_nullProfilePhoto_throwsNullPointerException() {"},{"lineNumber":72,"author":{"gitID":"amrut-prabhu"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":73,"author":{"gitID":"amrut-prabhu"},"content":"        new ChangeProfilePhotoCommand(null);"},{"lineNumber":74,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":76,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"amrut-prabhu"},"content":"    public void execute_addProfilePhoto_success() throws Exception {"},{"lineNumber":78,"author":{"gitID":"amrut-prabhu"},"content":"        ModelStubAcceptingAddProfilePhoto modelStub \u003d new ModelStubAcceptingAddProfilePhoto();"},{"lineNumber":79,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":80,"author":{"gitID":"amrut-prabhu"},"content":"        String validPhotoPath \u003d testPhotoFile.getAbsolutePath();"},{"lineNumber":81,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":82,"author":{"gitID":"amrut-prabhu"},"content":"        CommandResult commandResult \u003d getChangeProfilePhotoCommand(validPhotoPath, modelStub).execute();"},{"lineNumber":83,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(String.format(ChangeProfilePhotoCommand.MESSAGE_CHANGE_PROFILE_PHOTO_SUCCESS, validPhotoPath),"},{"lineNumber":84,"author":{"gitID":"amrut-prabhu"},"content":"                commandResult.feedbackToUser);"},{"lineNumber":85,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":87,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"amrut-prabhu"},"content":"    public void execute_invalidPath_throwsCommandException() throws Exception {"},{"lineNumber":89,"author":{"gitID":"amrut-prabhu"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingPhotoReadException();"},{"lineNumber":90,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":91,"author":{"gitID":"amrut-prabhu"},"content":"        String invalidPhotoPath \u003d currentDirectory.getAbsolutePath();"},{"lineNumber":92,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":93,"author":{"gitID":"amrut-prabhu"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":94,"author":{"gitID":"amrut-prabhu"},"content":"        thrown.expectMessage(String.format(ChangeProfilePhotoCommand.MESSAGE_INVALID_PHOTO_PATH, invalidPhotoPath));"},{"lineNumber":95,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":96,"author":{"gitID":"amrut-prabhu"},"content":"        getChangeProfilePhotoCommand(invalidPhotoPath, modelStub).execute();"},{"lineNumber":97,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":99,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"amrut-prabhu"},"content":"    public void equals() {"},{"lineNumber":101,"author":{"gitID":"amrut-prabhu"},"content":"        String photoFilePath \u003d currentDirectory.getAbsolutePath() + \"/testPhoto.png\";"},{"lineNumber":102,"author":{"gitID":"amrut-prabhu"},"content":"        ProfilePhoto profilePhoto \u003d new ProfilePhoto(photoFilePath);"},{"lineNumber":103,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":104,"author":{"gitID":"amrut-prabhu"},"content":"        ProfilePhoto diffProfilePhoto \u003d new ProfilePhoto(testPhotoPath);"},{"lineNumber":105,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":106,"author":{"gitID":"amrut-prabhu"},"content":"        ChangeProfilePhotoCommand changeProfilePhotoCommand \u003d new ChangeProfilePhotoCommand(profilePhoto);"},{"lineNumber":107,"author":{"gitID":"amrut-prabhu"},"content":"        ChangeProfilePhotoCommand samePathChangeProfilePhotoCommand \u003d new ChangeProfilePhotoCommand(profilePhoto);"},{"lineNumber":108,"author":{"gitID":"amrut-prabhu"},"content":"        ChangeProfilePhotoCommand differentchangeProfilePhotoCommand \u003d new ChangeProfilePhotoCommand(diffProfilePhoto);"},{"lineNumber":109,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":110,"author":{"gitID":"amrut-prabhu"},"content":"        // same object -\u003e returns true"},{"lineNumber":111,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(changeProfilePhotoCommand.equals(changeProfilePhotoCommand));"},{"lineNumber":112,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":113,"author":{"gitID":"amrut-prabhu"},"content":"        // same photo -\u003e returns true"},{"lineNumber":114,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(changeProfilePhotoCommand.equals(samePathChangeProfilePhotoCommand));"},{"lineNumber":115,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":116,"author":{"gitID":"amrut-prabhu"},"content":"        // different types -\u003e returns false"},{"lineNumber":117,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(changeProfilePhotoCommand.equals(1));"},{"lineNumber":118,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":119,"author":{"gitID":"amrut-prabhu"},"content":"        // null -\u003e returns false"},{"lineNumber":120,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(changeProfilePhotoCommand.equals(null));"},{"lineNumber":121,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":122,"author":{"gitID":"amrut-prabhu"},"content":"        // different photo -\u003e returns false"},{"lineNumber":123,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(changeProfilePhotoCommand.equals(differentchangeProfilePhotoCommand));"},{"lineNumber":124,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":126,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"amrut-prabhu"},"content":"     * Generates a new ExportCommand with {@code exportFile}."},{"lineNumber":128,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"amrut-prabhu"},"content":"    private ChangeProfilePhotoCommand getChangeProfilePhotoCommand(String photoPath, Model model) {"},{"lineNumber":130,"author":{"gitID":"amrut-prabhu"},"content":"        ChangeProfilePhotoCommand command \u003d new ChangeProfilePhotoCommand(new ProfilePhoto(photoPath));"},{"lineNumber":131,"author":{"gitID":"amrut-prabhu"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":132,"author":{"gitID":"amrut-prabhu"},"content":"        return command;"},{"lineNumber":133,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":136,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"amrut-prabhu"},"content":"    private static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":138,"author":{"gitID":"amrut-prabhu"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":139,"author":{"gitID":"amrut-prabhu"},"content":"        for (String s : strings) {"},{"lineNumber":140,"author":{"gitID":"amrut-prabhu"},"content":"            tags.add(new Tag(s));"},{"lineNumber":141,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":143,"author":{"gitID":"amrut-prabhu"},"content":"        return tags;"},{"lineNumber":144,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":146,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"amrut-prabhu"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":148,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"amrut-prabhu"},"content":"    private class ModelStub implements Model {"},{"lineNumber":150,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":151,"author":{"gitID":"amrut-prabhu"},"content":"        public void voteInPoll(Poll poll, Index answerIndex) throws"},{"lineNumber":152,"author":{"gitID":"amrut-prabhu"},"content":"                PollNotFoundException, AnswerNotFoundException, UserAlreadyVotedException {"},{"lineNumber":153,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":154,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":156,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":157,"author":{"gitID":"amrut-prabhu"},"content":"        public void changeStatus(Task taskToEdit, Task editedTask) throws TaskNotFoundException,"},{"lineNumber":158,"author":{"gitID":"amrut-prabhu"},"content":"                DuplicateTaskException {"},{"lineNumber":159,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":160,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":162,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":163,"author":{"gitID":"amrut-prabhu"},"content":"        public FilteredList\u003cPoll\u003e getFilteredPollList() {"},{"lineNumber":164,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":165,"author":{"gitID":"amrut-prabhu"},"content":"            return null;"},{"lineNumber":166,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":168,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":169,"author":{"gitID":"amrut-prabhu"},"content":"        public void viewMyTasks() throws TasksAlreadyListedException {"},{"lineNumber":170,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":171,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":173,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":174,"author":{"gitID":"amrut-prabhu"},"content":"        public void assignTask(Task toAdd, MatricNumber matricNumber) throws MemberNotFoundException,"},{"lineNumber":175,"author":{"gitID":"amrut-prabhu"},"content":"                DuplicateTaskException {"},{"lineNumber":176,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":177,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":179,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":180,"author":{"gitID":"amrut-prabhu"},"content":"        public void signUpMember(Member member) {"},{"lineNumber":181,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":182,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":184,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":185,"author":{"gitID":"amrut-prabhu"},"content":"        public void addMember(Member member) throws DuplicateMatricNumberException  {"},{"lineNumber":186,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":187,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":189,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":190,"author":{"gitID":"amrut-prabhu"},"content":"        public boolean getClearConfirmation() {"},{"lineNumber":191,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":192,"author":{"gitID":"amrut-prabhu"},"content":"            return false;"},{"lineNumber":193,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":195,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":196,"author":{"gitID":"amrut-prabhu"},"content":"        public void setClearConfirmation(Boolean b) {"},{"lineNumber":197,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":198,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":200,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":201,"author":{"gitID":"amrut-prabhu"},"content":"        public void clearClubBook() {"},{"lineNumber":202,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":203,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":205,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":206,"author":{"gitID":"amrut-prabhu"},"content":"        public void addPoll(Poll poll) throws DuplicatePollException {"},{"lineNumber":207,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":208,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":210,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":211,"author":{"gitID":"amrut-prabhu"},"content":"        public void deletePoll(Poll target) throws PollNotFoundException {"},{"lineNumber":212,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":213,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":215,"author":{"gitID":"amrut-prabhu"},"content":"        public void deleteTask(Task taskToDelete) throws TaskNotFoundException, TaskCannotBeDeletedException {"},{"lineNumber":216,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":217,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":219,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":220,"author":{"gitID":"amrut-prabhu"},"content":"        public void viewAllTasks() throws TasksCannotBeDisplayedException {"},{"lineNumber":221,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":222,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":224,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":225,"author":{"gitID":"amrut-prabhu"},"content":"        public void addProfilePhoto(String originalPhotoPath) throws PhotoReadException {"},{"lineNumber":226,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":227,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":229,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":230,"author":{"gitID":"amrut-prabhu"},"content":"        public void removeGroup(Group toRemove) {"},{"lineNumber":231,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":232,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":234,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":235,"author":{"gitID":"amrut-prabhu"},"content":"        public void resetData(ReadOnlyClubBook newData) {"},{"lineNumber":236,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":237,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":239,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":240,"author":{"gitID":"amrut-prabhu"},"content":"        public ReadOnlyClubBook getClubBook() {"},{"lineNumber":241,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":242,"author":{"gitID":"amrut-prabhu"},"content":"            return null;"},{"lineNumber":243,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":244,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":245,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":246,"author":{"gitID":"amrut-prabhu"},"content":"        public void deleteMember(Member target) throws MemberNotFoundException {"},{"lineNumber":247,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":248,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":250,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":251,"author":{"gitID":"amrut-prabhu"},"content":"        public void updateMember(Member target, Member editedMember) throws DuplicateMatricNumberException {"},{"lineNumber":252,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":253,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":254,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":255,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":256,"author":{"gitID":"amrut-prabhu"},"content":"        public void deleteTag(Tag tag) throws TagNotFoundException {"},{"lineNumber":257,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":258,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":259,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":260,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":261,"author":{"gitID":"amrut-prabhu"},"content":"        public ObservableList\u003cMember\u003e getFilteredMemberList() {"},{"lineNumber":262,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":263,"author":{"gitID":"amrut-prabhu"},"content":"            return null;"},{"lineNumber":264,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":265,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":266,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":267,"author":{"gitID":"amrut-prabhu"},"content":"        public void updateFilteredMemberList(Predicate\u003cMember\u003e predicate) {"},{"lineNumber":268,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":269,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":270,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":271,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":272,"author":{"gitID":"amrut-prabhu"},"content":"        public void logsInMember(String username, String password) {"},{"lineNumber":273,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":274,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":275,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":276,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":277,"author":{"gitID":"amrut-prabhu"},"content":"        public Member getLoggedInMember() {"},{"lineNumber":278,"author":{"gitID":"amrut-prabhu"},"content":"            return null;"},{"lineNumber":279,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":280,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":281,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":282,"author":{"gitID":"amrut-prabhu"},"content":"        public void updateFilteredPollList(Predicate\u003cPoll\u003e poll) {"},{"lineNumber":283,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":284,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":285,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":286,"author":{"gitID":"amrut-prabhu"},"content":"        public void updateFilteredTagList(Predicate\u003cTag\u003e predicate) {"},{"lineNumber":287,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":288,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":289,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":290,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":291,"author":{"gitID":"amrut-prabhu"},"content":"        public ObservableList\u003cTag\u003e getFilteredTagList() {"},{"lineNumber":292,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":293,"author":{"gitID":"amrut-prabhu"},"content":"            return null;"},{"lineNumber":294,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":295,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":296,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":297,"author":{"gitID":"amrut-prabhu"},"content":"        public void sendEmail(String recipients, Client client, Subject subject, Body body) {"},{"lineNumber":298,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":299,"author":{"gitID":"amrut-prabhu"},"content":"            return;"},{"lineNumber":300,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":301,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":302,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":303,"author":{"gitID":"amrut-prabhu"},"content":"        public void logOutMember() {"},{"lineNumber":304,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":305,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":306,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":307,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":308,"author":{"gitID":"amrut-prabhu"},"content":"        public String generateEmailRecipients(Group group, Tag tag) throws GroupNotFoundException,"},{"lineNumber":309,"author":{"gitID":"amrut-prabhu"},"content":"                TagNotFoundException {"},{"lineNumber":310,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":311,"author":{"gitID":"amrut-prabhu"},"content":"            return null;"},{"lineNumber":312,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":313,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":314,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":315,"author":{"gitID":"amrut-prabhu"},"content":"        public void exportClubConnectMembers(File exportFilePath) throws IOException {"},{"lineNumber":316,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":317,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":318,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":319,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":320,"author":{"gitID":"amrut-prabhu"},"content":"        public int importMembers(File importFile) throws IOException {"},{"lineNumber":321,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":322,"author":{"gitID":"amrut-prabhu"},"content":"            return 0;"},{"lineNumber":323,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":324,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":325,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":326,"author":{"gitID":"amrut-prabhu"},"content":"        public void addTaskToTaskList(Task toAdd) throws DuplicateTaskException {"},{"lineNumber":327,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":328,"author":{"gitID":"amrut-prabhu"},"content":"            return;"},{"lineNumber":329,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":330,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":331,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":332,"author":{"gitID":"amrut-prabhu"},"content":"        public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":333,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":334,"author":{"gitID":"amrut-prabhu"},"content":"            return null;"},{"lineNumber":335,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":336,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":337,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":338,"author":{"gitID":"amrut-prabhu"},"content":"        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":339,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":340,"author":{"gitID":"amrut-prabhu"},"content":"            return;"},{"lineNumber":341,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":342,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":343,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":344,"author":{"gitID":"amrut-prabhu"},"content":"        public void changePassword(String username, String oldPassword, String newPassword)"},{"lineNumber":345,"author":{"gitID":"amrut-prabhu"},"content":"                throws PasswordIncorrectException, DataToChangeIsNotCurrentlyLoggedInMemberException {"},{"lineNumber":346,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":347,"author":{"gitID":"amrut-prabhu"},"content":"            return;"},{"lineNumber":348,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":349,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":350,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":351,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":352,"author":{"gitID":"amrut-prabhu"},"content":"     * A Model stub that always throw a PhotoReadException when trying to add a profile photo."},{"lineNumber":353,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":354,"author":{"gitID":"amrut-prabhu"},"content":"    private class ModelStubThrowingPhotoReadException extends ModelStub {"},{"lineNumber":355,"author":{"gitID":"amrut-prabhu"},"content":"        private final Member memberStub \u003d new Member(new Name(\"Alex Yeoh\"),"},{"lineNumber":356,"author":{"gitID":"amrut-prabhu"},"content":"                new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":357,"author":{"gitID":"amrut-prabhu"},"content":"                new MatricNumber(\"A5215090A\"), new Group(\"logistics\"),"},{"lineNumber":358,"author":{"gitID":"amrut-prabhu"},"content":"                getTagSet(\"friends\"));"},{"lineNumber":359,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":360,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":361,"author":{"gitID":"amrut-prabhu"},"content":"        public void addProfilePhoto(String originalPhotoPath) throws PhotoReadException {"},{"lineNumber":362,"author":{"gitID":"amrut-prabhu"},"content":"            throw new PhotoReadException();"},{"lineNumber":363,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":364,"author":{"gitID":"th14thmusician"},"content":"        //@@author th14thmusician"},{"lineNumber":365,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":366,"author":{"gitID":"th14thmusician"},"content":"        public ReadOnlyClubBook getClubBook() {"},{"lineNumber":367,"author":{"gitID":"th14thmusician"},"content":"            ClubBook clubBook \u003d new ClubBook();"},{"lineNumber":368,"author":{"gitID":"th14thmusician"},"content":"            try {"},{"lineNumber":369,"author":{"gitID":"th14thmusician"},"content":"                clubBook.addMember(memberStub);"},{"lineNumber":370,"author":{"gitID":"th14thmusician"},"content":"                clubBook.logInMember(\"A5215090A\", \"password\");"},{"lineNumber":371,"author":{"gitID":"th14thmusician"},"content":"            } catch (DuplicateMatricNumberException e) {"},{"lineNumber":372,"author":{"gitID":"th14thmusician"},"content":"                e.printStackTrace();"},{"lineNumber":373,"author":{"gitID":"th14thmusician"},"content":"            }"},{"lineNumber":374,"author":{"gitID":"th14thmusician"},"content":"            return clubBook;"},{"lineNumber":375,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":376,"author":{"gitID":"th14thmusician"},"content":""},{"lineNumber":377,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":378,"author":{"gitID":"th14thmusician"},"content":"        public Member getLoggedInMember() {"},{"lineNumber":379,"author":{"gitID":"th14thmusician"},"content":"            return memberStub;"},{"lineNumber":380,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":381,"author":{"gitID":"th14thmusician"},"content":"        //@@author"},{"lineNumber":382,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":383,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":384,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":385,"author":{"gitID":"amrut-prabhu"},"content":"     * A Model stub that always accept the path of the profile photo to be added."},{"lineNumber":386,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":387,"author":{"gitID":"amrut-prabhu"},"content":"    private class ModelStubAcceptingAddProfilePhoto extends ModelStub {"},{"lineNumber":388,"author":{"gitID":"-"},"content":"        private final Member memberStub \u003d new Member(new Name(\"Alex Yeoh\"),"},{"lineNumber":389,"author":{"gitID":"-"},"content":"                new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":390,"author":{"gitID":"-"},"content":"                new MatricNumber(\"A5215090A\"), new Group(\"logistics\"),"},{"lineNumber":391,"author":{"gitID":"-"},"content":"                getTagSet(\"friends\"));"},{"lineNumber":392,"author":{"gitID":"-"},"content":""},{"lineNumber":393,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":394,"author":{"gitID":"amrut-prabhu"},"content":"        public void addProfilePhoto(String originalPhotoPath) throws PhotoReadException {"},{"lineNumber":395,"author":{"gitID":"amrut-prabhu"},"content":"            requireNonNull(originalPhotoPath);"},{"lineNumber":396,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":397,"author":{"gitID":"-"},"content":""},{"lineNumber":398,"author":{"gitID":"th14thmusician"},"content":"        //@@author th14thmusician"},{"lineNumber":399,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":400,"author":{"gitID":"th14thmusician"},"content":"        public ReadOnlyClubBook getClubBook() {"},{"lineNumber":401,"author":{"gitID":"th14thmusician"},"content":"            ClubBook clubBook \u003d new ClubBook();"},{"lineNumber":402,"author":{"gitID":"th14thmusician"},"content":"            try {"},{"lineNumber":403,"author":{"gitID":"th14thmusician"},"content":"                clubBook.addMember(memberStub);"},{"lineNumber":404,"author":{"gitID":"th14thmusician"},"content":"                clubBook.logInMember(\"A5215090A\", \"password\");"},{"lineNumber":405,"author":{"gitID":"th14thmusician"},"content":"            } catch (DuplicateMatricNumberException e) {"},{"lineNumber":406,"author":{"gitID":"th14thmusician"},"content":"                e.printStackTrace();"},{"lineNumber":407,"author":{"gitID":"th14thmusician"},"content":"            }"},{"lineNumber":408,"author":{"gitID":"th14thmusician"},"content":"            return clubBook;"},{"lineNumber":409,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":410,"author":{"gitID":"th14thmusician"},"content":""},{"lineNumber":411,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":412,"author":{"gitID":"th14thmusician"},"content":"        public Member getLoggedInMember() {"},{"lineNumber":413,"author":{"gitID":"th14thmusician"},"content":"            return memberStub;"},{"lineNumber":414,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":415,"author":{"gitID":"th14thmusician"},"content":"        //@@author"},{"lineNumber":416,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":417,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":418,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":376,"th14thmusician":36,"-":6}},{"path":"src/test/java/seedu/club/logic/commands/RemoveGroupCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_MANDATORY_GROUP;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_NON_EXISTENT_GROUP;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.MANDATORY_GROUP;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.NON_EXISTENT_GROUP;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_GROUP_AMY;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_GROUP_BOB;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_FIRST_MEMBER;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.ALICE;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.getTypicalClubBook;"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":" * {@code RemoveGroupCommand}."},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"public class RemoveGroupCommandTest {"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"    private Model model;"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"    private Model expectedModel;"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"    private ObservableList\u003cMember\u003e observableList;"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"    private Member member;"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"    @Before"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"    public void setUp() throws CommandException {"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"        model \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"        observableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"        member \u003d observableList.get(0);"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"        LogInCommand command \u003d new LogInCommand(member.getCredentials().getUsername(),"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"                member.getCredentials().getPassword());"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"        command.execute();"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"        command.setData(expectedModel, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"        command.execute();"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"    public void execute_validGroup_success() throws Exception {"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"        Group groupToDelete \u003d model.getFilteredMemberList().get(INDEX_FIRST_MEMBER.getZeroBased()).getGroup();"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"        RemoveGroupCommand removeGroupCommand \u003d prepareCommand(ALICE.getGroup());"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d String.format(RemoveGroupCommand.MESSAGE_SUCCESS, groupToDelete);"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.removeGroup(groupToDelete);"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(removeGroupCommand, model, expectedMessage, expectedModel);"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"    public void execute_nonExistentGroup_throwsCommandException() {"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"        Group nonExistentGroup \u003d new Group(NON_EXISTENT_GROUP);"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"        RemoveGroupCommand removeGroupCommand \u003d prepareCommand(nonExistentGroup);"},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d String.format(MESSAGE_NON_EXISTENT_GROUP, nonExistentGroup);"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(removeGroupCommand, model, expectedMessage);"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"    public void execute_mandatoryGroup_throwsCommandException() {"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"        Group mandatoryGroup \u003d new Group(MANDATORY_GROUP);"},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"        RemoveGroupCommand removeGroupCommand \u003d prepareCommand(mandatoryGroup);"},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d String.format(MESSAGE_MANDATORY_GROUP, mandatoryGroup.toString());"},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(removeGroupCommand, model, expectedMessage);"},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":"    public void executeUndoRedo_validGroup_success() throws Exception {"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":"        Group groupToDelete \u003d model.getFilteredMemberList().get(INDEX_FIRST_MEMBER.getZeroBased()).getGroup();"},{"lineNumber":94,"author":{"gitID":"yash-chowdhary"},"content":"        RemoveGroupCommand removeGroupCommand \u003d prepareCommand(ALICE.getGroup());"},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":"        // remove -\u003e group removed"},{"lineNumber":96,"author":{"gitID":"yash-chowdhary"},"content":"        removeGroupCommand.execute();"},{"lineNumber":97,"author":{"gitID":"yash-chowdhary"},"content":"        undoRedoStack.push(removeGroupCommand);"},{"lineNumber":98,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":99,"author":{"gitID":"yash-chowdhary"},"content":"        // undo -\u003e reverts Club book back to previous state"},{"lineNumber":100,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":101,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":102,"author":{"gitID":"yash-chowdhary"},"content":"        // redo -\u003e same group deleted again"},{"lineNumber":103,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.removeGroup(groupToDelete);"},{"lineNumber":104,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":105,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":107,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"yash-chowdhary"},"content":"    public void executeUndoRedo_nonExistentGroup_failure() {"},{"lineNumber":109,"author":{"gitID":"yash-chowdhary"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":110,"author":{"gitID":"yash-chowdhary"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":111,"author":{"gitID":"yash-chowdhary"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":112,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":113,"author":{"gitID":"yash-chowdhary"},"content":"        Group nonExistentGroup \u003d new Group(NON_EXISTENT_GROUP);"},{"lineNumber":114,"author":{"gitID":"yash-chowdhary"},"content":"        RemoveGroupCommand removeGroupCommand \u003d prepareCommand(nonExistentGroup);"},{"lineNumber":115,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":116,"author":{"gitID":"yash-chowdhary"},"content":"        // execution failed -\u003e removeGroupCommand not pushed onto undoRedoStack"},{"lineNumber":117,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(removeGroupCommand, model,"},{"lineNumber":118,"author":{"gitID":"yash-chowdhary"},"content":"                String.format(MESSAGE_NON_EXISTENT_GROUP, nonExistentGroup));"},{"lineNumber":119,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":120,"author":{"gitID":"yash-chowdhary"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":121,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":122,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":123,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":125,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"yash-chowdhary"},"content":"    public void executeUndoRedo_mandatoryGroup_failure() {"},{"lineNumber":127,"author":{"gitID":"yash-chowdhary"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":128,"author":{"gitID":"yash-chowdhary"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":129,"author":{"gitID":"yash-chowdhary"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":130,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":131,"author":{"gitID":"yash-chowdhary"},"content":"        Group mandatoryGroup \u003d new Group(MANDATORY_GROUP);"},{"lineNumber":132,"author":{"gitID":"yash-chowdhary"},"content":"        RemoveGroupCommand removeGroupCommand \u003d prepareCommand(mandatoryGroup);"},{"lineNumber":133,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":134,"author":{"gitID":"yash-chowdhary"},"content":"        // execution failed -\u003e removeGroupCommand not pushed onto undoRedoStack"},{"lineNumber":135,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(removeGroupCommand, model,"},{"lineNumber":136,"author":{"gitID":"yash-chowdhary"},"content":"                String.format(MESSAGE_MANDATORY_GROUP, mandatoryGroup.toString()));"},{"lineNumber":137,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":138,"author":{"gitID":"yash-chowdhary"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":139,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":140,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":141,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":143,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":144,"author":{"gitID":"yash-chowdhary"},"content":"    public void executeUndoRedo_validGroup_sameGroupDeleted() throws Exception {"},{"lineNumber":145,"author":{"gitID":"yash-chowdhary"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":146,"author":{"gitID":"yash-chowdhary"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":147,"author":{"gitID":"yash-chowdhary"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":148,"author":{"gitID":"yash-chowdhary"},"content":"        RemoveGroupCommand removeGroupCommand \u003d prepareCommand(ALICE.getGroup());"},{"lineNumber":149,"author":{"gitID":"yash-chowdhary"},"content":"        Group groupToDelete \u003d model.getFilteredMemberList().get(INDEX_FIRST_MEMBER.getZeroBased()).getGroup();"},{"lineNumber":150,"author":{"gitID":"yash-chowdhary"},"content":"        // remove -\u003e removes group"},{"lineNumber":151,"author":{"gitID":"yash-chowdhary"},"content":"        removeGroupCommand.execute();"},{"lineNumber":152,"author":{"gitID":"yash-chowdhary"},"content":"        undoRedoStack.push(removeGroupCommand);"},{"lineNumber":153,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":154,"author":{"gitID":"yash-chowdhary"},"content":"        // undo -\u003e reverts Club book back to previous state"},{"lineNumber":155,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":156,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":157,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.removeGroup(groupToDelete);"},{"lineNumber":158,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(groupToDelete, model.getFilteredMemberList().get(INDEX_FIRST_MEMBER.getZeroBased()).getGroup());"},{"lineNumber":159,"author":{"gitID":"yash-chowdhary"},"content":"        // redo -\u003e removes the same group"},{"lineNumber":160,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":161,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":163,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":164,"author":{"gitID":"yash-chowdhary"},"content":"    public void equals() {"},{"lineNumber":165,"author":{"gitID":"yash-chowdhary"},"content":"        RemoveGroupCommand firstCommand \u003d prepareCommand(new Group(VALID_GROUP_AMY));"},{"lineNumber":166,"author":{"gitID":"yash-chowdhary"},"content":"        RemoveGroupCommand secondCommand \u003d prepareCommand(new Group(VALID_GROUP_BOB));"},{"lineNumber":167,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":168,"author":{"gitID":"yash-chowdhary"},"content":"        // same object -\u003e returns true"},{"lineNumber":169,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstCommand.equals(firstCommand));"},{"lineNumber":170,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(secondCommand.equals(secondCommand));"},{"lineNumber":171,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":172,"author":{"gitID":"yash-chowdhary"},"content":"        // same values -\u003e return true"},{"lineNumber":173,"author":{"gitID":"yash-chowdhary"},"content":"        RemoveGroupCommand firstCommandCopy \u003d prepareCommand(new Group(VALID_GROUP_AMY));"},{"lineNumber":174,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstCommand.equals(firstCommandCopy));"},{"lineNumber":175,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":176,"author":{"gitID":"yash-chowdhary"},"content":"        // different types -\u003e returns false"},{"lineNumber":177,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstCommand.equals(true));"},{"lineNumber":178,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":179,"author":{"gitID":"yash-chowdhary"},"content":"        // null -\u003e returns false"},{"lineNumber":180,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(secondCommand.equals(null));"},{"lineNumber":181,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":182,"author":{"gitID":"yash-chowdhary"},"content":"        // different group -\u003e returns false"},{"lineNumber":183,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstCommand.equals(secondCommand));"},{"lineNumber":184,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":186,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":188,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"yash-chowdhary"},"content":"    private RemoveGroupCommand prepareCommand(Group group) {"},{"lineNumber":190,"author":{"gitID":"yash-chowdhary"},"content":"        RemoveGroupCommand removeGroupCommand \u003d new RemoveGroupCommand(group);"},{"lineNumber":191,"author":{"gitID":"yash-chowdhary"},"content":"        removeGroupCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":192,"author":{"gitID":"yash-chowdhary"},"content":"        return removeGroupCommand;"},{"lineNumber":193,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":19,"yash-chowdhary":169,"-":6}},{"path":"src/test/java/seedu/club/logic/commands/AddPollCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":"import java.io.File;"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.function.Predicate;"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.exceptions.PhotoReadException;"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.ClubBook;"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.Model;"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.ReadOnlyClubBook;"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.email.Body;"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.email.Client;"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.email.Subject;"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.group.exceptions.GroupCannotBeRemovedException;"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.member.Email;"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.member.Name;"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.member.Phone;"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.member.exceptions.DuplicateMatricNumberException;"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.member.exceptions.MemberNotFoundException;"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.member.exceptions.PasswordIncorrectException;"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.DuplicatePollException;"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.PollNotFoundException;"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.task.exceptions.TaskCannotBeDeletedException;"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.task.exceptions.TasksAlreadyListedException;"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.task.exceptions.TasksCannotBeDisplayedException;"},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.testutil.PollBuilder;"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"public class AddPollCommandTest {"},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":"    @Rule"},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":"    public void constructor_nullPoll_throwsNullPointerException() {"},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":"        new AddPollCommand(null);"},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"    public void execute_pollAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":"        ModelStubAcceptingPollAdded modelStub \u003d new ModelStubAcceptingPollAdded();"},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"        Poll validPoll \u003d new PollBuilder().build();"},{"lineNumber":73,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":74,"author":{"gitID":"MuhdNurKamal"},"content":"        CommandResult commandResult \u003d getAddPollCommandForPoll(validPoll, modelStub).execute();"},{"lineNumber":75,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":76,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(String.format(AddPollCommand.MESSAGE_SUCCESS, validPoll), commandResult.feedbackToUser);"},{"lineNumber":77,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(Arrays.asList(validPoll), modelStub.pollsAdded);"},{"lineNumber":78,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":80,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"MuhdNurKamal"},"content":"    public void execute_duplicatePoll_throwsCommandException() throws Exception {"},{"lineNumber":82,"author":{"gitID":"MuhdNurKamal"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePollException();"},{"lineNumber":83,"author":{"gitID":"MuhdNurKamal"},"content":"        Poll validPoll \u003d new PollBuilder().build();"},{"lineNumber":84,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":85,"author":{"gitID":"MuhdNurKamal"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":86,"author":{"gitID":"MuhdNurKamal"},"content":"        thrown.expectMessage(AddPollCommand.MESSAGE_DUPLICATE_POLL);"},{"lineNumber":87,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":88,"author":{"gitID":"MuhdNurKamal"},"content":"        getAddPollCommandForPoll(validPoll, modelStub).execute();"},{"lineNumber":89,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":91,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"MuhdNurKamal"},"content":"    public void equals() {"},{"lineNumber":93,"author":{"gitID":"MuhdNurKamal"},"content":"        Poll lovePoll \u003d new PollBuilder().withQuestion(\"What is love?\").build();"},{"lineNumber":94,"author":{"gitID":"MuhdNurKamal"},"content":"        Poll lifePoll \u003d new PollBuilder().withQuestion(\"What is life?\").build();"},{"lineNumber":95,"author":{"gitID":"MuhdNurKamal"},"content":"        AddPollCommand addLovePollCommand \u003d new AddPollCommand(lovePoll);"},{"lineNumber":96,"author":{"gitID":"MuhdNurKamal"},"content":"        AddPollCommand addLifePollCommand \u003d new AddPollCommand(lifePoll);"},{"lineNumber":97,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":98,"author":{"gitID":"MuhdNurKamal"},"content":"        // same object -\u003e returns true"},{"lineNumber":99,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(addLovePollCommand.equals(addLovePollCommand));"},{"lineNumber":100,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":101,"author":{"gitID":"MuhdNurKamal"},"content":"        // same values -\u003e returns true"},{"lineNumber":102,"author":{"gitID":"MuhdNurKamal"},"content":"        AddPollCommand addAliceCommandCopy \u003d new AddPollCommand(lovePoll);"},{"lineNumber":103,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(addLovePollCommand.equals(addAliceCommandCopy));"},{"lineNumber":104,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":105,"author":{"gitID":"MuhdNurKamal"},"content":"        // different types -\u003e returns false"},{"lineNumber":106,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(addLovePollCommand.equals(1));"},{"lineNumber":107,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":108,"author":{"gitID":"MuhdNurKamal"},"content":"        // null -\u003e returns false"},{"lineNumber":109,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(addLovePollCommand.equals(null));"},{"lineNumber":110,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":111,"author":{"gitID":"MuhdNurKamal"},"content":"        // different poll -\u003e returns false"},{"lineNumber":112,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(addLovePollCommand.equals(addLifePollCommand));"},{"lineNumber":113,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":115,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"MuhdNurKamal"},"content":"     * Generates a new AddPollCommand with the details of the given poll."},{"lineNumber":117,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"MuhdNurKamal"},"content":"    private AddPollCommand getAddPollCommandForPoll(Poll poll, Model model) {"},{"lineNumber":119,"author":{"gitID":"MuhdNurKamal"},"content":"        AddPollCommand command \u003d new AddPollCommand(poll);"},{"lineNumber":120,"author":{"gitID":"MuhdNurKamal"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":121,"author":{"gitID":"MuhdNurKamal"},"content":"        return command;"},{"lineNumber":122,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":124,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"MuhdNurKamal"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":126,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"MuhdNurKamal"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":128,"author":{"gitID":"MuhdNurKamal"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":129,"author":{"gitID":"MuhdNurKamal"},"content":"        for (String s : strings) {"},{"lineNumber":130,"author":{"gitID":"MuhdNurKamal"},"content":"            tags.add(new Tag(s));"},{"lineNumber":131,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":133,"author":{"gitID":"MuhdNurKamal"},"content":"        return tags;"},{"lineNumber":134,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":136,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"MuhdNurKamal"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":138,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"MuhdNurKamal"},"content":"    private class ModelStub implements Model {"},{"lineNumber":140,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":141,"author":{"gitID":"MuhdNurKamal"},"content":"        public void voteInPoll(Poll poll, Index answerIndex) {"},{"lineNumber":142,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":143,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":145,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":146,"author":{"gitID":"MuhdNurKamal"},"content":"        public void changeStatus(Task taskToEdit, Task editedTask) throws TaskNotFoundException,"},{"lineNumber":147,"author":{"gitID":"MuhdNurKamal"},"content":"                DuplicateTaskException {"},{"lineNumber":148,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":149,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":151,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":152,"author":{"gitID":"MuhdNurKamal"},"content":"        public void exportClubConnectMembers(File exportFilePath) {"},{"lineNumber":153,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":154,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":156,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":157,"author":{"gitID":"MuhdNurKamal"},"content":"        public void viewAllTasks() throws TasksCannotBeDisplayedException {"},{"lineNumber":158,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":159,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":161,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":162,"author":{"gitID":"MuhdNurKamal"},"content":"        public void viewMyTasks() throws TasksAlreadyListedException {"},{"lineNumber":163,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":164,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":166,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":167,"author":{"gitID":"MuhdNurKamal"},"content":"        public void assignTask(Task toAdd, MatricNumber matricNumber) throws MemberNotFoundException,"},{"lineNumber":168,"author":{"gitID":"MuhdNurKamal"},"content":"                DuplicateTaskException {"},{"lineNumber":169,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":170,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":172,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":173,"author":{"gitID":"MuhdNurKamal"},"content":"        public void logOutMember() {"},{"lineNumber":174,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":175,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":177,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":178,"author":{"gitID":"MuhdNurKamal"},"content":"        public void logsInMember(String username, String password) {"},{"lineNumber":179,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":180,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":182,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":183,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":184,"author":{"gitID":"MuhdNurKamal"},"content":"        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":185,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":186,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":188,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":189,"author":{"gitID":"MuhdNurKamal"},"content":"        public void changePassword(String username,"},{"lineNumber":190,"author":{"gitID":"MuhdNurKamal"},"content":"                                   String oldPassword, String newPassword)"},{"lineNumber":191,"author":{"gitID":"MuhdNurKamal"},"content":"                throws PasswordIncorrectException {"},{"lineNumber":192,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":193,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":195,"author":{"gitID":"MuhdNurKamal"},"content":"        public void signUpMember(Member member) {"},{"lineNumber":196,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":197,"author":{"gitID":"MuhdNurKamal"},"content":"            return;"},{"lineNumber":198,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":200,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":201,"author":{"gitID":"MuhdNurKamal"},"content":"        public void clearClubBook() {"},{"lineNumber":202,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":203,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":205,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":206,"author":{"gitID":"MuhdNurKamal"},"content":"        public boolean getClearConfirmation() {"},{"lineNumber":207,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":208,"author":{"gitID":"MuhdNurKamal"},"content":"            return false;"},{"lineNumber":209,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":211,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":212,"author":{"gitID":"MuhdNurKamal"},"content":"        public void setClearConfirmation(Boolean b) {"},{"lineNumber":213,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":214,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":216,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":217,"author":{"gitID":"MuhdNurKamal"},"content":"        public FilteredList\u003cMember\u003e getFilteredMemberList() {"},{"lineNumber":218,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":219,"author":{"gitID":"MuhdNurKamal"},"content":"            return null;"},{"lineNumber":220,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":222,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":223,"author":{"gitID":"MuhdNurKamal"},"content":"        public void addMember(Member member) throws DuplicateMatricNumberException {"},{"lineNumber":224,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":225,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":227,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":228,"author":{"gitID":"MuhdNurKamal"},"content":"        public void addPoll(Poll poll) throws DuplicatePollException {"},{"lineNumber":229,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":230,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":232,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":233,"author":{"gitID":"MuhdNurKamal"},"content":"        public void deletePoll(Poll target) throws PollNotFoundException {"},{"lineNumber":234,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":235,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":237,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":238,"author":{"gitID":"MuhdNurKamal"},"content":"        public void addProfilePhoto(String originalPhotoPath) throws PhotoReadException {"},{"lineNumber":239,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":240,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":241,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":242,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":243,"author":{"gitID":"MuhdNurKamal"},"content":"        public Member getLoggedInMember() {"},{"lineNumber":244,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":245,"author":{"gitID":"MuhdNurKamal"},"content":"            return null;"},{"lineNumber":246,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":247,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":248,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":249,"author":{"gitID":"MuhdNurKamal"},"content":"        public void removeGroup(Group toRemove) throws GroupNotFoundException, GroupCannotBeRemovedException {"},{"lineNumber":250,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":251,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":252,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":253,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":254,"author":{"gitID":"MuhdNurKamal"},"content":"        public void resetData(ReadOnlyClubBook newData) {"},{"lineNumber":255,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":256,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":257,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":258,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":259,"author":{"gitID":"MuhdNurKamal"},"content":"        public ReadOnlyClubBook getClubBook() {"},{"lineNumber":260,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":261,"author":{"gitID":"MuhdNurKamal"},"content":"            return null;"},{"lineNumber":262,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":263,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":264,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":265,"author":{"gitID":"MuhdNurKamal"},"content":"        public void deleteMember(Member member) throws MemberNotFoundException {"},{"lineNumber":266,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":267,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":268,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":269,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":270,"author":{"gitID":"MuhdNurKamal"},"content":"        public void updateMember(Member member, Member editedMember)"},{"lineNumber":271,"author":{"gitID":"MuhdNurKamal"},"content":"                throws DuplicateMatricNumberException {"},{"lineNumber":272,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":273,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":274,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":275,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":276,"author":{"gitID":"MuhdNurKamal"},"content":"        public void deleteTag(Tag tag) throws TagNotFoundException {"},{"lineNumber":277,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":278,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":279,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":280,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":281,"author":{"gitID":"MuhdNurKamal"},"content":"        public ObservableList\u003cPoll\u003e getFilteredPollList() {"},{"lineNumber":282,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":283,"author":{"gitID":"MuhdNurKamal"},"content":"            return null;"},{"lineNumber":284,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":285,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":286,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":287,"author":{"gitID":"MuhdNurKamal"},"content":"        public void updateFilteredMemberList(Predicate\u003cMember\u003e predicate) {"},{"lineNumber":288,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":289,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":290,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":291,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":292,"author":{"gitID":"MuhdNurKamal"},"content":"        public void updateFilteredPollList(Predicate\u003cPoll\u003e poll) {"},{"lineNumber":293,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":294,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":295,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":296,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":297,"author":{"gitID":"MuhdNurKamal"},"content":"        public void updateFilteredTagList(Predicate\u003cTag\u003e predicate) {"},{"lineNumber":298,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":299,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":300,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":301,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":302,"author":{"gitID":"MuhdNurKamal"},"content":"        public ObservableList\u003cTag\u003e getFilteredTagList() {"},{"lineNumber":303,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":304,"author":{"gitID":"MuhdNurKamal"},"content":"            return null;"},{"lineNumber":305,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":306,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":307,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":308,"author":{"gitID":"MuhdNurKamal"},"content":"        public void sendEmail(String recipients, Client client, Subject subject, Body body) {"},{"lineNumber":309,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":310,"author":{"gitID":"MuhdNurKamal"},"content":"            return;"},{"lineNumber":311,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":312,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":313,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":314,"author":{"gitID":"MuhdNurKamal"},"content":"        public String generateEmailRecipients(Group group, Tag tag) throws GroupNotFoundException,"},{"lineNumber":315,"author":{"gitID":"MuhdNurKamal"},"content":"                TagNotFoundException {"},{"lineNumber":316,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":317,"author":{"gitID":"MuhdNurKamal"},"content":"            return null;"},{"lineNumber":318,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":319,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":320,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":321,"author":{"gitID":"MuhdNurKamal"},"content":"        public int importMembers(File importFile) throws IOException {"},{"lineNumber":322,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":323,"author":{"gitID":"MuhdNurKamal"},"content":"            return 0;"},{"lineNumber":324,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":325,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":326,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":327,"author":{"gitID":"MuhdNurKamal"},"content":"        public void addTaskToTaskList(Task toAdd) throws DuplicateTaskException {"},{"lineNumber":328,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":329,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":330,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":331,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":332,"author":{"gitID":"MuhdNurKamal"},"content":"        public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":333,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":334,"author":{"gitID":"MuhdNurKamal"},"content":"            return null;"},{"lineNumber":335,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":336,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":337,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":338,"author":{"gitID":"MuhdNurKamal"},"content":"        public void deleteTask(Task taskToDelete) throws TaskNotFoundException, TaskCannotBeDeletedException {"},{"lineNumber":339,"author":{"gitID":"MuhdNurKamal"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":340,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":341,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":342,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":343,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":344,"author":{"gitID":"MuhdNurKamal"},"content":"     * A Model stub that always throw a DuplicatePollException when trying to add a poll."},{"lineNumber":345,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":346,"author":{"gitID":"MuhdNurKamal"},"content":"    private class ModelStubThrowingDuplicatePollException extends ModelStub {"},{"lineNumber":347,"author":{"gitID":"MuhdNurKamal"},"content":"        private final Member memberStub \u003d new Member(new Name(\"Alex Yeoh\"),"},{"lineNumber":348,"author":{"gitID":"MuhdNurKamal"},"content":"                new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":349,"author":{"gitID":"MuhdNurKamal"},"content":"                new MatricNumber(\"A5215090A\"), new Group(\"exco\"),"},{"lineNumber":350,"author":{"gitID":"MuhdNurKamal"},"content":"                getTagSet(\"friends\"));"},{"lineNumber":351,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":352,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":353,"author":{"gitID":"MuhdNurKamal"},"content":"        public void addPoll(Poll poll) throws DuplicatePollException {"},{"lineNumber":354,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new DuplicatePollException();"},{"lineNumber":355,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":356,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":357,"author":{"gitID":"th14thmusician"},"content":"        //@@author th14thmusician"},{"lineNumber":358,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":359,"author":{"gitID":"th14thmusician"},"content":"        public ReadOnlyClubBook getClubBook() {"},{"lineNumber":360,"author":{"gitID":"th14thmusician"},"content":"            ClubBook clubBook \u003d new ClubBook();"},{"lineNumber":361,"author":{"gitID":"th14thmusician"},"content":"            try {"},{"lineNumber":362,"author":{"gitID":"th14thmusician"},"content":"                clubBook.addMember(memberStub);"},{"lineNumber":363,"author":{"gitID":"th14thmusician"},"content":"                clubBook.logInMember(\"A5215090A\", \"password\");"},{"lineNumber":364,"author":{"gitID":"th14thmusician"},"content":"            } catch (DuplicateMatricNumberException e) {"},{"lineNumber":365,"author":{"gitID":"th14thmusician"},"content":"                e.printStackTrace();"},{"lineNumber":366,"author":{"gitID":"th14thmusician"},"content":"            }"},{"lineNumber":367,"author":{"gitID":"th14thmusician"},"content":"            return clubBook;"},{"lineNumber":368,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":369,"author":{"gitID":"th14thmusician"},"content":""},{"lineNumber":370,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":371,"author":{"gitID":"th14thmusician"},"content":"        public Member getLoggedInMember() {"},{"lineNumber":372,"author":{"gitID":"th14thmusician"},"content":"            return memberStub;"},{"lineNumber":373,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":374,"author":{"gitID":"th14thmusician"},"content":"        //@@author"},{"lineNumber":375,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":376,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":377,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":378,"author":{"gitID":"MuhdNurKamal"},"content":"     * A Model stub that always accept the poll being added."},{"lineNumber":379,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":380,"author":{"gitID":"MuhdNurKamal"},"content":"    private class ModelStubAcceptingPollAdded extends ModelStub {"},{"lineNumber":381,"author":{"gitID":"MuhdNurKamal"},"content":"        private final ArrayList\u003cPoll\u003e pollsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":382,"author":{"gitID":"-"},"content":"        private final Member memberStub \u003d new Member(new Name(\"Alex Yeoh\"),"},{"lineNumber":383,"author":{"gitID":"-"},"content":"                new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":384,"author":{"gitID":"-"},"content":"                new MatricNumber(\"A5215090A\"), new Group(\"exco\"),"},{"lineNumber":385,"author":{"gitID":"-"},"content":"                getTagSet(\"friends\"));"},{"lineNumber":386,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":387,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":388,"author":{"gitID":"MuhdNurKamal"},"content":"        public void addPoll(Poll poll) throws DuplicatePollException {"},{"lineNumber":389,"author":{"gitID":"MuhdNurKamal"},"content":"            requireNonNull(poll);"},{"lineNumber":390,"author":{"gitID":"MuhdNurKamal"},"content":"            pollsAdded.add(poll);"},{"lineNumber":391,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":392,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":393,"author":{"gitID":"th14thmusician"},"content":"        //@@author th14thmusician"},{"lineNumber":394,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":395,"author":{"gitID":"th14thmusician"},"content":"        public ReadOnlyClubBook getClubBook() {"},{"lineNumber":396,"author":{"gitID":"th14thmusician"},"content":"            ClubBook clubBook \u003d new ClubBook();"},{"lineNumber":397,"author":{"gitID":"th14thmusician"},"content":"            try {"},{"lineNumber":398,"author":{"gitID":"th14thmusician"},"content":"                clubBook.addMember(memberStub);"},{"lineNumber":399,"author":{"gitID":"th14thmusician"},"content":"                clubBook.logInMember(\"A5215090A\", \"password\");"},{"lineNumber":400,"author":{"gitID":"th14thmusician"},"content":"            } catch (DuplicateMatricNumberException e) {"},{"lineNumber":401,"author":{"gitID":"th14thmusician"},"content":"                e.printStackTrace();"},{"lineNumber":402,"author":{"gitID":"th14thmusician"},"content":"            }"},{"lineNumber":403,"author":{"gitID":"th14thmusician"},"content":"            return clubBook;"},{"lineNumber":404,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":405,"author":{"gitID":"th14thmusician"},"content":""},{"lineNumber":406,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":407,"author":{"gitID":"th14thmusician"},"content":"        public Member getLoggedInMember() {"},{"lineNumber":408,"author":{"gitID":"th14thmusician"},"content":"            return memberStub;"},{"lineNumber":409,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":410,"author":{"gitID":"th14thmusician"},"content":"        //@@author"},{"lineNumber":411,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":412,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":413,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":373,"th14thmusician":36,"-":4}},{"path":"src/test/java/seedu/club/logic/commands/AssignTaskCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.BENSON;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.CARL;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalTasks.BOOK_AUDITORIUM;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalTasks.BUY_CONFETTI;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.File;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.IOException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.PhotoReadException;"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ClubBook;"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ReadOnlyClubBook;"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Body;"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Client;"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Subject;"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.exceptions.GroupCannotBeRemovedException;"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Email;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Name;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Phone;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.club.model.member.exceptions.DataToChangeIsNotCurrentlyLoggedInMemberException;"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.DuplicateMatricNumberException;"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.member.exceptions.MemberListNotEmptyException;"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.MemberNotFoundException;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.club.model.member.exceptions.PasswordIncorrectException;"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.DuplicatePollException;"},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.PollNotFoundException;"},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TaskCannotBeDeletedException;"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TasksAlreadyListedException;"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TasksCannotBeDisplayedException;"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.testutil.TaskBuilder;"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"public class AssignTaskCommandTest {"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"    public void constructor_nullTask_throwsNullPointerException() {"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"        new AssignTaskCommand(null, null);"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"    public void execute_taskAcceptedByModel_assignSuccessful() throws Exception {"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"        ModelStubAcceptingTaskAdded modelStub \u003d new ModelStubAcceptingTaskAdded();"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"        Task validTask \u003d new TaskBuilder().build();"},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"        MatricNumber validMatricNumber \u003d new MatricNumber(BENSON.getMatricNumber().toString());"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"        CommandResult commandResult \u003d  getAssignTaskCommandForTask(validTask, validMatricNumber, modelStub)"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"                .executeUndoableCommand();"},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(String.format(AssignTaskCommand.MESSAGE_SUCCESS, validMatricNumber), commandResult.feedbackToUser);"},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(Arrays.asList(validTask), modelStub.tasksAdded);"},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":"    public void execute_duplicateTask_throwsCommandException() throws Exception {"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateTaskException();"},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":"        Task validTask \u003d new TaskBuilder().build();"},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":"        MatricNumber validMatricNumber \u003d new MatricNumber(BENSON.getMatricNumber().toString());"},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":94,"author":{"gitID":"yash-chowdhary"},"content":"        thrown.expectMessage(AssignTaskCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":96,"author":{"gitID":"yash-chowdhary"},"content":"        getAssignTaskCommandForTask(validTask, validMatricNumber, modelStub).executeUndoableCommand();"},{"lineNumber":97,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":99,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"yash-chowdhary"},"content":"    public void execute_memberNotFound_throwsCommandException() throws Exception {"},{"lineNumber":101,"author":{"gitID":"yash-chowdhary"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingMemberNotFoundException();"},{"lineNumber":102,"author":{"gitID":"yash-chowdhary"},"content":"        Task validTask \u003d new TaskBuilder().build();"},{"lineNumber":103,"author":{"gitID":"yash-chowdhary"},"content":"        MatricNumber validMatricNumber \u003d new MatricNumber(BENSON.getMatricNumber().toString());"},{"lineNumber":104,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":105,"author":{"gitID":"yash-chowdhary"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":106,"author":{"gitID":"yash-chowdhary"},"content":"        thrown.expectMessage(AssignTaskCommand.MESSAGE_MEMBER_NOT_FOUND);"},{"lineNumber":107,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":108,"author":{"gitID":"yash-chowdhary"},"content":"        getAssignTaskCommandForTask(validTask, validMatricNumber, modelStub).executeUndoableCommand();"},{"lineNumber":109,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":111,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"yash-chowdhary"},"content":"    public void equals() {"},{"lineNumber":113,"author":{"gitID":"yash-chowdhary"},"content":"        Task firstTask \u003d BOOK_AUDITORIUM;"},{"lineNumber":114,"author":{"gitID":"yash-chowdhary"},"content":"        Task secondTask \u003d BUY_CONFETTI;"},{"lineNumber":115,"author":{"gitID":"yash-chowdhary"},"content":"        MatricNumber firstMatricNumber \u003d BENSON.getMatricNumber();"},{"lineNumber":116,"author":{"gitID":"yash-chowdhary"},"content":"        MatricNumber secondMatricNumber \u003d CARL.getMatricNumber();"},{"lineNumber":117,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":118,"author":{"gitID":"yash-chowdhary"},"content":"        AssignTaskCommand firstAssignTaskCommand \u003d new AssignTaskCommand(firstTask, firstMatricNumber);"},{"lineNumber":119,"author":{"gitID":"yash-chowdhary"},"content":"        AssignTaskCommand secondAssignTaskCommand \u003d new AssignTaskCommand(secondTask, secondMatricNumber);"},{"lineNumber":120,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":121,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstAssignTaskCommand.equals(firstAssignTaskCommand));"},{"lineNumber":122,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstAssignTaskCommand.equals(null));"},{"lineNumber":123,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstAssignTaskCommand.equals(true));"},{"lineNumber":124,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":125,"author":{"gitID":"yash-chowdhary"},"content":"        AssignTaskCommand firstCommandCopy \u003d new AssignTaskCommand(firstTask, firstMatricNumber);"},{"lineNumber":126,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstAssignTaskCommand.equals(firstCommandCopy));"},{"lineNumber":127,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":128,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstAssignTaskCommand.equals(secondAssignTaskCommand));"},{"lineNumber":129,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":131,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"yash-chowdhary"},"content":"     * Generates a new AddTaskCommand with the details of the given task."},{"lineNumber":133,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"yash-chowdhary"},"content":"    private AssignTaskCommand getAssignTaskCommandForTask(Task task, MatricNumber matricNumber, Model model) {"},{"lineNumber":135,"author":{"gitID":"yash-chowdhary"},"content":"        AssignTaskCommand command \u003d new AssignTaskCommand(task, matricNumber);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":156,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":157,"author":{"gitID":"MuhdNurKamal"},"content":"        public void voteInPoll(Poll poll, Index answerIndex) {"},{"lineNumber":158,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":159,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":161,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":162,"author":{"gitID":"yash-chowdhary"},"content":"        public void changeStatus(Task taskToEdit, Task editedTask) throws TaskNotFoundException,"},{"lineNumber":163,"author":{"gitID":"yash-chowdhary"},"content":"                DuplicateTaskException {"},{"lineNumber":164,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":165,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":168,"author":{"gitID":"amrut-prabhu"},"content":"        public void resetData(ReadOnlyClubBook newData) {"},{"lineNumber":169,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":173,"author":{"gitID":"amrut-prabhu"},"content":"        public ReadOnlyClubBook getClubBook() {"},{"lineNumber":174,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":175,"author":{"gitID":"yash-chowdhary"},"content":"            return null;"},{"lineNumber":176,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":178,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":179,"author":{"gitID":"yash-chowdhary"},"content":"        public void viewAllTasks() throws TasksCannotBeDisplayedException {"},{"lineNumber":180,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":181,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":183,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":184,"author":{"gitID":"yash-chowdhary"},"content":"        public void assignTask(Task toAdd, MatricNumber matricNumber) throws MemberNotFoundException,"},{"lineNumber":185,"author":{"gitID":"-"},"content":"                DuplicateTaskException {"},{"lineNumber":186,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":187,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":189,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":190,"author":{"gitID":"yash-chowdhary"},"content":"        public void deleteTask(Task taskToDelete) throws TaskNotFoundException, TaskCannotBeDeletedException {"},{"lineNumber":191,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":192,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":193,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":195,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":196,"author":{"gitID":"yash-chowdhary"},"content":"        public void viewMyTasks() throws TasksAlreadyListedException {"},{"lineNumber":197,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This should not be called\");"},{"lineNumber":198,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":201,"author":{"gitID":"amrut-prabhu"},"content":"        public void deleteMember(Member target) throws MemberNotFoundException {"},{"lineNumber":202,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":203,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":204,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":206,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":207,"author":{"gitID":"amrut-prabhu"},"content":"        public void addMember(Member member) throws DuplicateMatricNumberException {"},{"lineNumber":208,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":209,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":210,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":212,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":213,"author":{"gitID":"yash-chowdhary"},"content":"        public void signUpMember(Member member) throws MemberListNotEmptyException {"},{"lineNumber":214,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":215,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        public void clearClubBook() {"},{"lineNumber":219,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        public boolean getClearConfirmation() {"},{"lineNumber":224,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        public void setClearConfirmation(Boolean b) {"},{"lineNumber":230,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        public void updateMember(Member target, Member editedMember) throws MemberNotFoundException {"},{"lineNumber":235,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":236,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":237,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":239,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":240,"author":{"gitID":"MuhdNurKamal"},"content":"        /** Adds the given poll */"},{"lineNumber":241,"author":{"gitID":"MuhdNurKamal"},"content":"        public void addPoll(Poll poll) throws DuplicatePollException {"},{"lineNumber":242,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":243,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":244,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":245,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":246,"author":{"gitID":"MuhdNurKamal"},"content":"        /** Deletes the given member. */"},{"lineNumber":247,"author":{"gitID":"MuhdNurKamal"},"content":"        public void deletePoll(Poll poll) throws PollNotFoundException {"},{"lineNumber":248,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":249,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":250,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":251,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":252,"author":{"gitID":"MuhdNurKamal"},"content":"        public void updateFilteredPollList(Predicate\u003cPoll\u003e predicate) {"},{"lineNumber":253,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":254,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":255,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":257,"author":{"gitID":"amrut-prabhu"},"content":"        public ObservableList\u003cMember\u003e getFilteredMemberList() {"},{"lineNumber":258,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":259,"author":{"gitID":"yash-chowdhary"},"content":"            return null;"},{"lineNumber":260,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":261,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":263,"author":{"gitID":"MuhdNurKamal"},"content":"        public ObservableList\u003cPoll\u003e getFilteredPollList() {"},{"lineNumber":264,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":265,"author":{"gitID":"yash-chowdhary"},"content":"            return null;"},{"lineNumber":266,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":267,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":268,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":269,"author":{"gitID":"yash-chowdhary"},"content":"        public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":270,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":271,"author":{"gitID":"yash-chowdhary"},"content":"            return null;"},{"lineNumber":272,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":273,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":275,"author":{"gitID":"amrut-prabhu"},"content":"        public void updateFilteredMemberList(Predicate\u003cMember\u003e predicate) {"},{"lineNumber":276,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":277,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":278,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":279,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":280,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        public void logsInMember(String username, String password) {"},{"lineNumber":282,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":283,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":284,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":285,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":286,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":287,"author":{"gitID":"yash-chowdhary"},"content":"        public Member getLoggedInMember() {"},{"lineNumber":288,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":289,"author":{"gitID":"yash-chowdhary"},"content":"            return null;"},{"lineNumber":290,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":291,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":292,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":293,"author":{"gitID":"amrut-prabhu"},"content":"        public void deleteTag(Tag tag) throws TagNotFoundException {"},{"lineNumber":294,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":295,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":296,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":297,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":298,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":299,"author":{"gitID":"amrut-prabhu"},"content":"        public void addProfilePhoto(String originalPhotoPath) throws PhotoReadException {"},{"lineNumber":300,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":301,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":302,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":303,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":304,"author":{"gitID":"amrut-prabhu"},"content":"        public ObservableList\u003cTag\u003e getFilteredTagList() {"},{"lineNumber":305,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":306,"author":{"gitID":"yash-chowdhary"},"content":"            return null;"},{"lineNumber":307,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":308,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":309,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":310,"author":{"gitID":"amrut-prabhu"},"content":"        public void updateFilteredTagList(Predicate\u003cTag\u003e predicate) {"},{"lineNumber":311,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":312,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":313,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":314,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":316,"author":{"gitID":"yash-chowdhary"},"content":"        public void removeGroup(Group toRemove) throws GroupNotFoundException, GroupCannotBeRemovedException {"},{"lineNumber":317,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":318,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":319,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":320,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":321,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":322,"author":{"gitID":"yash-chowdhary"},"content":"        public String generateEmailRecipients(Group group, Tag tag) throws GroupNotFoundException,"},{"lineNumber":323,"author":{"gitID":"yash-chowdhary"},"content":"                TagNotFoundException {"},{"lineNumber":324,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":325,"author":{"gitID":"yash-chowdhary"},"content":"            return null;"},{"lineNumber":326,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":327,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":328,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":329,"author":{"gitID":"yash-chowdhary"},"content":"        public void sendEmail(String recipients, Client client, Subject subject, Body body) {"},{"lineNumber":330,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":331,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":332,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":333,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":335,"author":{"gitID":"-"},"content":"        public void logOutMember() {"},{"lineNumber":336,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":337,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":340,"author":{"gitID":"amrut-prabhu"},"content":"        public void exportClubConnectMembers(File exportFilePath) throws IOException {"},{"lineNumber":341,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":342,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":343,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":344,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":345,"author":{"gitID":"amrut-prabhu"},"content":"        public int importMembers(File importFile) throws IOException {"},{"lineNumber":346,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":347,"author":{"gitID":"amrut-prabhu"},"content":"            return 0;"},{"lineNumber":348,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":349,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":350,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":351,"author":{"gitID":"yash-chowdhary"},"content":"        public void addTaskToTaskList(Task toAdd) throws DuplicateTaskException {"},{"lineNumber":352,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":353,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":354,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":357,"author":{"gitID":"-"},"content":"        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":358,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":359,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":360,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":363,"author":{"gitID":"-"},"content":"        public void changePassword(String username, String oldPassword, String newPassword)"},{"lineNumber":364,"author":{"gitID":"-"},"content":"                throws PasswordIncorrectException, DataToChangeIsNotCurrentlyLoggedInMemberException {"},{"lineNumber":365,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":366,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":367,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":368,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":369,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":370,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":371,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":372,"author":{"gitID":"yash-chowdhary"},"content":"     * A Model stub that always throw a DuplicateTaskException when trying to add a task."},{"lineNumber":373,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":374,"author":{"gitID":"yash-chowdhary"},"content":"    private class ModelStubThrowingDuplicateTaskException extends ModelStub {"},{"lineNumber":375,"author":{"gitID":"-"},"content":"        private final Member memberStub \u003d new Member(new Name(\"Alex Yeoh\"),"},{"lineNumber":376,"author":{"gitID":"-"},"content":"                new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":377,"author":{"gitID":"-"},"content":"                new MatricNumber(\"A5215090A\"), new Group(\"exco\"),"},{"lineNumber":378,"author":{"gitID":"-"},"content":"                getTagSet(\"friends\"));"},{"lineNumber":379,"author":{"gitID":"-"},"content":""},{"lineNumber":380,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":381,"author":{"gitID":"yash-chowdhary"},"content":"        public void assignTask(Task toAdd, MatricNumber matricNumber) throws MemberNotFoundException,"},{"lineNumber":382,"author":{"gitID":"yash-chowdhary"},"content":"                DuplicateTaskException {"},{"lineNumber":383,"author":{"gitID":"yash-chowdhary"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":384,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":385,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":386,"author":{"gitID":"th14thmusician"},"content":"        //@@author th14thmusician"},{"lineNumber":387,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":388,"author":{"gitID":"th14thmusician"},"content":"        public ReadOnlyClubBook getClubBook() {"},{"lineNumber":389,"author":{"gitID":"th14thmusician"},"content":"            ClubBook clubBook \u003d new ClubBook();"},{"lineNumber":390,"author":{"gitID":"th14thmusician"},"content":"            try {"},{"lineNumber":391,"author":{"gitID":"th14thmusician"},"content":"                clubBook.addMember(memberStub);"},{"lineNumber":392,"author":{"gitID":"th14thmusician"},"content":"                clubBook.logInMember(\"A5215090A\", \"password\");"},{"lineNumber":393,"author":{"gitID":"th14thmusician"},"content":"            } catch (DuplicateMatricNumberException e) {"},{"lineNumber":394,"author":{"gitID":"th14thmusician"},"content":"                e.printStackTrace();"},{"lineNumber":395,"author":{"gitID":"th14thmusician"},"content":"            }"},{"lineNumber":396,"author":{"gitID":"th14thmusician"},"content":"            return clubBook;"},{"lineNumber":397,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":398,"author":{"gitID":"th14thmusician"},"content":""},{"lineNumber":399,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":400,"author":{"gitID":"th14thmusician"},"content":"        public Member getLoggedInMember() {"},{"lineNumber":401,"author":{"gitID":"th14thmusician"},"content":"            return memberStub;"},{"lineNumber":402,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":403,"author":{"gitID":"th14thmusician"},"content":"        //@@author"},{"lineNumber":404,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":405,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":406,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":407,"author":{"gitID":"yash-chowdhary"},"content":"     * A Model stub that always throw a DuplicateTaskException when trying to add a task."},{"lineNumber":408,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":409,"author":{"gitID":"yash-chowdhary"},"content":"    private class ModelStubThrowingMemberNotFoundException extends ModelStub {"},{"lineNumber":410,"author":{"gitID":"-"},"content":"        private final Member memberStub \u003d new Member(new Name(\"Alex Yeoh\"),"},{"lineNumber":411,"author":{"gitID":"-"},"content":"                new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":412,"author":{"gitID":"-"},"content":"                new MatricNumber(\"A5215090A\"), new Group(\"exco\"),"},{"lineNumber":413,"author":{"gitID":"-"},"content":"                getTagSet(\"friends\"));"},{"lineNumber":414,"author":{"gitID":"-"},"content":""},{"lineNumber":415,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":416,"author":{"gitID":"yash-chowdhary"},"content":"        public void assignTask(Task toAdd, MatricNumber matricNumber) throws MemberNotFoundException,"},{"lineNumber":417,"author":{"gitID":"yash-chowdhary"},"content":"                DuplicateTaskException {"},{"lineNumber":418,"author":{"gitID":"yash-chowdhary"},"content":"            throw new MemberNotFoundException();"},{"lineNumber":419,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":420,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":421,"author":{"gitID":"th14thmusician"},"content":"        //@@author th14thmusician"},{"lineNumber":422,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":423,"author":{"gitID":"th14thmusician"},"content":"        public ReadOnlyClubBook getClubBook() {"},{"lineNumber":424,"author":{"gitID":"th14thmusician"},"content":"            ClubBook clubBook \u003d new ClubBook();"},{"lineNumber":425,"author":{"gitID":"th14thmusician"},"content":"            try {"},{"lineNumber":426,"author":{"gitID":"th14thmusician"},"content":"                clubBook.addMember(memberStub);"},{"lineNumber":427,"author":{"gitID":"th14thmusician"},"content":"                clubBook.logInMember(\"A5215090A\", \"password\");"},{"lineNumber":428,"author":{"gitID":"th14thmusician"},"content":"            } catch (DuplicateMatricNumberException e) {"},{"lineNumber":429,"author":{"gitID":"th14thmusician"},"content":"                e.printStackTrace();"},{"lineNumber":430,"author":{"gitID":"th14thmusician"},"content":"            }"},{"lineNumber":431,"author":{"gitID":"th14thmusician"},"content":"            return clubBook;"},{"lineNumber":432,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":433,"author":{"gitID":"th14thmusician"},"content":""},{"lineNumber":434,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":435,"author":{"gitID":"th14thmusician"},"content":"        public Member getLoggedInMember() {"},{"lineNumber":436,"author":{"gitID":"th14thmusician"},"content":"            return memberStub;"},{"lineNumber":437,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":438,"author":{"gitID":"th14thmusician"},"content":"        //@@author"},{"lineNumber":439,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":440,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":441,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":442,"author":{"gitID":"yash-chowdhary"},"content":"     * A Model stub that always accept the task being added."},{"lineNumber":443,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":444,"author":{"gitID":"yash-chowdhary"},"content":"    private class ModelStubAcceptingTaskAdded extends ModelStub {"},{"lineNumber":445,"author":{"gitID":"yash-chowdhary"},"content":"        final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":446,"author":{"gitID":"-"},"content":"        private final Member memberStub \u003d new Member(new Name(\"Alex Yeoh\"),"},{"lineNumber":447,"author":{"gitID":"-"},"content":"                new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":448,"author":{"gitID":"-"},"content":"                new MatricNumber(\"A5215090A\"), new Group(\"exco\"),"},{"lineNumber":449,"author":{"gitID":"-"},"content":"                getTagSet(\"friends\"));"},{"lineNumber":450,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":451,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":452,"author":{"gitID":"yash-chowdhary"},"content":"        public void assignTask(Task toAdd, MatricNumber matricNumber) throws MemberNotFoundException,"},{"lineNumber":453,"author":{"gitID":"yash-chowdhary"},"content":"                DuplicateTaskException {"},{"lineNumber":454,"author":{"gitID":"yash-chowdhary"},"content":"            requireAllNonNull(toAdd, matricNumber);"},{"lineNumber":455,"author":{"gitID":"yash-chowdhary"},"content":"            tasksAdded.add(toAdd);"},{"lineNumber":456,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":457,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":458,"author":{"gitID":"th14thmusician"},"content":"        //@@author th14thmusician"},{"lineNumber":459,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":460,"author":{"gitID":"th14thmusician"},"content":"        public ReadOnlyClubBook getClubBook() {"},{"lineNumber":461,"author":{"gitID":"th14thmusician"},"content":"            ClubBook clubBook \u003d new ClubBook();"},{"lineNumber":462,"author":{"gitID":"th14thmusician"},"content":"            try {"},{"lineNumber":463,"author":{"gitID":"th14thmusician"},"content":"                clubBook.addMember(memberStub);"},{"lineNumber":464,"author":{"gitID":"th14thmusician"},"content":"                clubBook.logInMember(\"A5215090A\", \"password\");"},{"lineNumber":465,"author":{"gitID":"th14thmusician"},"content":"            } catch (DuplicateMatricNumberException e) {"},{"lineNumber":466,"author":{"gitID":"th14thmusician"},"content":"                e.printStackTrace();"},{"lineNumber":467,"author":{"gitID":"th14thmusician"},"content":"            }"},{"lineNumber":468,"author":{"gitID":"th14thmusician"},"content":"            return clubBook;"},{"lineNumber":469,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":470,"author":{"gitID":"th14thmusician"},"content":""},{"lineNumber":471,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":472,"author":{"gitID":"th14thmusician"},"content":"        public Member getLoggedInMember() {"},{"lineNumber":473,"author":{"gitID":"th14thmusician"},"content":"            return memberStub;"},{"lineNumber":474,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":475,"author":{"gitID":"th14thmusician"},"content":"        //@@author"},{"lineNumber":476,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":477,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":478,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":20,"amrut-prabhu":51,"yash-chowdhary":256,"th14thmusician":54,"-":97}},{"path":"src/test/java/seedu/club/logic/commands/email/SubjectTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.logic.commands.email;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Subject;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"public class SubjectTest {"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"    public void equals() {"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"        Subject firstSubject \u003d new Subject(Subject.TEST_SUBJECT_STRING);"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"        Subject secondSubject \u003d new Subject(Subject.TEST_SUBJECT_STRING);"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstSubject.equals(firstSubject));"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstSubject.equals(secondSubject));"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstSubject.equals(null));"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    public void test_hashCode() {"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"        Subject subject \u003d new Subject(Subject.EMPTY_SUBJECT_STRING);"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(subject.hashCode(), Subject.EMPTY_SUBJECT_STRING.hashCode());"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":26,"-":3}},{"path":"src/test/java/seedu/club/logic/commands/email/ClientTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.logic.commands.email;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Client;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"public class ClientTest {"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"    public void equals() {"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"        Client firstClient \u003d new Client(Client.VALID_CLIENT_GMAIL);"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"        Client secondClient \u003d new Client(Client.VALID_CLIENT_OUTLOOK);"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstClient.equals(firstClient));"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"        Client firstClientCopy \u003d new Client(Client.VALID_CLIENT_GMAIL);"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstClient.equals(firstClientCopy));"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(secondClient.equals(null));"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"    public void test_hashCode() {"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"        Client client \u003d new Client(Client.VALID_CLIENT_OUTLOOK);"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(client.hashCode(), Client.VALID_CLIENT_OUTLOOK.hashCode());"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"    public void test_isValidClient_success() {"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"        Client gmailClient \u003d new Client(Client.VALID_CLIENT_GMAIL);"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"        Client outlookClient \u003d new Client(Client.VALID_CLIENT_OUTLOOK);"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(Client.isValidClient(gmailClient.toString()));"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(Client.isValidClient(outlookClient.toString()));"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"    public void test_isValidClient_failure() {"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"        Client firstInvalidClient \u003d new Client(\"yahoo\");"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"        Client secondInvalidClient \u003d new Client(\"hotmail\");"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Client.isValidClient(firstInvalidClient.toString()));"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Client.isValidClient(secondInvalidClient.toString()));"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":46,"-":3}},{"path":"src/test/java/seedu/club/logic/commands/email/BodyTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.logic.commands.email;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Body;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"public class BodyTest {"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"    public void equals() {"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"        Body firstBody \u003d new Body(Body.TEST_BODY_STRING);"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"        Body secondBody \u003d new Body(Body.TEST_BODY_STRING);"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstBody.equals(firstBody));"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstBody.equals(secondBody));"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstBody.equals(null));"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    public void test_hashCode() {"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"        Body body \u003d new Body(Body.TEST_BODY_STRING);"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(body.hashCode(), Body.TEST_BODY_STRING.hashCode());"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":26,"-":3}},{"path":"src/test/java/seedu/club/logic/commands/LogOutCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.getTypicalClubBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class LogOutCommandTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void executeMemberSuccessfullyLogOut() {"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"        Model model \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        ObservableList\u003cMember\u003e observableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        model.logsInMember(observableList.get(0).getCredentials().getUsername().value,"},{"lineNumber":22,"author":{"gitID":"-"},"content":"                observableList.get(0).getCredentials().getPassword().value);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getLogOutCommandForMember(model).execute();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(LogOutCommand.MESSAGE_SUCCESS, commandResult.feedbackToUser);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void executeMemberAlreadyLogOut() {"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"        Model model \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getLogOutCommandForMember(model).execute();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(LogOutCommand.MESSAGE_FAILURE, commandResult.feedbackToUser);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Generates a new LogOutCommand with the details of the given member."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private LogOutCommand getLogOutCommandForMember(Model model) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        LogOutCommand command \u003d new LogOutCommand();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":10,"-":32}},{"path":"src/test/java/seedu/club/logic/commands/DeletePollCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.showPollAtIndex;"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_FIRST_POLL;"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_SECOND_POLL;"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.testutil.TypicalMembers.ALICE;"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.testutil.TypicalPolls.getTypicalClubBookWithPolls;"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"import org.junit.Before;"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.Model;"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.PollIsRelevantToMemberPredicate;"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":" * {@code DeletePollCommand}."},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"public class DeletePollCommandTest {"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final String ALICE_DEFAULT_PASSWORD \u003d \"password\";"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"    private Model model \u003d new ModelManager(getTypicalClubBookWithPolls(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"    @Before"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"    public void setUp() {"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"        model.logsInMember(ALICE.getMatricNumber().toString(), ALICE_DEFAULT_PASSWORD);"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"        model.updateFilteredPollList(new PollIsRelevantToMemberPredicate(ALICE));"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"        model.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"        model.updateFilteredPollList(new PollIsRelevantToMemberPredicate(ALICE));"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"        Poll pollToDelete \u003d model.getFilteredPollList().get(INDEX_FIRST_POLL.getZeroBased());"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"        DeletePollCommand deletePollCommand \u003d prepareCommand(INDEX_FIRST_POLL);"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"        String expectedMessage \u003d String.format(DeletePollCommand.MESSAGE_DELETE_POLL_SUCCESS, pollToDelete);"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalClubBookWithPolls(), new UserPrefs());"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"        expectedModel.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":"        expectedModel.updateFilteredPollList(new PollIsRelevantToMemberPredicate(ALICE));"},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"        expectedModel.deletePoll(pollToDelete);"},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":"        assertCommandSuccess(deletePollCommand, model, expectedMessage, expectedModel);"},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":"        model.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPollList().size() + 1);"},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":"        DeletePollCommand deletePollCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":"        assertCommandFailure(deletePollCommand, model, Messages.MESSAGE_INVALID_POLL_DISPLAYED_INDEX);"},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"MuhdNurKamal"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":74,"author":{"gitID":"MuhdNurKamal"},"content":"        model.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":75,"author":{"gitID":"MuhdNurKamal"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":76,"author":{"gitID":"MuhdNurKamal"},"content":"        model.updateFilteredPollList(new PollIsRelevantToMemberPredicate(ALICE));"},{"lineNumber":77,"author":{"gitID":"MuhdNurKamal"},"content":"        showPollAtIndex(model, INDEX_FIRST_POLL);"},{"lineNumber":78,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":79,"author":{"gitID":"MuhdNurKamal"},"content":"        Poll pollToDelete \u003d model.getFilteredPollList().get(INDEX_FIRST_POLL.getZeroBased());"},{"lineNumber":80,"author":{"gitID":"MuhdNurKamal"},"content":"        DeletePollCommand deletePollCommand \u003d prepareCommand(INDEX_FIRST_POLL);"},{"lineNumber":81,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":82,"author":{"gitID":"MuhdNurKamal"},"content":"        String expectedMessage \u003d String.format(DeletePollCommand.MESSAGE_DELETE_POLL_SUCCESS, pollToDelete);"},{"lineNumber":83,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":84,"author":{"gitID":"MuhdNurKamal"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalClubBookWithPolls(), new UserPrefs());"},{"lineNumber":85,"author":{"gitID":"MuhdNurKamal"},"content":"        expectedModel.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":86,"author":{"gitID":"MuhdNurKamal"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":87,"author":{"gitID":"MuhdNurKamal"},"content":"        expectedModel.updateFilteredPollList(new PollIsRelevantToMemberPredicate(ALICE));"},{"lineNumber":88,"author":{"gitID":"MuhdNurKamal"},"content":"        expectedModel.deletePoll(pollToDelete);"},{"lineNumber":89,"author":{"gitID":"MuhdNurKamal"},"content":"        assertCommandSuccess(deletePollCommand, model, expectedMessage, expectedModel);"},{"lineNumber":90,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":92,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"MuhdNurKamal"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":94,"author":{"gitID":"MuhdNurKamal"},"content":"        model.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":95,"author":{"gitID":"MuhdNurKamal"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":96,"author":{"gitID":"MuhdNurKamal"},"content":"        model.updateFilteredPollList(new PollIsRelevantToMemberPredicate(ALICE));"},{"lineNumber":97,"author":{"gitID":"MuhdNurKamal"},"content":"        showPollAtIndex(model, INDEX_FIRST_POLL);"},{"lineNumber":98,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":99,"author":{"gitID":"MuhdNurKamal"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_POLL;"},{"lineNumber":100,"author":{"gitID":"MuhdNurKamal"},"content":"        // ensures that outOfBoundIndex is still in bounds of club book list"},{"lineNumber":101,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getClubBook().getPollList().size());"},{"lineNumber":102,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":103,"author":{"gitID":"MuhdNurKamal"},"content":"        DeletePollCommand deletePollCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":104,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":105,"author":{"gitID":"MuhdNurKamal"},"content":"        assertCommandFailure(deletePollCommand, model, Messages.MESSAGE_INVALID_POLL_DISPLAYED_INDEX);"},{"lineNumber":106,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":108,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"MuhdNurKamal"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":110,"author":{"gitID":"MuhdNurKamal"},"content":"        model.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":111,"author":{"gitID":"MuhdNurKamal"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":112,"author":{"gitID":"MuhdNurKamal"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":113,"author":{"gitID":"MuhdNurKamal"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":114,"author":{"gitID":"MuhdNurKamal"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":115,"author":{"gitID":"MuhdNurKamal"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPollList().size() + 1);"},{"lineNumber":116,"author":{"gitID":"MuhdNurKamal"},"content":"        DeletePollCommand deletePollCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":117,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":118,"author":{"gitID":"MuhdNurKamal"},"content":"        // execution failed -\u003e DeletePollCommand not pushed into undoRedoStack"},{"lineNumber":119,"author":{"gitID":"MuhdNurKamal"},"content":"        assertCommandFailure(deletePollCommand, model, Messages.MESSAGE_INVALID_POLL_DISPLAYED_INDEX);"},{"lineNumber":120,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":121,"author":{"gitID":"MuhdNurKamal"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":122,"author":{"gitID":"MuhdNurKamal"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":123,"author":{"gitID":"MuhdNurKamal"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":124,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":126,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"MuhdNurKamal"},"content":"    public void equals() throws Exception {"},{"lineNumber":128,"author":{"gitID":"MuhdNurKamal"},"content":"        model.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":129,"author":{"gitID":"MuhdNurKamal"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":130,"author":{"gitID":"MuhdNurKamal"},"content":"        DeletePollCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_POLL);"},{"lineNumber":131,"author":{"gitID":"MuhdNurKamal"},"content":"        DeletePollCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_POLL);"},{"lineNumber":132,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":133,"author":{"gitID":"MuhdNurKamal"},"content":"        // same object -\u003e returns true"},{"lineNumber":134,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":135,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":136,"author":{"gitID":"MuhdNurKamal"},"content":"        // same values -\u003e returns true"},{"lineNumber":137,"author":{"gitID":"MuhdNurKamal"},"content":"        DeletePollCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_POLL);"},{"lineNumber":138,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":139,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":140,"author":{"gitID":"MuhdNurKamal"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":141,"author":{"gitID":"MuhdNurKamal"},"content":"        model.updateFilteredPollList(new PollIsRelevantToMemberPredicate(ALICE));"},{"lineNumber":142,"author":{"gitID":"MuhdNurKamal"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":143,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":144,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":145,"author":{"gitID":"MuhdNurKamal"},"content":"        // different types -\u003e returns false"},{"lineNumber":146,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":147,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":148,"author":{"gitID":"MuhdNurKamal"},"content":"        // null -\u003e returns false"},{"lineNumber":149,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":150,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":151,"author":{"gitID":"MuhdNurKamal"},"content":"        // different poll -\u003e returns false"},{"lineNumber":152,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":153,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":155,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"MuhdNurKamal"},"content":"     * Returns a {@code DeletePollCommand} with the parameter {@code index}."},{"lineNumber":157,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"MuhdNurKamal"},"content":"    private DeletePollCommand prepareCommand(Index index) {"},{"lineNumber":159,"author":{"gitID":"MuhdNurKamal"},"content":"        DeletePollCommand deletePollCommand \u003d new DeletePollCommand(index);"},{"lineNumber":160,"author":{"gitID":"MuhdNurKamal"},"content":"        deletePollCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":161,"author":{"gitID":"MuhdNurKamal"},"content":"        return deletePollCommand;"},{"lineNumber":162,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":164,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"MuhdNurKamal"},"content":"     * Updates {@code model}\u0027s filtered list to show no polls."},{"lineNumber":166,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"MuhdNurKamal"},"content":"    private void showNoPoll(Model model) {"},{"lineNumber":168,"author":{"gitID":"MuhdNurKamal"},"content":"        model.updateFilteredPollList(p -\u003e false);"},{"lineNumber":169,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":170,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(model.getFilteredPollList().isEmpty());"},{"lineNumber":171,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":172}},{"path":"src/test/java/seedu/club/logic/ListElementPointerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.NoSuchElementException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class ListElementPointerTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String FIRST_ELEMENT \u003d \"first\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String SECOND_ELEMENT \u003d \"second\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private List\u003cString\u003e pointerElements;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private ListElementPointer pointer;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        pointerElements \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        pointerElements.add(FIRST_ELEMENT);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        pointerElements.add(SECOND_ELEMENT);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void constructor_defensiveCopy_backingListUnmodified() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        pointer \u003d new ListElementPointer(list);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        list.add(FIRST_ELEMENT);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        ListElementPointer emptyPointer \u003d new ListElementPointer(Collections.emptyList());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(emptyPointer, pointer);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void emptyList() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        pointer \u003d new ListElementPointer(new ArrayList\u003c\u003e());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCurrentFailure();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertPreviousFailure();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertNextFailure();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        pointer.add(FIRST_ELEMENT);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertNextSuccess(FIRST_ELEMENT);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void singleElementList() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        list.add(FIRST_ELEMENT);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        pointer \u003d new ListElementPointer(list);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCurrentSuccess(FIRST_ELEMENT);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertPreviousFailure();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCurrentSuccess(FIRST_ELEMENT);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertNextFailure();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertCurrentSuccess(FIRST_ELEMENT);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        pointer.add(SECOND_ELEMENT);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertNextSuccess(SECOND_ELEMENT);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void multipleElementsList() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        pointer \u003d new ListElementPointer(pointerElements);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        String thirdElement \u003d \"third\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        pointer.add(thirdElement);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCurrentSuccess(SECOND_ELEMENT);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertNextSuccess(thirdElement);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertNextFailure();"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertPreviousSuccess(SECOND_ELEMENT);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertPreviousSuccess(FIRST_ELEMENT);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertPreviousFailure();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        ListElementPointer firstPointer \u003d new ListElementPointer(pointerElements);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertTrue(firstPointer.equals(firstPointer));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        ListElementPointer firstPointerCopy \u003d new ListElementPointer(pointerElements);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertTrue(firstPointer.equals(firstPointerCopy));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertFalse(firstPointer.equals(1));"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertFalse(firstPointer.equals(null));"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // different elements -\u003e returns false"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        ListElementPointer differentElementPointer \u003d new ListElementPointer(Collections.singletonList(SECOND_ELEMENT));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertFalse(firstPointer.equals(differentElementPointer));"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        firstPointerCopy.previous();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertFalse(firstPointer.equals(firstPointerCopy));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Asserts that {@code pointer#hasNext()} returns true and the return value"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * of {@code pointer#next()} equals to {@code element}."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    private void assertNextSuccess(String element) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertTrue(pointer.hasNext());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(element, pointer.next());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Asserts that {@code pointer#hasPrevious()} returns true and the return value"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * of {@code pointer#previous()} equals to {@code element}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private void assertPreviousSuccess(String element) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertTrue(pointer.hasPrevious());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertEquals(element, pointer.previous());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Asserts that {@code pointer#hasCurrent()} returns true and the return value"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * of {@code pointer#current()} equals to {@code element}."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    private void assertCurrentSuccess(String element) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertTrue(pointer.hasCurrent());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertEquals(element, pointer.current());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Asserts that {@code pointer#hasNext()} returns false and the following"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * {@code pointer#next()} call throws {@code NoSuchElementException}."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    private void assertNextFailure() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertFalse(pointer.hasNext());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            pointer.next();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            fail(\"The expected NoSuchElementException was not thrown\");"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        } catch (NoSuchElementException e) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            // expected exception thrown"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Asserts that {@code pointer#hasPrevious()} returns false and the following"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * {@code pointer#previous()} call throws {@code NoSuchElementException}."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    private void assertPreviousFailure() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertFalse(pointer.hasPrevious());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            pointer.previous();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            fail(\"The expected NoSuchElementException was not thrown\");"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        } catch (NoSuchElementException e) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            // expected exception thrown"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Asserts that {@code pointer#hasCurrent()} returns false and the following"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * {@code pointer#current()} call throws {@code NoSuchElementException}."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    private void assertCurrentFailure() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertFalse(pointer.hasCurrent());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            pointer.current();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            fail(\"The expected NoSuchElementException was not thrown\");"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        } catch (NoSuchElementException e) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            // expected exception thrown"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":175}},{"path":"src/test/java/seedu/club/logic/commands/ChangePasswordCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.getTypicalClubBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Password;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.club.model.member.exceptions.DataToChangeIsNotCurrentlyLoggedInMemberException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.club.model.member.exceptions.PasswordIncorrectException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class ChangePasswordCommandTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private ObservableList\u003cMember\u003e observableList;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Password newPassword;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Member member;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setUp () throws CommandException {"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"        model \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        observableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        newPassword \u003d new Password(\"test\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        member \u003d observableList.get(0);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        LogInCommand logInCommand \u003d new LogInCommand(member.getCredentials().getUsername(),"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                member.getCredentials().getPassword());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logInCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        logInCommand.execute();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        expectedModel \u003d model;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void excecute_changepassword_success ()"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throws PasswordIncorrectException, DataToChangeIsNotCurrentlyLoggedInMemberException {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        expectedModel.changePassword(this.member.getCredentials().getUsername().value,"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                this.member.getCredentials().getPassword().value, newPassword.value);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(this.member, model), model,"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                ChangePasswordCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_changepassword_throwscommandexception () throws PasswordIncorrectException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandFailure(prepareCommandThatFails(member, model), model,"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                ChangePasswordCommand.MESSAGE_PASSWORD_INCORRECT);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void execute_changepassword_throwsauthenicationerrorexception () {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Member othermember \u003d observableList.get(1);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertCommandFailure(prepareCommand(othermember, model), model,"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                ChangePasswordCommand.MESSAGE_AUTHENTICATION_FAILED);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Generates a ChangePasswordCommand upon execution"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @param member"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * @param model"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * @return"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private ChangePasswordCommand prepareCommand(Member member, Model model) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        ChangePasswordCommand command \u003d new ChangePasswordCommand(member.getCredentials().getUsername(),"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                member.getCredentials().getPassword(), newPassword);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Generates a ChangePasswordCommand upon exceution that fails"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * @param member"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * @param model"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @return"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    private ChangePasswordCommand prepareCommandThatFails(Member member, Model model) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        ChangePasswordCommand command \u003d new ChangePasswordCommand(member.getCredentials().getUsername(),"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                new Password(\"fake\"), newPassword);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":12,"-":77}},{"path":"src/test/java/seedu/club/storage/XmlAdaptedMemberTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.storage.XmlAdaptedMember.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Email;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Name;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Phone;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.Assert;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"public class XmlAdaptedMemberTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final String INVALID_MATRIC_NUMBER \u003d \"B1234567\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    private static final String INVALID_GROUP \u003d \" @#\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final String VALID_MATRIC_NUMBER \u003d BENSON.getMatricNumber().toString();"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"    private static final String VALID_GROUP \u003d BENSON.getGroup().toString();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"    public void toModelType_validMemberDetails_returnsMember() throws Exception {"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"        XmlAdaptedMember member \u003d new XmlAdaptedMember(BENSON);"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(BENSON, member.toModelType());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"        XmlAdaptedMember member \u003d"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"                new XmlAdaptedMember(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_MATRIC_NUMBER, VALID_GROUP,"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                        VALID_TAGS);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, member::toModelType);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"        XmlAdaptedMember member \u003d new XmlAdaptedMember(null, VALID_PHONE, VALID_EMAIL, VALID_MATRIC_NUMBER,"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                VALID_GROUP, VALID_TAGS);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, member::toModelType);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":"        XmlAdaptedMember member \u003d"},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"                new XmlAdaptedMember(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_MATRIC_NUMBER, VALID_GROUP,"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                        VALID_TAGS);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, member::toModelType);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":71,"author":{"gitID":"amrut-prabhu"},"content":"        XmlAdaptedMember member \u003d new XmlAdaptedMember(VALID_NAME, null, VALID_EMAIL, VALID_MATRIC_NUMBER, VALID_GROUP,"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                VALID_TAGS);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":74,"author":{"gitID":"amrut-prabhu"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, member::toModelType);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":79,"author":{"gitID":"amrut-prabhu"},"content":"        XmlAdaptedMember member \u003d"},{"lineNumber":80,"author":{"gitID":"amrut-prabhu"},"content":"                new XmlAdaptedMember(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_MATRIC_NUMBER, VALID_GROUP,"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                        VALID_TAGS);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":83,"author":{"gitID":"amrut-prabhu"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, member::toModelType);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":88,"author":{"gitID":"amrut-prabhu"},"content":"        XmlAdaptedMember member \u003d new XmlAdaptedMember(VALID_NAME, VALID_PHONE, null, VALID_MATRIC_NUMBER, VALID_GROUP,"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                VALID_TAGS);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":91,"author":{"gitID":"amrut-prabhu"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, member::toModelType);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"amrut-prabhu"},"content":"    public void toModelType_invalidMatricNumber_throwsIllegalValueException() {"},{"lineNumber":96,"author":{"gitID":"amrut-prabhu"},"content":"        XmlAdaptedMember member \u003d"},{"lineNumber":97,"author":{"gitID":"amrut-prabhu"},"content":"                new XmlAdaptedMember(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_MATRIC_NUMBER, VALID_GROUP,"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                        VALID_TAGS);"},{"lineNumber":99,"author":{"gitID":"MuhdNurKamal"},"content":"        String expectedMessage \u003d MatricNumber.MESSAGE_MATRIC_NUMBER_CONSTRAINTS;"},{"lineNumber":100,"author":{"gitID":"amrut-prabhu"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, member::toModelType);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"amrut-prabhu"},"content":"    public void toModelType_nullMatricNumber_throwsIllegalValueException() {"},{"lineNumber":105,"author":{"gitID":"amrut-prabhu"},"content":"        XmlAdaptedMember member \u003d new XmlAdaptedMember(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                VALID_GROUP, VALID_TAGS);"},{"lineNumber":107,"author":{"gitID":"MuhdNurKamal"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, MatricNumber.class.getSimpleName());"},{"lineNumber":108,"author":{"gitID":"amrut-prabhu"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, member::toModelType);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":115,"author":{"gitID":"amrut-prabhu"},"content":"        XmlAdaptedMember member \u003d"},{"lineNumber":116,"author":{"gitID":"amrut-prabhu"},"content":"                new XmlAdaptedMember(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                        VALID_MATRIC_NUMBER, VALID_GROUP, invalidTags);"},{"lineNumber":118,"author":{"gitID":"amrut-prabhu"},"content":"        Assert.assertThrows(IllegalValueException.class, member::toModelType);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":4,"amrut-prabhu":38,"yash-chowdhary":2,"-":77}},{"path":"src/test/java/seedu/club/logic/commands/DeleteTagCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.showMemberAtIndex;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.DeleteTagCommand.MESSAGE_DELETE_TAG_SUCCESS;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.DeleteTagCommand.MESSAGE_NON_EXISTENT_TAG;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_FIRST_MEMBER;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_FIRST_TAG;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_SECOND_MEMBER;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_SECOND_TAG;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.getTypicalClubBook;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":" * {@code DeleteTagCommand}."},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":" */"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"public class DeleteTagCommandTest {"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private ObservableList\u003cMember\u003e observableList;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Member member;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void setUp() throws CommandException {"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"        model \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"        expectedModel \u003d new ModelManager(getTypicalClubBook(), new UserPrefs());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        observableList \u003d model.getClubBook().getMemberList();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        member \u003d observableList.get(0);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        LogInCommand command \u003d new LogInCommand(member.getCredentials().getUsername(),"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                member.getCredentials().getPassword());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        command.execute();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        command.setData(expectedModel, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        command.execute();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"    public void execute_validTagUnfilteredList_success() throws Exception {"},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"        Tag tagToRemove \u003d model.getFilteredTagList().get(INDEX_FIRST_TAG.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":"        DeleteTagCommand deleteTagCommand \u003d prepareCommand(tagToRemove);"},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"        String expectedMessage \u003d String.format(MESSAGE_DELETE_TAG_SUCCESS, tagToRemove);"},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getClubBook(), new UserPrefs());"},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"        expectedModel.deleteTag(tagToRemove);"},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandSuccess(deleteTagCommand, model, expectedMessage, expectedModel);"},{"lineNumber":70,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":72,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"amrut-prabhu"},"content":"    public void execute_invalidTagUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":74,"author":{"gitID":"amrut-prabhu"},"content":"        Tag nonExistentTag \u003d new Tag(VALID_TAG_UNUSED);"},{"lineNumber":75,"author":{"gitID":"amrut-prabhu"},"content":"        DeleteTagCommand deleteTagCommand \u003d prepareCommand(nonExistentTag);"},{"lineNumber":76,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":77,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(deleteTagCommand, model, MESSAGE_NON_EXISTENT_TAG);"},{"lineNumber":78,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":80,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"amrut-prabhu"},"content":"    public void execute_validTagFilteredList_success() throws Exception {"},{"lineNumber":82,"author":{"gitID":"amrut-prabhu"},"content":"        showMemberAtIndex(model, INDEX_FIRST_MEMBER);"},{"lineNumber":83,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":84,"author":{"gitID":"amrut-prabhu"},"content":"        Tag tagToRemove \u003d model.getFilteredTagList().get(INDEX_FIRST_TAG.getZeroBased());"},{"lineNumber":85,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":86,"author":{"gitID":"amrut-prabhu"},"content":"        DeleteTagCommand deleteTagCommand \u003d prepareCommand(tagToRemove);"},{"lineNumber":87,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":88,"author":{"gitID":"amrut-prabhu"},"content":"        String expectedMessage \u003d String.format(MESSAGE_DELETE_TAG_SUCCESS, tagToRemove);"},{"lineNumber":89,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":90,"author":{"gitID":"amrut-prabhu"},"content":"        expectedModel.deleteTag(tagToRemove);"},{"lineNumber":91,"author":{"gitID":"amrut-prabhu"},"content":"        showNoTag(expectedModel);"},{"lineNumber":92,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":93,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandSuccess(deleteTagCommand, model, expectedMessage, expectedModel);"},{"lineNumber":94,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":96,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"amrut-prabhu"},"content":"    public void execute_invalidTagFilteredList_throwsCommandException() {"},{"lineNumber":98,"author":{"gitID":"amrut-prabhu"},"content":"        showMemberAtIndex(model, INDEX_FIRST_MEMBER);"},{"lineNumber":99,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":100,"author":{"gitID":"amrut-prabhu"},"content":"        Tag nonExistentTag \u003d new Tag(VALID_TAG_UNUSED);"},{"lineNumber":101,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":102,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(model.getClubBook().getTagList().contains(nonExistentTag));"},{"lineNumber":103,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":104,"author":{"gitID":"amrut-prabhu"},"content":"        DeleteTagCommand deleteTagCommand \u003d prepareCommand(nonExistentTag);"},{"lineNumber":105,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":106,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(deleteTagCommand, model, MESSAGE_NON_EXISTENT_TAG);"},{"lineNumber":107,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":109,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"amrut-prabhu"},"content":"    public void executeUndoRedo_validTagUnfilteredList_success() throws Exception {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":114,"author":{"gitID":"amrut-prabhu"},"content":"        Tag tagToRemove \u003d model.getFilteredTagList().get(INDEX_FIRST_TAG.getZeroBased());"},{"lineNumber":115,"author":{"gitID":"amrut-prabhu"},"content":"        DeleteTagCommand deleteTagCommand \u003d prepareCommand(tagToRemove);"},{"lineNumber":116,"author":{"gitID":"amrut-prabhu"},"content":"        // delete -\u003e first tag removed"},{"lineNumber":117,"author":{"gitID":"amrut-prabhu"},"content":"        deleteTagCommand.execute();"},{"lineNumber":118,"author":{"gitID":"amrut-prabhu"},"content":"        undoRedoStack.push(deleteTagCommand);"},{"lineNumber":119,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":120,"author":{"gitID":"amrut-prabhu"},"content":"        // undo -\u003e reverts clubbook back to previous state and filtered tag list to show all tags"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"amrut-prabhu"},"content":"        // redo -\u003e same first tag removed again"},{"lineNumber":124,"author":{"gitID":"amrut-prabhu"},"content":"        expectedModel.deleteTag(tagToRemove);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"amrut-prabhu"},"content":"    public void executeUndoRedo_invalidTagUnfilteredList_failure() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":133,"author":{"gitID":"amrut-prabhu"},"content":"        Tag nonExistentTag \u003d new Tag(VALID_TAG_UNUSED);"},{"lineNumber":134,"author":{"gitID":"amrut-prabhu"},"content":"        DeleteTagCommand deleteTagCommand \u003d prepareCommand(nonExistentTag);"},{"lineNumber":135,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":136,"author":{"gitID":"amrut-prabhu"},"content":"        // execution failed -\u003e deleteTagCommand not pushed into undoRedoStack"},{"lineNumber":137,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(deleteTagCommand, model, MESSAGE_NON_EXISTENT_TAG);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"amrut-prabhu"},"content":"     * 1. Removes a {@code Tag} from a filtered list."},{"lineNumber":146,"author":{"gitID":"amrut-prabhu"},"content":"     * 2. Undo the removal."},{"lineNumber":147,"author":{"gitID":"amrut-prabhu"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted member in the"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":149,"author":{"gitID":"amrut-prabhu"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} removes the tag object regardless of indexing."},{"lineNumber":150,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"amrut-prabhu"},"content":"    public void executeUndoRedo_validTagFilteredList_sameMemberDeleted() throws Exception {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":156,"author":{"gitID":"amrut-prabhu"},"content":"        Tag tagToRemove \u003d model.getFilteredTagList().get(INDEX_FIRST_TAG.getZeroBased());"},{"lineNumber":157,"author":{"gitID":"amrut-prabhu"},"content":"        DeleteTagCommand deleteTagCommand \u003d prepareCommand(tagToRemove);"},{"lineNumber":158,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":159,"author":{"gitID":"amrut-prabhu"},"content":"        showMemberAtIndex(model, INDEX_SECOND_MEMBER);"},{"lineNumber":160,"author":{"gitID":"amrut-prabhu"},"content":"        // remove tag -\u003e removes first tag in unfiltered tag list / filtered tag list"},{"lineNumber":161,"author":{"gitID":"amrut-prabhu"},"content":"        deleteTagCommand.execute();"},{"lineNumber":162,"author":{"gitID":"amrut-prabhu"},"content":"        undoRedoStack.push(deleteTagCommand);"},{"lineNumber":163,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":164,"author":{"gitID":"amrut-prabhu"},"content":"        // undo -\u003e reverts clubbook back to previous state and filtered tag list to show all tags"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"amrut-prabhu"},"content":"        expectedModel.deleteTag(tagToRemove);"},{"lineNumber":168,"author":{"gitID":"amrut-prabhu"},"content":"        // redo -\u003e removes same tag in unfiltered tag list"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":174,"author":{"gitID":"amrut-prabhu"},"content":"        DeleteTagCommand removeFirstTagCommand \u003d prepareCommand(model.getFilteredTagList()"},{"lineNumber":175,"author":{"gitID":"amrut-prabhu"},"content":"                .get(INDEX_FIRST_TAG.getZeroBased()));"},{"lineNumber":176,"author":{"gitID":"amrut-prabhu"},"content":"        DeleteTagCommand removeSecondTagCommand \u003d prepareCommand(model.getFilteredTagList()"},{"lineNumber":177,"author":{"gitID":"amrut-prabhu"},"content":"                .get(INDEX_SECOND_TAG.getZeroBased()));"},{"lineNumber":178,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":179,"author":{"gitID":"amrut-prabhu"},"content":"        // same object -\u003e returns true"},{"lineNumber":180,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(removeFirstTagCommand.equals(removeFirstTagCommand));"},{"lineNumber":181,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":182,"author":{"gitID":"amrut-prabhu"},"content":"        // same values -\u003e returns true"},{"lineNumber":183,"author":{"gitID":"amrut-prabhu"},"content":"        DeleteTagCommand removeFirstTagCommandCopy \u003d prepareCommand(model.getFilteredTagList()"},{"lineNumber":184,"author":{"gitID":"amrut-prabhu"},"content":"                .get(INDEX_FIRST_TAG.getZeroBased()));"},{"lineNumber":185,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(removeFirstTagCommand.equals(removeFirstTagCommandCopy));"},{"lineNumber":186,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":187,"author":{"gitID":"amrut-prabhu"},"content":"        // different types -\u003e returns false"},{"lineNumber":188,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(removeFirstTagCommand.equals(1));"},{"lineNumber":189,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":190,"author":{"gitID":"amrut-prabhu"},"content":"        // null -\u003e returns false"},{"lineNumber":191,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(removeFirstTagCommand.equals(null));"},{"lineNumber":192,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":193,"author":{"gitID":"amrut-prabhu"},"content":"        // different member -\u003e returns fal"},{"lineNumber":194,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":195,"author":{"gitID":"amrut-prabhu"},"content":"        // se"},{"lineNumber":196,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(removeFirstTagCommand.equals(removeSecondTagCommand));"},{"lineNumber":197,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":199,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns a {@code DeleteTagCommand} with the parameter {@code tag}."},{"lineNumber":201,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"amrut-prabhu"},"content":"    private DeleteTagCommand prepareCommand(Tag tag) {"},{"lineNumber":203,"author":{"gitID":"amrut-prabhu"},"content":"        DeleteTagCommand deleteTagCommand \u003d new DeleteTagCommand(tag);"},{"lineNumber":204,"author":{"gitID":"amrut-prabhu"},"content":"        deleteTagCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":205,"author":{"gitID":"amrut-prabhu"},"content":"        return deleteTagCommand;"},{"lineNumber":206,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":208,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"amrut-prabhu"},"content":"     * Updates {@code model}\u0027s filtered list to show no tags."},{"lineNumber":210,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"amrut-prabhu"},"content":"    private void showNoTag(Model model) {"},{"lineNumber":212,"author":{"gitID":"amrut-prabhu"},"content":"        model.updateFilteredTagList(p -\u003e false);"},{"lineNumber":213,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":214,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(model.getFilteredTagList().isEmpty());"},{"lineNumber":215,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":217,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":165,"-":52}},{"path":"src/test/java/seedu/club/logic/commands/ExportCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"//@@author amrut-prabhu"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.File;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.function.Predicate;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.PhotoReadException;"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ClubBook;"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ReadOnlyClubBook;"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.email.Body;"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.email.Client;"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.email.Subject;"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Email;"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Name;"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Phone;"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.DataToChangeIsNotCurrentlyLoggedInMemberException;"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.DuplicateMatricNumberException;"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.MemberNotFoundException;"},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.PasswordIncorrectException;"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.poll.exceptions.AnswerNotFoundException;"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.poll.exceptions.DuplicatePollException;"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.poll.exceptions.PollNotFoundException;"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.poll.exceptions.UserAlreadyVotedException;"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":51,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":52,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.task.exceptions.TaskCannotBeDeletedException;"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.task.exceptions.TasksAlreadyListedException;"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.task.exceptions.TasksCannotBeDisplayedException;"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"public class ExportCommandTest {"},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":"    @Rule"},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"    @Rule"},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"    private String currentDirectoryPath \u003d \".\";"},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":"    private File currentDirectory \u003d new File(currentDirectoryPath);"},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":70,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"amrut-prabhu"},"content":"    public void constructor_nullFile_throwsNullPointerException() {"},{"lineNumber":72,"author":{"gitID":"amrut-prabhu"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":73,"author":{"gitID":"amrut-prabhu"},"content":"        new ExportCommand(null);"},{"lineNumber":74,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":76,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"amrut-prabhu"},"content":"    public void execute_exportClubConnectMembers_success() throws Exception {"},{"lineNumber":78,"author":{"gitID":"amrut-prabhu"},"content":"        ModelStubAcceptingExport modelStub \u003d new ModelStubAcceptingExport();"},{"lineNumber":79,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":80,"author":{"gitID":"amrut-prabhu"},"content":"        String validFilePath \u003d testFolder.getRoot().getPath() + \"TempClubBook.csv\";"},{"lineNumber":81,"author":{"gitID":"amrut-prabhu"},"content":"        File exportFile \u003d new File(validFilePath);"},{"lineNumber":82,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":83,"author":{"gitID":"amrut-prabhu"},"content":"        CommandResult commandResult \u003d getExportCommand(exportFile, modelStub).execute();"},{"lineNumber":84,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(String.format(ExportCommand.MESSAGE_EXPORT_SUCCESS, exportFile), commandResult.feedbackToUser);"},{"lineNumber":85,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":87,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"amrut-prabhu"},"content":"    public void execute_invalidFilePath_throwsCommandException() throws Exception {"},{"lineNumber":89,"author":{"gitID":"amrut-prabhu"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingIoException();"},{"lineNumber":90,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":91,"author":{"gitID":"amrut-prabhu"},"content":"        String invalidFilePath \u003d testFolder.getRoot().getPath();"},{"lineNumber":92,"author":{"gitID":"amrut-prabhu"},"content":"        File exportFile \u003d new File(invalidFilePath);"},{"lineNumber":93,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":94,"author":{"gitID":"amrut-prabhu"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":95,"author":{"gitID":"amrut-prabhu"},"content":"        thrown.expectMessage(String.format(ExportCommand.MESSAGE_EXPORT_FAILURE, exportFile));"},{"lineNumber":96,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":97,"author":{"gitID":"amrut-prabhu"},"content":"        getExportCommand(exportFile, modelStub).execute();"},{"lineNumber":98,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":100,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"amrut-prabhu"},"content":"    public void equals() {"},{"lineNumber":102,"author":{"gitID":"amrut-prabhu"},"content":"        String exportFilePath \u003d currentDirectory.getAbsolutePath() + \"/exportEqualsTest.csv\";"},{"lineNumber":103,"author":{"gitID":"amrut-prabhu"},"content":"        File exportFile \u003d new File(exportFilePath);"},{"lineNumber":104,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":105,"author":{"gitID":"amrut-prabhu"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(exportFile);"},{"lineNumber":106,"author":{"gitID":"amrut-prabhu"},"content":"        ExportCommand sameFileExportCommand \u003d new ExportCommand(exportFile);"},{"lineNumber":107,"author":{"gitID":"amrut-prabhu"},"content":"        ExportCommand differentFileExportCommand \u003d new ExportCommand(currentDirectory);"},{"lineNumber":108,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":109,"author":{"gitID":"amrut-prabhu"},"content":"        // same object -\u003e returns true"},{"lineNumber":110,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(exportCommand.equals(exportCommand));"},{"lineNumber":111,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":112,"author":{"gitID":"amrut-prabhu"},"content":"        // same file -\u003e returns true"},{"lineNumber":113,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(exportCommand.equals(sameFileExportCommand));"},{"lineNumber":114,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":115,"author":{"gitID":"amrut-prabhu"},"content":"        // different types -\u003e returns false"},{"lineNumber":116,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(exportCommand.equals(1));"},{"lineNumber":117,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":118,"author":{"gitID":"amrut-prabhu"},"content":"        // null -\u003e returns false"},{"lineNumber":119,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(exportCommand.equals(null));"},{"lineNumber":120,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":121,"author":{"gitID":"amrut-prabhu"},"content":"        // different file -\u003e returns false"},{"lineNumber":122,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(exportCommand.equals(differentFileExportCommand));"},{"lineNumber":123,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":125,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"amrut-prabhu"},"content":"     * Generates a new ExportCommand with {@code exportFile}."},{"lineNumber":127,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"amrut-prabhu"},"content":"    private ExportCommand getExportCommand(File exportFile, Model model) {"},{"lineNumber":129,"author":{"gitID":"amrut-prabhu"},"content":"        ExportCommand command \u003d new ExportCommand(exportFile);"},{"lineNumber":130,"author":{"gitID":"amrut-prabhu"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":131,"author":{"gitID":"amrut-prabhu"},"content":"        return command;"},{"lineNumber":132,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":134,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":136,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"amrut-prabhu"},"content":"    private static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":138,"author":{"gitID":"amrut-prabhu"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":139,"author":{"gitID":"amrut-prabhu"},"content":"        for (String s : strings) {"},{"lineNumber":140,"author":{"gitID":"amrut-prabhu"},"content":"            tags.add(new Tag(s));"},{"lineNumber":141,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":143,"author":{"gitID":"amrut-prabhu"},"content":"        return tags;"},{"lineNumber":144,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":146,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"amrut-prabhu"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":148,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"amrut-prabhu"},"content":"    private class ModelStub implements Model {"},{"lineNumber":150,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":151,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":152,"author":{"gitID":"amrut-prabhu"},"content":"        public void voteInPoll(Poll poll, Index answerIndex) throws"},{"lineNumber":153,"author":{"gitID":"amrut-prabhu"},"content":"                PollNotFoundException, AnswerNotFoundException, UserAlreadyVotedException {"},{"lineNumber":154,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":157,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":158,"author":{"gitID":"amrut-prabhu"},"content":"        public void changeStatus(Task taskToEdit, Task editedTask) throws TaskNotFoundException,"},{"lineNumber":159,"author":{"gitID":"amrut-prabhu"},"content":"                DuplicateTaskException {"},{"lineNumber":160,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":161,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":163,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":164,"author":{"gitID":"amrut-prabhu"},"content":"        public FilteredList\u003cPoll\u003e getFilteredPollList() {"},{"lineNumber":165,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":166,"author":{"gitID":"amrut-prabhu"},"content":"            return null;"},{"lineNumber":167,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":169,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":170,"author":{"gitID":"amrut-prabhu"},"content":"        public void signUpMember(Member member) {"},{"lineNumber":171,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":172,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":174,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":175,"author":{"gitID":"amrut-prabhu"},"content":"        public void clearClubBook() {"},{"lineNumber":176,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":177,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":179,"author":{"gitID":"amrut-prabhu"},"content":"        public boolean getClearConfirmation() {"},{"lineNumber":180,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":181,"author":{"gitID":"amrut-prabhu"},"content":"            return false;"},{"lineNumber":182,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":184,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":185,"author":{"gitID":"amrut-prabhu"},"content":"        public void setClearConfirmation(Boolean b) {"},{"lineNumber":186,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":187,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":189,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":190,"author":{"gitID":"amrut-prabhu"},"content":"        public void assignTask(Task toAdd, MatricNumber matricNumber) throws MemberNotFoundException,"},{"lineNumber":191,"author":{"gitID":"amrut-prabhu"},"content":"                DuplicateTaskException {"},{"lineNumber":192,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":193,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":195,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":196,"author":{"gitID":"amrut-prabhu"},"content":"        public void viewMyTasks() throws TasksAlreadyListedException {"},{"lineNumber":197,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":198,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":200,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":201,"author":{"gitID":"amrut-prabhu"},"content":"        public void addMember(Member member) throws DuplicateMatricNumberException {"},{"lineNumber":202,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":203,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":205,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":206,"author":{"gitID":"amrut-prabhu"},"content":"        public void addPoll(Poll poll) throws DuplicatePollException {"},{"lineNumber":207,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":208,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":210,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":211,"author":{"gitID":"amrut-prabhu"},"content":"        public void deletePoll(Poll target) throws PollNotFoundException {"},{"lineNumber":212,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":213,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":215,"author":{"gitID":"amrut-prabhu"},"content":"        public void deleteTask(Task taskToDelete) throws TaskNotFoundException, TaskCannotBeDeletedException {"},{"lineNumber":216,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":217,"author":{"gitID":"amrut-prabhu"},"content":"            return;"},{"lineNumber":218,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":220,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":221,"author":{"gitID":"amrut-prabhu"},"content":"        public void viewAllTasks() throws TasksCannotBeDisplayedException {"},{"lineNumber":222,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":223,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":225,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":226,"author":{"gitID":"amrut-prabhu"},"content":"        public void addProfilePhoto(String originalPhotoPath) throws PhotoReadException {"},{"lineNumber":227,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":228,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":229,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":230,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":231,"author":{"gitID":"amrut-prabhu"},"content":"        public void removeGroup(Group toRemove) {"},{"lineNumber":232,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":233,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":235,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":236,"author":{"gitID":"amrut-prabhu"},"content":"        public void resetData(ReadOnlyClubBook newData) {"},{"lineNumber":237,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":238,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":240,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":241,"author":{"gitID":"amrut-prabhu"},"content":"        public ReadOnlyClubBook getClubBook() {"},{"lineNumber":242,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":243,"author":{"gitID":"amrut-prabhu"},"content":"            return null;"},{"lineNumber":244,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":245,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":246,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":247,"author":{"gitID":"amrut-prabhu"},"content":"        public void deleteMember(Member target) throws MemberNotFoundException {"},{"lineNumber":248,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":249,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":250,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":251,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":252,"author":{"gitID":"amrut-prabhu"},"content":"        public void updateMember(Member target, Member editedMember) throws DuplicateMatricNumberException {"},{"lineNumber":253,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":254,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":255,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":256,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":257,"author":{"gitID":"amrut-prabhu"},"content":"        public void deleteTag(Tag tag) throws TagNotFoundException {"},{"lineNumber":258,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":259,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":260,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":261,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":262,"author":{"gitID":"amrut-prabhu"},"content":"        public ObservableList\u003cMember\u003e getFilteredMemberList() {"},{"lineNumber":263,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":264,"author":{"gitID":"amrut-prabhu"},"content":"            return null;"},{"lineNumber":265,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":266,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":267,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":268,"author":{"gitID":"amrut-prabhu"},"content":"        public void updateFilteredMemberList(Predicate\u003cMember\u003e predicate) {"},{"lineNumber":269,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":270,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":271,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":272,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":273,"author":{"gitID":"amrut-prabhu"},"content":"        public void logsInMember(String username, String password) {"},{"lineNumber":274,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":275,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":276,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":277,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":278,"author":{"gitID":"amrut-prabhu"},"content":"        public Member getLoggedInMember() {"},{"lineNumber":279,"author":{"gitID":"amrut-prabhu"},"content":"            return null;"},{"lineNumber":280,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":281,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":282,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":283,"author":{"gitID":"amrut-prabhu"},"content":"        public void updateFilteredPollList(Predicate\u003cPoll\u003e poll) {"},{"lineNumber":284,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":285,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":286,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":287,"author":{"gitID":"amrut-prabhu"},"content":"        public void updateFilteredTagList(Predicate\u003cTag\u003e predicate) {"},{"lineNumber":288,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":289,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":290,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":291,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":292,"author":{"gitID":"amrut-prabhu"},"content":"        public ObservableList\u003cTag\u003e getFilteredTagList() {"},{"lineNumber":293,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":294,"author":{"gitID":"amrut-prabhu"},"content":"            return null;"},{"lineNumber":295,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":296,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":297,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":298,"author":{"gitID":"amrut-prabhu"},"content":"        public void sendEmail(String recipients, Client client, Subject subject, Body body) {"},{"lineNumber":299,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":300,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":301,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":302,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":303,"author":{"gitID":"amrut-prabhu"},"content":"        public void logOutMember() {"},{"lineNumber":304,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":305,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":306,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":307,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":308,"author":{"gitID":"amrut-prabhu"},"content":"        public String generateEmailRecipients(Group group, Tag tag) throws GroupNotFoundException,"},{"lineNumber":309,"author":{"gitID":"amrut-prabhu"},"content":"                TagNotFoundException {"},{"lineNumber":310,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":311,"author":{"gitID":"amrut-prabhu"},"content":"            return null;"},{"lineNumber":312,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":313,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":314,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":315,"author":{"gitID":"amrut-prabhu"},"content":"        public void exportClubConnectMembers(File exportFilePath) throws IOException {"},{"lineNumber":316,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":317,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":318,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":319,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":320,"author":{"gitID":"amrut-prabhu"},"content":"        public int importMembers(File importFile) throws IOException {"},{"lineNumber":321,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":322,"author":{"gitID":"amrut-prabhu"},"content":"            return 0;"},{"lineNumber":323,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":324,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":325,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":326,"author":{"gitID":"amrut-prabhu"},"content":"        public void addTaskToTaskList(Task toAdd) throws DuplicateTaskException {"},{"lineNumber":327,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":328,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":329,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":330,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":331,"author":{"gitID":"amrut-prabhu"},"content":"        public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":332,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":333,"author":{"gitID":"amrut-prabhu"},"content":"            return null;"},{"lineNumber":334,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":335,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":336,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":337,"author":{"gitID":"amrut-prabhu"},"content":"        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":338,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":339,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":340,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":341,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":342,"author":{"gitID":"amrut-prabhu"},"content":"        public void changePassword(String username, String oldPassword, String newPassword)"},{"lineNumber":343,"author":{"gitID":"amrut-prabhu"},"content":"                throws PasswordIncorrectException, DataToChangeIsNotCurrentlyLoggedInMemberException {"},{"lineNumber":344,"author":{"gitID":"amrut-prabhu"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":345,"author":{"gitID":"amrut-prabhu"},"content":"            return;"},{"lineNumber":346,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":347,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":348,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":349,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":350,"author":{"gitID":"amrut-prabhu"},"content":"     * A Model stub that always throw a IOException when trying to export to a file."},{"lineNumber":351,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":352,"author":{"gitID":"amrut-prabhu"},"content":"    private class ModelStubThrowingIoException extends ModelStub {"},{"lineNumber":353,"author":{"gitID":"amrut-prabhu"},"content":"        final Member memberStub \u003d new Member(new Name(\"Alex Yeoh\"),"},{"lineNumber":354,"author":{"gitID":"amrut-prabhu"},"content":"                new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":355,"author":{"gitID":"amrut-prabhu"},"content":"                new MatricNumber(\"A5215090A\"), new Group(\"logistics\"),"},{"lineNumber":356,"author":{"gitID":"amrut-prabhu"},"content":"                getTagSet(\"friends\"));"},{"lineNumber":357,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":358,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":359,"author":{"gitID":"amrut-prabhu"},"content":"        public void exportClubConnectMembers(File exportFile) throws IOException {"},{"lineNumber":360,"author":{"gitID":"amrut-prabhu"},"content":"            throw new IOException();"},{"lineNumber":361,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":362,"author":{"gitID":"th14thmusician"},"content":"        //@@author th14thmusician"},{"lineNumber":363,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":364,"author":{"gitID":"th14thmusician"},"content":"        public ReadOnlyClubBook getClubBook() {"},{"lineNumber":365,"author":{"gitID":"th14thmusician"},"content":"            ClubBook clubBook \u003d new ClubBook();"},{"lineNumber":366,"author":{"gitID":"th14thmusician"},"content":"            try {"},{"lineNumber":367,"author":{"gitID":"th14thmusician"},"content":"                clubBook.addMember(memberStub);"},{"lineNumber":368,"author":{"gitID":"th14thmusician"},"content":"                clubBook.logInMember(\"A5215090A\", \"password\");"},{"lineNumber":369,"author":{"gitID":"th14thmusician"},"content":"            } catch (DuplicateMatricNumberException e) {"},{"lineNumber":370,"author":{"gitID":"th14thmusician"},"content":"                e.printStackTrace();"},{"lineNumber":371,"author":{"gitID":"th14thmusician"},"content":"            }"},{"lineNumber":372,"author":{"gitID":"th14thmusician"},"content":"            return clubBook;"},{"lineNumber":373,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":374,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":375,"author":{"gitID":"th14thmusician"},"content":"        public Member getLoggedInMember() {"},{"lineNumber":376,"author":{"gitID":"th14thmusician"},"content":"            return memberStub;"},{"lineNumber":377,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":378,"author":{"gitID":"th14thmusician"},"content":"        //@@author"},{"lineNumber":379,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":380,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":381,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":382,"author":{"gitID":"amrut-prabhu"},"content":"     * A Model stub that always accept the file being exported to."},{"lineNumber":383,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":384,"author":{"gitID":"amrut-prabhu"},"content":"    private class ModelStubAcceptingExport extends ModelStub {"},{"lineNumber":385,"author":{"gitID":"-"},"content":"        final Member memberStub \u003d new Member(new Name(\"Alex Yeoh\"),"},{"lineNumber":386,"author":{"gitID":"-"},"content":"                new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":387,"author":{"gitID":"-"},"content":"                new MatricNumber(\"A5215090A\"), new Group(\"logistics\"),"},{"lineNumber":388,"author":{"gitID":"-"},"content":"                getTagSet(\"friends\"));"},{"lineNumber":389,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":390,"author":{"gitID":"amrut-prabhu"},"content":"        public void exportClubConnectMembers(File exportFile) throws IOException {"},{"lineNumber":391,"author":{"gitID":"amrut-prabhu"},"content":"            requireNonNull(exportFile);"},{"lineNumber":392,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":393,"author":{"gitID":"-"},"content":""},{"lineNumber":394,"author":{"gitID":"th14thmusician"},"content":"        //@@author th14thmusician"},{"lineNumber":395,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":396,"author":{"gitID":"th14thmusician"},"content":"        public ReadOnlyClubBook getClubBook() {"},{"lineNumber":397,"author":{"gitID":"th14thmusician"},"content":"            ClubBook clubBook \u003d new ClubBook();"},{"lineNumber":398,"author":{"gitID":"th14thmusician"},"content":"            try {"},{"lineNumber":399,"author":{"gitID":"th14thmusician"},"content":"                clubBook.addMember(memberStub);"},{"lineNumber":400,"author":{"gitID":"th14thmusician"},"content":"                clubBook.logInMember(\"A5215090A\", \"password\");"},{"lineNumber":401,"author":{"gitID":"th14thmusician"},"content":"            } catch (DuplicateMatricNumberException e) {"},{"lineNumber":402,"author":{"gitID":"th14thmusician"},"content":"                e.printStackTrace();"},{"lineNumber":403,"author":{"gitID":"th14thmusician"},"content":"            }"},{"lineNumber":404,"author":{"gitID":"th14thmusician"},"content":"            return clubBook;"},{"lineNumber":405,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":406,"author":{"gitID":"th14thmusician"},"content":"        @Override"},{"lineNumber":407,"author":{"gitID":"th14thmusician"},"content":"        public Member getLoggedInMember() {"},{"lineNumber":408,"author":{"gitID":"th14thmusician"},"content":"            return memberStub;"},{"lineNumber":409,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":410,"author":{"gitID":"th14thmusician"},"content":"        //@@author"},{"lineNumber":411,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":412,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":413,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":374,"th14thmusician":34,"-":5}},{"path":"src/test/java/seedu/club/storage/XmlAdaptedTaskTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.storage;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TASK_ASSIGNEE;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TASK_ASSIGNOR;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TASK_STATUS_TO_BEGIN;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.storage.XmlAdaptedTask.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalTasks.BUY_CONFETTI;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalTasks.BUY_FOOD;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Assignee;"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Assignor;"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Date;"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Description;"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Status;"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Time;"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.testutil.Assert;"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"public class XmlAdaptedTaskTest {"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"    private static final String INVALID_TASK_DESCRIPTION \u003d \"Buy *\";"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"    private static final String INVALID_DATE \u003d \"02/13/2009\";"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"    private static final String INVALID_TIME \u003d \"24:00\";"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"    private static final String VALID_TASK_DESCRIPTION \u003d BUY_CONFETTI.getDescription().getDescription();"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"    private static final String VALID_TASK_DATE \u003d BUY_CONFETTI.getDate().getDate();"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"    private static final String VALID_TASK_TIME \u003d BUY_CONFETTI.getTime().getTime();"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"    public void toModelType_validTaskDetails_returnsTask() throws Exception {"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"        XmlAdaptedTask xmlAdaptedTask \u003d new XmlAdaptedTask(BUY_CONFETTI);"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(BUY_CONFETTI, xmlAdaptedTask.toModelType());"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"    public void toModelType_invalidTaskInformation_throwsIllegalValueException() {"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"        XmlAdaptedTask task \u003d new XmlAdaptedTask(INVALID_TASK_DESCRIPTION, VALID_TASK_TIME,"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"                VALID_TASK_DATE);"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d Description.MESSAGE_DESCRIPTION_CONSTRAINTS;"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"        Assert.assertThrows(IllegalArgumentException.class, expectedMessage, task::toModelType);"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"    public void toModelType_nullTaskInformation_throwsIllegalValueException() {"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"        XmlAdaptedTask task \u003d new XmlAdaptedTask(null, VALID_TASK_TIME,"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"                VALID_TASK_DATE);"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"                Description.class.getSimpleName());"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"    public void toModelType_invalidTaskDate_throwsIllegalValueException() {"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"        XmlAdaptedTask xmlAdaptedTask \u003d new XmlAdaptedTask(VALID_TASK_DESCRIPTION, VALID_TASK_TIME,"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"                INVALID_DATE);"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d Date.MESSAGE_DATE_CONSTRAINTS;"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, xmlAdaptedTask::toModelType);"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"    public void toModelType_nullTaskDate_throwsIllegalValueException() {"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"        XmlAdaptedTask xmlAdaptedTask \u003d new XmlAdaptedTask(VALID_TASK_DESCRIPTION, VALID_TASK_TIME,"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"                null);"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"                Date.class.getSimpleName());"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, xmlAdaptedTask::toModelType);"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"    public void toModelType_invalidTaskTime_throwsIllegalValueException() {"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"        XmlAdaptedTask xmlAdaptedTask \u003d new XmlAdaptedTask(VALID_TASK_DESCRIPTION, INVALID_TIME,"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"                VALID_TASK_DATE);"},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d Time.MESSAGE_TIME_CONSTRAINTS;"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, xmlAdaptedTask::toModelType);"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"    public void toModelType_nullTaskTime_throwsIllegalValueException() {"},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":"        XmlAdaptedTask xmlAdaptedTask \u003d new XmlAdaptedTask(VALID_TASK_DESCRIPTION, null,"},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"                VALID_TASK_DATE);"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":"                Time.class.getSimpleName());"},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, xmlAdaptedTask::toModelType);"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":"    public void toModelType_nullAssignor_throwsIllegalValueException() {"},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":"        XmlAdaptedTask xmlAdaptedTask \u003d new XmlAdaptedTask(VALID_TASK_DESCRIPTION, VALID_TASK_TIME,"},{"lineNumber":94,"author":{"gitID":"yash-chowdhary"},"content":"                VALID_TASK_DATE, null, VALID_TASK_ASSIGNEE, VALID_TASK_STATUS_TO_BEGIN);"},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":96,"author":{"gitID":"yash-chowdhary"},"content":"                Assignor.class.getSimpleName());"},{"lineNumber":97,"author":{"gitID":"yash-chowdhary"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, xmlAdaptedTask::toModelType);"},{"lineNumber":98,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":100,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"yash-chowdhary"},"content":"    public void toModelType_nullAssignee_throwsIllegalValueException() {"},{"lineNumber":102,"author":{"gitID":"yash-chowdhary"},"content":"        XmlAdaptedTask xmlAdaptedTask \u003d new XmlAdaptedTask(VALID_TASK_DESCRIPTION, VALID_TASK_TIME,"},{"lineNumber":103,"author":{"gitID":"yash-chowdhary"},"content":"                VALID_TASK_DATE, VALID_TASK_ASSIGNOR, null, VALID_TASK_STATUS_TO_BEGIN);"},{"lineNumber":104,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":105,"author":{"gitID":"yash-chowdhary"},"content":"                Assignee.class.getSimpleName());"},{"lineNumber":106,"author":{"gitID":"yash-chowdhary"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, xmlAdaptedTask::toModelType);"},{"lineNumber":107,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":109,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"yash-chowdhary"},"content":"    public void toModelType_nullStatus_throwsIllegalValueException() {"},{"lineNumber":111,"author":{"gitID":"yash-chowdhary"},"content":"        XmlAdaptedTask xmlAdaptedTask \u003d new XmlAdaptedTask(VALID_TASK_DESCRIPTION, VALID_TASK_TIME,"},{"lineNumber":112,"author":{"gitID":"yash-chowdhary"},"content":"                VALID_TASK_DATE, VALID_TASK_ASSIGNOR, VALID_TASK_ASSIGNEE, null);"},{"lineNumber":113,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":114,"author":{"gitID":"yash-chowdhary"},"content":"                Status.class.getSimpleName());"},{"lineNumber":115,"author":{"gitID":"yash-chowdhary"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, xmlAdaptedTask::toModelType);"},{"lineNumber":116,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":118,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"yash-chowdhary"},"content":"    public void equals() {"},{"lineNumber":120,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":121,"author":{"gitID":"yash-chowdhary"},"content":"        XmlAdaptedTask firstXmlAdaptedTask \u003d new XmlAdaptedTask(BUY_CONFETTI.getDescription().getDescription(),"},{"lineNumber":122,"author":{"gitID":"yash-chowdhary"},"content":"                BUY_CONFETTI.getTime().getTime(), BUY_CONFETTI.getDate().getDate(),"},{"lineNumber":123,"author":{"gitID":"yash-chowdhary"},"content":"                BUY_CONFETTI.getAssignor().getAssignor(), BUY_CONFETTI.getAssignee().getAssignee(),"},{"lineNumber":124,"author":{"gitID":"yash-chowdhary"},"content":"                BUY_CONFETTI.getStatus().getStatus());"},{"lineNumber":125,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":126,"author":{"gitID":"yash-chowdhary"},"content":"        XmlAdaptedTask secondXmlAdaptedTask \u003d new XmlAdaptedTask(BUY_FOOD.getDescription().getDescription(),"},{"lineNumber":127,"author":{"gitID":"yash-chowdhary"},"content":"                BUY_FOOD.getTime().getTime(), BUY_FOOD.getDate().getDate(),"},{"lineNumber":128,"author":{"gitID":"yash-chowdhary"},"content":"                BUY_FOOD.getAssignor().getAssignor(), BUY_FOOD.getAssignee().getAssignee(),"},{"lineNumber":129,"author":{"gitID":"yash-chowdhary"},"content":"                BUY_FOOD.getStatus().getStatus());"},{"lineNumber":130,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":131,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstXmlAdaptedTask.equals(firstXmlAdaptedTask));"},{"lineNumber":132,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstXmlAdaptedTask.equals(null));"},{"lineNumber":133,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstXmlAdaptedTask.equals(secondXmlAdaptedTask));"},{"lineNumber":134,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":136,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":136}},{"path":"src/test/java/seedu/club/storage/XmlAdaptedPollTest.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.storage;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_ANSWER;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_MATRIC_NUMBER;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_QUESTION;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_ANSWER_ONE;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_ANSWER_TWO;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_QUESTION_LIFE;"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.storage.XmlAdaptedPoll.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.testutil.TypicalPolls.POLL_WHAT;"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.stream.Collectors;"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Answer;"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Question;"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.testutil.Assert;"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"public class XmlAdaptedPollTest {"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final int VALID_NUMBER_ANSWERED_FIVE \u003d 5;"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final int VALID_NUMBER_ANSWERED_TEN \u003d 10;"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final int INVALID_NUMBER_ANSWERED_NEGATIVE_FIVE \u003d -5;"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final int INVALID_NUMBER_ANSWERED_NEGATIVE_TEN \u003d -10;"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final List\u003cXmlAdaptedAnswer\u003e VALID_ANSWERS \u003d POLL_WHAT.getAnswers().stream()"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"            .map(XmlAdaptedAnswer::new)"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"            .collect(Collectors.toList());"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final List\u003cXmlAdaptedAnswer\u003e INVALID_ANSWERS_EMPTY_ANSWER \u003d Arrays.asList("},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"            new XmlAdaptedAnswer(INVALID_ANSWER, VALID_NUMBER_ANSWERED_FIVE),"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"            new XmlAdaptedAnswer(VALID_ANSWER_ONE, VALID_NUMBER_ANSWERED_TEN)"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"    );"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final List\u003cXmlAdaptedAnswer\u003e INVALID_ANSWERS_NEGATIVE_NUMBER_ANSWERED \u003d Arrays.asList("},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"            new XmlAdaptedAnswer(VALID_ANSWER_ONE, INVALID_NUMBER_ANSWERED_NEGATIVE_TEN),"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"            new XmlAdaptedAnswer(VALID_ANSWER_TWO, INVALID_NUMBER_ANSWERED_NEGATIVE_FIVE)"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"    );"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final List\u003cXmlAdaptedMatricNumber\u003e VALID_POLLEES_MATRIC_NUMBERS \u003d"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"            POLL_WHAT.getPolleesMatricNumbers().stream()"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"            .map(XmlAdaptedMatricNumber::new)"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"            .collect(Collectors.toList());"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final List\u003cXmlAdaptedMatricNumber\u003e INVALID_POLLEES_MATRIC_NUMBERS \u003d Arrays.asList("},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"            new XmlAdaptedMatricNumber(INVALID_MATRIC_NUMBER), new XmlAdaptedMatricNumber(INVALID_MATRIC_NUMBER)"},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"    );"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"    public void toModelType_validPollDetails_returnsPoll() throws Exception {"},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"        XmlAdaptedPoll poll \u003d new XmlAdaptedPoll(POLL_WHAT);"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(POLL_WHAT, poll.toModelType());"},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":"    public void toModelType_invalidQuestion_throwsIllegalValueException() {"},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":"        XmlAdaptedPoll poll \u003d"},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":"                new XmlAdaptedPoll(INVALID_QUESTION, VALID_ANSWERS, VALID_POLLEES_MATRIC_NUMBERS);"},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":"        String expectedMessage \u003d Question.MESSAGE_QUESTION_CONSTRAINTS;"},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, poll::toModelType);"},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":"    public void toModelType_nullQuestion_throwsIllegalValueException() {"},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"        XmlAdaptedPoll poll \u003d new XmlAdaptedPoll(null, VALID_ANSWERS, VALID_POLLEES_MATRIC_NUMBERS);"},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Question.class.getSimpleName());"},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, poll::toModelType);"},{"lineNumber":73,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":75,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"MuhdNurKamal"},"content":"    public void toModelType_invalidAnswersEmptyAnswer_throwsIllegalValueException() {"},{"lineNumber":77,"author":{"gitID":"MuhdNurKamal"},"content":"        XmlAdaptedPoll poll \u003d"},{"lineNumber":78,"author":{"gitID":"MuhdNurKamal"},"content":"                new XmlAdaptedPoll(VALID_QUESTION_LIFE, INVALID_ANSWERS_EMPTY_ANSWER, VALID_POLLEES_MATRIC_NUMBERS);"},{"lineNumber":79,"author":{"gitID":"MuhdNurKamal"},"content":"        String expectedMessage \u003d Answer.MESSAGE_ANSWER_CONSTRAINTS;"},{"lineNumber":80,"author":{"gitID":"MuhdNurKamal"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, poll::toModelType);"},{"lineNumber":81,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":83,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"MuhdNurKamal"},"content":"    public void toModelType_invalidAnswerNegativeNumberAnswered_throwsIllegalValueException() {"},{"lineNumber":85,"author":{"gitID":"MuhdNurKamal"},"content":"        XmlAdaptedPoll poll \u003d"},{"lineNumber":86,"author":{"gitID":"MuhdNurKamal"},"content":"                new XmlAdaptedPoll(VALID_QUESTION_LIFE, INVALID_ANSWERS_NEGATIVE_NUMBER_ANSWERED,"},{"lineNumber":87,"author":{"gitID":"MuhdNurKamal"},"content":"                        VALID_POLLEES_MATRIC_NUMBERS);"},{"lineNumber":88,"author":{"gitID":"MuhdNurKamal"},"content":"        String expectedMessage \u003d Answer.MESSAGE_ANSWER_NUMBER_ANSWERED_CONSTRAINTS;"},{"lineNumber":89,"author":{"gitID":"MuhdNurKamal"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, poll::toModelType);"},{"lineNumber":90,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":92,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"MuhdNurKamal"},"content":"    public void toModelType_nullAnswers_throwsIllegalValueException() {"},{"lineNumber":94,"author":{"gitID":"MuhdNurKamal"},"content":"        XmlAdaptedPoll poll \u003d new XmlAdaptedPoll(VALID_QUESTION_LIFE, null, VALID_POLLEES_MATRIC_NUMBERS);"},{"lineNumber":95,"author":{"gitID":"MuhdNurKamal"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName());"},{"lineNumber":96,"author":{"gitID":"MuhdNurKamal"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, poll::toModelType);"},{"lineNumber":97,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":99,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"MuhdNurKamal"},"content":"    public void toModelType_invalidPolleesMatricNumber_throwsIllegalValueException() {"},{"lineNumber":101,"author":{"gitID":"MuhdNurKamal"},"content":"        XmlAdaptedPoll poll \u003d"},{"lineNumber":102,"author":{"gitID":"MuhdNurKamal"},"content":"                new XmlAdaptedPoll(VALID_QUESTION_LIFE, VALID_ANSWERS, INVALID_POLLEES_MATRIC_NUMBERS);"},{"lineNumber":103,"author":{"gitID":"MuhdNurKamal"},"content":"        String expectedMessage \u003d MatricNumber.MESSAGE_MATRIC_NUMBER_CONSTRAINTS;"},{"lineNumber":104,"author":{"gitID":"MuhdNurKamal"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, poll::toModelType);"},{"lineNumber":105,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":106}},{"path":"src/test/java/seedu/club/storage/XmlAdaptedAnswerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.storage;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_ANSWER;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_ANSWER_ONE;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_ANSWER_TWO;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Answer;"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.testutil.Assert;"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"public class XmlAdaptedAnswerTest {"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"    public void toModelType_validAnswer_returnsAnswer() throws Exception {"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"        Answer answer \u003d new Answer(VALID_ANSWER_ONE);"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"        XmlAdaptedAnswer xmlAdaptedAnswer \u003d new XmlAdaptedAnswer(answer);"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(answer, xmlAdaptedAnswer.toModelType());"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"    public void toModelType_invalidAnswer_throwsIllegalValueException() {"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"        XmlAdaptedAnswer answer \u003d"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"                new XmlAdaptedAnswer(INVALID_ANSWER, 5);"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"        String expectedMessage \u003d Answer.MESSAGE_ANSWER_CONSTRAINTS;"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, answer::toModelType);"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"    public void toModelType_invalidNumberAnswered_throwsIllegalValueException() {"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"        XmlAdaptedAnswer answer \u003d"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"                new XmlAdaptedAnswer(VALID_ANSWER_ONE, -10);"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"        String expectedMessage \u003d Answer.MESSAGE_ANSWER_NUMBER_ANSWERED_CONSTRAINTS;"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, answer::toModelType);"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"    public void equals() {"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"        XmlAdaptedAnswer xmlAdaptedAnswerOne \u003d new XmlAdaptedAnswer(VALID_ANSWER_ONE, 5);"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"        XmlAdaptedAnswer xmlAdaptedAnswerTwo \u003d new XmlAdaptedAnswer(VALID_ANSWER_ONE, 5);"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"        XmlAdaptedAnswer xmlAdaptedAnswerThree \u003d new XmlAdaptedAnswer(VALID_ANSWER_TWO, 5);"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"        XmlAdaptedAnswer xmlAdaptedAnswerFour \u003d new XmlAdaptedAnswer(VALID_ANSWER_ONE, 6);"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(xmlAdaptedAnswerOne, xmlAdaptedAnswerOne);"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(xmlAdaptedAnswerOne, xmlAdaptedAnswerTwo);"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"        assertNotEquals(xmlAdaptedAnswerOne, xmlAdaptedAnswerThree);"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"        assertNotEquals(xmlAdaptedAnswerOne, xmlAdaptedAnswerFour);"},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":53}},{"path":"src/test/java/seedu/club/logic/commands/DeleteTaskCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.ALICE;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalTasks.getTypicalClubBookWithTasks;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.TaskIsRelatedToMemberPredicate;"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"public class DeleteTaskCommandTest {"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"    private Model model \u003d new ModelManager(getTypicalClubBookWithTasks(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"        model.logsInMember(ALICE.getCredentials().getUsername().value, ALICE.getCredentials().getPassword().value);"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"        model.updateFilteredTaskList(model.PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"        DeleteTaskCommand deleteTaskCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d String.format(DeleteTaskCommand.MESSAGE_DELETE_TASK_SUCCESS,"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"                taskToDelete.getDescription().getDescription());"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getClubBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.updateFilteredTaskList(expectedModel.PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.deleteTask(taskToDelete);"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(deleteTaskCommand, model, expectedMessage, expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"        model.logsInMember(ALICE.getCredentials().getUsername().value, ALICE.getCredentials().getPassword().value);"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"        DeleteTaskCommand deleteTaskCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(deleteTaskCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"        model.logsInMember(ALICE.getCredentials().getUsername().value, ALICE.getCredentials().getPassword().value);"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"        model.updateFilteredTaskList(new TaskIsRelatedToMemberPredicate(ALICE));"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"        DeleteTaskCommand deleteTaskCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":"        Model expectedModel \u003d new ModelManager(model.getClubBook(), new UserPrefs());"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.updateFilteredTaskList(new TaskIsRelatedToMemberPredicate(ALICE));"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"        // delete -\u003e first task deleted"},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"        deleteTaskCommand.execute();"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"        undoRedoStack.push(deleteTaskCommand);"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"        // undo -\u003e reverts clubbook back to previous state and filtered task list to show all tasks"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"        // redo -\u003e same first task deleted again"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.deleteTask(taskToDelete);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":"        model.logsInMember(ALICE.getCredentials().getUsername().value, ALICE.getCredentials().getPassword().value);"},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":"        DeleteTaskCommand deleteTaskCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":94,"author":{"gitID":"yash-chowdhary"},"content":"        // execution failed -\u003e deleteTaskCommand not pushed into undoRedoStack"},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(deleteTaskCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"yash-chowdhary"},"content":"    private DeleteTaskCommand prepareCommand(Index targetIndex) {"},{"lineNumber":103,"author":{"gitID":"yash-chowdhary"},"content":"        DeleteTaskCommand deleteTaskCommand \u003d new DeleteTaskCommand(targetIndex);"},{"lineNumber":104,"author":{"gitID":"yash-chowdhary"},"content":"        deleteTaskCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":105,"author":{"gitID":"yash-chowdhary"},"content":"        return deleteTaskCommand;"},{"lineNumber":106,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":108,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"yash-chowdhary"},"content":"    public void equals() throws Exception {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        model.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":111,"author":{"gitID":"yash-chowdhary"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":112,"author":{"gitID":"yash-chowdhary"},"content":"        model.updateFilteredTaskList(Model.PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":113,"author":{"gitID":"yash-chowdhary"},"content":"        DeleteTaskCommand deleteTaskFirstCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":114,"author":{"gitID":"yash-chowdhary"},"content":"        DeleteTaskCommand deleteTaskSecondCommand \u003d prepareCommand(INDEX_SECOND_TASK);"},{"lineNumber":115,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":116,"author":{"gitID":"yash-chowdhary"},"content":"        // same object -\u003e returns true"},{"lineNumber":117,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(deleteTaskFirstCommand.equals(deleteTaskFirstCommand));"},{"lineNumber":118,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":119,"author":{"gitID":"yash-chowdhary"},"content":"        // same values -\u003e returns true"},{"lineNumber":120,"author":{"gitID":"yash-chowdhary"},"content":"        DeleteTaskCommand deleteTaskFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":121,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(deleteTaskFirstCommand.equals(deleteTaskFirstCommandCopy));"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":124,"author":{"gitID":"yash-chowdhary"},"content":"        deleteTaskFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":125,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(deleteTaskFirstCommand.equals(deleteTaskFirstCommandCopy));"},{"lineNumber":126,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":127,"author":{"gitID":"yash-chowdhary"},"content":"        // different types -\u003e returns false"},{"lineNumber":128,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(deleteTaskFirstCommand.equals(1));"},{"lineNumber":129,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":130,"author":{"gitID":"yash-chowdhary"},"content":"        // null -\u003e returns false"},{"lineNumber":131,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(deleteTaskFirstCommand.equals(null));"},{"lineNumber":132,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":133,"author":{"gitID":"yash-chowdhary"},"content":"        // different member -\u003e returns false"},{"lineNumber":134,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(deleteTaskFirstCommand.equals(deleteTaskSecondCommand));"},{"lineNumber":135,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":137,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":138,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":15,"yash-chowdhary":86,"-":37}},{"path":"src/test/java/seedu/club/storage/JsonUserPrefsStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.DataConversionException;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.util.FileUtil;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class JsonUserPrefsStorageTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/JsonUserPrefsStorageTest/\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        readUserPrefs(null);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":51,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":52,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + userPrefsFileInTestDataFolder"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(new UserPrefs(), actual);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        userPrefs.setGuiSettings(1000, 500, 300, 100);"},{"lineNumber":85,"author":{"gitID":"amrut-prabhu"},"content":"        userPrefs.setClubBookFilePath(\"clubbook.xml\");"},{"lineNumber":86,"author":{"gitID":"amrut-prabhu"},"content":"        userPrefs.setClubBookName(\"TypicalClubBookName\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        saveUserPrefs(null, \"SomeFile.json\");"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        saveUserPrefs(new UserPrefs(), null);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                    .saveUserPrefs(userPrefs);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        original.setGuiSettings(1200, 200, 0, 2);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        String pefsFilePath \u003d testFolder.getRoot() + File.separator + \"TempPrefs.json\";"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        original.setGuiSettings(5, 5, 5, 5);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":6,"-":129}},{"path":"src/test/java/seedu/club/storage/ProfilePhotoStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"//@@author amrut-prabhu"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.storage;"},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import java.awt.image.BufferedImage;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.PhotoReadException;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.PhotoWriteException;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"public class ProfilePhotoStorageTest {"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"    @Rule"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"    @Rule"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"    public void copyProfilePhoto_invalidPath_exceptionThrown() throws Exception {"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"        thrown.expect(PhotoReadException.class);"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"        ProfilePhotoStorage profilePhotoStorage \u003d new ProfilePhotoStorage();"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"        String invalidPhotoPath \u003d testFolder.getRoot().getPath() + \"invalidFile.xyz\";"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"        profilePhotoStorage.copyOriginalPhotoFile(invalidPhotoPath, \"dummyName\");"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"     * Ensures no exception is thrown and command happens successfully."},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"    public void copyProfilePhoto_validPath_success() {"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"        Exception expectedException \u003d null;"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"            ProfilePhotoStorageStubAcceptingCreateCopy profilePhotoStorage \u003d"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"                    new ProfilePhotoStorageStubAcceptingCreateCopy();"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"            String photoPath \u003d testFolder.newFile(\"testPhoto.png\").getAbsolutePath();"},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"            profilePhotoStorage.copyOriginalPhotoFile(photoPath, \"testCopy\");"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (Exception e) {"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"            expectedException \u003d e;"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(null, expectedException);"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":51,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"amrut-prabhu"},"content":"     * Ensures exception is thrown."},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"    public void copyProfilePhoto_validPath_exceptionThrown() throws Exception {"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"        thrown.expect(PhotoWriteException.class);"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"        ProfilePhotoStorageExceptionThrowingStub profilePhotoStorage \u003d new ProfilePhotoStorageExceptionThrowingStub();"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"        String photoPath \u003d testFolder.newFile(\"testPhoto.png\").getAbsolutePath();"},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"        profilePhotoStorage.copyOriginalPhotoFile(photoPath, \"testCopy\");"},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"     * A Stub class that always accepts the createPhotoFileCopy method."},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":"    private class ProfilePhotoStorageStubAcceptingCreateCopy extends ProfilePhotoStorage {"},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":"        public void createPhotoFileCopy(BufferedImage originalPhoto, File newPath) throws PhotoWriteException {"},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"            return;"},{"lineNumber":70,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":72,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":74,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"amrut-prabhu"},"content":"     * A Stub class to throw an exception when the createPhotoFileCopy method is called."},{"lineNumber":76,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"amrut-prabhu"},"content":"    class ProfilePhotoStorageExceptionThrowingStub extends ProfilePhotoStorage {"},{"lineNumber":78,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":79,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":80,"author":{"gitID":"amrut-prabhu"},"content":"        public void createPhotoFileCopy(BufferedImage originalPhoto, File newPath) throws PhotoWriteException {"},{"lineNumber":81,"author":{"gitID":"amrut-prabhu"},"content":"            throw new PhotoWriteException(\"dummy exception\");"},{"lineNumber":82,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":84,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":85}},{"path":"src/test/java/seedu/club/storage/XmlClubBookStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.ALICE;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.HOON;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.IDA;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.getTypicalClubBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.util.FileUtil;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ClubBook;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ReadOnlyClubBook;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"public class XmlClubBookStorageTest {"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlClubBookStorageTest/\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"    public void readClubBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"        readClubBook(null);"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"    private java.util.Optional\u003cReadOnlyClubBook\u003e readClubBook(String filePath) throws Exception {"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"        return new XmlClubBookStorage(filePath).readClubBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(readClubBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"        readClubBook(\"NotXmlFormatClubBook.xml\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":59,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"    public void readClubBook_invalidMemberClubBook_throwDataConversionException() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":"        readClubBook(\"invalidMemberClubBook.xml\");"},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"amrut-prabhu"},"content":"    public void readClubBook_invalidAndValidMemberClubBook_throwDataConversionException() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":72,"author":{"gitID":"amrut-prabhu"},"content":"        readClubBook(\"invalidAndValidMemberClubBook.xml\");"},{"lineNumber":73,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":75,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"amrut-prabhu"},"content":"    public void readAndSaveClubBook_allInOrder_success() throws Exception {"},{"lineNumber":77,"author":{"gitID":"amrut-prabhu"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempClubBook.xml\";"},{"lineNumber":78,"author":{"gitID":"amrut-prabhu"},"content":"        ClubBook original \u003d getTypicalClubBook();"},{"lineNumber":79,"author":{"gitID":"amrut-prabhu"},"content":"        XmlClubBookStorage xmlClubBookStorage \u003d new XmlClubBookStorage(filePath);"},{"lineNumber":80,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":81,"author":{"gitID":"amrut-prabhu"},"content":"        //Save in new file and read back"},{"lineNumber":82,"author":{"gitID":"amrut-prabhu"},"content":"        xmlClubBookStorage.saveClubBook(original, filePath);"},{"lineNumber":83,"author":{"gitID":"amrut-prabhu"},"content":"        ReadOnlyClubBook readBack \u003d xmlClubBookStorage.readClubBook(filePath).get();"},{"lineNumber":84,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(original, new ClubBook(readBack));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":87,"author":{"gitID":"amrut-prabhu"},"content":"        original.addMember(HOON);"},{"lineNumber":88,"author":{"gitID":"amrut-prabhu"},"content":"        original.removeMember(ALICE);"},{"lineNumber":89,"author":{"gitID":"amrut-prabhu"},"content":"        xmlClubBookStorage.saveClubBook(original, filePath);"},{"lineNumber":90,"author":{"gitID":"amrut-prabhu"},"content":"        readBack \u003d xmlClubBookStorage.readClubBook(filePath).get();"},{"lineNumber":91,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(original, new ClubBook(readBack));"},{"lineNumber":92,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":93,"author":{"gitID":"amrut-prabhu"},"content":"        //Save and read without specifying file path"},{"lineNumber":94,"author":{"gitID":"amrut-prabhu"},"content":"        original.addMember(IDA);"},{"lineNumber":95,"author":{"gitID":"amrut-prabhu"},"content":"        xmlClubBookStorage.saveClubBook(original); //file path not specified"},{"lineNumber":96,"author":{"gitID":"amrut-prabhu"},"content":"        readBack \u003d xmlClubBookStorage.readClubBook().get(); //file path not specified"},{"lineNumber":97,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(original, new ClubBook(readBack));"},{"lineNumber":98,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":99,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":101,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"amrut-prabhu"},"content":"    public void saveClubBook_nullClubBook_throwsNullPointerException() {"},{"lineNumber":103,"author":{"gitID":"amrut-prabhu"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":104,"author":{"gitID":"amrut-prabhu"},"content":"        saveClubBook(null, \"SomeFile.xml\");"},{"lineNumber":105,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":107,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"amrut-prabhu"},"content":"     * Saves {@code clubBook} at the specified {@code filePath}."},{"lineNumber":109,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"amrut-prabhu"},"content":"    private void saveClubBook(ReadOnlyClubBook clubBook, String filePath) {"},{"lineNumber":111,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"amrut-prabhu"},"content":"            new XmlClubBookStorage(filePath).saveClubBook(clubBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"amrut-prabhu"},"content":"    public void saveClubBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":120,"author":{"gitID":"amrut-prabhu"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":121,"author":{"gitID":"amrut-prabhu"},"content":"        saveClubBook(new ClubBook(), null);"},{"lineNumber":122,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":124,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":125,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":73,"-":52}},{"path":"src/test/java/seedu/club/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.getTypicalClubBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.model.ClubBookChangedEvent;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.model.NewExportDataAvailableEvent;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.model.ProfilePhotoChangedEvent;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.storage.DataReadingExceptionEvent;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.PhotoReadException;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.PhotoWriteException;"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ClubBook;"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ReadOnlyClubBook;"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.ui.testutil.EventsCollectorRule;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"        XmlClubBookStorage clubBookStorage \u003d new XmlClubBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"        ProfilePhotoStorage profilePhotoStorage \u003d new ProfilePhotoStorage();"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"        CsvClubBookStorage csvClubBookStorage \u003d new CsvClubBookStorage();"},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"        storageManager \u003d new StorageManager(clubBookStorage, userPrefsStorage, profilePhotoStorage, csvClubBookStorage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":55,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":56,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":57,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":58,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"    public void clubBookReadSave() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":70,"author":{"gitID":"amrut-prabhu"},"content":"         * {@link XmlClubBookStorage} class."},{"lineNumber":71,"author":{"gitID":"amrut-prabhu"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlClubBookStorageTest} class."},{"lineNumber":72,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":73,"author":{"gitID":"amrut-prabhu"},"content":"        ClubBook original \u003d getTypicalClubBook();"},{"lineNumber":74,"author":{"gitID":"amrut-prabhu"},"content":"        storageManager.saveClubBook(original);"},{"lineNumber":75,"author":{"gitID":"amrut-prabhu"},"content":"        ReadOnlyClubBook retrieved \u003d storageManager.readClubBook().get();"},{"lineNumber":76,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(original, new ClubBook(retrieved));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"amrut-prabhu"},"content":"    public void getClubBookFilePath() {"},{"lineNumber":81,"author":{"gitID":"amrut-prabhu"},"content":"        assertNotNull(storageManager.getClubBookFilePath());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"amrut-prabhu"},"content":"    public void handleClubBookChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":87,"author":{"gitID":"amrut-prabhu"},"content":"        Storage storage \u003d new StorageManager(new XmlClubBookStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":88,"author":{"gitID":"amrut-prabhu"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"), new ProfilePhotoStorage(),"},{"lineNumber":89,"author":{"gitID":"amrut-prabhu"},"content":"                                             new CsvClubBookStorage());"},{"lineNumber":90,"author":{"gitID":"amrut-prabhu"},"content":"        storage.handleClubBookChangedEvent(new ClubBookChangedEvent(new ClubBook()));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"amrut-prabhu"},"content":"    //@@author amrut-prabhu"},{"lineNumber":95,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"amrut-prabhu"},"content":"    public void handleProfilePictureChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":97,"author":{"gitID":"amrut-prabhu"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the copy Photo method is called"},{"lineNumber":98,"author":{"gitID":"amrut-prabhu"},"content":"        Storage storage \u003d new StorageManager(new XmlClubBookStorage(\"dummy\"),"},{"lineNumber":99,"author":{"gitID":"amrut-prabhu"},"content":"                new JsonUserPrefsStorage(\"dummy\"), new ProfilePhotoStorageExceptionThrowingStub(),"},{"lineNumber":100,"author":{"gitID":"amrut-prabhu"},"content":"                new CsvClubBookStorage());"},{"lineNumber":101,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":102,"author":{"gitID":"amrut-prabhu"},"content":"        File photoFile \u003d new File(\"./src/test/resources/photos/\");"},{"lineNumber":103,"author":{"gitID":"amrut-prabhu"},"content":"        String photoPath \u003d photoFile.getAbsolutePath();"},{"lineNumber":104,"author":{"gitID":"amrut-prabhu"},"content":"        storage.handleProfilePictureChangedEvent(new ProfilePhotoChangedEvent(photoPath, \"testPhotoCopy.png\"));"},{"lineNumber":105,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataReadingExceptionEvent);"},{"lineNumber":106,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":108,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"amrut-prabhu"},"content":"    public void handleExportDataEvent_exceptionThrown_eventRaised() {"},{"lineNumber":110,"author":{"gitID":"amrut-prabhu"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the exportData method is called"},{"lineNumber":111,"author":{"gitID":"amrut-prabhu"},"content":"        Storage storage \u003d new StorageManager(new XmlClubBookStorage(\"dummy\"),"},{"lineNumber":112,"author":{"gitID":"amrut-prabhu"},"content":"                new JsonUserPrefsStorage(\"dummy\"), new ProfilePhotoStorage(),"},{"lineNumber":113,"author":{"gitID":"amrut-prabhu"},"content":"                new CsvClubBookStorageExceptionThrowingStub());"},{"lineNumber":114,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":115,"author":{"gitID":"amrut-prabhu"},"content":"        File dummyFile \u003d new File(\"./src/test/exportFile.csv\");"},{"lineNumber":116,"author":{"gitID":"amrut-prabhu"},"content":"        storage.handleExportDataEvent(new NewExportDataAvailableEvent(dummyFile));"},{"lineNumber":117,"author":{"gitID":"amrut-prabhu"},"content":"        storage.handleExportDataEvent(new NewExportDataAvailableEvent(\"dummy data\"));"},{"lineNumber":118,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":119,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"amrut-prabhu"},"content":"    //@@author"},{"lineNumber":121,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"amrut-prabhu"},"content":"    class XmlClubBookStorageExceptionThrowingStub extends XmlClubBookStorage {"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"amrut-prabhu"},"content":"        public XmlClubBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":133,"author":{"gitID":"amrut-prabhu"},"content":"        public void saveClubBook(ReadOnlyClubBook clubBook, String filePath) throws IOException {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"amrut-prabhu"},"content":"    //@@author amrut-prabhu"},{"lineNumber":139,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"amrut-prabhu"},"content":"     * A Stub class to throw an exception when the copy photo method is called"},{"lineNumber":141,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"amrut-prabhu"},"content":"    class ProfilePhotoStorageExceptionThrowingStub extends ProfilePhotoStorage {"},{"lineNumber":143,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":144,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":145,"author":{"gitID":"amrut-prabhu"},"content":"        public void copyOriginalPhotoFile(String originalFilePath, String newName)"},{"lineNumber":146,"author":{"gitID":"amrut-prabhu"},"content":"                throws PhotoReadException, PhotoWriteException {"},{"lineNumber":147,"author":{"gitID":"amrut-prabhu"},"content":"            throw new PhotoReadException(\"dummy exception\");"},{"lineNumber":148,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":151,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"amrut-prabhu"},"content":"     * A Stub class to throw an exception when the save data method is called"},{"lineNumber":153,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"amrut-prabhu"},"content":"    class CsvClubBookStorageExceptionThrowingStub extends CsvClubBookStorage {"},{"lineNumber":155,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":156,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":157,"author":{"gitID":"amrut-prabhu"},"content":"        public void saveData(String data) throws IOException {"},{"lineNumber":158,"author":{"gitID":"amrut-prabhu"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":159,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"amrut-prabhu"},"content":"    //@@author"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":87,"-":76}},{"path":"src/test/java/seedu/club/model/group/GroupTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model.group;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_GROUP_AMY;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_GROUP_BOB;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"public class GroupTest {"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"    public void isValidGroup() {"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"        // empty group --\u003e returns false"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Group.isValidGroup(\" \"));"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"        // null group --\u003e returns false"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Group.isValidGroup(\"\"));"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"        // string is not alphanumeric --\u003e returns false"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Group.isValidGroup(\"123@#$\"));"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Group.isValidGroup(\"\u003d-0987\"));"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Group.isValidGroup(\"publicity_main\"));"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"        // string contains space-separated words --\u003e returns false"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Group.isValidGroup(\"public relations\"));"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Group.isValidGroup(\"executive committee\"));"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Group.isValidGroup(\"logistics member\"));"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"        // valid group names --\u003e returns true"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(Group.isValidGroup(\"logistics\"));"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(Group.isValidGroup(\"publicity\"));"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(Group.isValidGroup(\"marketing\"));"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(Group.isValidGroup(\"operations\"));"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"    public void test_toString() {"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"        Group testGroupOne \u003d new Group(VALID_GROUP_AMY);"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"        Group testGroupTwo \u003d new Group(VALID_GROUP_BOB);"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(testGroupOne.toString().equals(VALID_GROUP_AMY));"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(testGroupTwo.toString().equals(VALID_GROUP_BOB));"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(testGroupOne.toString().equals(VALID_GROUP_BOB));"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(testGroupTwo.toString().equals(VALID_GROUP_AMY));"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"    public void test_hashCode() {"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"        Group group \u003d new Group(VALID_GROUP_AMY);"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"        String groupName \u003d VALID_GROUP_AMY;"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(groupName.hashCode(), group.hashCode());"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"    public void test_equals() {"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"        Group firstGroup \u003d new Group(VALID_GROUP_AMY);"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"        Group secondGroup \u003d new Group(VALID_GROUP_BOB);"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstGroup.equals(firstGroup));"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstGroup.equals(secondGroup));"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstGroup.equals(null));"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"yash-chowdhary":63,"-":2}},{"path":"src/test/java/seedu/club/model/UniqueMemberListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.UniqueMemberList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"public class UniqueMemberListTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"        UniqueMemberList uniqueMemberList \u003d new UniqueMemberList();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"        uniqueMemberList.asObservableList().remove(0);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":5,"-":14}},{"path":"src/test/java/seedu/club/model/member/NameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model.member;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.Assert;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class NameTest {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void isValidName() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // null name"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // valid name"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"    public void test_hashCode() {"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"        Name name \u003d new Name(VALID_NAME_AMY);"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedName \u003d VALID_NAME_AMY;"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(expectedName.hashCode(), name.hashCode());"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"    public void test_equals() {"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"        Name testNameOne \u003d new Name(VALID_NAME_AMY);"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"        Name testNameTwo \u003d new Name(VALID_NAME_BOB);"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(testNameOne.equals(testNameOne));"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(testNameOne.equals(testNameTwo));"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(testNameOne.equals(null));"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":2,"yash-chowdhary":21,"-":39}},{"path":"src/test/java/seedu/club/model/member/PhoneTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model.member;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.Assert;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PhoneTest {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        String invalidPhone \u003d \"\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void isValidPhone() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // null phone number"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // invalid phone numbers"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // valid phone numbers"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"    public void test_hashCode() {"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"        Phone phone \u003d new Phone(VALID_PHONE_AMY);"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"        String phoneNumber \u003d VALID_PHONE_AMY;"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(phoneNumber.hashCode(), phone.hashCode());"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"    public void test_equals() {"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"        Phone testPhoneOne \u003d new Phone(VALID_PHONE_AMY);"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"        Phone testPhoneTwo \u003d new Phone(VALID_PHONE_BOB);"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(testPhoneOne.equals(testPhoneOne));"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(testPhoneOne.equals(testPhoneTwo));"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(testPhoneOne.equals(null));"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":2,"yash-chowdhary":21,"-":39}},{"path":"src/test/java/seedu/club/model/member/EmailTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model.member;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.Assert;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class EmailTest {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        String invalidEmail \u003d \"\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void isValidEmail() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // null email"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // blank email"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // missing parts"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // invalid parts"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // valid email"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\"));  // minimal"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\"));   // alphabets only"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\"));  // numeric local part and domain name"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\"));   // long domain name"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\"));    // long local part"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"    public void test_hashCode() {"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"        Email email \u003d new Email(VALID_EMAIL_AMY);"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedEmail \u003d VALID_EMAIL_AMY;"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(expectedEmail.hashCode(), email.hashCode());"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"    public void test_equals() {"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"        Email testEmailOne \u003d new Email(VALID_EMAIL_AMY);"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"        Email testEmailTwo \u003d new Email(VALID_EMAIL_BOB);"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(testEmailOne.equals(testEmailOne));"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(testEmailOne.equals(testEmailTwo));"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(testEmailOne.equals(null));"},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":2,"yash-chowdhary":21,"-":60}},{"path":"src/test/java/seedu/club/storage/XmlAdaptedMatricNumberTest.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.storage;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.INVALID_MATRIC_NUMBER;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_AMY;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_BOB;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.testutil.Assert;"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"public class XmlAdaptedMatricNumberTest {"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"    public void toModelType_validMatricNumber_returnsMatricNumber() throws Exception {"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"        MatricNumber matricNumber \u003d new MatricNumber(VALID_MATRIC_NUMBER);"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"        XmlAdaptedMatricNumber xmlAdaptedMatricNumber \u003d new XmlAdaptedMatricNumber(matricNumber);"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(matricNumber, xmlAdaptedMatricNumber.toModelType());"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"    public void toModelType_invalidMatricNumber_throwsIllegalValueException() {"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"        XmlAdaptedMatricNumber matricNumber \u003d"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"                new XmlAdaptedMatricNumber(INVALID_MATRIC_NUMBER);"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"        String expectedMessage \u003d MatricNumber.MESSAGE_MATRIC_NUMBER_CONSTRAINTS;"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, matricNumber::toModelType);"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"    public void equals() {"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"        XmlAdaptedMatricNumber xmlAdaptedMatricNumberAmy \u003d new XmlAdaptedMatricNumber(VALID_MATRIC_NUMBER_AMY);"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"        XmlAdaptedMatricNumber xmlAdaptedMatricNumberBob \u003d new XmlAdaptedMatricNumber(VALID_MATRIC_NUMBER_BOB);"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(xmlAdaptedMatricNumberAmy, xmlAdaptedMatricNumberAmy);"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"        assertNotEquals(xmlAdaptedMatricNumberAmy, xmlAdaptedMatricNumberBob);"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":41}},{"path":"src/test/java/seedu/club/model/member/MatricNumberTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model.member;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.Assert;"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"public class MatricNumberTest {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new MatricNumber(null));"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"    public void constructor_invalidMatricNumber_throwsIllegalArgumentException() {"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"        String invalidMatricNumber \u003d \"\";"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new MatricNumber(invalidMatricNumber));"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"    public void isValidMatricNumber() {"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"        // null matric number"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e MatricNumber.isValidMatricNumber(null));"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"        // invalid matric numbers"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(MatricNumber.isValidMatricNumber(\"\")); // empty string"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(MatricNumber.isValidMatricNumber(\" \")); // spaces only"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(MatricNumber.isValidMatricNumber(\"A1234567\")); // no ending letter"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(MatricNumber.isValidMatricNumber(\"1234567A\")); // no starting letter"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(MatricNumber.isValidMatricNumber(\"B9873161F\")); // must start with A"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(MatricNumber.isValidMatricNumber(\"C9226443H\"));"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(MatricNumber.isValidMatricNumber(\"A98764532L\")); // too many digits"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(MatricNumber.isValidMatricNumber(\"A987645H\")); // too few digits"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"        // valid matric numbers"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(MatricNumber.isValidMatricNumber(\"A1152241G\"));"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(MatricNumber.isValidMatricNumber(\"A0152640A\"));"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(MatricNumber.isValidMatricNumber(\"A1902205L\"));"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(MatricNumber.isValidMatricNumber(\"a1024509A\"));"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(MatricNumber.isValidMatricNumber(\"a1122206M\"));"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"    public void test_toString() {"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"        MatricNumber testMatricNumberOne \u003d new MatricNumber(\"A0162345Y\");"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"        MatricNumber testMatricNumberTwo \u003d new MatricNumber(\"A0189898D\");"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(testMatricNumberOne.toString().equals(\"A0162345Y\"));"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(testMatricNumberOne.toString().equals(\"A0189898D\"));"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(testMatricNumberTwo.toString().equals(\"A0189898D\"));"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(testMatricNumberTwo.toString().equals(\"A0162345Y\"));"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"    public void test_hashCode() {"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"        MatricNumber testMatricNumber \u003d new MatricNumber(\"A1234567M\");"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"        String matricNumber \u003d \"A1234567M\";"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(matricNumber.hashCode(), testMatricNumber.hashCode());"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"    public void test_equals() {"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"        MatricNumber firstMatricNumber \u003d new MatricNumber(VALID_MATRIC_NUMBER);"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"        MatricNumber secondMatricNumber \u003d new MatricNumber(VALID_MATRIC_NUMBER);"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstMatricNumber.equals(firstMatricNumber));"},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstMatricNumber.equals(secondMatricNumber));"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstMatricNumber.equals(null));"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":40,"amrut-prabhu":2,"yash-chowdhary":31,"-":5}},{"path":"src/test/java/seedu/club/storage/XmlSerializableClubBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.storage;"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.club.testutil.TypicalPolls.getTypicalClubBookWithPolls;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.util.FileUtil;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.util.XmlUtil;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ClubBook;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.TypicalMembers;"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.testutil.TypicalTasks;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"public class XmlSerializableClubBookTest {"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlSerializableClubBookTest/\");"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"    private static final File TYPICAL_MEMBERS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalMembersClubBook.xml\");"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    private static final File TYPICAL_TASKS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalTasksClubBook.xml\");"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"    private static final File INVALID_MEMBER_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidMemberClubBook.xml\");"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final File TYPICAL_POLLS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalPollsClubBook.xml\");"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final File INVALID_POLL_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPollClubBook.xml\");"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"    private static final File INVALID_TAG_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTagClubBook.xml\");"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"    private static final File INVALID_TASKS_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTaskClubBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"    public void toModelType_typicalMembersFile_success() throws Exception {"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"        XmlSerializableClubBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_MEMBERS_FILE,"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"                XmlSerializableClubBook.class);"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"        ClubBook clubBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"        ClubBook typicalMembersClubBook \u003d TypicalMembers.getTypicalClubBook();"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(clubBookFromFile, typicalMembersClubBook);"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"    public void toModelType_typicalOrdersFile_success() throws Exception {"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"        XmlSerializableClubBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_TASKS_FILE,"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"                XmlSerializableClubBook.class);"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"        ClubBook clubBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook typicalTasksClubBook \u003d TypicalTasks.getTypicalClubBookWithTasks();"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(clubBookFromFile, typicalTasksClubBook);"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"    public void toModelType_invalidMemberFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"        XmlSerializableClubBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_MEMBER_FILE,"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"                XmlSerializableClubBook.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTagFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"        XmlSerializableClubBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TAG_FILE,"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"                XmlSerializableClubBook.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"    public void toModelType_typicalPollsFile_success() throws Exception {"},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":"        XmlSerializableClubBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_POLLS_FILE,"},{"lineNumber":72,"author":{"gitID":"amrut-prabhu"},"content":"                XmlSerializableClubBook.class);"},{"lineNumber":73,"author":{"gitID":"amrut-prabhu"},"content":"        ClubBook clubBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        ClubBook typicalPollsClubBook \u003d getTypicalClubBookWithPolls();"},{"lineNumber":75,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(clubBookFromFile, typicalPollsClubBook);"},{"lineNumber":76,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":78,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"MuhdNurKamal"},"content":"    public void toModelType_invalidPollFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":80,"author":{"gitID":"MuhdNurKamal"},"content":"        XmlSerializableClubBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_POLL_FILE,"},{"lineNumber":81,"author":{"gitID":"amrut-prabhu"},"content":"                XmlSerializableClubBook.class);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"MuhdNurKamal"},"content":"    public void toModelType_invalidTaskFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":"        XmlSerializableClubBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TASKS_FILE,"},{"lineNumber":89,"author":{"gitID":"amrut-prabhu"},"content":"                XmlSerializableClubBook.class);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":94,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"MuhdNurKamal"},"content":"    public void equals() throws Exception {"},{"lineNumber":96,"author":{"gitID":"yash-chowdhary"},"content":"        XmlSerializableClubBook firstFile \u003d XmlUtil.getDataFromFile(TYPICAL_MEMBERS_FILE,"},{"lineNumber":97,"author":{"gitID":"amrut-prabhu"},"content":"                XmlSerializableClubBook.class);"},{"lineNumber":98,"author":{"gitID":"yash-chowdhary"},"content":"        XmlSerializableClubBook secondFile \u003d XmlUtil.getDataFromFile(TYPICAL_TASKS_FILE,"},{"lineNumber":99,"author":{"gitID":"amrut-prabhu"},"content":"                XmlSerializableClubBook.class);"},{"lineNumber":100,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":101,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstFile.equals(firstFile));"},{"lineNumber":102,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstFile.equals(null));"},{"lineNumber":103,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstFile.equals(secondFile));"},{"lineNumber":104,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":18,"amrut-prabhu":38,"yash-chowdhary":18,"-":31}},{"path":"src/test/java/seedu/club/model/member/NameContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model.member;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.MemberBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"        // different member -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(predicate.test(new MemberBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(predicate.test(new MemberBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(predicate.test(new MemberBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(predicate.test(new MemberBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(predicate.test(new MemberBuilder().withName(\"Alice\").build()));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(predicate.test(new MemberBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"        // Keywords match phone, email and matric number, but does not match name"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":72,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(predicate.test(new MemberBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":73,"author":{"gitID":"MuhdNurKamal"},"content":"                .withEmail(\"alice@email.com\").withMatricNumber(\"A1152241G\").build()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":2,"amrut-prabhu":10,"-":63}},{"path":"src/test/java/seedu/club/model/task/TimeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.model.task;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TASK_TIME_1;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TASK_TIME_2;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"public class TimeTest {"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"    public void isValidTime() {"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"        // invalid time"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Time.isValidTime(\"00:90\"));"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Time.isValidTime(\"24:00\"));"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"        // incorrect time input format"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Time.isValidTime(\"10 PM\"));"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Time.isValidTime(\"0800\"));"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Time.isValidTime(\"Eight o\u0027clock\"));"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"        // invalid input"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Time.isValidTime(\"Random string\"));"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"        // valid time"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(Time.isValidTime(\"00:00\"));"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(Time.isValidTime(\"11:30\"));"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(Time.isValidTime(\"15:00\"));"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(Time.isValidTime(\"17:00\"));"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(Time.isValidTime(\"23:59\"));"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"    public void equals() {"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"        Time firstTime \u003d new Time(VALID_TASK_TIME_1);"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"        Time secondTime \u003d new Time(VALID_TASK_TIME_2);"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstTime.equals(firstTime));"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstTime.equals(null));"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstTime.equals(true));"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstTime.equals(secondTime));"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"        Time firstTimeCopy \u003d new Time(VALID_TASK_TIME_1);"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstTime.equals(firstTimeCopy));"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"    public void test_hashCode() {"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"        Time time \u003d new Time(VALID_TASK_TIME_1);"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedTime \u003d VALID_TASK_TIME_1;"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(expectedTime.hashCode(), time.hashCode());"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":53,"-":3}},{"path":"src/test/java/seedu/club/storage/CsvClubBookStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"//@@author amrut-prabhu"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.storage;"},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.getTypicalMembers;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.util.CsvUtil;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.util.FileUtil;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"public class CsvClubBookStorageTest {"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/CsvClubBookStorageTest/\");"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"    private File addToTestDataFileIfNotNull(File prefsFileInTestDataFolder) {"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"                ? new File(TEST_DATA_FOLDER + prefsFileInTestDataFolder)"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"                : null;"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"    /*@Test"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"    public void readClubBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"        readClubBook(null);"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"    private java.util.Optional\u003cReadOnlyClubBook\u003e readClubBook(String filePath) throws Exception {"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"        CsvClubBookStorage csvClubBookStorage \u003d new CsvClubBookStorage();"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"        csvClubBookStorage.setClubBookFile(file);"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"        return csvClubBookStorage.readClubBook(addToTestDataFileIfNotNull(file));"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":51,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(readClubBook(\"NonExistentFile.csv\").isPresent());"},{"lineNumber":52,"author":{"gitID":"amrut-prabhu"},"content":"    }*/"},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"    /*@Test"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"        readClubBook(\"NotXmlFormatClubBook.xml\");"},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"         IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":"    public void readClubBook_invalidMemberClubBook_throwDataConversionException() throws Exception {"},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":"        readClubBook(\"invalidMemberClubBook.xml\");"},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":71,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"amrut-prabhu"},"content":"    public void readClubBook_invalidAndValidMemberClubBook_throwDataConversionException() throws Exception {"},{"lineNumber":73,"author":{"gitID":"amrut-prabhu"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":74,"author":{"gitID":"amrut-prabhu"},"content":"        readClubBook(\"invalidAndValidMemberClubBook.xml\");"},{"lineNumber":75,"author":{"gitID":"amrut-prabhu"},"content":"    }*/"},{"lineNumber":76,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":77,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"amrut-prabhu"},"content":"    public void readAndSaveClubBook_allInOrder_success() throws Exception {"},{"lineNumber":79,"author":{"gitID":"amrut-prabhu"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempClubBook.csv\";"},{"lineNumber":80,"author":{"gitID":"amrut-prabhu"},"content":"        File exportFile \u003d new File(filePath);"},{"lineNumber":81,"author":{"gitID":"amrut-prabhu"},"content":"        List\u003cMember\u003e originalMemberList \u003d getTypicalMembers();"},{"lineNumber":82,"author":{"gitID":"amrut-prabhu"},"content":"        CsvClubBookStorage csvClubBookStorage \u003d new CsvClubBookStorage();"},{"lineNumber":83,"author":{"gitID":"amrut-prabhu"},"content":"        csvClubBookStorage.setClubBookFile(exportFile);"},{"lineNumber":84,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":85,"author":{"gitID":"amrut-prabhu"},"content":"        //Save in new file (without headers) and read back"},{"lineNumber":86,"author":{"gitID":"amrut-prabhu"},"content":"        for (Member member: originalMemberList) {"},{"lineNumber":87,"author":{"gitID":"amrut-prabhu"},"content":"            csvClubBookStorage.saveData(CsvUtil.toCsvFormat(member));"},{"lineNumber":88,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(exportFile.exists());"},{"lineNumber":90,"author":{"gitID":"amrut-prabhu"},"content":"        //TODO: Read back data"},{"lineNumber":91,"author":{"gitID":"amrut-prabhu"},"content":"        /*ReadOnlyClubBook readBack \u003d csvClubBookStorage.readClubBook(filePath).get();"},{"lineNumber":92,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(original, new ClubBook(readBack));"},{"lineNumber":93,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":94,"author":{"gitID":"amrut-prabhu"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":95,"author":{"gitID":"amrut-prabhu"},"content":"        original.addMember(HOON);"},{"lineNumber":96,"author":{"gitID":"amrut-prabhu"},"content":"        original.removeMember(ALICE);"},{"lineNumber":97,"author":{"gitID":"amrut-prabhu"},"content":"        csvClubBookStorage.saveClubBook(original, filePath);"},{"lineNumber":98,"author":{"gitID":"amrut-prabhu"},"content":"        readBack \u003d xmlClubBookStorage.readClubBook(filePath).get();"},{"lineNumber":99,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(original, new ClubBook(readBack));"},{"lineNumber":100,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":101,"author":{"gitID":"amrut-prabhu"},"content":"        //Save and read without specifying file path"},{"lineNumber":102,"author":{"gitID":"amrut-prabhu"},"content":"        original.addMember(IDA);"},{"lineNumber":103,"author":{"gitID":"amrut-prabhu"},"content":"        csvClubBookStorage.saveClubBook(original); //file path not specified"},{"lineNumber":104,"author":{"gitID":"amrut-prabhu"},"content":"        readBack \u003d xmlClubBookStorage.readClubBook().get(); //file path not specified"},{"lineNumber":105,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(original, new ClubBook(readBack));*/"},{"lineNumber":106,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":108,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"amrut-prabhu"},"content":"    public void saveData_nullData_throwsNullPointerException() {"},{"lineNumber":110,"author":{"gitID":"amrut-prabhu"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":111,"author":{"gitID":"amrut-prabhu"},"content":"        saveData(null, new File(\"SomeFile.csv\"));"},{"lineNumber":112,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":114,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"amrut-prabhu"},"content":"    public void saveData_nullFile_throwsNullPointerException() {"},{"lineNumber":116,"author":{"gitID":"amrut-prabhu"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":117,"author":{"gitID":"amrut-prabhu"},"content":"        saveData(new String(), null);"},{"lineNumber":118,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":120,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"amrut-prabhu"},"content":"     * Saves {@code data} at the specified {@code file}."},{"lineNumber":122,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"amrut-prabhu"},"content":"    private void saveData(String data, File file) {"},{"lineNumber":124,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"amrut-prabhu"},"content":"            CsvClubBookStorage csvClubBookStorage \u003d new CsvClubBookStorage();"},{"lineNumber":126,"author":{"gitID":"amrut-prabhu"},"content":"            csvClubBookStorage.setClubBookFile(file);"},{"lineNumber":127,"author":{"gitID":"amrut-prabhu"},"content":"            csvClubBookStorage.saveData(data, addToTestDataFileIfNotNull(file));"},{"lineNumber":128,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (IOException ioe) {"},{"lineNumber":129,"author":{"gitID":"amrut-prabhu"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":130,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":133,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":133}},{"path":"src/test/java/seedu/club/model/task/DateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.model.task;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TASK_DATE_1;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"public class DateTest {"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"    public void isValidDate() {"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"        // day out-of-bounds"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Date.isValidDate(\"0/01/2018\"));"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Date.isValidDate(\"31/04/2018\"));"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"        // month out-of-bounds"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Date.isValidDate(\"11/13/2018\"));"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Date.isValidDate(\"11/00/2018\"));"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"        // year out-of-bounds -\u003e returns false"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Date.isValidDate(\"01/12/2100\"));"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Date.isValidDate(\"01/12/1899\"));"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"        // invalid format"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Date.isValidDate(\"21 March 2018\"));"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"        // invalid input"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Date.isValidDate(\"Random string\"));"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"        // invalid leap day"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Date.isValidDate(\"29/02/2018\"));"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"        // valid leap day"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(Date.isValidDate(\"29/02/2020\"));"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"        // valid dates"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(Date.isValidDate(\"01/01/2018\"));"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(Date.isValidDate(\"01.01.2018\"));"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(Date.isValidDate(\"01-01-2019\"));"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"        // valid dates with mixed separators"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(Date.isValidDate(\"01/01.2018\"));"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(Date.isValidDate(\"01.01-2018\"));"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(Date.isValidDate(\"01-01/2019\"));"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"    public void equals() {"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"        Date firstDate \u003d new Date(\"01/01/2018\");"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"        Date secondDate \u003d new Date(\"02/01/2018\");"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstDate.equals(firstDate));"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstDate.equals(null));"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstDate.equals(true));"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstDate.equals(secondDate));"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"        // same value -\u003e returns true"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"        Date firstDateCopy \u003d new Date(\"01/01/2018\");"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstDate.equals(firstDateCopy));"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"    public void test_hashCode() {"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"        Date date \u003d new Date(VALID_TASK_DATE_1);"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedDate \u003d VALID_TASK_DATE_1;"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(expectedDate.hashCode(), date.hashCode());"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":68,"-":3}},{"path":"src/test/java/seedu/club/model/task/AssigneeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"public class AssigneeTest {"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"    public void equals() {"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"        Assignee firstAssignee \u003d new Assignee(VALID_NAME_AMY);"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"        Assignee secondAssignee \u003d new Assignee(VALID_NAME_BOB);"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstAssignee.equals(firstAssignee));"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstAssignee.equals(null));"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstAssignee.equals(true));"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstAssignee.equals(secondAssignee));"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"        Assignee firstAssigneeCopy \u003d new Assignee(VALID_NAME_AMY);"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstAssignee.equals(firstAssigneeCopy));"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"    public void test_hashCode() {"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"        Assignee assignee \u003d new Assignee(VALID_NAME_BOB);"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedAssignee \u003d VALID_NAME_BOB;"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(expectedAssignee.hashCode(), assignee.hashCode());"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":29,"-":6}},{"path":"src/test/java/seedu/club/model/task/AssignorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.model.task;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"public class AssignorTest {"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"    public void equals() {"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"        Assignor firstAssignor \u003d new Assignor(VALID_NAME_AMY);"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"        Assignor secondAssignor \u003d new Assignor(VALID_NAME_BOB);"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstAssignor.equals(firstAssignor));"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstAssignor.equals(null));"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstAssignor.equals(true));"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstAssignor.equals(secondAssignor));"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"        Assignor firstAssignorCopy \u003d new Assignor(VALID_NAME_AMY);"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstAssignor.equals(firstAssignorCopy));"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"    public void test_hashCode() {"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"        Assignor assignor \u003d new Assignor(VALID_NAME_BOB);"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedAssignor \u003d VALID_NAME_BOB;"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(expectedAssignor.hashCode(), assignor.hashCode());"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":30,"-":6}},{"path":"src/test/java/seedu/club/model/task/StatusTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.model.task;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TASK_STATUS_IN_PROGRESS;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TASK_STATUS_TO_BEGIN;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"public class StatusTest {"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"    public void equals() {"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"        Status firstStatus \u003d new Status(VALID_TASK_STATUS_TO_BEGIN);"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"        Status secondStatus \u003d new Status(VALID_TASK_STATUS_IN_PROGRESS);"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstStatus.equals(firstStatus));"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstStatus.equals(null));"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstStatus.equals(true));"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstStatus.equals(secondStatus));"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"        Status firstStatusCopy \u003d new Status(VALID_TASK_STATUS_TO_BEGIN);"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstStatus.equals(firstStatusCopy));"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"    public void test_hashCode() {"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"        Status status \u003d new Status(VALID_TASK_STATUS_IN_PROGRESS);"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedStatus \u003d VALID_TASK_STATUS_IN_PROGRESS;"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(expectedStatus.hashCode(), status.hashCode());"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":33,"-":3}},{"path":"src/test/java/seedu/club/model/task/DescriptionTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.model.task;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TASK_DESCRIPTION_CONFETTI;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TASK_DESCRIPTION_FOOD;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.Assert;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":" * Unit tests for Description"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"public class DescriptionTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Description(null));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"        String invalidDescription \u003d \"\";"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"    public void isValidDescription() {"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"        // null name"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"        // invalid name"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Description.isValidDescription(\"\")); // empty string"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Description.isValidDescription(\" \")); // spaces only"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Description.isValidDescription(\"^\")); // only non-alphanumeric characters"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Description.isValidDescription(\"Buy*\")); // contains non-alphanumeric characters"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"        // valid name"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(Description.isValidDescription(\"food\")); // alphabets only"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(Description.isValidDescription(\"12345\")); // numbers only"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(Description.isValidDescription(\"lorem ipsum the 2nd\")); // alphanumeric characters"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(Description.isValidDescription(\"Buy Food\")); // with capital letters"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(Description.isValidDescription(\"Very long description indeed\")); // long descriptions"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"    public void test_hashCode() {"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"        Description description \u003d new Description(VALID_TASK_DESCRIPTION_FOOD);"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedDescription \u003d VALID_TASK_DESCRIPTION_FOOD;"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(expectedDescription.hashCode(), description.hashCode());"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"    public void test_equals() {"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"        Description descriptionOne \u003d new Description(VALID_TASK_DESCRIPTION_FOOD);"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"        Description descriptionTwo \u003d new Description(VALID_TASK_DESCRIPTION_CONFETTI);"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(descriptionOne.equals(descriptionOne));"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(descriptionOne.equals(descriptionTwo));"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(descriptionOne.equals(null));"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"yash-chowdhary":51,"-":14}},{"path":"src/test/java/seedu/club/model/task/UniqueTaskListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.model.task;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalTasks.BUY_CONFETTI;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalTasks.BUY_FOOD;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"public class UniqueTaskListTest {"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"    @Rule"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"        UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"        uniqueTaskList.asObservableList().remove(0);"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"    public void equals() throws DuplicateTaskException {"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"        UniqueTaskList firstTaskList \u003d new UniqueTaskList();"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"        firstTaskList.add(BUY_FOOD);"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"        UniqueTaskList secondTaskList \u003d new UniqueTaskList();"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"        secondTaskList.add(BUY_CONFETTI);"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstTaskList.equals(firstTaskList));"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstTaskList.equals(true));"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstTaskList.equals(secondTaskList));"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"    public void asTaskInsensitiveList_compareSimilarLists_success()"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"            throws DuplicateTaskException {"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"        UniqueTaskList firstTaskList \u003d new UniqueTaskList();"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"        firstTaskList.add(BUY_CONFETTI);"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"        firstTaskList.add(BUY_FOOD);"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"        UniqueTaskList secondTaskList \u003d new UniqueTaskList();"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"        secondTaskList.add(BUY_FOOD);"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"        secondTaskList.add(BUY_CONFETTI);"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstTaskList.equalsOrderInsensitive(secondTaskList));"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"    public void asUniqueList_addDuplicateOrder_throwsDuplicateOrderException()"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"            throws DuplicateTaskException {"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"        UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"        thrown.expect(DuplicateTaskException.class);"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"        uniqueTaskList.add(BUY_CONFETTI);"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"        uniqueTaskList.add(BUY_CONFETTI);"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":60}},{"path":"src/test/java/seedu/club/model/tag/TagTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.Assert;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"public class TagTest {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        String invalidTagName \u003d \"\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void isValidTagName() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        // null tag name"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":2,"-":24}},{"path":"src/test/java/seedu/club/model/UniqueTagListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.UniqueTagList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class UniqueTagListTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        UniqueTagList uniqueTagList \u003d new UniqueTagList();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        uniqueTagList.asObservableList().remove(0);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"    public void equals() throws UniqueTagList.DuplicateTagException {"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"        UniqueTagList firstTagList \u003d new UniqueTagList();"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"        firstTagList.add(new Tag(VALID_TAG_HUSBAND));"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"        UniqueTagList secondTagList \u003d new UniqueTagList();"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"        secondTagList.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstTagList.equals(firstTagList));"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstTagList.equals(true));"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstTagList.equals(secondTagList));"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"    public void asTaskInsensitiveList_compareSimilarLists_success()"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"            throws UniqueTagList.DuplicateTagException {"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"        UniqueTagList firstTagList \u003d new UniqueTagList();"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"        firstTagList.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"        firstTagList.add(new Tag(VALID_TAG_HUSBAND));"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"        UniqueTagList secondTagList \u003d new UniqueTagList();"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"        secondTagList.add(new Tag(VALID_TAG_HUSBAND));"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"        secondTagList.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstTagList.equalsOrderInsensitive(secondTagList));"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"    public void asUniqueList_addDuplicateOrder_throwsDuplicateOrderException()"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"            throws UniqueTagList.DuplicateTagException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        UniqueTagList uniqueTagList \u003d new UniqueTagList();"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"        thrown.expect(UniqueTagList.DuplicateTagException.class);"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"        uniqueTagList.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"        uniqueTagList.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":4,"yash-chowdhary":35,"-":20}},{"path":"src/test/java/seedu/club/model/poll/QuestionTest.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.model.poll;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_QUESTION_LIFE;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.model.poll.Question.PREFIX_QUESTION;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.Assert;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"public class QuestionTest {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Question(null));"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"    public void constructor_invalidQuestion_throwsIllegalArgumentException() {"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"        String invalidQuestion \u003d \"\";"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Question(invalidQuestion));"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"    public void isValidQuestion() {"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"        // null question"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Question.isValidQuestion(null));"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"        // invalid questions"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(Question.isValidQuestion(\"\")); // empty string"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(Question.isValidQuestion(\" \")); // spaces only"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"        // valid questions"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(Question.isValidQuestion(\"What is the meaning of life?\"));"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(Question.isValidQuestion(\"How to basic123?\"));"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(Question.isValidQuestion(\"ARE WE ALONE?\"));"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(Question.isValidQuestion(\"Why are you____reading this?\"));"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(Question.isValidQuestion(\"ASOIJCNSOJACN\"));"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"    public void test_toString() {"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"        Question testQuestionOne \u003d new Question(\"WHAT IS LOVE\");"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"        Question testQuestionTwo \u003d new Question(\"WHAT IS LIFE\");"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(testQuestionOne.toString().equals(PREFIX_QUESTION + \"WHAT IS LOVE\"));"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(testQuestionOne.toString().equals(PREFIX_QUESTION + \"WHAT IS LIFE\"));"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(testQuestionTwo.toString().equals(PREFIX_QUESTION + \"WHAT IS LIFE\"));"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(testQuestionTwo.toString().equals(PREFIX_QUESTION + \"WHAT IS LOVE\"));"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"    public void test_hashCode() {"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"        Question testQuestion \u003d new Question(\"A1234567M\");"},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"        String question \u003d \"A1234567M\";"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(question.hashCode(), testQuestion.hashCode());"},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":"    public void equals() {"},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":"        Question firstQuestion \u003d new Question(VALID_QUESTION_LIFE);"},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":"        Question secondQuestion \u003d new Question(VALID_QUESTION_LIFE);"},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(firstQuestion.equals(firstQuestion));"},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(firstQuestion.equals(secondQuestion));"},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(firstQuestion.equals(null));"},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":63,"amrut-prabhu":1,"-":6}},{"path":"src/test/java/seedu/club/model/poll/AnswerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.model.poll;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_ANSWER_ONE;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.model.poll.Answer.PREFIX_ANSWER;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.Assert;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"public class AnswerTest {"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Answer(null));"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"    public void constructor_invalidAnswer_throwsIllegalArgumentException() {"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"        String invalidAnswer \u003d \"\";"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Answer(invalidAnswer));"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"    public void isValidAnswer() {"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"        // null answer"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Answer.isValidAnswer(null));"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"        // invalid answers"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(Answer.isValidAnswer(\"\")); // empty string"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(Answer.isValidAnswer(\" \")); // spaces only"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"        // valid answers"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(Answer.isValidAnswer(\"42\"));"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(Answer.isValidAnswer(\"not empty string\"));"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(Answer.isValidAnswer(\"Hello\"));"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(Answer.isValidAnswer(\"\u0026*^\u0026*^\"));"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(Answer.isValidAnswer(\"i dono\"));"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"    public void test_toString() {"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"        Answer testAnswerOne \u003d new Answer(\"hello\");"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"        Answer testAnswerTwo \u003d new Answer(\"world\");"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(testAnswerOne.toString().equals(PREFIX_ANSWER + \"hello\"));"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(testAnswerOne.toString().equals(PREFIX_ANSWER + \"world\"));"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(testAnswerTwo.toString().equals(PREFIX_ANSWER + \"world\"));"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(testAnswerTwo.toString().equals(PREFIX_ANSWER + \"hello\"));"},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"    public void test_hashCode() {"},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"        Answer testAnswer \u003d new Answer(\"hello\");"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":"        String answer \u003d \"hello\";"},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(answer.hashCode(), testAnswer.hashCode());"},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":"    public void equals() {"},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":"        Answer firstAnswer \u003d new Answer(VALID_ANSWER_ONE);"},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":"        Answer secondAnswer \u003d new Answer(VALID_ANSWER_ONE);"},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(firstAnswer.equals(firstAnswer));"},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(firstAnswer.equals(secondAnswer));"},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(firstAnswer.equals(null));"},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"MuhdNurKamal"},"content":"    public void voteThisAnswer() {"},{"lineNumber":74,"author":{"gitID":"MuhdNurKamal"},"content":"        int initialVote \u003d 0;"},{"lineNumber":75,"author":{"gitID":"MuhdNurKamal"},"content":"        Answer answer \u003d new Answer(VALID_ANSWER_ONE, initialVote);"},{"lineNumber":76,"author":{"gitID":"MuhdNurKamal"},"content":"        assertVoteIncreasedAfterVoting(answer, initialVote);"},{"lineNumber":77,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":78,"author":{"gitID":"MuhdNurKamal"},"content":"        initialVote \u003d 5;"},{"lineNumber":79,"author":{"gitID":"MuhdNurKamal"},"content":"        answer \u003d new Answer(VALID_ANSWER_ONE, initialVote);"},{"lineNumber":80,"author":{"gitID":"MuhdNurKamal"},"content":"        assertVoteIncreasedAfterVoting(answer, initialVote);"},{"lineNumber":81,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":83,"author":{"gitID":"MuhdNurKamal"},"content":"    private boolean assertVoteIncreasedAfterVoting(Answer answer, int initialVote) {"},{"lineNumber":84,"author":{"gitID":"MuhdNurKamal"},"content":"        answer.voteThisAnswer();"},{"lineNumber":85,"author":{"gitID":"MuhdNurKamal"},"content":"        return ++initialVote \u003d\u003d answer.getVoteCount();"},{"lineNumber":86,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":80,"amrut-prabhu":1,"-":6}},{"path":"src/test/java/seedu/club/model/poll/QuestionContainsAnyKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.model.poll;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.testutil.PollBuilder;"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"public class QuestionContainsAnyKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"        QuestionContainsAnyKeywordsPredicate firstPredicate \u003d"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"                new QuestionContainsAnyKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"        QuestionContainsAnyKeywordsPredicate secondPredicate \u003d"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"                new QuestionContainsAnyKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"        QuestionContainsAnyKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"                new QuestionContainsAnyKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"        // different keywords -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"    public void test_questionContainsExactKeywords_returnsTrue() {"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"        // One keyword"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"        QuestionContainsAnyKeywordsPredicate predicate \u003d"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"                new QuestionContainsAnyKeywordsPredicate(Collections.singletonList(\"Father?\"));"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(predicate.test(new PollBuilder().withQuestion(\"Father?\").build()));"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"        // Multiple keywords"},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d new QuestionContainsAnyKeywordsPredicate(Arrays.asList(\"Is\", \"the\", \"weather\", \"nice?\"));"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(predicate.test(new PollBuilder().withQuestion(\"Is the weather nice?\").build()));"},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d new QuestionContainsAnyKeywordsPredicate(Arrays.asList(\"cAn\", \"i\", \"EAT\", \"HiM?\"));"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(predicate.test(new PollBuilder().withQuestion(\"Can I eat him?\").build()));"},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":"        // Match partially"},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d new QuestionContainsAnyKeywordsPredicate(Arrays.asList(\"Did\", \"you\"));"},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(predicate.test(new PollBuilder().withQuestion(\"Did you watch the show last night?\").build()));"},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":"    public void test_questionDoesNotContainExactKeywords_returnsFalse() {"},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":"        // Zero keywords"},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":"        QuestionContainsAnyKeywordsPredicate predicate \u003d"},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":"                new QuestionContainsAnyKeywordsPredicate(Collections.emptyList());"},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(predicate.test(new PollBuilder().withQuestion(\"Did you watch the show last night?\").build()));"},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":"        // Non-matching keyword"},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d new QuestionContainsAnyKeywordsPredicate(Arrays.asList(\"Who\", \"reads\", \"this?\"));"},{"lineNumber":73,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(predicate.test(new PollBuilder().withQuestion(\"Did you watch the show last night?\").build()));"},{"lineNumber":74,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":42,"-":33}},{"path":"src/test/java/seedu/club/model/poll/PollTest.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.model.poll;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_ANSWER_ONE;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_ANSWER_TWO;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_AMY;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_BOB;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_QUESTION_LIFE;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.model.poll.Answer.PREFIX_ANSWER;"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.testutil.PollBuilder;"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"public class PollTest {"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"    public void test_toString() {"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"        Poll poll \u003d new PollBuilder()"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"                .withQuestion(VALID_QUESTION_LIFE)"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"                .withAnswers(VALID_ANSWER_ONE, VALID_ANSWER_TWO)"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"                .withPolleesMatricNumbers(VALID_MATRIC_NUMBER_AMY, VALID_MATRIC_NUMBER_BOB)"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"                .build();"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(poll.toString(), \"[ \" + new Question(VALID_QUESTION_LIFE) + \" ]\""},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"                + PREFIX_ANSWER + VALID_ANSWER_ONE + \",\" + PREFIX_ANSWER + VALID_ANSWER_TWO);"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":25,"amrut-prabhu":2}},{"path":"src/test/java/seedu/club/model/poll/UniquePollListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.model.poll;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.testutil.TypicalPolls.POLL_HOW;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.testutil.TypicalPolls.POLL_WHAT;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.testutil.TypicalPolls.POLL_WHEN;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.testutil.TypicalPolls.POLL_WHO;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.DuplicatePollException;"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"public class UniquePollListTest {"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final Set\u003cPoll\u003e POLL_SET_ONE \u003d new HashSet\u003cPoll\u003e(Arrays.asList(POLL_WHAT, POLL_HOW, POLL_WHEN));"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final Set\u003cPoll\u003e POLL_SET_TWO \u003d new HashSet\u003cPoll\u003e(Arrays.asList(POLL_WHO, POLL_HOW, POLL_WHEN));"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"        UniquePollList uniquePollList \u003d new UniquePollList();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"        uniquePollList.asObservableList().remove(0);"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"    public void add_duplicatePoll_throwsDuplicatePollException() throws DuplicatePollException {"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"        UniquePollList uniquePollList \u003d new UniquePollList();"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"        uniquePollList.add(POLL_WHAT);"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"        thrown.expect(DuplicatePollException.class);"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"        uniquePollList.add(POLL_WHAT);"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"    public void equals() {"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"        UniquePollList uniquePollListOne \u003d new UniquePollList(POLL_SET_ONE);"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"        UniquePollList uniquePollListTwo \u003d new UniquePollList(POLL_SET_TWO);"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(uniquePollListOne.equals(uniquePollListOne));"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(uniquePollListTwo.equals(uniquePollListOne));"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":43,"-":9}},{"path":"src/test/java/seedu/club/testutil/PollUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.testutil;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_ANSWER;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_QUESTION;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.AddPollCommand;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":" * A utility class for poll."},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"public class PollUtil {"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"     * Returns an addPoll command string for adding the {@code poll}."},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"    public static String getAddPollCommand(Poll poll) {"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"        return AddPollCommand.COMMAND_WORD + \" \" + getPollDetails(poll);"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"     * Returns the part of command string for the given {@code poll}\u0027s details."},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"    public static String getPollDetails(Poll poll) {"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"        sb.append(PREFIX_QUESTION + poll.getQuestion().getValue() + \" \");"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"        poll.getAnswers().stream().forEach("},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"            answer -\u003e sb.append(PREFIX_ANSWER + answer.getValue() + \" \")"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"        );"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"        return sb.toString();"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":33}},{"path":"src/test/java/seedu/club/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.MANDATORY_GROUP;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.NON_EXISTENT_GROUP;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_GROUP_AMY;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.model.Model.PREDICATE_SHOW_ALL_MEMBERS;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.ALICE;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.AMY;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.BENSON;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.BOB;"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalTasks.BOOK_AUDITORIUM;"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalTasks.BUY_CONFETTI;"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalTasks.BUY_FOOD;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.File;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.model.ClubBookChangedEvent;"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.model.NewExportDataAvailableEvent;"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.ViewMyTasksCommand;"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Body;"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Client;"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Subject;"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.exceptions.GroupCannotBeRemovedException;"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.NameContainsKeywordsPredicate;"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.MemberNotFoundException;"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Status;"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.TaskIsRelatedToMemberPredicate;"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TaskCannotBeDeletedException;"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TasksAlreadyListedException;"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TasksCannotBeDisplayedException;"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.testutil.Assert;"},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.ClubBookBuilder;"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.MemberBuilder;"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.testutil.TaskBuilder;"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.ui.testutil.EventsCollectorRule;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"    @Rule"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":"    @Rule"},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"amrut-prabhu"},"content":"    public void getFilteredMemberList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":73,"author":{"gitID":"amrut-prabhu"},"content":"        modelManager.getFilteredMemberList().remove(0);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"    //@@author yash-chowdhary"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"    public void removeGroup_nonExistentGroup_modelUnchanged() throws Exception {"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(AMY).withMember(BOB).build();"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager modelManager \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":"            modelManager.removeGroup(new Group(NON_EXISTENT_GROUP));"},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (GroupNotFoundException gnfe) {"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":"            assertEquals(new ModelManager(clubBook, userPrefs), modelManager);"},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":"    public void removeGroup_mandatoryGroup_modelUnchanged() throws Exception {"},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(AMY).withMember(BOB).build();"},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":94,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager modelManager \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":96,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":97,"author":{"gitID":"yash-chowdhary"},"content":"            modelManager.removeGroup(new Group(MANDATORY_GROUP));"},{"lineNumber":98,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (GroupCannotBeRemovedException e) {"},{"lineNumber":99,"author":{"gitID":"yash-chowdhary"},"content":"            assertEquals(new ModelManager(clubBook, userPrefs), modelManager);"},{"lineNumber":100,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":103,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"yash-chowdhary"},"content":"    public void removeGroup_atLeastOneMemberInGroup_groupRemoved() throws Exception {"},{"lineNumber":105,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(AMY).withMember(BOB).build();"},{"lineNumber":106,"author":{"gitID":"yash-chowdhary"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":107,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":108,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager modelManager \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":109,"author":{"gitID":"yash-chowdhary"},"content":"        modelManager.removeGroup(new Group(VALID_GROUP_AMY));"},{"lineNumber":110,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":111,"author":{"gitID":"yash-chowdhary"},"content":"        Member amyNotInPublicity \u003d new MemberBuilder(AMY).withGroup().build();"},{"lineNumber":112,"author":{"gitID":"yash-chowdhary"},"content":"        Member bobNotInPublicity \u003d new MemberBuilder(BOB).build();"},{"lineNumber":113,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook expectedClubBook \u003d new ClubBookBuilder().withMember(amyNotInPublicity)"},{"lineNumber":114,"author":{"gitID":"yash-chowdhary"},"content":"                .withMember(bobNotInPublicity).build();"},{"lineNumber":115,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":116,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(new ModelManager(expectedClubBook, userPrefs), modelManager);"},{"lineNumber":117,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":118,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":120,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"yash-chowdhary"},"content":"    public void emailGroup_nonExistentGroup_throwsException() throws Exception {"},{"lineNumber":122,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(AMY).withMember(BOB).build();"},{"lineNumber":123,"author":{"gitID":"yash-chowdhary"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":124,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":125,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager modelManager \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":126,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":127,"author":{"gitID":"yash-chowdhary"},"content":"            String expectedRecipients \u003d modelManager.generateEmailRecipients(new Group(NON_EXISTENT_GROUP),"},{"lineNumber":128,"author":{"gitID":"yash-chowdhary"},"content":"                    null);"},{"lineNumber":129,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (GroupNotFoundException gnfe) {"},{"lineNumber":130,"author":{"gitID":"yash-chowdhary"},"content":"            assertEquals(new ModelManager(clubBook, userPrefs), modelManager);"},{"lineNumber":131,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":134,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":135,"author":{"gitID":"yash-chowdhary"},"content":"    public void emailTag_nonExistentTag_throwsException() throws Exception {"},{"lineNumber":136,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(AMY).withMember(BOB).build();"},{"lineNumber":137,"author":{"gitID":"yash-chowdhary"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":138,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":139,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager modelManager \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":140,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"yash-chowdhary"},"content":"            String expectedRecipients \u003d modelManager.generateEmailRecipients(null,"},{"lineNumber":142,"author":{"gitID":"yash-chowdhary"},"content":"                    new Tag(VALID_TAG_UNUSED));"},{"lineNumber":143,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (TagNotFoundException tnfe) {"},{"lineNumber":144,"author":{"gitID":"yash-chowdhary"},"content":"            assertEquals(new ModelManager(clubBook, userPrefs), modelManager);"},{"lineNumber":145,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":148,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":149,"author":{"gitID":"yash-chowdhary"},"content":"    public void emailGroup_validGroup_success() throws Exception {"},{"lineNumber":150,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(AMY).withMember(BOB).build();"},{"lineNumber":151,"author":{"gitID":"yash-chowdhary"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":152,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":153,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager modelManager \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":154,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedRecipients \u003d modelManager.generateEmailRecipients(new Group(VALID_GROUP_AMY),"},{"lineNumber":155,"author":{"gitID":"yash-chowdhary"},"content":"                null);"},{"lineNumber":156,"author":{"gitID":"yash-chowdhary"},"content":"        modelManager.sendEmail(expectedRecipients, new Client(Client.VALID_CLIENT_GMAIL),"},{"lineNumber":157,"author":{"gitID":"yash-chowdhary"},"content":"                new Subject(Subject.TEST_SUBJECT_STRING), new Body(Body.TEST_BODY_STRING));"},{"lineNumber":158,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":159,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(new ModelManager(clubBook, userPrefs), modelManager);"},{"lineNumber":160,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":162,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"yash-chowdhary"},"content":"    public void emailTag_validTag_success() throws Exception {"},{"lineNumber":164,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(AMY).withMember(BOB).build();"},{"lineNumber":165,"author":{"gitID":"yash-chowdhary"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":166,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":167,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager modelManager \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":168,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedRecipients \u003d modelManager.generateEmailRecipients(null,"},{"lineNumber":169,"author":{"gitID":"yash-chowdhary"},"content":"                new Tag(VALID_TAG_FRIEND));"},{"lineNumber":170,"author":{"gitID":"yash-chowdhary"},"content":"        modelManager.sendEmail(expectedRecipients, new Client(Client.VALID_CLIENT_GMAIL),"},{"lineNumber":171,"author":{"gitID":"yash-chowdhary"},"content":"                new Subject(Subject.TEST_SUBJECT_STRING), new Body(Body.TEST_BODY_STRING));"},{"lineNumber":172,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":173,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(new ModelManager(clubBook, userPrefs), modelManager);"},{"lineNumber":174,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":176,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":177,"author":{"gitID":"yash-chowdhary"},"content":"    public void addTask_validTask_success() throws Exception {"},{"lineNumber":178,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(ALICE).withTask(BUY_CONFETTI).build();"},{"lineNumber":179,"author":{"gitID":"yash-chowdhary"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":180,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":181,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager modelManager \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":182,"author":{"gitID":"yash-chowdhary"},"content":"        modelManager.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":183,"author":{"gitID":"yash-chowdhary"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":184,"author":{"gitID":"yash-chowdhary"},"content":"        modelManager.addTaskToTaskList(BUY_FOOD);"},{"lineNumber":185,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":186,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager expectedModel \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":187,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":188,"author":{"gitID":"yash-chowdhary"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":189,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(expectedModel, modelManager);"},{"lineNumber":190,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":192,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":193,"author":{"gitID":"yash-chowdhary"},"content":"    public void addTask_duplicateTask_throwsException() {"},{"lineNumber":194,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(ALICE).withTask(BUY_CONFETTI).build();"},{"lineNumber":195,"author":{"gitID":"yash-chowdhary"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":196,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":197,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager modelManager \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":198,"author":{"gitID":"yash-chowdhary"},"content":"        modelManager.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":199,"author":{"gitID":"yash-chowdhary"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":200,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager expectedModel \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":201,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":202,"author":{"gitID":"yash-chowdhary"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":203,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":204,"author":{"gitID":"yash-chowdhary"},"content":"            modelManager.addTaskToTaskList(BUY_CONFETTI);"},{"lineNumber":205,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (DuplicateTaskException dte) {"},{"lineNumber":206,"author":{"gitID":"yash-chowdhary"},"content":"            assertEquals(expectedModel, modelManager);"},{"lineNumber":207,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":210,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":211,"author":{"gitID":"yash-chowdhary"},"content":"    public void assignTask_validTask_success() throws Exception {"},{"lineNumber":212,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(ALICE).withMember(BOB).withTask(BUY_CONFETTI).build();"},{"lineNumber":213,"author":{"gitID":"yash-chowdhary"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":214,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":215,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager modelManager \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":216,"author":{"gitID":"yash-chowdhary"},"content":"        modelManager.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":217,"author":{"gitID":"yash-chowdhary"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":218,"author":{"gitID":"yash-chowdhary"},"content":"        modelManager.assignTask(BUY_FOOD, BOB.getMatricNumber());"},{"lineNumber":219,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":220,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":221,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager expectedModel \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":222,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":223,"author":{"gitID":"yash-chowdhary"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":224,"author":{"gitID":"yash-chowdhary"},"content":"        boolean isEqual \u003d expectedModel.equals(modelManager);"},{"lineNumber":225,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(expectedModel, modelManager);"},{"lineNumber":226,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":228,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":229,"author":{"gitID":"yash-chowdhary"},"content":"    public void assignTask_duplicateTask_throwsException() {"},{"lineNumber":230,"author":{"gitID":"yash-chowdhary"},"content":"        Task buyFood \u003d new TaskBuilder()"},{"lineNumber":231,"author":{"gitID":"yash-chowdhary"},"content":"                .withDescription(\"Buy Food\")"},{"lineNumber":232,"author":{"gitID":"yash-chowdhary"},"content":"                .withDate(\"02/05/2018\")"},{"lineNumber":233,"author":{"gitID":"yash-chowdhary"},"content":"                .withTime(\"19:00\")"},{"lineNumber":234,"author":{"gitID":"yash-chowdhary"},"content":"                .withAssignor(\"Alice Pauline\")"},{"lineNumber":235,"author":{"gitID":"yash-chowdhary"},"content":"                .withAssignee(\"Bob Choo\")"},{"lineNumber":236,"author":{"gitID":"yash-chowdhary"},"content":"                .withStatus(\"Yet To Begin\")"},{"lineNumber":237,"author":{"gitID":"yash-chowdhary"},"content":"                .build();"},{"lineNumber":238,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(AMY).withMember(BOB).withTask(buyFood).build();"},{"lineNumber":239,"author":{"gitID":"yash-chowdhary"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":240,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":241,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager modelManager \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":242,"author":{"gitID":"yash-chowdhary"},"content":"        modelManager.logsInMember(AMY.getCredentials().getUsername().value, AMY.getCredentials().getPassword().value);"},{"lineNumber":243,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager expectedModel \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":244,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.logsInMember(AMY.getCredentials().getUsername().value, AMY.getCredentials().getPassword().value);"},{"lineNumber":245,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":246,"author":{"gitID":"yash-chowdhary"},"content":"            modelManager.assignTask(BUY_FOOD, BOB.getMatricNumber());"},{"lineNumber":247,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (DuplicateTaskException dte) {"},{"lineNumber":248,"author":{"gitID":"yash-chowdhary"},"content":"            assertEquals(expectedModel, modelManager);"},{"lineNumber":249,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (MemberNotFoundException mnfe) {"},{"lineNumber":250,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This exception should not be caught\");"},{"lineNumber":251,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":252,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":254,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":255,"author":{"gitID":"yash-chowdhary"},"content":"    public void assignTask_memberNotFound_throwsException() {"},{"lineNumber":256,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(AMY).withTask(BUY_FOOD).build();"},{"lineNumber":257,"author":{"gitID":"yash-chowdhary"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":258,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":259,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager modelManager \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":260,"author":{"gitID":"yash-chowdhary"},"content":"        modelManager.logsInMember(AMY.getCredentials().getUsername().value, AMY.getCredentials().getPassword().value);"},{"lineNumber":261,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager expectedModel \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":262,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.logsInMember(AMY.getCredentials().getUsername().value, AMY.getCredentials().getPassword().value);"},{"lineNumber":263,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":264,"author":{"gitID":"yash-chowdhary"},"content":"            modelManager.assignTask(BUY_CONFETTI, BOB.getMatricNumber());"},{"lineNumber":265,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (DuplicateTaskException dte) {"},{"lineNumber":266,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This exception should not be caught\");"},{"lineNumber":267,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (MemberNotFoundException mnfe) {"},{"lineNumber":268,"author":{"gitID":"yash-chowdhary"},"content":"            assertEquals(expectedModel, modelManager);"},{"lineNumber":269,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":270,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":272,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":273,"author":{"gitID":"yash-chowdhary"},"content":"    public void assignTask_invalidPermission_throwsExcpetion() {"},{"lineNumber":274,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(BOB).withTask(BUY_FOOD).build();"},{"lineNumber":275,"author":{"gitID":"yash-chowdhary"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":276,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":277,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager modelManager \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":278,"author":{"gitID":"yash-chowdhary"},"content":"        modelManager.logsInMember(BOB.getCredentials().getUsername().value, BOB.getCredentials().getPassword().value);"},{"lineNumber":279,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager expectedModel \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":280,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.logsInMember(BOB.getCredentials().getUsername().value, BOB.getCredentials().getPassword().value);"},{"lineNumber":281,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":282,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":283,"author":{"gitID":"yash-chowdhary"},"content":"            modelManager.assignTask(BUY_CONFETTI, BOB.getMatricNumber());"},{"lineNumber":284,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (DuplicateTaskException dte) {"},{"lineNumber":285,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This exception should not be caught\");"},{"lineNumber":286,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (MemberNotFoundException mnfe) {"},{"lineNumber":287,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This exception should not be caught\");"},{"lineNumber":288,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":289,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":291,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":292,"author":{"gitID":"yash-chowdhary"},"content":"    public void deleteTask_invalidTask_throwsException() throws Exception {"},{"lineNumber":293,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(AMY).withTask(BUY_CONFETTI).withTask(BUY_FOOD).build();"},{"lineNumber":294,"author":{"gitID":"yash-chowdhary"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":295,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":296,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager modelManager \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":297,"author":{"gitID":"yash-chowdhary"},"content":"        modelManager.logsInMember(AMY.getCredentials().getUsername().value, AMY.getCredentials().getPassword().value);"},{"lineNumber":298,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager expectedModel \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":299,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.logsInMember(AMY.getCredentials().getUsername().value, AMY.getCredentials().getPassword().value);"},{"lineNumber":300,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":301,"author":{"gitID":"yash-chowdhary"},"content":"            modelManager.deleteTask(BOOK_AUDITORIUM);"},{"lineNumber":302,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (TaskNotFoundException | TaskCannotBeDeletedException e) {"},{"lineNumber":303,"author":{"gitID":"yash-chowdhary"},"content":"            assertEquals(expectedModel, modelManager);"},{"lineNumber":304,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":305,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":306,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":307,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":308,"author":{"gitID":"yash-chowdhary"},"content":"    public void changeTaskStatus_validTask_success() {"},{"lineNumber":309,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(ALICE).withTask(BUY_FOOD).withTask(BUY_CONFETTI).build();"},{"lineNumber":310,"author":{"gitID":"yash-chowdhary"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":311,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":312,"author":{"gitID":"yash-chowdhary"},"content":"        Task taskToEdit \u003d new Task(BUY_FOOD);"},{"lineNumber":313,"author":{"gitID":"yash-chowdhary"},"content":"        Task editedTask \u003d new Task(taskToEdit);"},{"lineNumber":314,"author":{"gitID":"yash-chowdhary"},"content":"        editedTask.setStatus(new Status(Status.IN_PROGRESS_STATUS));"},{"lineNumber":315,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":316,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager modelManager \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":317,"author":{"gitID":"yash-chowdhary"},"content":"        modelManager.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":318,"author":{"gitID":"yash-chowdhary"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":319,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook expectedClubBook \u003d new ClubBookBuilder().withMember(ALICE).withTask(editedTask).withTask(BUY_CONFETTI)"},{"lineNumber":320,"author":{"gitID":"yash-chowdhary"},"content":"                .build();"},{"lineNumber":321,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager expectedModel \u003d new ModelManager(expectedClubBook, userPrefs);"},{"lineNumber":322,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":323,"author":{"gitID":"yash-chowdhary"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":324,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":325,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":326,"author":{"gitID":"yash-chowdhary"},"content":"            modelManager.changeStatus(taskToEdit, editedTask);"},{"lineNumber":327,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (TaskNotFoundException | DuplicateTaskException e) {"},{"lineNumber":328,"author":{"gitID":"yash-chowdhary"},"content":"            assertEquals(expectedModel, modelManager);"},{"lineNumber":329,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":330,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":331,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(expectedModel, modelManager);"},{"lineNumber":332,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":333,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":334,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":335,"author":{"gitID":"yash-chowdhary"},"content":"    public void changeTaskStatus_noChangeToStatus_throwsException() {"},{"lineNumber":336,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(ALICE).withTask(BUY_FOOD).withTask(BUY_CONFETTI).build();"},{"lineNumber":337,"author":{"gitID":"yash-chowdhary"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":338,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":339,"author":{"gitID":"yash-chowdhary"},"content":"        Task taskToEdit \u003d new Task(BUY_FOOD);"},{"lineNumber":340,"author":{"gitID":"yash-chowdhary"},"content":"        Task editedTask \u003d new Task(taskToEdit);"},{"lineNumber":341,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":342,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager modelManager \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":343,"author":{"gitID":"yash-chowdhary"},"content":"        modelManager.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":344,"author":{"gitID":"yash-chowdhary"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":345,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager expectedModel \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":346,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":347,"author":{"gitID":"yash-chowdhary"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":348,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":349,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":350,"author":{"gitID":"yash-chowdhary"},"content":"            modelManager.changeStatus(taskToEdit, editedTask);"},{"lineNumber":351,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (DuplicateTaskException | TaskNotFoundException e) {"},{"lineNumber":352,"author":{"gitID":"yash-chowdhary"},"content":"            assertEquals(expectedModel, modelManager);"},{"lineNumber":353,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":354,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":355,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":356,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":357,"author":{"gitID":"yash-chowdhary"},"content":"    public void changeTaskStatus_invalidPermission_throwsException() {"},{"lineNumber":358,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(AMY).withTask(BUY_FOOD).withTask(BUY_CONFETTI).build();"},{"lineNumber":359,"author":{"gitID":"yash-chowdhary"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":360,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":361,"author":{"gitID":"yash-chowdhary"},"content":"        Task taskToEdit \u003d new Task(BUY_FOOD);"},{"lineNumber":362,"author":{"gitID":"yash-chowdhary"},"content":"        Task editedTask \u003d new Task(taskToEdit);"},{"lineNumber":363,"author":{"gitID":"yash-chowdhary"},"content":"        editedTask.setStatus(new Status(Status.IN_PROGRESS_STATUS));"},{"lineNumber":364,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":365,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager modelManager \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":366,"author":{"gitID":"yash-chowdhary"},"content":"        modelManager.logsInMember(AMY.getCredentials().getUsername().value, AMY.getCredentials().getPassword().value);"},{"lineNumber":367,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager expectedModel \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":368,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.logsInMember(AMY.getCredentials().getUsername().value, AMY.getCredentials().getPassword().value);"},{"lineNumber":369,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":370,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":371,"author":{"gitID":"yash-chowdhary"},"content":"            modelManager.changeStatus(taskToEdit, editedTask);"},{"lineNumber":372,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (TaskNotFoundException | DuplicateTaskException e) {"},{"lineNumber":373,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This will not be executed\");"},{"lineNumber":374,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":375,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":376,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":377,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":378,"author":{"gitID":"yash-chowdhary"},"content":"    public void viewAllTasks_validPermission_success() throws Exception {"},{"lineNumber":379,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(ALICE).withMember(BENSON).withTask(BUY_FOOD)"},{"lineNumber":380,"author":{"gitID":"yash-chowdhary"},"content":"                .withTask(BUY_CONFETTI).build();"},{"lineNumber":381,"author":{"gitID":"yash-chowdhary"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":382,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":383,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager modelManager \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":384,"author":{"gitID":"yash-chowdhary"},"content":"        modelManager.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":385,"author":{"gitID":"yash-chowdhary"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":386,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager expectedModel \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":387,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":388,"author":{"gitID":"yash-chowdhary"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":389,"author":{"gitID":"yash-chowdhary"},"content":"        modelManager.viewAllTasks();"},{"lineNumber":390,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(expectedModel, modelManager);"},{"lineNumber":391,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":392,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":393,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":394,"author":{"gitID":"yash-chowdhary"},"content":"    public void viewAllTasks_invalidPermission_throwsException() {"},{"lineNumber":395,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(ALICE).withMember(BENSON)"},{"lineNumber":396,"author":{"gitID":"yash-chowdhary"},"content":"                .withTask(BUY_CONFETTI).withTask(BUY_FOOD).build();"},{"lineNumber":397,"author":{"gitID":"yash-chowdhary"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":398,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":399,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager modelManager \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":400,"author":{"gitID":"yash-chowdhary"},"content":"        modelManager.logsInMember(BENSON.getCredentials().getUsername().value,"},{"lineNumber":401,"author":{"gitID":"yash-chowdhary"},"content":"                BENSON.getCredentials().getPassword().value);"},{"lineNumber":402,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager expectedModel \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":403,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.logsInMember(BENSON.getCredentials().getUsername().value,"},{"lineNumber":404,"author":{"gitID":"yash-chowdhary"},"content":"                BENSON.getCredentials().getPassword().value);"},{"lineNumber":405,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":406,"author":{"gitID":"yash-chowdhary"},"content":"            modelManager.viewAllTasks();"},{"lineNumber":407,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (TasksCannotBeDisplayedException tdbde) {"},{"lineNumber":408,"author":{"gitID":"yash-chowdhary"},"content":"            assertEquals(expectedModel, modelManager);"},{"lineNumber":409,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":410,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":411,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":412,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":413,"author":{"gitID":"yash-chowdhary"},"content":"    public void viewMyTasks_validSwitch_success() throws Exception {"},{"lineNumber":414,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(ALICE).withMember(BENSON).withTask(BUY_FOOD)"},{"lineNumber":415,"author":{"gitID":"yash-chowdhary"},"content":"                .withTask(BOOK_AUDITORIUM).build();"},{"lineNumber":416,"author":{"gitID":"yash-chowdhary"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":417,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager modelManager \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":418,"author":{"gitID":"yash-chowdhary"},"content":"        modelManager.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":419,"author":{"gitID":"yash-chowdhary"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":420,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager expectedModel \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":421,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":422,"author":{"gitID":"yash-chowdhary"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":423,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.updateFilteredTaskList(new TaskIsRelatedToMemberPredicate(ALICE));"},{"lineNumber":424,"author":{"gitID":"yash-chowdhary"},"content":"        modelManager.viewAllTasks();"},{"lineNumber":425,"author":{"gitID":"yash-chowdhary"},"content":"        modelManager.viewMyTasks();"},{"lineNumber":426,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(expectedModel, modelManager);"},{"lineNumber":427,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":428,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":429,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":430,"author":{"gitID":"yash-chowdhary"},"content":"    public void viewMyTasks_tasksAlreadyListed_throwsException() {"},{"lineNumber":431,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(ALICE).withMember(BENSON).withTask(BUY_FOOD)"},{"lineNumber":432,"author":{"gitID":"yash-chowdhary"},"content":"                .withTask(BOOK_AUDITORIUM).build();"},{"lineNumber":433,"author":{"gitID":"yash-chowdhary"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":434,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":435,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager modelManager \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":436,"author":{"gitID":"yash-chowdhary"},"content":"        modelManager.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":437,"author":{"gitID":"yash-chowdhary"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":438,"author":{"gitID":"yash-chowdhary"},"content":"        modelManager.updateFilteredTaskList(new TaskIsRelatedToMemberPredicate(ALICE));"},{"lineNumber":439,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":440,"author":{"gitID":"yash-chowdhary"},"content":"        ModelManager expectedModel \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":441,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.logsInMember(ALICE.getCredentials().getUsername().value,"},{"lineNumber":442,"author":{"gitID":"yash-chowdhary"},"content":"                ALICE.getCredentials().getPassword().value);"},{"lineNumber":443,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.updateFilteredTaskList(new TaskIsRelatedToMemberPredicate(ALICE));"},{"lineNumber":444,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":445,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d ViewMyTasksCommand.MESSAGE_ALREADY_LISTED;"},{"lineNumber":446,"author":{"gitID":"yash-chowdhary"},"content":"        Assert.assertThrows(TasksAlreadyListedException.class, modelManager::viewMyTasks);"},{"lineNumber":447,"author":{"gitID":"yash-chowdhary"},"content":"        Assert.assertThrows(TasksAlreadyListedException.class, expectedMessage, modelManager::viewMyTasks);"},{"lineNumber":448,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":449,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":450,"author":{"gitID":"yash-chowdhary"},"content":"    //@@author"},{"lineNumber":451,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":452,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":453,"author":{"gitID":"amrut-prabhu"},"content":"    public void deleteTag_nonExistentTag_modelUnchanged() throws Exception {"},{"lineNumber":454,"author":{"gitID":"amrut-prabhu"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(AMY).withMember(BOB).build();"},{"lineNumber":455,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":456,"author":{"gitID":"-"},"content":""},{"lineNumber":457,"author":{"gitID":"amrut-prabhu"},"content":"        ModelManager modelManager \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":458,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":459,"author":{"gitID":"amrut-prabhu"},"content":"            modelManager.deleteTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":460,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (TagNotFoundException tnfe) {"},{"lineNumber":461,"author":{"gitID":"amrut-prabhu"},"content":"            assertEquals(new ModelManager(clubBook, userPrefs), modelManager);"},{"lineNumber":462,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":463,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":464,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":465,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":466,"author":{"gitID":"amrut-prabhu"},"content":"    public void deleteTag_tagUsedByMultipleMembers_tagRemoved() throws Exception {"},{"lineNumber":467,"author":{"gitID":"amrut-prabhu"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(AMY).withMember(BOB).build();"},{"lineNumber":468,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":469,"author":{"gitID":"-"},"content":""},{"lineNumber":470,"author":{"gitID":"amrut-prabhu"},"content":"        ModelManager modelManager \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":471,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredMemberList(modelManager.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":472,"author":{"gitID":"amrut-prabhu"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":473,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":474,"author":{"gitID":"amrut-prabhu"},"content":"        Member amyWithoutFriendTag \u003d new MemberBuilder(AMY).withTags().build();"},{"lineNumber":475,"author":{"gitID":"amrut-prabhu"},"content":"        Member bobWithoutFriendTag \u003d new MemberBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":476,"author":{"gitID":"amrut-prabhu"},"content":"        ClubBook expectedClubBook \u003d new ClubBookBuilder().withMember(amyWithoutFriendTag)"},{"lineNumber":477,"author":{"gitID":"amrut-prabhu"},"content":"                .withMember(bobWithoutFriendTag).build();"},{"lineNumber":478,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(expectedClubBook, userPrefs);"},{"lineNumber":479,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredMemberList(expectedModel.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":480,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, modelManager);"},{"lineNumber":481,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":482,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":483,"author":{"gitID":"amrut-prabhu"},"content":"    //@@author amrut-prabhu"},{"lineNumber":484,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":485,"author":{"gitID":"amrut-prabhu"},"content":"    public void addProfilePhoto_eventRaised() throws Exception {"},{"lineNumber":486,"author":{"gitID":"amrut-prabhu"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(ALICE).withMember(BENSON).build();"},{"lineNumber":487,"author":{"gitID":"amrut-prabhu"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":488,"author":{"gitID":"amrut-prabhu"},"content":"        ModelManager modelManager \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":489,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":490,"author":{"gitID":"amrut-prabhu"},"content":"        modelManager.logsInMember(BENSON.getCredentials().getUsername().value,"},{"lineNumber":491,"author":{"gitID":"amrut-prabhu"},"content":"                BENSON.getCredentials().getPassword().value);"},{"lineNumber":492,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":493,"author":{"gitID":"amrut-prabhu"},"content":"        String photoDirectory \u003d \"./src/test/resources/photos/\";"},{"lineNumber":494,"author":{"gitID":"amrut-prabhu"},"content":"        String photoFileName \u003d \"testPhoto.png\";"},{"lineNumber":495,"author":{"gitID":"amrut-prabhu"},"content":"        modelManager.addProfilePhoto(photoDirectory + photoFileName);"},{"lineNumber":496,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":497,"author":{"gitID":"amrut-prabhu"},"content":"        //2 events are raised: ProfilePhotoChangedEvent and ClubBookChangedEvent"},{"lineNumber":498,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 2);"},{"lineNumber":499,"author":{"gitID":"amrut-prabhu"},"content":"        //Last event raised is ClubBookChangedEvent"},{"lineNumber":500,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ClubBookChangedEvent);"},{"lineNumber":501,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":502,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":503,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":504,"author":{"gitID":"amrut-prabhu"},"content":"    public void exportClubConnectMembers_eventRaised() throws Exception {"},{"lineNumber":505,"author":{"gitID":"amrut-prabhu"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(ALICE).withMember(BENSON).build();"},{"lineNumber":506,"author":{"gitID":"amrut-prabhu"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":507,"author":{"gitID":"amrut-prabhu"},"content":"        ModelManager modelManager \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":508,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":509,"author":{"gitID":"amrut-prabhu"},"content":"        File exportFile \u003d temporaryFolder.newFile(\"actual.csv\");"},{"lineNumber":510,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":511,"author":{"gitID":"amrut-prabhu"},"content":"        modelManager.exportClubConnectMembers(exportFile);"},{"lineNumber":512,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":513,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof NewExportDataAvailableEvent);"},{"lineNumber":514,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":515,"author":{"gitID":"amrut-prabhu"},"content":"    //@@author"},{"lineNumber":516,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":517,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":518,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":519,"author":{"gitID":"amrut-prabhu"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(ALICE).withMember(BENSON).build();"},{"lineNumber":520,"author":{"gitID":"amrut-prabhu"},"content":"        ClubBook differentClubBook \u003d new ClubBook();"},{"lineNumber":521,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":522,"author":{"gitID":"-"},"content":""},{"lineNumber":523,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":524,"author":{"gitID":"amrut-prabhu"},"content":"        ModelManager modelManager \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":525,"author":{"gitID":"amrut-prabhu"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(clubBook, userPrefs);"},{"lineNumber":526,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredMemberList(modelManager.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":527,"author":{"gitID":"-"},"content":"        modelManagerCopy.updateFilteredMemberList(modelManagerCopy.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":528,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":529,"author":{"gitID":"-"},"content":""},{"lineNumber":530,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":531,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":532,"author":{"gitID":"-"},"content":""},{"lineNumber":533,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":534,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":535,"author":{"gitID":"-"},"content":""},{"lineNumber":536,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":537,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":538,"author":{"gitID":"-"},"content":""},{"lineNumber":539,"author":{"gitID":"amrut-prabhu"},"content":"        // different clubBook -\u003e returns false"},{"lineNumber":540,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentClubBook, userPrefs)));"},{"lineNumber":541,"author":{"gitID":"-"},"content":""},{"lineNumber":542,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":543,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":544,"author":{"gitID":"amrut-prabhu"},"content":"        modelManager.updateFilteredMemberList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":545,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(modelManager.equals(new ModelManager(clubBook, userPrefs)));"},{"lineNumber":546,"author":{"gitID":"-"},"content":""},{"lineNumber":547,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":548,"author":{"gitID":"amrut-prabhu"},"content":"        modelManager.updateFilteredMemberList(PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":549,"author":{"gitID":"-"},"content":""},{"lineNumber":550,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":551,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":552,"author":{"gitID":"amrut-prabhu"},"content":"        differentUserPrefs.setClubBookName(\"differentName\");"},{"lineNumber":553,"author":{"gitID":"-"},"content":"        ModelManager expectedMode1 \u003d new ModelManager(clubBook, differentUserPrefs);"},{"lineNumber":554,"author":{"gitID":"-"},"content":"        expectedMode1.updateFilteredMemberList(expectedMode1.PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":555,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(expectedMode1));"},{"lineNumber":556,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":557,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":103,"yash-chowdhary":395,"-":59}},{"path":"src/test/java/seedu/club/model/ClubBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model;"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.MANDATORY_GROUP;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.NON_EXISTENT_GROUP;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_GROUP_BOB;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.ALICE;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.AMY;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.BOB;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.testutil.TypicalMembers.getTypicalClubBook;"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalTasks.BOOK_AUDITORIUM;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalTasks.BUY_CONFETTI;"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalTasks.BUY_FOOD;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.exceptions.GroupCannotBeRemovedException;"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Status;"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.ClubBookBuilder;"},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.MemberBuilder;"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.testutil.TaskBuilder;"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"public class ClubBookTest {"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"amrut-prabhu"},"content":"    private final ClubBook clubBook \u003d new ClubBook();"},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"    private final ClubBook clubBookWithBobAndAmy \u003d new ClubBookBuilder().withMember(BOB).withMember(AMY)"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"            .build();"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"    public void constructor() {"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(Collections.emptyList(), clubBook.getMemberList());"},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(Collections.emptyList(), clubBook.getTagList());"},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"    //@@author yash-chowdhary"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"    public void removeGroup_nonExistentGroup_unchangedClubBook() throws Exception {"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"            clubBookWithBobAndAmy.removeGroup(new Group(NON_EXISTENT_GROUP));"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (GroupNotFoundException gnfe) {"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"            ClubBook expectedClubBook \u003d new ClubBookBuilder().withMember(BOB).withMember(AMY).build();"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"            assertEquals(expectedClubBook, clubBookWithBobAndAmy);"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"    public void removeGroup_mandatoryGroup_unchangedClubBook() throws Exception {"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"            clubBookWithBobAndAmy.removeGroup(new Group(MANDATORY_GROUP));"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (GroupCannotBeRemovedException e) {"},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"            ClubBook expectedClubBook \u003d new ClubBookBuilder().withMember(BOB).withMember(AMY).build();"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"            assertEquals(expectedClubBook, clubBookWithBobAndAmy);"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":"    public void removeGroup_atLeastOneMemberInGroup_groupRemoved() throws Exception {"},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"        clubBookWithBobAndAmy.removeGroup(new Group(VALID_GROUP_BOB));"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":"        Member bobNotInLogistics \u003d new MemberBuilder(BOB).withGroup().build();"},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":"        Member amyNotInLogistics \u003d new MemberBuilder(AMY).build();"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook expectedClubBook \u003d new ClubBookBuilder().withMember(bobNotInLogistics)"},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":"                .withMember(amyNotInLogistics).build();"},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(expectedClubBook, clubBookWithBobAndAmy);"},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"yash-chowdhary"},"content":"    public void deleteTask_validTask_success() throws Exception {"},{"lineNumber":97,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(AMY).withTask(BUY_FOOD).withTask(BUY_CONFETTI).build();"},{"lineNumber":98,"author":{"gitID":"yash-chowdhary"},"content":"        clubBook.deleteTask(BUY_CONFETTI);"},{"lineNumber":99,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":100,"author":{"gitID":"yash-chowdhary"},"content":"        Member amy \u003d new MemberBuilder(AMY).build();"},{"lineNumber":101,"author":{"gitID":"yash-chowdhary"},"content":"        Task buyFood \u003d new TaskBuilder(BUY_FOOD).build();"},{"lineNumber":102,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook expectedClubBook \u003d new ClubBookBuilder().withMember(amy).withTask(buyFood).build();"},{"lineNumber":103,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":104,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(expectedClubBook, clubBook);"},{"lineNumber":105,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":107,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"yash-chowdhary"},"content":"    public void deleteTask_taskNotFound_throwsException() {"},{"lineNumber":109,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(AMY).withTask(BUY_FOOD).withTask(BUY_CONFETTI).build();"},{"lineNumber":110,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":111,"author":{"gitID":"yash-chowdhary"},"content":"            clubBook.deleteTask(BOOK_AUDITORIUM);"},{"lineNumber":112,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (TaskNotFoundException tnfe) {"},{"lineNumber":113,"author":{"gitID":"yash-chowdhary"},"content":"            Member amy \u003d new MemberBuilder(AMY).build();"},{"lineNumber":114,"author":{"gitID":"yash-chowdhary"},"content":"            Task buyFood \u003d new TaskBuilder(BUY_FOOD).build();"},{"lineNumber":115,"author":{"gitID":"yash-chowdhary"},"content":"            Task buyConfetti \u003d new TaskBuilder(BUY_CONFETTI).build();"},{"lineNumber":116,"author":{"gitID":"yash-chowdhary"},"content":"            ClubBook expectedClubBook \u003d new ClubBookBuilder()"},{"lineNumber":117,"author":{"gitID":"yash-chowdhary"},"content":"                    .withMember(amy)"},{"lineNumber":118,"author":{"gitID":"yash-chowdhary"},"content":"                    .withTask(buyFood)"},{"lineNumber":119,"author":{"gitID":"yash-chowdhary"},"content":"                    .withTask(buyConfetti)"},{"lineNumber":120,"author":{"gitID":"yash-chowdhary"},"content":"                    .build();"},{"lineNumber":121,"author":{"gitID":"yash-chowdhary"},"content":"            assertEquals(expectedClubBook, clubBook);"},{"lineNumber":122,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":125,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"yash-chowdhary"},"content":"    public void addTask_validTask_success() throws Exception {"},{"lineNumber":127,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(AMY)"},{"lineNumber":128,"author":{"gitID":"yash-chowdhary"},"content":"                .withTask(BUY_FOOD).build();"},{"lineNumber":129,"author":{"gitID":"yash-chowdhary"},"content":"        clubBook.addTaskToTaskList(BUY_CONFETTI);"},{"lineNumber":130,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":131,"author":{"gitID":"yash-chowdhary"},"content":"        Member amy \u003d new MemberBuilder(AMY).build();"},{"lineNumber":132,"author":{"gitID":"yash-chowdhary"},"content":"        Task buyFood \u003d new TaskBuilder(BUY_FOOD).build();"},{"lineNumber":133,"author":{"gitID":"yash-chowdhary"},"content":"        Task buyConfetti \u003d new TaskBuilder(BUY_CONFETTI).build();"},{"lineNumber":134,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook expectedClubBook \u003d new ClubBookBuilder().withMember(amy).withTask(buyFood)"},{"lineNumber":135,"author":{"gitID":"yash-chowdhary"},"content":"                .withTask(buyConfetti).build();"},{"lineNumber":136,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":137,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(expectedClubBook, clubBook);"},{"lineNumber":138,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":139,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":141,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"yash-chowdhary"},"content":"    public void addTask_duplicateTask_throwsException() {"},{"lineNumber":143,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(BOB)"},{"lineNumber":144,"author":{"gitID":"yash-chowdhary"},"content":"                .withTask(BUY_FOOD).withTask(BUY_CONFETTI).build();"},{"lineNumber":145,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":146,"author":{"gitID":"yash-chowdhary"},"content":"        Task toAdd \u003d new TaskBuilder(BUY_CONFETTI).build();"},{"lineNumber":147,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":148,"author":{"gitID":"yash-chowdhary"},"content":"            clubBook.addTaskToTaskList(toAdd);"},{"lineNumber":149,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (DuplicateTaskException dte) {"},{"lineNumber":150,"author":{"gitID":"yash-chowdhary"},"content":"            Member bob \u003d new MemberBuilder(BOB).build();"},{"lineNumber":151,"author":{"gitID":"yash-chowdhary"},"content":"            Task buyFood \u003d new TaskBuilder(BUY_FOOD).build();"},{"lineNumber":152,"author":{"gitID":"yash-chowdhary"},"content":"            Task buyConfetti \u003d new TaskBuilder(BUY_CONFETTI).build();"},{"lineNumber":153,"author":{"gitID":"yash-chowdhary"},"content":"            ClubBook expectedClubBook \u003d new ClubBookBuilder()"},{"lineNumber":154,"author":{"gitID":"yash-chowdhary"},"content":"                    .withMember(bob)"},{"lineNumber":155,"author":{"gitID":"yash-chowdhary"},"content":"                    .withTask(buyFood)"},{"lineNumber":156,"author":{"gitID":"yash-chowdhary"},"content":"                    .withTask(buyConfetti)"},{"lineNumber":157,"author":{"gitID":"yash-chowdhary"},"content":"                    .build();"},{"lineNumber":158,"author":{"gitID":"yash-chowdhary"},"content":"            assertEquals(expectedClubBook, clubBook);"},{"lineNumber":159,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":162,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"yash-chowdhary"},"content":"    public void updateTask_validTask_success() {"},{"lineNumber":164,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(AMY)"},{"lineNumber":165,"author":{"gitID":"yash-chowdhary"},"content":"                .withTask(BUY_CONFETTI).withTask(BUY_FOOD).build();"},{"lineNumber":166,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":167,"author":{"gitID":"yash-chowdhary"},"content":"        Member amy \u003d new MemberBuilder(AMY).build();"},{"lineNumber":168,"author":{"gitID":"yash-chowdhary"},"content":"        Task buyFood \u003d new TaskBuilder()"},{"lineNumber":169,"author":{"gitID":"yash-chowdhary"},"content":"                .withDescription(BUY_FOOD.getDescription().getDescription())"},{"lineNumber":170,"author":{"gitID":"yash-chowdhary"},"content":"                .withAssignor(BUY_FOOD.getAssignor().getAssignor())"},{"lineNumber":171,"author":{"gitID":"yash-chowdhary"},"content":"                .withAssignee(BUY_FOOD.getAssignee().getAssignee())"},{"lineNumber":172,"author":{"gitID":"yash-chowdhary"},"content":"                .withDate(BUY_FOOD.getDate().getDate())"},{"lineNumber":173,"author":{"gitID":"yash-chowdhary"},"content":"                .withTime(BUY_FOOD.getTime().getTime())"},{"lineNumber":174,"author":{"gitID":"yash-chowdhary"},"content":"                .withStatus(Status.IN_PROGRESS_STATUS)"},{"lineNumber":175,"author":{"gitID":"yash-chowdhary"},"content":"                .build();"},{"lineNumber":176,"author":{"gitID":"yash-chowdhary"},"content":"        Task buyConfetti \u003d new TaskBuilder(BUY_CONFETTI).build();"},{"lineNumber":177,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook expectedClubBook \u003d new ClubBookBuilder().withMember(amy).withTask(buyFood)"},{"lineNumber":178,"author":{"gitID":"yash-chowdhary"},"content":"                .withTask(buyConfetti).build();"},{"lineNumber":179,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":180,"author":{"gitID":"yash-chowdhary"},"content":"        Task taskToEdit \u003d new Task(BUY_FOOD);"},{"lineNumber":181,"author":{"gitID":"yash-chowdhary"},"content":"        Task editedTask \u003d new Task(taskToEdit);"},{"lineNumber":182,"author":{"gitID":"yash-chowdhary"},"content":"        editedTask.setStatus(new Status(Status.IN_PROGRESS_STATUS));"},{"lineNumber":183,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":184,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":185,"author":{"gitID":"yash-chowdhary"},"content":"            clubBook.updateTask(taskToEdit, editedTask);"},{"lineNumber":186,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (DuplicateTaskException | TaskNotFoundException e) {"},{"lineNumber":187,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This will not be executed\");"},{"lineNumber":188,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":190,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(expectedClubBook, clubBook);"},{"lineNumber":191,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":193,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":194,"author":{"gitID":"yash-chowdhary"},"content":"    public void updateTask_duplicateTask_throwsException() {"},{"lineNumber":195,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook clubBook \u003d new ClubBookBuilder().withMember(AMY)"},{"lineNumber":196,"author":{"gitID":"yash-chowdhary"},"content":"                .withTask(BUY_CONFETTI).withTask(BUY_FOOD).build();"},{"lineNumber":197,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":198,"author":{"gitID":"yash-chowdhary"},"content":"        Member amy \u003d new MemberBuilder(AMY).build();"},{"lineNumber":199,"author":{"gitID":"yash-chowdhary"},"content":"        Task buyFood \u003d new TaskBuilder(BUY_FOOD).build();"},{"lineNumber":200,"author":{"gitID":"yash-chowdhary"},"content":"        Task buyConfetti \u003d new TaskBuilder(BUY_CONFETTI).build();"},{"lineNumber":201,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":202,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook expectedClubBook \u003d new ClubBookBuilder().withMember(amy).withTask(buyFood)"},{"lineNumber":203,"author":{"gitID":"yash-chowdhary"},"content":"                .withTask(buyConfetti).build();"},{"lineNumber":204,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":205,"author":{"gitID":"yash-chowdhary"},"content":"        Task taskToEdit \u003d new Task(BUY_FOOD);"},{"lineNumber":206,"author":{"gitID":"yash-chowdhary"},"content":"        Task editedTask \u003d new Task(BUY_FOOD);"},{"lineNumber":207,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":208,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":209,"author":{"gitID":"yash-chowdhary"},"content":"            clubBook.updateTask(taskToEdit, editedTask);"},{"lineNumber":210,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (DuplicateTaskException dte) {"},{"lineNumber":211,"author":{"gitID":"yash-chowdhary"},"content":"            assertEquals(expectedClubBook, clubBook);"},{"lineNumber":212,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (TaskNotFoundException tnfe) {"},{"lineNumber":213,"author":{"gitID":"yash-chowdhary"},"content":"            fail(\"This will not be executed\");"},{"lineNumber":214,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"yash-chowdhary"},"content":"    //@@author"},{"lineNumber":217,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":218,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":219,"author":{"gitID":"amrut-prabhu"},"content":"    public void updateMember_detailsChanged_memberUpdated() throws Exception {"},{"lineNumber":220,"author":{"gitID":"amrut-prabhu"},"content":"        ClubBook updatedToBob \u003d new ClubBookBuilder().withMember(AMY).build();"},{"lineNumber":221,"author":{"gitID":"amrut-prabhu"},"content":"        updatedToBob.updateMember(AMY, BOB);"},{"lineNumber":222,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":223,"author":{"gitID":"amrut-prabhu"},"content":"        ClubBook expectedClubBook \u003d new ClubBookBuilder().withMember(BOB).build();"},{"lineNumber":224,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":225,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(expectedClubBook, updatedToBob);"},{"lineNumber":226,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":231,"author":{"gitID":"amrut-prabhu"},"content":"        clubBook.resetData(null);"},{"lineNumber":232,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":234,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":235,"author":{"gitID":"amrut-prabhu"},"content":"    public void resetData_withValidReadOnlyClubBook_replacesData() {"},{"lineNumber":236,"author":{"gitID":"amrut-prabhu"},"content":"        ClubBook newData \u003d getTypicalClubBook();"},{"lineNumber":237,"author":{"gitID":"amrut-prabhu"},"content":"        clubBook.resetData(newData);"},{"lineNumber":238,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(newData, clubBook);"},{"lineNumber":239,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":241,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":242,"author":{"gitID":"amrut-prabhu"},"content":"    public void resetData_withDuplicateMembers_throwsAssertionError() {"},{"lineNumber":243,"author":{"gitID":"amrut-prabhu"},"content":"        // Repeat ALICE twice"},{"lineNumber":244,"author":{"gitID":"amrut-prabhu"},"content":"        List\u003cMember\u003e newMembers \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":245,"author":{"gitID":"amrut-prabhu"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":246,"author":{"gitID":"MuhdNurKamal"},"content":"        List\u003cPoll\u003e newPolls \u003d new ArrayList\u003c\u003e();"},{"lineNumber":247,"author":{"gitID":"MuhdNurKamal"},"content":"        ClubBookStub newData \u003d new ClubBookStub(newMembers, newTags, newPolls);"},{"lineNumber":248,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":249,"author":{"gitID":"amrut-prabhu"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":250,"author":{"gitID":"amrut-prabhu"},"content":"        clubBook.resetData(newData);"},{"lineNumber":251,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":253,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":254,"author":{"gitID":"amrut-prabhu"},"content":"    public void getMemberList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":256,"author":{"gitID":"amrut-prabhu"},"content":"        clubBook.getMemberList().remove(0);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":262,"author":{"gitID":"amrut-prabhu"},"content":"        clubBook.getTagList().remove(0);"},{"lineNumber":263,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":265,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":266,"author":{"gitID":"amrut-prabhu"},"content":"    public void updateMember_detailsChanged_membersAndTagsListUpdated() throws Exception {"},{"lineNumber":267,"author":{"gitID":"amrut-prabhu"},"content":"        ClubBook clubBookUpdatedToAmy \u003d new ClubBookBuilder().withMember(BOB).build();"},{"lineNumber":268,"author":{"gitID":"amrut-prabhu"},"content":"        clubBookUpdatedToAmy.updateMember(BOB, AMY);"},{"lineNumber":269,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":270,"author":{"gitID":"amrut-prabhu"},"content":"        ClubBook expectedClubBook \u003d new ClubBookBuilder().withMember(AMY).build();"},{"lineNumber":271,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":272,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(expectedClubBook, clubBookUpdatedToAmy);"},{"lineNumber":273,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":275,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":276,"author":{"gitID":"amrut-prabhu"},"content":"    public void deleteTag_nonExistentTag_clubBookUnchanged() {"},{"lineNumber":277,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":278,"author":{"gitID":"amrut-prabhu"},"content":"            clubBookWithBobAndAmy.deleteTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":279,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (TagNotFoundException tnfe) {"},{"lineNumber":280,"author":{"gitID":"amrut-prabhu"},"content":"            ClubBook expectedClubBook \u003d new ClubBookBuilder().withMember(BOB).withMember(AMY).build();"},{"lineNumber":281,"author":{"gitID":"amrut-prabhu"},"content":"            assertEquals(expectedClubBook, clubBookWithBobAndAmy);"},{"lineNumber":282,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":283,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":285,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":286,"author":{"gitID":"amrut-prabhu"},"content":"    public void deleteTag_tagUsedByMultipleMembers_tagRemoved() throws Exception {"},{"lineNumber":287,"author":{"gitID":"amrut-prabhu"},"content":"        clubBookWithBobAndAmy.deleteTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":288,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":289,"author":{"gitID":"amrut-prabhu"},"content":"        Member amyWithoutFriendTag \u003d new MemberBuilder(AMY).withTags().build();"},{"lineNumber":290,"author":{"gitID":"amrut-prabhu"},"content":"        Member bobWithoutFriendTag \u003d new MemberBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":291,"author":{"gitID":"amrut-prabhu"},"content":"        ClubBook expectedClubBook \u003d new ClubBookBuilder().withMember(bobWithoutFriendTag)"},{"lineNumber":292,"author":{"gitID":"amrut-prabhu"},"content":"                .withMember(amyWithoutFriendTag).build();"},{"lineNumber":293,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":294,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(expectedClubBook, clubBookWithBobAndAmy);"},{"lineNumber":295,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":297,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":298,"author":{"gitID":"amrut-prabhu"},"content":"     * A stub ReadOnlyClubBook whose members and tags lists can violate interface constraints."},{"lineNumber":299,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":300,"author":{"gitID":"amrut-prabhu"},"content":"    private static class ClubBookStub implements ReadOnlyClubBook {"},{"lineNumber":301,"author":{"gitID":"amrut-prabhu"},"content":"        private final ObservableList\u003cMember\u003e members \u003d FXCollections.observableArrayList();"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":303,"author":{"gitID":"MuhdNurKamal"},"content":"        private final ObservableList\u003cPoll\u003e polls \u003d FXCollections.observableArrayList();"},{"lineNumber":304,"author":{"gitID":"yash-chowdhary"},"content":"        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"},{"lineNumber":305,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":306,"author":{"gitID":"MuhdNurKamal"},"content":"        ClubBookStub(Collection\u003cMember\u003e members, Collection\u003c? extends Tag\u003e tags,"},{"lineNumber":307,"author":{"gitID":"MuhdNurKamal"},"content":"                     Collection\u003c? extends Poll\u003e polls) {"},{"lineNumber":308,"author":{"gitID":"amrut-prabhu"},"content":"            this.members.setAll(members);"},{"lineNumber":309,"author":{"gitID":"amrut-prabhu"},"content":"            this.tags.setAll(tags);"},{"lineNumber":310,"author":{"gitID":"MuhdNurKamal"},"content":"            this.polls.setAll(polls);"},{"lineNumber":311,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":312,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":313,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":314,"author":{"gitID":"amrut-prabhu"},"content":"        public ObservableList\u003cMember\u003e getMemberList() {"},{"lineNumber":315,"author":{"gitID":"amrut-prabhu"},"content":"            return members;"},{"lineNumber":316,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":319,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":320,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":321,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":322,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":323,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":324,"author":{"gitID":"MuhdNurKamal"},"content":"        public ObservableList\u003cPoll\u003e getPollList() {"},{"lineNumber":325,"author":{"gitID":"MuhdNurKamal"},"content":"            return polls;"},{"lineNumber":326,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":327,"author":{"gitID":"yash-chowdhary"},"content":"        public ObservableList\u003cTask\u003e getTaskList() {"},{"lineNumber":328,"author":{"gitID":"yash-chowdhary"},"content":"            return tasks;"},{"lineNumber":329,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":332,"author":{"gitID":"-"},"content":"        public void setPolls(Set\u003cPoll\u003e polls) {"},{"lineNumber":333,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":334,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":335,"author":{"gitID":"-"},"content":""},{"lineNumber":336,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":337,"author":{"gitID":"-"},"content":"        public void setTasks(Set\u003cTask\u003e tasks) {"},{"lineNumber":338,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":339,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":340,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":341,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":342,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":12,"amrut-prabhu":115,"yash-chowdhary":170,"-":45}},{"path":"src/test/java/seedu/club/testutil/EditMemberDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.EditCommand.EditMemberDescriptor;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Email;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Name;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Phone;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":" * A utility class to help with building EditMemberDescriptor objects."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"public class EditMemberDescriptorBuilder {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"    private EditMemberDescriptor descriptor;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"    public EditMemberDescriptorBuilder() {"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"        descriptor \u003d new EditMemberDescriptor();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"    public EditMemberDescriptorBuilder(EditMemberDescriptor descriptor) {"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"        this.descriptor \u003d new EditMemberDescriptor(descriptor);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns an {@code EditMemberDescriptor} with fields containing {@code member}\u0027s details"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"    public EditMemberDescriptorBuilder(Member member) {"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"        descriptor \u003d new EditMemberDescriptor();"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"        descriptor.setName(member.getName());"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"        descriptor.setPhone(member.getPhone());"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"        descriptor.setEmail(member.getEmail());"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"        descriptor.setMatricNumber(member.getMatricNumber());"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"        descriptor.setGroup(member.getGroup());"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"        descriptor.setTags(member.getTags());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"     * Sets the {@code Name} of the {@code EditMemberDescriptor} that we are building."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"    public EditMemberDescriptorBuilder withName(String name) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"     * Sets the {@code Phone} of the {@code EditMemberDescriptor} that we are building."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"    public EditMemberDescriptorBuilder withPhone(String phone) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":"     * Sets the {@code Email} of the {@code EditMemberDescriptor} that we are building."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"    public EditMemberDescriptorBuilder withEmail(String email) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"     * Sets the {@code MatricNumber} of the {@code EditMemberDescriptor} that we are building."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"amrut-prabhu"},"content":"    public EditMemberDescriptorBuilder withMatricNumber(String matricNumber) {"},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"        descriptor.setMatricNumber(new MatricNumber(matricNumber));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"amrut-prabhu"},"content":"     * Sets the {@code Group} of the {@code EditMemberDescriptor} that we are building."},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"amrut-prabhu"},"content":"    public EditMemberDescriptorBuilder withGroup(String group) {"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"        descriptor.setGroup(new Group(group));"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"        return this;"},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"amrut-prabhu"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditMemberDescriptor}"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"amrut-prabhu"},"content":"    public EditMemberDescriptorBuilder withTags(String... tags) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"amrut-prabhu"},"content":"    public EditMemberDescriptor build() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":1,"amrut-prabhu":38,"yash-chowdhary":5,"-":52}},{"path":"src/test/java/seedu/club/testutil/TypicalPolls.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.testutil;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.testutil.TypicalMembers.ALICE;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.ClubBook;"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.member.exceptions.DuplicateMatricNumberException;"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.DuplicatePollException;"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":" * A utility class containing a list of {@code poll} objects"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":" * to be used in tests."},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"public class TypicalPolls {"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final Poll POLL_WHAT \u003d new PollBuilder().withQuestion(\"What are you?\")"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"            .withAnswers(\"A vampire\", \"A zombie\")"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"            .withPolleesMatricNumbers(\"A1234567A\", \"A3333333A\").build();"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final Poll POLL_HOW \u003d new PollBuilder().withQuestion(\"How are you?\")"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"            .withAnswers(\"I\u0027m fine\", \"Not good man\")"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"            .withPolleesMatricNumbers(\"A3333333A\", \"A2222222A\").build();"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final Poll POLL_WHEN \u003d new PollBuilder().withQuestion(\"When are you?\")"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"            .withAnswers(\"I don\u0027t get it\", \"Umm..\")"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"            .withPolleesMatricNumbers(\"A2222222A\", \"A1234567A\").build();"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final Poll POLL_WHO \u003d new PollBuilder().withQuestion(\"Who are you?\")"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"            .withAnswers(\"Your father\", \"Your mom\")"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"            .withPolleesMatricNumbers(\"A3333333A\", \"A1111111A\").build();"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"    private TypicalPolls() {} // prevents instantiation"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"     * Returns an {@code ClubBook} with all the typical polls."},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"    public static ClubBook getTypicalClubBookWithPolls() {"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"        ClubBook ab \u003d new ClubBook();"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"        for (Poll poll : getTypicalPolls()) {"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"            try {"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"                ab.addPoll(poll);"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"            } catch (DuplicatePollException e) {"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"            }"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"            // Alice is an exco member"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"            ab.addMember(ALICE);"},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"        } catch (DuplicateMatricNumberException e) {"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new AssertionError(\"not possible\");"},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":"        return ab;"},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":"    public static List\u003cPoll\u003e getTypicalPolls() {"},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(POLL_HOW, POLL_WHAT, POLL_WHEN, POLL_WHO));"},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":63}},{"path":"src/test/java/seedu/club/testutil/Assert.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import junit.framework.AssertionFailedError;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class Assert {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":11,"author":{"gitID":"-"},"content":"     * Asserts that the {@code callable} throws the {@code expected} Exception."},{"lineNumber":12,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expected, VoidCallable callable) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        assertThrows(expected, null, callable);"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Asserts that the {@code callable} throws the {@code expectedException} and the {@code expectedMessage}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * If there\u0027s no need for the verification of the exception\u0027s error message, call"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * {@code assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable)} instead."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * {@see assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable}"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedException, String expectedMessage,"},{"lineNumber":24,"author":{"gitID":"-"},"content":"                                    VoidCallable callable) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            callable.call();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        } catch (Throwable actualException) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            String errorMessage;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            if (!actualException.getClass().isAssignableFrom(expectedException)) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                errorMessage \u003d String.format(\"Expected exception thrown: %s, actual: %s\","},{"lineNumber":32,"author":{"gitID":"-"},"content":"                        expectedException.getName(), actualException.getClass().getName());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            } else if (expectedMessage !\u003d null \u0026\u0026 !expectedMessage.equals(actualException.getMessage())) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                errorMessage \u003d String.format("},{"lineNumber":35,"author":{"gitID":"-"},"content":"                        \"Expected message thrown: %s, actual: %s\", expectedMessage, actualException.getMessage());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                return;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throw new AssertionFailedError(errorMessage);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        throw new AssertionFailedError(String.format("},{"lineNumber":44,"author":{"gitID":"-"},"content":"                \"Expected %s to be thrown, but nothing was thrown.\", expectedException.getName()));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Represents a function which does not return anything and may throw an exception."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @FunctionalInterface"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public interface VoidCallable {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        void call() throws Exception;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":54}},{"path":"src/test/java/seedu/club/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"    public static final Index INDEX_FIRST_MEMBER \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"    public static final Index INDEX_SECOND_MEMBER \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"    public static final Index INDEX_THIRD_MEMBER \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"    public static final Index INDEX_FIRST_TAG \u003d Index.fromOneBased(1);"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"    public static final Index INDEX_SECOND_TAG \u003d Index.fromOneBased(2);"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final Index INDEX_FIRST_POLL \u003d Index.fromOneBased(1);"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final Index INDEX_SECOND_POLL \u003d Index.fromOneBased(2);"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"    public static final Index INDEX_FIRST_TASK \u003d Index.fromOneBased(1);"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"    public static final Index INDEX_SECOND_TASK \u003d Index.fromOneBased(2);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":3,"amrut-prabhu":8,"yash-chowdhary":2,"-":8}},{"path":"src/test/java/seedu/club/testutil/TaskUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.testutil;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_TIME;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.AddTaskCommand;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":" * Utility class for Task"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"public class TaskUtil {"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"    public static String getAddTaskCommand(Task task) {"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"        return AddTaskCommand.COMMAND_WORD + \" \" + getTaskDetails(task);"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"    private static String getTaskDetails(Task task) {"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"        sb.append(PREFIX_DESCRIPTION + task.getDescription().getDescription() + \" \");"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"        sb.append(PREFIX_DATE + task.getDate().getDate() + \" \");"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"        sb.append(PREFIX_TIME + task.getTime().getTime() + \" \");"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"        return sb.toString();"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":27}},{"path":"src/test/java/seedu/club/testutil/SerializableTestClass.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * A class used to test serialization and deserialization"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class SerializableTestClass {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""},{"lineNumber":13,"author":{"gitID":"-"},"content":"            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""},{"lineNumber":14,"author":{"gitID":"-"},"content":"            + \"  \\\"listOfLocalDateTimes\\\" : \""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"  \\\"mapOfIntegerToString\\\" : {%n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \"    \\\"1\\\" : \\\"One\\\",%n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"            + \"    \\\"2\\\" : \\\"Two\\\",%n\""},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \"    \\\"3\\\" : \\\"Three\\\"%n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"  }%n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"}\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static String getNameTestValue() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return NAME_TEST_VALUE;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static List\u003cLocalDateTime\u003e getListTestValues() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MIN);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MAX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return listOfLocalDateTimes;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        mapOfIntegerToString.put(1, \"One\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        mapOfIntegerToString.put(2, \"Two\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        mapOfIntegerToString.put(3, \"Three\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return mapOfIntegerToString;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void setTestValues() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        name \u003d getNameTestValue();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        listOfLocalDateTimes \u003d getListTestValues();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        mapOfIntegerToString \u003d getHashMapTestValues();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return listOfLocalDateTimes;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return mapOfIntegerToString;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":71}},{"path":"src/test/java/seedu/club/testutil/MemberUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":" * A utility class for member."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"public class MemberUtil {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns an add command string for adding the {@code member}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"    public static String getAddCommand(Member member) {"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getMemberDetails(member);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns the part of command string for the given {@code member}\u0027s details."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"    public static String getMemberDetails(Member member) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"        sb.append(PREFIX_NAME + member.getName().fullName + \" \");"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"        sb.append(PREFIX_PHONE + member.getPhone().value + \" \");"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"        sb.append(PREFIX_EMAIL + member.getEmail().value + \" \");"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"        sb.append(PREFIX_MATRIC_NUMBER + member.getMatricNumber().value + \" \");"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"        sb.append(PREFIX_GROUP + member.getGroup().groupName + \" \");"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"        member.getTags().stream().forEach("},{"lineNumber":36,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":22,"-":18}},{"path":"src/test/java/seedu/club/testutil/TestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.util.FileUtil;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * A utility class for test cases."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class TestUtil {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String SANDBOX_FOLDER \u003d FileUtil.getPath(\"./src/test/data/sandbox/\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting string."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static String getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            FileUtil.createDirs(new File(SANDBOX_FOLDER));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return SANDBOX_FOLDER + fileName;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns the middle index of the member in the {@code model}\u0027s member list."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"        return Index.fromOneBased(model.getClubBook().getMemberList().size() / 2);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns the last index of the member in the {@code model}\u0027s member list."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"        return Index.fromOneBased(model.getClubBook().getMemberList().size());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns the last index of the task in the {@code model}\u0027s task list."},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"    public static Index getLastTaskIndex(Model model) {"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"        return Index.fromOneBased(model.getClubBook().getTaskList().size());"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns the member in the {@code model}\u0027s member list at {@code index}."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"    public static Member getMember(Model model, Index index) {"},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"        return model.getClubBook().getMemberList().get(index.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns the task in the {@code model}\u0027s task list at {@code index}."},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"    public static Task getTask(Model model, Index index) {"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"        return model.getClubBook().getTaskList().get(index.getOneBased());"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":12,"yash-chowdhary":15,"-":42}},{"path":"src/test/java/seedu/club/testutil/TaskBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.testutil;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Assignee;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Assignor;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Date;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Description;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Status;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Time;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":" * Utility class to build Task objects"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"public class TaskBuilder {"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String DEFAULT_DESCRIPTION \u003d \"Book Auditorium\";"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String DEFAULT_DATE \u003d \"01/01/2018\";"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String DEFAULT_TIME \u003d \"15:00\";"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String DEFAULT_ASSIGNOR \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String DEFAULT_ASSIGNEE \u003d \"\";"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String DEFAULT_STATUS \u003d \"Yet To Begin\";"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"    private Description description;"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    private Date date;"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"    private Time time;"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"    private Assignor assignor;"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"    private Assignee assignee;"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"    private Status status;"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"    public TaskBuilder() {"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"        description \u003d new Description(DEFAULT_DESCRIPTION);"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"        date \u003d new Date(DEFAULT_DATE);"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"        time \u003d new Time(DEFAULT_TIME);"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"        assignor \u003d new Assignor(DEFAULT_ASSIGNOR);"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"        assignee \u003d new Assignee(DEFAULT_ASSIGNEE);"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"        status \u003d new Status(DEFAULT_STATUS);"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"     * Initializes the TaskBuilder with the data of {@code task}"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"    public TaskBuilder(Task task) {"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"        description \u003d task.getDescription();"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"        date \u003d task.getDate();"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"        time \u003d task.getTime();"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"        assignor \u003d task.getAssignor();"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"        assignee \u003d task.getAssignee();"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"        status \u003d task.getStatus();"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"     * Sets the {@code Description} of the {@code Task} that is being built"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"    public TaskBuilder withDescription(String description) {"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"        this.description \u003d new Description(description);"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"        return this;"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"     * Sets the {@code Date} of the {@code Task} that is being built"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"    public TaskBuilder withDate(String date) {"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"        this.date \u003d new Date(date);"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"     * Sets the {@code Time} of the {@code Task} that is being built"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"    public TaskBuilder withTime(String time) {"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"        this.time \u003d new Time(time);"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"     * Sets the {@code Assignor} of the {@code Task} that is being built"},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"    public TaskBuilder withAssignor(String assignor) {"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"        this.assignor \u003d new Assignor(assignor);"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"        return this;"},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"     * Sets the {@code Assignee} of the {@code Task} that is being built"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":"    public TaskBuilder withAssignee(String assignee) {"},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":"        this.assignee \u003d new Assignee(assignee);"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":"        return this;"},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":"     * Sets the {@code Status} of the {@code Task} that is being built"},{"lineNumber":94,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":"    public TaskBuilder withStatus(String status) {"},{"lineNumber":96,"author":{"gitID":"yash-chowdhary"},"content":"        this.status \u003d new Status(status);"},{"lineNumber":97,"author":{"gitID":"yash-chowdhary"},"content":"        return this;"},{"lineNumber":98,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":100,"author":{"gitID":"yash-chowdhary"},"content":"    public Task build() {"},{"lineNumber":101,"author":{"gitID":"yash-chowdhary"},"content":"        return new Task(description, time, date, assignor, assignee, status);"},{"lineNumber":102,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":103}},{"path":"src/test/java/seedu/club/testutil/PollBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.testutil;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Answer;"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Question;"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.util.SampleDataUtil;"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":" * A utility class to help with building poll objects."},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"public class PollBuilder {"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String DEFAULT_QUESTION \u003d \"What is the meaning of life\";"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String DEFAULT_ANSWER_ONE \u003d \"Fourty Two\";"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String DEFAULT_ANSWER_TWO \u003d \"Fourty Three\";"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String DEFAULT_POLLEE_MATRIC_NUMBER_ONE \u003d \"A1234567B\";"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String DEFAULT_POLLEE_MATRIC_NUMBER_TWO \u003d \"A1234567C\";"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"    private Question question;"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"    private List\u003cAnswer\u003e answers;"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"    private Set\u003cMatricNumber\u003e polleesMatricNumbers;"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"    public PollBuilder() {"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"        question \u003d new Question(DEFAULT_QUESTION);"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"        answers \u003d Arrays.asList(new Answer(DEFAULT_ANSWER_ONE), new Answer(DEFAULT_ANSWER_TWO));"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"        polleesMatricNumbers \u003d new HashSet\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"        polleesMatricNumbers.add(new MatricNumber(DEFAULT_POLLEE_MATRIC_NUMBER_ONE));"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"        polleesMatricNumbers.add(new MatricNumber(DEFAULT_POLLEE_MATRIC_NUMBER_TWO));"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"     * Initializes the PollBuilder with the data of {@code pollToCopy}."},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"    public PollBuilder(Poll pollToCopy) {"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"        question \u003d pollToCopy.getQuestion();"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"        answers \u003d new ArrayList\u003c\u003e(pollToCopy.getAnswers());"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"        polleesMatricNumbers \u003d new HashSet\u003c\u003e(pollToCopy.getPolleesMatricNumbers());"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"     * Sets the {@code question} of the {@code poll} that we are building."},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"    public PollBuilder withQuestion(String question) {"},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"        this.question \u003d new Question(question);"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"        return this;"},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":"     * Parses the {@code answers} into a {@code Set\u003cTag\u003e} and set it to the {@code poll} that we are building."},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":"    public PollBuilder withAnswers(String ... answers) {"},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":"        this.answers \u003d SampleDataUtil.getAnswerList(answers);"},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":"        return this;"},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":"     * Sets the {@code pollesMatricNumbers} of the {@code poll} that we are building."},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":"    public PollBuilder withPolleesMatricNumbers(String... polleesMatricNumbers) {"},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":"        this.polleesMatricNumbers \u003d SampleDataUtil.getMatricNumberSet(polleesMatricNumbers);"},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":"        return this;"},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"MuhdNurKamal"},"content":"     * Sets the {@code pollesMatricNumbers} of the {@code poll} that we are building to null for non-voted new polls"},{"lineNumber":74,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"MuhdNurKamal"},"content":"    public PollBuilder withNoPollessMatricNumbers() {"},{"lineNumber":76,"author":{"gitID":"MuhdNurKamal"},"content":"        this.polleesMatricNumbers \u003d null;"},{"lineNumber":77,"author":{"gitID":"MuhdNurKamal"},"content":"        return this;"},{"lineNumber":78,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":80,"author":{"gitID":"MuhdNurKamal"},"content":"    public Poll build() {"},{"lineNumber":81,"author":{"gitID":"MuhdNurKamal"},"content":"        return new Poll(question, answers, polleesMatricNumbers);"},{"lineNumber":82,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":83}},{"path":"src/test/java/seedu/club/testutil/ClubBookBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.testutil;"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ClubBook;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.DuplicateMatricNumberException;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":" * A utility class to help with building Clubbook objects."},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":" *     {@code ClubBook cb \u003d new ClubBookBuilder().withMember(\"John\", \"Doe\").withTag(\"Friend\").build();}"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":" */"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"public class ClubBookBuilder {"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"    private ClubBook clubBook;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"    public ClubBookBuilder() {"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"        clubBook \u003d new ClubBook();"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"    public ClubBookBuilder(ClubBook clubBook) {"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"        this.clubBook \u003d clubBook;"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"     * Adds a new {@code member} to the {@code ClubBook} that we are building."},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"    public ClubBookBuilder withMember(Member member) {"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"            clubBook.addMember(member);"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (DuplicateMatricNumberException dmne) {"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"            throw new IllegalArgumentException(\"member is expected to be unique.\");"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"        return this;"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code ClubBook} that we are building."},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"    public ClubBookBuilder withTag(String tagName) {"},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"            clubBook.addTag(new Tag(tagName));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tagName is expected to be valid.\");"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"     * Parses {@code task} into a {@code Task} and adds it to the {@code ClubBook} that we are building."},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"    public ClubBookBuilder withTask(Task task) {"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"            clubBook.addTaskToTaskList(task);"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (DuplicateTaskException dte) {"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"            throw new IllegalArgumentException(\"task is expected to be unique\");"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"        return this;"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"    public ClubBook build() {"},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":"        return clubBook;"},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":47,"yash-chowdhary":14,"-":6}},{"path":"src/test/java/seedu/club/testutil/EventsUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.BaseEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Helper methods related to events."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class EventsUtil {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"-"},"content":"     * Posts {@code event} to all registered subscribers. This method will return successfully after the {@code event}"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * has been posted to all subscribers."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static void postNow(BaseEvent event) {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        new GuiRobot().interact(() -\u003e EventsCenter.getInstance().post(event));"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Posts {@code event} to all registered subscribers at some unspecified time in the future."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static void postLater(BaseEvent event) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e EventsCenter.getInstance().post(event));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":3,"-":23}},{"path":"src/test/java/guitests/GuiRobot.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.BooleanSupplier;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.testfx.api.FxRobot;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.exceptions.StageNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Robot used to simulate user actions on the GUI."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Extends {@link FxRobot} by adding some customized functionality and workarounds."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class GuiRobot extends FxRobot {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 250;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 7500;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final boolean isHeadlessMode;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public GuiRobot() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        isHeadlessMode \u003d headlessPropertyValue !\u003d null \u0026\u0026 headlessPropertyValue.equals(\"true\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode to avoid"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * unnecessary delays."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void pauseForHuman() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        if (isHeadlessMode) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws  EventTimeoutException if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * milliseconds."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void waitForEvent(BooleanSupplier event) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Waits for {@code event} to be true."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @param timeOut in milliseconds"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @throws EventTimeoutException if the time taken exceeds {@code timeOut}."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void waitForEvent(BooleanSupplier event, int timeOut) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        int timePassed \u003d 0;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        final int retryInterval \u003d 50;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        while (!event.getAsBoolean()) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            sleep(retryInterval);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            timePassed +\u003d retryInterval;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"            if (timePassed \u003e\u003d timeOut) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                throw new EventTimeoutException();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        pauseForHuman();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Returns true if the window with {@code stageTitle} is currently open."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public boolean isWindowShown(String stageTitle) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return listTargetWindows().stream()"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                .count() \u003e\u003d 1;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns the first stage, ordered by proximity to the current target window, with the stage title."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * The order that the windows are searched are as follows (proximity): current target window,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * children of the target window, rest of the windows."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @throws StageNotFoundException if the stage is not found."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"MuhdNurKamal"},"content":"    public Stage getStage(String stageTitle) throws StageNotFoundException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                .filter(Stage.class::isInstance)    // checks that the window is of type Stage"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .map(Stage.class::cast)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                .filter(stage -\u003e stage.getTitle().equals(stageTitle))"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                .findFirst();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return targetStage.orElseThrow(StageNotFoundException::new);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Represents an error which occurs when a timeout occurs when waiting for an event."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private class EventTimeoutException extends RuntimeException {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":1,"amrut-prabhu":1,"-":103}},{"path":"src/test/java/guitests/guihandles/AlertDialogHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.scene.control.DialogPane;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.ui.UiManager;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * A handle for the {@code AlertDialog} of the UI."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class AlertDialogHandle extends StageHandle {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private final DialogPane dialogPane;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public AlertDialogHandle(Stage stage) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"        this.dialogPane \u003d getChildNode(\"#\" + UiManager.ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns the text of the header in the {@code AlertDialog}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public String getHeaderText() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return dialogPane.getHeaderText();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Returns the text of the content in the {@code AlertDialog}."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public String getContentText() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return dialogPane.getContentText();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":31}},{"path":"src/test/java/seedu/club/testutil/MemberBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Email;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Name;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Password;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Phone;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Username;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.util.SampleDataUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":" * A utility class to help with building member objects."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"public class MemberBuilder {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alicia\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_MATRIC_NUMBER \u003d \"A1357904H\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alicia@gmail.com\";"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String DEFAULT_GROUP \u003d \"exco\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_USERNAME \u003d \"A1357904H\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PASSWORD \u003d \"passsword\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"    private MatricNumber matricNumber;"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"    private Group group;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Username username;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Password password;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"    public MemberBuilder() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"        matricNumber \u003d new MatricNumber(DEFAULT_MATRIC_NUMBER);"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"        group \u003d new Group(DEFAULT_GROUP);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        username \u003d new Username(DEFAULT_USERNAME);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        password \u003d new Password(DEFAULT_PASSWORD);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"     * Initializes the MemberBuilder with the data of {@code memberToCopy}."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"    public MemberBuilder(Member memberToCopy) {"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"        name \u003d memberToCopy.getName();"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"        phone \u003d memberToCopy.getPhone();"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"        email \u003d memberToCopy.getEmail();"},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"        matricNumber \u003d memberToCopy.getMatricNumber();"},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"        group \u003d memberToCopy.getGroup();"},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":"        tags \u003d new HashSet\u003c\u003e(memberToCopy.getTags());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        username \u003d new Username(matricNumber.value);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        password \u003d new Password(\"password\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"     * Sets the {@code Name} of the {@code member} that we are building."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"    public MemberBuilder withName(String name) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"amrut-prabhu"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code member} that we are building."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"amrut-prabhu"},"content":"    public MemberBuilder withTags(String ... tags) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"amrut-prabhu"},"content":"     * Sets the {@code MatricNumber} of the {@code member} that we are building."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"amrut-prabhu"},"content":"    public MemberBuilder withMatricNumber(String matricNumber) {"},{"lineNumber":86,"author":{"gitID":"MuhdNurKamal"},"content":"        this.matricNumber \u003d new MatricNumber(matricNumber);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"amrut-prabhu"},"content":"     * Sets the {@code Phone} of the {@code member} that we are building."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"amrut-prabhu"},"content":"    public MemberBuilder withPhone(String phone) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"amrut-prabhu"},"content":"     * Sets the {@code Email} of the {@code member} that we are building."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"amrut-prabhu"},"content":"    public MemberBuilder withEmail(String email) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"amrut-prabhu"},"content":"     * Sets the {@code Username} of the {@code member} that we are building"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"amrut-prabhu"},"content":"    public MemberBuilder withUsername(String username) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        this.username \u003d new Username(username);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"amrut-prabhu"},"content":"     * Sets the {@code Group} of the {@code member} that we are building."},{"lineNumber":115,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"amrut-prabhu"},"content":"    public MemberBuilder withGroup(String group) {"},{"lineNumber":117,"author":{"gitID":"yash-chowdhary"},"content":"        this.group \u003d new Group(group);"},{"lineNumber":118,"author":{"gitID":"yash-chowdhary"},"content":"        return this;"},{"lineNumber":119,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"amrut-prabhu"},"content":"     * Sets the {@code Group} of the {@code member} that we are building to the default group - \"member\"."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"amrut-prabhu"},"content":"    public MemberBuilder withGroup() {"},{"lineNumber":124,"author":{"gitID":"yash-chowdhary"},"content":"        this.group \u003d new Group(Group.DEFAULT_GROUP);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"amrut-prabhu"},"content":"     * Sets the {@Password} of the {@code member} that we are building"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * @return"},{"lineNumber":130,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"amrut-prabhu"},"content":"    public MemberBuilder withPassword(String password) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        this.password \u003d new Password(password);"},{"lineNumber":133,"author":{"gitID":"yash-chowdhary"},"content":"        return this;"},{"lineNumber":134,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"amrut-prabhu"},"content":"    public Member build() {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        return new Member(name, phone, email, matricNumber, group, tags);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":4,"amrut-prabhu":41,"yash-chowdhary":12,"-":81}},{"path":"src/test/java/guitests/guihandles/CommandBoxHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.ui.CommandBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * A handle to the {@code CommandBox} in the GUI."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class CommandBoxHandle extends NodeHandle\u003cTextField\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_INPUT_FIELD_ID \u003d \"#commandTextField\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public CommandBoxHandle(TextField commandBoxNode) {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        super(commandBoxNode);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns the text in the command box."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public String getInput() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return getRootNode().getText();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Enters the given command in the Command Box and presses enter."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @return true if the command succeeded, false otherwise."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public boolean run(String command) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        click();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e getRootNode().setText(command));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        guiRobot.type(KeyCode.ENTER);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return !getStyleClass().contains(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"     * Sets the given input into the commandBox"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"     * @param input"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"    public void setInput(String input) {"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"        getRootNode().setText(input);"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Returns the list of style classes present in the command box."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public ObservableList\u003cString\u003e getStyleClass() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return getRootNode().getStyleClass();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"yash-chowdhary":8,"-":45}},{"path":"src/test/java/guitests/guihandles/MainWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Provides a handle for {@code MainWindow}."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class MainWindowHandle extends StageHandle {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"    private final MemberListPanelHandle memberListPanel;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private final ResultDisplayHandle resultDisplay;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final CommandBoxHandle commandBox;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final StatusBarFooterHandle statusBarFooter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final MainMenuHandle mainMenu;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private final BrowserPanelHandle browserPanel;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public MainWindowHandle(Stage stage) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"        memberListPanel \u003d new MemberListPanelHandle(getChildNode(MemberListPanelHandle.MEMBER_LIST_VIEW_ID));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"    public MemberListPanelHandle getMemberListPanel() {"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"        return memberListPanel;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return resultDisplay;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return commandBox;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return statusBarFooter;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return mainMenu;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return browserPanel;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":4,"-":47}},{"path":"src/test/java/seedu/club/testutil/TypicalTasks.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.testutil;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.testutil.TypicalMembers.ALICE;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.ClubBook;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.member.exceptions.DuplicateMatricNumberException;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":" * Utility class containing list of {@code Task} objects to be used in tests."},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"public class TypicalTasks {"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"    public static final Task BOOK_AUDITORIUM \u003d new TaskBuilder()"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"            .withDescription(\"Book Auditorium\")"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"            .withDate(\"02/04/2018\")"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"            .withTime(\"13:00\")"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"            .withAssignor(\"A8389539B\")"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"            .withAssignee(\"A8389539B\")"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"            .withStatus(\"Yet To Begin\")"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"            .build();"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"    public static final Task BUY_CONFETTI \u003d new TaskBuilder()"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"            .withDescription(\"Buy Confetti\")"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"            .withDate(\"01/04/2018\")"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"            .withTime(\"17:00\")"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"            .withAssignor(\"A9210701B\")"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"            .withAssignee(\"A9210701B\")"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"            .withStatus(\"Yet To Begin\")"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"            .build();"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"    public static final Task ADVERTISE_EVENT \u003d new TaskBuilder()"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"            .withDescription(\"Advertise event\")"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"            .withDate(\"31/03/2018\")"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"            .withTime(\"19:00\")"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"            .withAssignor(\"A9210701B\")"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"            .withAssignee(\"A9210701B\")"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"            .withStatus(\"Yet To Begin\")"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"            .build();"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"    public static final Task BUY_FOOD \u003d new TaskBuilder()"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"            .withDescription(\"Buy Food\")"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"            .withDate(\"02/05/2018\")"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"            .withTime(\"19:00\")"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"            .withAssignor(\"A9210701B\")"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"            .withAssignee(\"A9210701B\")"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"            .withStatus(\"Yet To Begin\")"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"            .build();"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"    private TypicalTasks() {}"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"    public static List\u003cTask\u003e getTypicalTasks() {"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(BOOK_AUDITORIUM, BUY_CONFETTI, ADVERTISE_EVENT, BUY_FOOD));"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns an {@code AddressBook} with one person and all typical orders."},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"    public static ClubBook getTypicalClubBookWithTasks() {"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"        ClubBook clubBook \u003d new ClubBook();"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"            clubBook.addMember(ALICE);"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (DuplicateMatricNumberException dmne) {"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"            throw new AssertionError(\"not possible\");"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"        for (Task task : getTypicalTasks()) {"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"            try {"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"                clubBook.addTaskToTaskList(task);"},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"            } catch (DuplicateTaskException dte) {"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"        return clubBook;"},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":84}},{"path":"src/test/java/seedu/club/testutil/TypicalMembers.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_GROUP_AMY;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_GROUP_BOB;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_AMY;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_BOB;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ClubBook;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.DuplicateMatricNumberException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":" * A utility class containing a list of {@code member} objects"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":" * to be used in tests."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"public class TypicalMembers {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"    public static final Member ALICE \u003d new MemberBuilder().withName(\"Alice Pauline\")"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"            .withEmail(\"alice@example.com\")"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"            .withMatricNumber(\"A9210701B\")"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"            .withGroup(\"exco\")"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"    public static final Member BENSON \u003d new MemberBuilder().withName(\"Benson Meier\")"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"            .withEmail(\"johnd@example.com\")"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"            .withPhone(\"98765432\")"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"            .withMatricNumber(\"A8389539B\")"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"            .withGroup(\"pr\")"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"    public static final Member CARL \u003d new MemberBuilder().withName(\"Carl Kurz\")"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"            .withPhone(\"95352563\")"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"            .withEmail(\"heinz@example.com\")"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"            .withMatricNumber(\"A6076201A\")"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"            .withGroup(\"marketing\").build();"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"    public static final Member DANIEL \u003d new MemberBuilder().withName(\"Daniel Meier\")"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"            .withPhone(\"87652533\")"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"            .withEmail(\"cornelia@example.com\")"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"            .withMatricNumber(\"A2719059H\")"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"            .withGroup(\"publicity\").build();"},{"lineNumber":52,"author":{"gitID":"amrut-prabhu"},"content":"    public static final Member ELLE \u003d new MemberBuilder().withName(\"Elle Meyer\")"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"            .withPhone(\"9482224\")"},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"            .withEmail(\"werner@example.com\")"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"            .withMatricNumber(\"A1932279G\")"},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"            .withGroup(\"marketing\").build();"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"    public static final Member FIONA \u003d new MemberBuilder().withName(\"Fiona Kunz\")"},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"            .withPhone(\"9482427\")"},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":"            .withEmail(\"lydia@example.com\")"},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":"            .withMatricNumber(\"A9662042H\")"},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":"            .withGroup(\"operations\").build();"},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":"    public static final Member GEORGE \u003d new MemberBuilder().withName(\"George Best\")"},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":"            .withPhone(\"9482442\")"},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":"            .withEmail(\"anna@example.com\")"},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":"            .withMatricNumber(\"A2836750A\")"},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":"            .withGroup(\"legal\").build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"    public static final Member HOON \u003d new MemberBuilder().withName(\"Hoon Meier\")"},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"            .withPhone(\"8482424\")"},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":"            .withEmail(\"stefan@example.com\")"},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"            .withMatricNumber(\"a9123096J\")"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"            .withGroup(\"publicity\")"},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"            .build();"},{"lineNumber":75,"author":{"gitID":"amrut-prabhu"},"content":"    public static final Member IDA \u003d new MemberBuilder().withName(\"Ida Mueller\")"},{"lineNumber":76,"author":{"gitID":"MuhdNurKamal"},"content":"            .withPhone(\"8482131\")"},{"lineNumber":77,"author":{"gitID":"MuhdNurKamal"},"content":"            .withEmail(\"hans@example.com\")"},{"lineNumber":78,"author":{"gitID":"MuhdNurKamal"},"content":"            .withMatricNumber(\"a9239483F\")"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"            .withGroup(\"logistics\")"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"            .build();"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"amrut-prabhu"},"content":"    // Manually added - member\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":83,"author":{"gitID":"amrut-prabhu"},"content":"    public static final Member AMY \u003d new MemberBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":84,"author":{"gitID":"MuhdNurKamal"},"content":"            .withEmail(VALID_EMAIL_AMY).withMatricNumber(VALID_MATRIC_NUMBER_AMY)"},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"            .withGroup(VALID_GROUP_AMY)"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":87,"author":{"gitID":"amrut-prabhu"},"content":"    public static final Member BOB \u003d new MemberBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":88,"author":{"gitID":"MuhdNurKamal"},"content":"            .withEmail(VALID_EMAIL_BOB).withMatricNumber(VALID_MATRIC_NUMBER_BOB)"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":"            .withGroup(VALID_GROUP_BOB)"},{"lineNumber":90,"author":{"gitID":"MuhdNurKamal"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"amrut-prabhu"},"content":"    private TypicalMembers() {} // prevents instantiation"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns an {@code ClubBook} with all the typical members."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"amrut-prabhu"},"content":"    public static ClubBook getTypicalClubBook() {"},{"lineNumber":101,"author":{"gitID":"amrut-prabhu"},"content":"        ClubBook ab \u003d new ClubBook();"},{"lineNumber":102,"author":{"gitID":"amrut-prabhu"},"content":"        for (Member member : getTypicalMembers()) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":104,"author":{"gitID":"amrut-prabhu"},"content":"                ab.addMember(member);"},{"lineNumber":105,"author":{"gitID":"amrut-prabhu"},"content":"            } catch (DuplicateMatricNumberException e) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"amrut-prabhu"},"content":"    public static List\u003cMember\u003e getTypicalMembers() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":35,"amrut-prabhu":38,"yash-chowdhary":9,"-":33}},{"path":"src/test/java/guitests/guihandles/StageHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.exceptions.NodeNotFoundException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Provides access to a stage in a JavaFx application for GUI testing purposes."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public abstract class StageHandle {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    protected final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Stage stage;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public StageHandle(Stage stage) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.stage \u003d requireNonNull(stage);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Closes {@code stage}."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void close() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        guiRobot.interact(stage::close);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(stage.isShowing());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Focuses on this {@code stage}."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void focus() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        String windowTitle \u003d stage.getTitle();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        logger.info(\"Focusing on\" + windowTitle);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        guiRobot.interact(stage::requestFocus);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        logger.info(\"Finishing focus on\" + windowTitle);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Retrieves the {@code query} node owned by the {@code stage}."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @param query name of the CSS selector for the node to retrieve."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws NodeNotFoundException if no such node exists."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"    protected \u003cT extends Node\u003e T getChildNode(String query) throws NodeNotFoundException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Optional\u003cT\u003e node \u003d guiRobot.from(stage.getScene().getRoot()).lookup(query).tryQuery();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return node.orElseThrow(NodeNotFoundException::new);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":1,"amrut-prabhu":1,"-":54}},{"path":"src/test/java/guitests/guihandles/MemberCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":" * Provides a handle to a member card in the member list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"public class MemberCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final String MATRIC_NUMBER_FIELD_ID \u003d \"#matricNumber\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"    private final Label matricNumberLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"    public MemberCardHandle(Node cardNode) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"        this.matricNumberLabel \u003d getChildNode(MATRIC_NUMBER_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"    public String getMatricNumber() {"},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"        return matricNumberLabel.getText();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":5,"amrut-prabhu":3,"-":63}},{"path":"src/test/java/guitests/guihandles/MemberListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.ui.MemberCard;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":" * Provides a handle for {@code MemberListPanel} containing the list of {@code MemberCard}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"public class MemberListPanelHandle extends NodeHandle\u003cListView\u003cMemberCard\u003e\u003e {"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MEMBER_LIST_VIEW_ID \u003d \"#memberListView\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"    private Optional\u003cMemberCard\u003e lastRememberedSelectedMemberCard;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"    public MemberListPanelHandle(ListView\u003cMemberCard\u003e memberListPanelNode) {"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"        super(memberListPanelNode);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns a handle to the selected {@code MemberCardHandle}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * A maximum of 1 item can be selected at any time."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @throws AssertionError if no card is selected, or more than 1 card is selected."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"    public MemberCardHandle getHandleToSelectedCard() {"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"        List\u003cMemberCard\u003e memberList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"        if (memberList.size() !\u003d 1) {"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"            throw new AssertionError(\"member list size expected 1.\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"        return new MemberCardHandle(memberList.get(0).getRoot());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Returns the index of the selected card."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public int getSelectedCardIndex() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns true if a card is currently selected."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean isAnyCardSelected() {"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"        List\u003cMemberCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (selectedCardsList.size() \u003e 1) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Card list size expected 0 or 1.\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return !selectedCardsList.isEmpty();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"     * Navigates the listview to display and select the member."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"    public void navigateToCard(Member member) {"},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":"        List\u003cMemberCard\u003e cards \u003d getRootNode().getItems();"},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":"        Optional\u003cMemberCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.member.equals(member)).findFirst();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":"            throw new IllegalArgumentException(\"member does not exist.\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns the member card handle of a member associated with the {@code index} in the list."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"amrut-prabhu"},"content":"    public MemberCardHandle getMemberCardHandle(int index) {"},{"lineNumber":79,"author":{"gitID":"amrut-prabhu"},"content":"        return getMemberCardHandle(getRootNode().getItems().get(index).member);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns the {@code MemberCardHandle} of the specified {@code member} in the list."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"amrut-prabhu"},"content":"    public MemberCardHandle getMemberCardHandle(Member member) {"},{"lineNumber":86,"author":{"gitID":"amrut-prabhu"},"content":"        Optional\u003cMemberCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":87,"author":{"gitID":"amrut-prabhu"},"content":"                .filter(card -\u003e card.member.equals(member))"},{"lineNumber":88,"author":{"gitID":"amrut-prabhu"},"content":"                .map(card -\u003e new MemberCardHandle(card.getRoot()))"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                .findFirst();"},{"lineNumber":90,"author":{"gitID":"amrut-prabhu"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"member does not exist.\"));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"amrut-prabhu"},"content":"     * Selects the {@code MemberCard} at {@code index} in the list."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void select(int index) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        getRootNode().getSelectionModel().select(index);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"amrut-prabhu"},"content":"     * Remembers the selected {@code MemberCard} in the list."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"amrut-prabhu"},"content":"    public void rememberSelectedMemberCard() {"},{"lineNumber":104,"author":{"gitID":"amrut-prabhu"},"content":"        List\u003cMemberCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":107,"author":{"gitID":"amrut-prabhu"},"content":"            lastRememberedSelectedMemberCard \u003d Optional.empty();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":109,"author":{"gitID":"amrut-prabhu"},"content":"            lastRememberedSelectedMemberCard \u003d Optional.of(selectedItems.get(0));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns true if the selected {@code MemberCard} is different from the value remembered by the most recent"},{"lineNumber":115,"author":{"gitID":"amrut-prabhu"},"content":"     * {@code rememberSelectedMemberCard()} call."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"amrut-prabhu"},"content":"    public boolean isSelectedMemberCardChanged() {"},{"lineNumber":118,"author":{"gitID":"amrut-prabhu"},"content":"        List\u003cMemberCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":121,"author":{"gitID":"amrut-prabhu"},"content":"            return lastRememberedSelectedMemberCard.isPresent();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":123,"author":{"gitID":"amrut-prabhu"},"content":"            return !lastRememberedSelectedMemberCard.isPresent()"},{"lineNumber":124,"author":{"gitID":"amrut-prabhu"},"content":"                    || !lastRememberedSelectedMemberCard.get().equals(selectedItems.get(0));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Returns the size of the list."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public int getListSize() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return getRootNode().getItems().size();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":42,"-":92}},{"path":"src/main/java/seedu/club/ui/RestrictedAnswerCard.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Answer;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":" * An UI component that displays information of a {@code answerValue} except the results."},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"public class RestrictedAnswerCard extends AnswerCard {"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final String FXML \u003d \"RestrictedAnswerListCard.fxml\";"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"    public RestrictedAnswerCard(Answer answer, int displayedIndex, int totalVoteCount) {"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"        super(answer, displayedIndex, totalVoteCount, FXML);"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":15}},{"path":"src/test/java/guitests/guihandles/NodeHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.exceptions.NodeNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Provides access to a node in a JavaFx application for GUI testing purposes."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public abstract class NodeHandle\u003cT extends Node\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    protected final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private final T rootNode;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    protected NodeHandle(T rootNode) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        this.rootNode \u003d requireNonNull(rootNode);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    protected T getRootNode() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return rootNode;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Retrieves the {@code query} node owned by the {@code rootNode}."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * @param query name of the CSS selector for the node to retrieve."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @throws NodeNotFoundException if no such node exists."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"    protected \u003cQ extends Node\u003e Q getChildNode(String query) throws NodeNotFoundException {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Optional\u003cQ\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return node.orElseThrow(NodeNotFoundException::new);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Clicks on the root node (i.e. itself)."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void click() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        guiRobot.clickOn(rootNode);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":1,"-":43}},{"path":"src/main/java/seedu/club/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import java.awt.Desktop;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import java.net.URI;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.MainApp;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.ui.MemberPanelSelectionChangedEvent;"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.commons.events.ui.SendEmailRequestEvent;"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Client;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String SEARCH_PAGE_URL \u003d"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String GMAIL_URL \u003d \"https://mail.google.com/mail/?view\u003dcm\u0026fs\u003d1\u0026to\u003d%1$s\""},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"            + \"\u0026su\u003d%2$s\u0026body\u003d%3$s\";"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String OUTLOOK_URL \u003d \"https://outlook.office.com/?path\u003d/mail/action/\""},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"            + \"compose\u0026to\u003d%1$s\u0026subject\u003d%2$s\u0026body\u003d%3$s\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":47,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"    //@@author yash-chowdhary"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"     * Loads the client page based on {@code client}"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"    private void callClient(String client, String recipients, String subject, String body) {"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"        if (client.equalsIgnoreCase(Client.VALID_CLIENT_GMAIL)) {"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"            String gMailUrl \u003d String.format(GMAIL_URL, recipients, subject, body);"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"            loadGmailPage(gMailUrl);"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (client.equalsIgnoreCase(Client.VALID_CLIENT_OUTLOOK)) {"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"            String outlookUrl \u003d String.format(OUTLOOK_URL, recipients, subject, body);"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"            loadOutlookPage(outlookUrl);"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"     * loads the \u0027Compose Email\u0027 page based on the {@code outlookUrl} in Outlook"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"     * adapted from https://www.codeproject.com/Questions/398241/how-to-open-url-in-java"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"    private void loadOutlookPage(String outlookUrl) {"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"        if (Desktop.isDesktopSupported()) {"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"            Desktop desktop \u003d Desktop.getDesktop();"},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"            if (desktop.isSupported(Desktop.Action.BROWSE)) {"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"                try {"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"                    desktop.browse(URI.create(outlookUrl));"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"                    return;"},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"                } catch (IOException e) {"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"                    e.printStackTrace();"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"                }"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":"     * loads the \u0027Compose Email\u0027 page based on the {@code gMailUrl} in GMail"},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":"     * adapted from https://www.codeproject.com/Questions/398241/how-to-open-url-in-java"},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":"    private void loadGmailPage(String gMailUrl) {"},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":"        if (Desktop.isDesktopSupported()) {"},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":"            Desktop desktop \u003d Desktop.getDesktop();"},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":"            if (desktop.isSupported(Desktop.Action.BROWSE)) {"},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":"                try {"},{"lineNumber":94,"author":{"gitID":"yash-chowdhary"},"content":"                    desktop.browse(URI.create(gMailUrl));"},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":"                    return;"},{"lineNumber":96,"author":{"gitID":"yash-chowdhary"},"content":"                } catch (IOException e) {"},{"lineNumber":97,"author":{"gitID":"yash-chowdhary"},"content":"                    e.printStackTrace();"},{"lineNumber":98,"author":{"gitID":"yash-chowdhary"},"content":"                }"},{"lineNumber":99,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":100,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"yash-chowdhary"},"content":"    //@@author"},{"lineNumber":103,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":104,"author":{"gitID":"amrut-prabhu"},"content":"    private void loadMemberPage(Member member) {"},{"lineNumber":105,"author":{"gitID":"amrut-prabhu"},"content":"        loadPage(SEARCH_PAGE_URL + member.getName().fullName);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":128,"author":{"gitID":"amrut-prabhu"},"content":"    private void handleMemberPanelSelectionChangedEvent(MemberPanelSelectionChangedEvent event) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":130,"author":{"gitID":"amrut-prabhu"},"content":"        loadMemberPage(event.getNewSelection().member);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":133,"author":{"gitID":"yash-chowdhary"},"content":"    //@@author yash-chowdhary"},{"lineNumber":134,"author":{"gitID":"yash-chowdhary"},"content":"    @Subscribe"},{"lineNumber":135,"author":{"gitID":"yash-chowdhary"},"content":"    private void handleSendingEmailEvent(SendEmailRequestEvent event) {"},{"lineNumber":136,"author":{"gitID":"yash-chowdhary"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Sending email via \""},{"lineNumber":137,"author":{"gitID":"yash-chowdhary"},"content":"                + event.getClient().toString()));"},{"lineNumber":138,"author":{"gitID":"yash-chowdhary"},"content":"        callClient(event.getClient().toString(), event.getRecipients(), event.getSubject().toString(),"},{"lineNumber":139,"author":{"gitID":"yash-chowdhary"},"content":"                event.getBody().toString());"},{"lineNumber":140,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":9,"yash-chowdhary":70,"-":62}},{"path":"src/main/java/seedu/club/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.ListElementPointer;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.Logic;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.LogicManager;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.CommandResult;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"    private int completeCommandIndex \u003d 0;"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"    private String oldInput \u003d null;"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"    private String newInput;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":43,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"        case TAB:"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"            keyEvent.consume();"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"            completeCommandIndex++;"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"            autoComplete(commandTextField.getText());"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"            break;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"     * Auto-completes the input"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"    private void autoComplete(String input) {"},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"        if (!input.equals(\"\")) {"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"            if (oldInput \u003d\u003d null) {"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"                oldInput \u003d input;"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"            } else if (input.indexOf(oldInput) \u003d\u003d -1) {"},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"                oldInput \u003d input;"},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"                completeCommandIndex \u003d 0;"},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":85,"author":{"gitID":"amrut-prabhu"},"content":"            List\u003cString\u003e completedCommands \u003d LogicManager.COMMAND_LIST.stream().filter(s -\u003e s.startsWith(oldInput))"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":"            if (!completedCommands.isEmpty()) {"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":"                replaceText(completedCommands.get(completeCommandIndex % completedCommands.size()));"},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":"            } else {"},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":"                replaceText(\"\");"},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":96,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":163,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":9,"yash-chowdhary":34,"-":143}},{"path":"src/main/java/seedu/club/ui/TaskCard.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":" * A UI component that displays information of an {@code Order}."},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"public class TaskCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"    private static final String FXML \u003d \"TaskListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"    public final Task task;"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"    private HBox cardPane;"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"    private Label description;"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"    private Label id;"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"    private Label time;"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"    private Label date;"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"    private Label assignor;"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"    private Label assignee;"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"    private Label status;"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"    public TaskCard(Task task, int displayedIndex) {"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"        super(FXML);"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"        this.task \u003d task;"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"        description.setText(task.getDescription().getDescription());"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"        date.setText(\"Due Date: \" + task.getDate().getDate());"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"        time.setText(\"Time: \" + task.getTime().getTime());"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"        assignor.setText(\"Assigned by: \" + task.getAssignor().getAssignor());"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"        assignee.setText(\"Assigned to: \" + task.getAssignee().getAssignee());"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"        status.setText(\"Status: \" + task.getStatus().getStatus());"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean isTaskYetToBegin() {"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"        return task.hasTaskNotBegun();"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean isTaskInProgress() {"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"        return task.isTaskInProgress();"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean isTaskCompleted() {"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"        return task.isTaskCompleted();"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"        // short circuit if same object"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"            return true;"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"        // instanceof handles nulls"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"        if (!(other instanceof TaskCard)) {"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"            return false;"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"        // state check"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"        TaskCard card \u003d (TaskCard) other;"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 task.equals(card.task);"},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":84}},{"path":"src/main/java/seedu/club/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.MainApp;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.storage.DataReadingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.util.StringUtil;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.Logic;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Operation Error\";"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String FILE_OPS_WRITE_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String FILE_OPS_WRITE_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String FILE_OPS_READ_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not read data\";"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String FILE_OPS_READ_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not read data from file\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/club_connect_256.png\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        //Set the application icon."},{"lineNumber":55,"author":{"gitID":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        mainWindow.releaseResources();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":120,"author":{"gitID":"amrut-prabhu"},"content":"        showFileOperationAlertAndWait(FILE_OPS_WRITE_ERROR_DIALOG_HEADER_MESSAGE,"},{"lineNumber":121,"author":{"gitID":"amrut-prabhu"},"content":"                FILE_OPS_WRITE_ERROR_DIALOG_CONTENT_MESSAGE, event.exception);"},{"lineNumber":122,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":124,"author":{"gitID":"amrut-prabhu"},"content":"    @Subscribe"},{"lineNumber":125,"author":{"gitID":"amrut-prabhu"},"content":"    private void handlePhotoExceptionEvent(DataReadingExceptionEvent event) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":127,"author":{"gitID":"amrut-prabhu"},"content":"        showFileOperationAlertAndWait(FILE_OPS_READ_ERROR_DIALOG_HEADER_MESSAGE,"},{"lineNumber":128,"author":{"gitID":"amrut-prabhu"},"content":"                FILE_OPS_READ_ERROR_DIALOG_CONTENT_MESSAGE, event.exception);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":24,"-":106}},{"path":"src/main/java/seedu/club/ui/Ui.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * API of UI component"},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public interface Ui {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    /** Starts the UI (and the App).  */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    void start(Stage primaryStage);"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /** Stops the UI. */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    void stop();"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":15}},{"path":"src/test/java/seedu/club/model/member/FieldContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model.member;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.testutil.MemberBuilder;"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"public class FieldContainsKeywordsPredicateTest {"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"    public void equals_namePrefix() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(firstPredicateKeywordList, PREFIX_NAME);"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(secondPredicateKeywordList, PREFIX_NAME);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(firstPredicateKeywordList, PREFIX_NAME);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"        // different member -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"    public void equals_phonePrefix() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(firstPredicateKeywordList, PREFIX_PHONE);"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(secondPredicateKeywordList, PREFIX_PHONE);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(firstPredicateKeywordList, PREFIX_PHONE);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"amrut-prabhu"},"content":"        // different member -\u003e returns false"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"MuhdNurKamal"},"content":"    public void equals_emailPrefix() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":84,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(firstPredicateKeywordList, PREFIX_EMAIL);"},{"lineNumber":85,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":86,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(secondPredicateKeywordList, PREFIX_EMAIL);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":92,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":93,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(firstPredicateKeywordList, PREFIX_EMAIL);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"amrut-prabhu"},"content":"        // different member -\u003e returns false"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"MuhdNurKamal"},"content":"    public void equals_matricNumberPrefix() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":112,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(firstPredicateKeywordList, PREFIX_MATRIC_NUMBER);"},{"lineNumber":113,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":114,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(secondPredicateKeywordList, PREFIX_MATRIC_NUMBER);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":120,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":121,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(firstPredicateKeywordList, PREFIX_MATRIC_NUMBER);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"amrut-prabhu"},"content":"        // different member -\u003e returns false"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitID":"MuhdNurKamal"},"content":"    public void equals_groupPrefix() {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":140,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(firstPredicateKeywordList, PREFIX_GROUP);"},{"lineNumber":141,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":142,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(secondPredicateKeywordList, PREFIX_GROUP);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":148,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":149,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(firstPredicateKeywordList, PREFIX_GROUP);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"amrut-prabhu"},"content":"        // different member -\u003e returns false"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"MuhdNurKamal"},"content":"    public void equals_tagPrefix() {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":168,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(firstPredicateKeywordList, PREFIX_TAG);"},{"lineNumber":169,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":170,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(secondPredicateKeywordList, PREFIX_TAG);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":176,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":177,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(firstPredicateKeywordList, PREFIX_TAG);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"amrut-prabhu"},"content":"        // different member -\u003e returns false"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":191,"author":{"gitID":"MuhdNurKamal"},"content":"    public void equals_noPrefix() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":196,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(firstPredicateKeywordList, null);"},{"lineNumber":197,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":198,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(secondPredicateKeywordList, null);"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":204,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":205,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(firstPredicateKeywordList, null);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"amrut-prabhu"},"content":"        // different member -\u003e returns false"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":221,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate predicate \u003d"},{"lineNumber":222,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(Collections.singletonList(\"Alice\"), PREFIX_NAME);"},{"lineNumber":223,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(predicate.test(new MemberBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":224,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":225,"author":{"gitID":"MuhdNurKamal"},"content":"        // Multiple keywords"},{"lineNumber":226,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"), PREFIX_NAME);"},{"lineNumber":227,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(predicate.test(new MemberBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":228,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":229,"author":{"gitID":"MuhdNurKamal"},"content":"        // Only one matching keyword"},{"lineNumber":230,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"), PREFIX_NAME);"},{"lineNumber":231,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(predicate.test(new MemberBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":232,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":233,"author":{"gitID":"MuhdNurKamal"},"content":"        // Mixed-case keywords"},{"lineNumber":234,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"), PREFIX_NAME);"},{"lineNumber":235,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(predicate.test(new MemberBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":236,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":238,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":239,"author":{"gitID":"MuhdNurKamal"},"content":"    public void test_phoneContainsKeywords_returnsTrue() {"},{"lineNumber":240,"author":{"gitID":"MuhdNurKamal"},"content":"        // One keyword"},{"lineNumber":241,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate predicate \u003d"},{"lineNumber":242,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(Collections.singletonList(\"123\"), PREFIX_PHONE);"},{"lineNumber":243,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(predicate.test(new MemberBuilder().withPhone(\"12345678\").build()));"},{"lineNumber":244,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":245,"author":{"gitID":"MuhdNurKamal"},"content":"        // Multiple keywords"},{"lineNumber":246,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"123\", \"456\"), PREFIX_PHONE);"},{"lineNumber":247,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(predicate.test(new MemberBuilder().withPhone(\"123456\").build()));"},{"lineNumber":248,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":249,"author":{"gitID":"MuhdNurKamal"},"content":"        // Only one matching keyword"},{"lineNumber":250,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"123\", \"456\"), PREFIX_PHONE);"},{"lineNumber":251,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(predicate.test(new MemberBuilder().withPhone(\"5431236647\").build()));"},{"lineNumber":252,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":254,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":255,"author":{"gitID":"MuhdNurKamal"},"content":"    public void test_emailContainsKeywords_returnsTrue() {"},{"lineNumber":256,"author":{"gitID":"MuhdNurKamal"},"content":"        // One keyword"},{"lineNumber":257,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate predicate \u003d"},{"lineNumber":258,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(Collections.singletonList(\"Alice\"), PREFIX_EMAIL);"},{"lineNumber":259,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(predicate.test(new MemberBuilder().withEmail(\"Alice@hotmail\").build()));"},{"lineNumber":260,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":261,"author":{"gitID":"MuhdNurKamal"},"content":"        // Multiple keywords"},{"lineNumber":262,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob@\"), PREFIX_EMAIL);"},{"lineNumber":263,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(predicate.test(new MemberBuilder().withEmail(\"AliceANDBob@outlook.com\").build()));"},{"lineNumber":264,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":265,"author":{"gitID":"MuhdNurKamal"},"content":"        // Only one matching keyword"},{"lineNumber":266,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"), PREFIX_EMAIL);"},{"lineNumber":267,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(predicate.test(new MemberBuilder().withEmail(\"Carol@chacha.com\").build()));"},{"lineNumber":268,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":269,"author":{"gitID":"MuhdNurKamal"},"content":"        // Mixed-case keywords"},{"lineNumber":270,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"aLIce\"), PREFIX_EMAIL);"},{"lineNumber":271,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(predicate.test(new MemberBuilder().withEmail(\"Alice@hohoho.com\").build()));"},{"lineNumber":272,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":274,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":275,"author":{"gitID":"MuhdNurKamal"},"content":"    public void test_matricNumberContainsKeywords_returnsTrue() {"},{"lineNumber":276,"author":{"gitID":"MuhdNurKamal"},"content":"        // One keyword"},{"lineNumber":277,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate predicate \u003d"},{"lineNumber":278,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(Collections.singletonList(\"1234567\"), PREFIX_MATRIC_NUMBER);"},{"lineNumber":279,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(predicate.test(new MemberBuilder().withMatricNumber(\"A1234567H\").build()));"},{"lineNumber":280,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":281,"author":{"gitID":"MuhdNurKamal"},"content":"        // Multiple keywords"},{"lineNumber":282,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"A789\", \"541\"), PREFIX_MATRIC_NUMBER);"},{"lineNumber":283,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(predicate.test(new MemberBuilder().withMatricNumber(\"A7896541H\").build()));"},{"lineNumber":284,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":285,"author":{"gitID":"MuhdNurKamal"},"content":"        // Only one matching keyword"},{"lineNumber":286,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"594\", \"654\"), PREFIX_MATRIC_NUMBER);"},{"lineNumber":287,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(predicate.test(new MemberBuilder().withMatricNumber(\"A7531594J\").build()));"},{"lineNumber":288,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":289,"author":{"gitID":"MuhdNurKamal"},"content":"        // Small letters"},{"lineNumber":290,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"a1234567h\"), PREFIX_MATRIC_NUMBER);"},{"lineNumber":291,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(predicate.test(new MemberBuilder().withMatricNumber(\"A1234567H\").build()));"},{"lineNumber":292,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":294,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":295,"author":{"gitID":"MuhdNurKamal"},"content":"    public void test_groupContainsKeywords_returnsTrue() {"},{"lineNumber":296,"author":{"gitID":"MuhdNurKamal"},"content":"        // One keyword"},{"lineNumber":297,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate predicate \u003d"},{"lineNumber":298,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(Collections.singletonList(\"logis\"), PREFIX_GROUP);"},{"lineNumber":299,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(predicate.test(new MemberBuilder().withGroup(\"logistics\").build()));"},{"lineNumber":300,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":301,"author":{"gitID":"MuhdNurKamal"},"content":"        // Multiple keywords"},{"lineNumber":302,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"log\", \"tics\"), PREFIX_GROUP);"},{"lineNumber":303,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(predicate.test(new MemberBuilder().withGroup(\"logistics\").build()));"},{"lineNumber":304,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":305,"author":{"gitID":"MuhdNurKamal"},"content":"        // Only one matching keyword"},{"lineNumber":306,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"KLAN\", \"654\"), PREFIX_GROUP);"},{"lineNumber":307,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(predicate.test(new MemberBuilder().withGroup(\"KLANIBAL\").build()));"},{"lineNumber":308,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":309,"author":{"gitID":"MuhdNurKamal"},"content":"        // Mixed letters"},{"lineNumber":310,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"wumBoLoGY\"), PREFIX_GROUP);"},{"lineNumber":311,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(predicate.test(new MemberBuilder().withGroup(\"Wumbology\").build()));"},{"lineNumber":312,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":313,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":314,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":315,"author":{"gitID":"MuhdNurKamal"},"content":"    public void test_tagContainsKeywords_returnsTrue() {"},{"lineNumber":316,"author":{"gitID":"MuhdNurKamal"},"content":"        // One keyword"},{"lineNumber":317,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate predicate \u003d"},{"lineNumber":318,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(Collections.singletonList(\"Logi\"), PREFIX_TAG);"},{"lineNumber":319,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(predicate.test(new MemberBuilder().withTags(\"Logistics\").build()));"},{"lineNumber":320,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":321,"author":{"gitID":"MuhdNurKamal"},"content":"        // Multiple keywords"},{"lineNumber":322,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"sai\", \"warrior\"), PREFIX_TAG);"},{"lineNumber":323,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(predicate.test(new MemberBuilder().withTags(\"saikangWarriors\").build()));"},{"lineNumber":324,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":325,"author":{"gitID":"MuhdNurKamal"},"content":"        // Only one matching keyword"},{"lineNumber":326,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"book\", \"nah\"), PREFIX_TAG);"},{"lineNumber":327,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(predicate.test(new MemberBuilder().withTags(\"bookkeepers\", \"YOLO\").build()));"},{"lineNumber":328,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":329,"author":{"gitID":"MuhdNurKamal"},"content":"        // Mixed letters"},{"lineNumber":330,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"reSearChers\"), PREFIX_TAG);"},{"lineNumber":331,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(predicate.test(new MemberBuilder().withTags(\"RESearchers\").build()));"},{"lineNumber":332,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":333,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":335,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":336,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":337,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate predicate \u003d"},{"lineNumber":338,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(Collections.emptyList(), PREFIX_NAME);"},{"lineNumber":339,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(predicate.test(new MemberBuilder().withName(\"Alice\").build()));"},{"lineNumber":340,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":341,"author":{"gitID":"MuhdNurKamal"},"content":"        // Non-matching keyword"},{"lineNumber":342,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"Carol\"), PREFIX_NAME);"},{"lineNumber":343,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(predicate.test(new MemberBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"MuhdNurKamal"},"content":"        // Keywords match phone, email and matric number, but does not match name"},{"lineNumber":346,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d"},{"lineNumber":347,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"),"},{"lineNumber":348,"author":{"gitID":"MuhdNurKamal"},"content":"                        PREFIX_NAME);"},{"lineNumber":349,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(predicate.test(new MemberBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":350,"author":{"gitID":"MuhdNurKamal"},"content":"                .withEmail(\"alice@email.com\").withMatricNumber(\"A1152241G\").build()));"},{"lineNumber":351,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":352,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":353,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":354,"author":{"gitID":"MuhdNurKamal"},"content":"    public void test_phoneDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":355,"author":{"gitID":"MuhdNurKamal"},"content":"        // Zero keywords"},{"lineNumber":356,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate predicate \u003d"},{"lineNumber":357,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(Collections.emptyList(), PREFIX_PHONE);"},{"lineNumber":358,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(predicate.test(new MemberBuilder().withPhone(\"12345678\").build()));"},{"lineNumber":359,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":360,"author":{"gitID":"MuhdNurKamal"},"content":"        // Non-matching keyword"},{"lineNumber":361,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"123456\"), PREFIX_PHONE);"},{"lineNumber":362,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(predicate.test(new MemberBuilder().withPhone(\"654321\").build()));"},{"lineNumber":363,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":364,"author":{"gitID":"MuhdNurKamal"},"content":"        // Keywords match name, email and matric number, but does not match phone"},{"lineNumber":365,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d"},{"lineNumber":366,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"alice@email.com\", \"A1152241G\"),"},{"lineNumber":367,"author":{"gitID":"MuhdNurKamal"},"content":"                        PREFIX_PHONE);"},{"lineNumber":368,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(predicate.test(new MemberBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":369,"author":{"gitID":"MuhdNurKamal"},"content":"                .withEmail(\"alice@email.com\").withMatricNumber(\"A1152241G\").build()));"},{"lineNumber":370,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":371,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":372,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":373,"author":{"gitID":"MuhdNurKamal"},"content":"    public void test_emailDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":374,"author":{"gitID":"MuhdNurKamal"},"content":"        // Zero keywords"},{"lineNumber":375,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate predicate \u003d new FieldContainsKeywordsPredicate(Collections.emptyList(),"},{"lineNumber":376,"author":{"gitID":"MuhdNurKamal"},"content":"                PREFIX_EMAIL);"},{"lineNumber":377,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(predicate.test(new MemberBuilder().withEmail(\"Alice@jojojoget.com\").build()));"},{"lineNumber":378,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":379,"author":{"gitID":"MuhdNurKamal"},"content":"        // Non-matching keyword"},{"lineNumber":380,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"Carol@caroling.com\"), PREFIX_EMAIL);"},{"lineNumber":381,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(predicate.test(new MemberBuilder().withEmail(\"AliceBob@Fett.com\").build()));"},{"lineNumber":382,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":383,"author":{"gitID":"MuhdNurKamal"},"content":"        // Keywords match name, phone and matric number, but does not match email"},{"lineNumber":384,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d"},{"lineNumber":385,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(Arrays.asList(\"12345\", \"Alice\", \"A1152241G\"), PREFIX_EMAIL);"},{"lineNumber":386,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(predicate.test(new MemberBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":387,"author":{"gitID":"MuhdNurKamal"},"content":"                .withEmail(\"Wonderland@lolo.com\").withMatricNumber(\"A1152241G\").build()));"},{"lineNumber":388,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":389,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":390,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":391,"author":{"gitID":"MuhdNurKamal"},"content":"    public void test_matricNumberDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":392,"author":{"gitID":"MuhdNurKamal"},"content":"        // Zero keywords"},{"lineNumber":393,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate predicate \u003d"},{"lineNumber":394,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(Collections.emptyList(), PREFIX_MATRIC_NUMBER);"},{"lineNumber":395,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(predicate.test(new MemberBuilder().withMatricNumber(\"A1234567H\").build()));"},{"lineNumber":396,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":397,"author":{"gitID":"MuhdNurKamal"},"content":"        // Non-matching keyword"},{"lineNumber":398,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"987\"), PREFIX_MATRIC_NUMBER);"},{"lineNumber":399,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(predicate.test(new MemberBuilder().withMatricNumber(\"A1234567A\").build()));"},{"lineNumber":400,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":401,"author":{"gitID":"MuhdNurKamal"},"content":"        // Keywords match name, phone and email, but does not match matric number"},{"lineNumber":402,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d"},{"lineNumber":403,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Alice\"),"},{"lineNumber":404,"author":{"gitID":"MuhdNurKamal"},"content":"                        PREFIX_MATRIC_NUMBER);"},{"lineNumber":405,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(predicate.test(new MemberBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":406,"author":{"gitID":"MuhdNurKamal"},"content":"                .withEmail(\"alice@email.com\").withMatricNumber(\"A1152241G\").build()));"},{"lineNumber":407,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":408,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":409,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":410,"author":{"gitID":"MuhdNurKamal"},"content":"    public void test_tagDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":411,"author":{"gitID":"MuhdNurKamal"},"content":"        // Zero keywords"},{"lineNumber":412,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate predicate \u003d new FieldContainsKeywordsPredicate(Collections.emptyList(),"},{"lineNumber":413,"author":{"gitID":"MuhdNurKamal"},"content":"                PREFIX_TAG);"},{"lineNumber":414,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(predicate.test(new MemberBuilder().withTags(\"Saikanger\").build()));"},{"lineNumber":415,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":416,"author":{"gitID":"MuhdNurKamal"},"content":"        // Non-matching keyword"},{"lineNumber":417,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"nerds\"), PREFIX_TAG);"},{"lineNumber":418,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(predicate.test(new MemberBuilder().withTags(\"geeks\", \"jocks\").build()));"},{"lineNumber":419,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":420,"author":{"gitID":"MuhdNurKamal"},"content":"        // Keywords match name, phone, email and matric number, but does not match tag"},{"lineNumber":421,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d"},{"lineNumber":422,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"12345\", \"alice@email.com\", \"A1152241G\"),"},{"lineNumber":423,"author":{"gitID":"MuhdNurKamal"},"content":"                        PREFIX_TAG);"},{"lineNumber":424,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(predicate.test(new MemberBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":425,"author":{"gitID":"MuhdNurKamal"},"content":"                .withEmail(\"alice@email.com\").withMatricNumber(\"A1152241G\").withTags(\"Lightbringer\").build()));"},{"lineNumber":426,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":427,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":428,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":429,"author":{"gitID":"MuhdNurKamal"},"content":"    public void test_groupDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":430,"author":{"gitID":"MuhdNurKamal"},"content":"        // Zero keywords"},{"lineNumber":431,"author":{"gitID":"MuhdNurKamal"},"content":"        FieldContainsKeywordsPredicate predicate \u003d new FieldContainsKeywordsPredicate(Collections.emptyList(),"},{"lineNumber":432,"author":{"gitID":"MuhdNurKamal"},"content":"                PREFIX_GROUP);"},{"lineNumber":433,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(predicate.test(new MemberBuilder().withGroup(\"SaikangRangers\").build()));"},{"lineNumber":434,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":435,"author":{"gitID":"MuhdNurKamal"},"content":"        // Non-matching keyword"},{"lineNumber":436,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d new FieldContainsKeywordsPredicate(Arrays.asList(\"Relativist\"), PREFIX_GROUP);"},{"lineNumber":437,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(predicate.test(new MemberBuilder().withGroup(\"QuantumMechanics\").build()));"},{"lineNumber":438,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":439,"author":{"gitID":"MuhdNurKamal"},"content":"        // Keywords match name, phone, email, matric number and tag, but does not match group"},{"lineNumber":440,"author":{"gitID":"MuhdNurKamal"},"content":"        predicate \u003d"},{"lineNumber":441,"author":{"gitID":"MuhdNurKamal"},"content":"                new FieldContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"12345\", \"alice@email.com\","},{"lineNumber":442,"author":{"gitID":"MuhdNurKamal"},"content":"                        \"A1152241G\", \"Lightbringer\"), PREFIX_GROUP);"},{"lineNumber":443,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(predicate.test(new MemberBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":444,"author":{"gitID":"MuhdNurKamal"},"content":"                .withEmail(\"alice@email.com\").withMatricNumber(\"A1152241G\").withTags(\"Lightbringer\")"},{"lineNumber":445,"author":{"gitID":"MuhdNurKamal"},"content":"                .withGroup(\"Garoupa\").build()));"},{"lineNumber":446,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":447,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":240,"amrut-prabhu":50,"-":157}},{"path":"src/main/java/seedu/club/ui/PollCard.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":" * An UI component that displays information of a {@code poll}."},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"public class PollCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final String FXML \u003d \"PollListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final String DESCRIPTION_TOTAL_VOTE_COUNT \u003d \"Total Vote Count: \";"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"    public final Poll poll;"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"    private AnswerListPanel answerListPanel;"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"    private HBox cardPane;"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"    private Label id;"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"    private Label question;"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"    private StackPane answerListPanelPlaceholder;"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"    private Label totalVoteCount;"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"     * A constructor to initialize PollCard using {@value FXML} with results"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"    public PollCard(Poll poll, int displayedIndex) {"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"        super(FXML);"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"        this.poll \u003d poll;"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"        question.setText(poll.getQuestion().toString());"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"        answerListPanel \u003d new AnswerListPanel(poll.getAnswers(), poll, true);"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"        answerListPanelPlaceholder.getChildren().add(answerListPanel.getRoot());"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"        totalVoteCount.setText(DESCRIPTION_TOTAL_VOTE_COUNT + poll.getTotalVoteCount());"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"     * A constructor to initialize PollCard using {@param fxml} without results"},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"    public PollCard(Poll poll, int displayedIndex, String fxml) {"},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"        super(fxml);"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":"        this.poll \u003d poll;"},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":"        question.setText(poll.getQuestion().toString());"},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":"        answerListPanel \u003d new AnswerListPanel(poll.getAnswers(), poll, false);"},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":"        answerListPanelPlaceholder.getChildren().add(answerListPanel.getRoot());"},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":"    public boolean equals(Object other) {"},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":"        // short circuit if same object"},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":"            return true;"},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"        // instanceof handles nulls"},{"lineNumber":73,"author":{"gitID":"MuhdNurKamal"},"content":"        if (!(other instanceof PollCard)) {"},{"lineNumber":74,"author":{"gitID":"MuhdNurKamal"},"content":"            return false;"},{"lineNumber":75,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":77,"author":{"gitID":"MuhdNurKamal"},"content":"        // state check"},{"lineNumber":78,"author":{"gitID":"MuhdNurKamal"},"content":"        PollCard card \u003d (PollCard) other;"},{"lineNumber":79,"author":{"gitID":"MuhdNurKamal"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":80,"author":{"gitID":"MuhdNurKamal"},"content":"                \u0026\u0026 poll.equals(card.poll);"},{"lineNumber":81,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":82}},{"path":"src/main/java/seedu/club/ui/RestrictedPollCard.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":" * An UI component that displays information of a {@code poll} excluding the results."},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"public class RestrictedPollCard extends PollCard {"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final String FXML \u003d \"RestrictedPollListCard.fxml\";"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"    public RestrictedPollCard(Poll poll, int displayedIndex) {"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"        super(poll, displayedIndex, FXML);"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":15}},{"path":"src/main/java/seedu/club/ui/PollListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.events.ui.HideResultsRequestEvent;"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.events.ui.ShowResultsRequestEvent;"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":" * Panel containing the list of polls."},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"public class PollListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final String FXML \u003d \"PollListPanel.fxml\";"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PollListPanel.class);"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"    private boolean isDisplayingPollResults;"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"    private ObservableList\u003cPoll\u003e pollList;"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"    private ListView\u003cPollCard\u003e pollListView;"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"    public PollListPanel(ObservableList\u003cPoll\u003e pollList) {"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"        this.pollList \u003d pollList;"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"        setPollListView();"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"    private void setPollListView() {"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"        ObservableList\u003cPollCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"                pollList, (poll) -\u003e {"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"                if (isDisplayingPollResults) {"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"                    return new PollCard(poll, pollList.indexOf(poll) + 1);"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"                } else {"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"                    return new RestrictedPollCard(poll, pollList.indexOf(poll) + 1);"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"                }"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"            });"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"        pollListView.setItems(mappedList);"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"        pollListView.setCellFactory(listView -\u003e new PollListViewCell());"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"     * Shows results of polls"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"    private void showPollResults() {"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"        if (!isDisplayingPollResults) {"},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"            isDisplayingPollResults \u003d true;"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":"            setPollListView();"},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":"     * Hides results of polls"},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":"    private void hidePollResults() {"},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":"        if (isDisplayingPollResults) {"},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":"            isDisplayingPollResults \u003d false;"},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":"            setPollListView();"},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":"    @Subscribe"},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"    private void handleShowResultsEvent(ShowResultsRequestEvent event) {"},{"lineNumber":73,"author":{"gitID":"MuhdNurKamal"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":74,"author":{"gitID":"MuhdNurKamal"},"content":"        showPollResults();"},{"lineNumber":75,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":77,"author":{"gitID":"MuhdNurKamal"},"content":"    @Subscribe"},{"lineNumber":78,"author":{"gitID":"MuhdNurKamal"},"content":"    private void handleHideResultsEvent(HideResultsRequestEvent event) {"},{"lineNumber":79,"author":{"gitID":"MuhdNurKamal"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":80,"author":{"gitID":"MuhdNurKamal"},"content":"        hidePollResults();"},{"lineNumber":81,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":83,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"MuhdNurKamal"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PollCard}."},{"lineNumber":85,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"MuhdNurKamal"},"content":"    class PollListViewCell extends ListCell\u003cPollCard\u003e {"},{"lineNumber":87,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":88,"author":{"gitID":"MuhdNurKamal"},"content":"        @Override"},{"lineNumber":89,"author":{"gitID":"MuhdNurKamal"},"content":"        protected void updateItem(PollCard poll, boolean empty) {"},{"lineNumber":90,"author":{"gitID":"MuhdNurKamal"},"content":"            super.updateItem(poll, empty);"},{"lineNumber":91,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":92,"author":{"gitID":"MuhdNurKamal"},"content":"            if (empty || poll \u003d\u003d null) {"},{"lineNumber":93,"author":{"gitID":"MuhdNurKamal"},"content":"                setGraphic(null);"},{"lineNumber":94,"author":{"gitID":"MuhdNurKamal"},"content":"                setText(null);"},{"lineNumber":95,"author":{"gitID":"MuhdNurKamal"},"content":"            } else {"},{"lineNumber":96,"author":{"gitID":"MuhdNurKamal"},"content":"                setGraphic(poll.getRoot());"},{"lineNumber":97,"author":{"gitID":"MuhdNurKamal"},"content":"            }"},{"lineNumber":98,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":100}},{"path":"src/main/java/seedu/club/ui/StatusBarFooter.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.model.ClubBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Used to generate time stamps."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * TODO: change clock to an instance variable."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * We leave it as a static variable because manual dependency injection"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * will require passing down the clock reference all the way from MainApp,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * but it should be easier once we have factories/DI frameworks."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static Clock clock \u003d Clock.systemDefaultZone();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private StatusBar syncStatus;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private StatusBar saveLocationStatus;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public StatusBarFooter(String saveLocation) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        setSaveLocation(\"./\" + saveLocation);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Sets the clock used to determine the current time."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static void setClock(Clock clock) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        StatusBarFooter.clock \u003d clock;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Returns the clock currently in use."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static Clock getClock() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return clock;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private void setSaveLocation(String location) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void setSyncStatus(String status) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.syncStatus.setText(status));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":75,"author":{"gitID":"amrut-prabhu"},"content":"    public void handleClubBookChangedEvent(ClubBookChangedEvent abce) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        long now \u003d clock.millis();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String lastUpdated \u003d new Date(now).toString();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":4,"-":77}},{"path":"src/main/java/seedu/club/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.Config;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.GuiSettings;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.Logic;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"    private MemberListPanel memberListPanel;"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"    private PollListPanel pollListPanel;"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"    private TaskListPanel taskListPanel;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"    private StackPane memberListPanelPlaceholder;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":"    private StackPane pollListPanelPlaceholder;"},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"    private StackPane taskListPanelPlaceholder;"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":101,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":102,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":103,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":104,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":105,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":106,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":107,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":108,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":109,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":110,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":111,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":112,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":113,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":114,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanel();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"amrut-prabhu"},"content":"        memberListPanel \u003d new MemberListPanel(logic.getFilteredMemberList());"},{"lineNumber":131,"author":{"gitID":"amrut-prabhu"},"content":"        memberListPanelPlaceholder.getChildren().add(memberListPanel.getRoot());"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"MuhdNurKamal"},"content":"        pollListPanel \u003d new PollListPanel(logic.getFilteredPollList());"},{"lineNumber":134,"author":{"gitID":"MuhdNurKamal"},"content":"        pollListPanelPlaceholder.getChildren().add(pollListPanel.getRoot());"},{"lineNumber":135,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":136,"author":{"gitID":"yash-chowdhary"},"content":"        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"},{"lineNumber":137,"author":{"gitID":"yash-chowdhary"},"content":"        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"},{"lineNumber":138,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"amrut-prabhu"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getClubBookFilePath());"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":171,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":174,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":192,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"amrut-prabhu"},"content":"    public MemberListPanel getMemberListPanel() {"},{"lineNumber":199,"author":{"gitID":"amrut-prabhu"},"content":"        return this.memberListPanel;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"yash-chowdhary"},"content":"    public TaskListPanel getTaskListPanel() {"},{"lineNumber":203,"author":{"gitID":"yash-chowdhary"},"content":"        return this.taskListPanel;"},{"lineNumber":204,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":7,"amrut-prabhu":15,"yash-chowdhary":11,"-":182}},{"path":"src/main/java/seedu/club/ui/CompressedMemberCard.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":" * An UI component that displays compressed information of a {@code member}."},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"public class CompressedMemberCard extends MemberCard {"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final String FXML \u003d \"CompressedMemberListCard.fxml\";"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"    public CompressedMemberCard(Member member, int displayedIndex) {"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"        super(member, displayedIndex, FXML);"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"        // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"            return true;"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"        // instanceof handles nulls"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"        if (!(other instanceof CompressedMemberCard)) {"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"            return false;"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"        // state check"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"        CompressedMemberCard card \u003d (CompressedMemberCard) other;"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"        return getId().getText().equals(getId().getText())"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"                \u0026\u0026 member.equals(card.member);"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":41}},{"path":"src/main/java/seedu/club/ui/HelpWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Controller for a help page"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/UserGuide.html\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public HelpWindow(Stage root) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super(FXML, root);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        browser.getEngine().load(userGuideUrl);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public HelpWindow() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this(new Stage());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Shows the help window."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @throws IllegalStateException"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * \u003cul\u003e"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void show() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        logger.fine(\"Showing help page about the application.\");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        getRoot().show();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":2,"-":62}},{"path":"src/main/java/seedu/club/ui/ResultDisplay.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.beans.property.StringProperty;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the header of the application."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private TextArea resultDisplay;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public ResultDisplay() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        resultDisplay.textProperty().bind(displayed);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e displayed.setValue(event.message));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":3,"-":38}},{"path":"src/main/java/seedu/club/ui/AnswerCard.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import javafx.scene.control.ProgressBar;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Answer;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":" * A UI component that displays information of an {@code answer}."},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"public class AnswerCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final String FXML \u003d \"AnswerListCard.fxml\";"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final String DESCRIPTION_VOTE_COUNT \u003d \"Vote Count: \";"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final String PERCENTAGE_SYMBOL \u003d \"%\";"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"    private final int totalVoteCount;"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"    private Label answerValue;"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"    private Label choice;"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"    private Label voteCount;"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"    private ProgressBar votePercentageBar;"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"    private Label votePercentage;"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"     * A constructor to initialize AnswerCard using {@value FXML} with results"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"    public AnswerCard(Answer answer, int displayedIndex, int totalVoteCount) {"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"        super(FXML);"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"        this.totalVoteCount \u003d totalVoteCount;"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"        choice.setText(displayedIndex + \". \");"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"        answerValue.setText(answer.getValue());"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"        voteCount.setText(DESCRIPTION_VOTE_COUNT + answer.getVoteCount());"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"        setVotePercentage(answer);"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"     * A constructor to initialize AnswerCard using without results"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"     * @param fxml file configure layout of this AnswerCard"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"    public AnswerCard(Answer answer, int displayedIndex, int totalVoteCount, String fxml) {"},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"        super(fxml);"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"        this.totalVoteCount \u003d totalVoteCount;"},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"        choice.setText(displayedIndex + \". \");"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"        answerValue.setText(answer.getValue());"},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"    private void setVotePercentage(Answer answer) {"},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":"        int voteCount \u003d answer.getVoteCount();"},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":"        double voteFraction \u003d totalVoteCount \u003d\u003d 0"},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":"                ? 0 : ((double) voteCount) / totalVoteCount;"},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":"        votePercentageBar.setProgress(voteFraction);"},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":"        votePercentage.setText((Math.round(voteFraction * 1000)) / 10 + PERCENTAGE_SYMBOL);"},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":"    public boolean equals(Object other) {"},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":"        // short circuit if same object"},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"            return true;"},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":73,"author":{"gitID":"MuhdNurKamal"},"content":"        // instanceof handles nulls"},{"lineNumber":74,"author":{"gitID":"MuhdNurKamal"},"content":"        if (!(other instanceof AnswerCard)) {"},{"lineNumber":75,"author":{"gitID":"MuhdNurKamal"},"content":"            return false;"},{"lineNumber":76,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":78,"author":{"gitID":"MuhdNurKamal"},"content":"        // state check"},{"lineNumber":79,"author":{"gitID":"MuhdNurKamal"},"content":"        AnswerCard card \u003d (AnswerCard) other;"},{"lineNumber":80,"author":{"gitID":"MuhdNurKamal"},"content":"        return choice.getText().equals(card.choice.getText())"},{"lineNumber":81,"author":{"gitID":"MuhdNurKamal"},"content":"                \u0026\u0026 answerValue.equals(card.answerValue);"},{"lineNumber":82,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":83}},{"path":"src/main/java/seedu/club/ui/UiPart.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.MainApp;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.EventsCenter;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.BaseEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."},{"lineNumber":15,"author":{"gitID":"-"},"content":" * It contains a scene graph with a root node of type {@code T}."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public abstract class UiPart\u003cT\u003e {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /** Resource folder where FXML files are stored. */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public UiPart(URL fxmlFileUrl) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        loadFxmlFile(fxmlFileUrl, null);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @see #UiPart(URL)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public UiPart(String fxmlFileName) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL and root object."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public UiPart(URL fxmlFileUrl, T root) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        loadFxmlFile(fxmlFileUrl, root);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @see #UiPart(URL, T)"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public UiPart(String fxmlFileName, T root) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName), root);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Returns the root object of the scene graph of this UiPart."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public T getRoot() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return fxmlLoader.getRoot();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Raises the event via {@link EventsCenter#post(BaseEvent)}"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @param event"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    protected void raise(BaseEvent event) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(event);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Registers the object as an event handler at the {@link EventsCenter}"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * @param handler usually {@code this}"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    protected void registerAsAnEventHandler(Object handler) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(handler);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Loads the object hierarchy from a FXML document."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @param location Location of the FXML document."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * @param root Specifies the root of the object hierarchy."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private void loadFxmlFile(URL location, T root) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        requireNonNull(location);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        fxmlLoader.setLocation(location);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        fxmlLoader.setController(this);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        fxmlLoader.setRoot(root);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            fxmlLoader.load();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            throw new AssertionError(e);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private static URL getFxmlFileUrl(String fxmlFileName) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        requireNonNull(fxmlFileName);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return requireNonNull(fxmlFileUrl);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":4,"-":102}},{"path":"src/main/java/seedu/club/commons/core/GuiSettings.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.awt.Point;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.Serializable;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * A Serializable class that contains the GUI settings."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class GuiSettings implements Serializable {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private static final double DEFAULT_WIDTH \u003d 740;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Double windowWidth;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private Double windowHeight;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private Point windowCoordinates;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public GuiSettings() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        this.windowWidth \u003d DEFAULT_WIDTH;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        this.windowHeight \u003d DEFAULT_HEIGHT;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        this.windowCoordinates \u003d null; // null represent no coordinates"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public GuiSettings(Double windowWidth, Double windowHeight, int xPosition, int yPosition) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.windowWidth \u003d windowWidth;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.windowHeight \u003d windowHeight;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.windowCoordinates \u003d new Point(xPosition, yPosition);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public Double getWindowWidth() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return windowWidth;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public Double getWindowHeight() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return windowHeight;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public Point getWindowCoordinates() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return windowCoordinates;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (!(other instanceof GuiSettings)) { //this handles null as well."},{"lineNumber":49,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return Objects.equals(windowWidth, o.windowWidth)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(windowHeight, o.windowHeight)"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates.x, o.windowCoordinates.x)"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates.y, o.windowCoordinates.y);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"Width : \" + windowWidth + \"\\n\");"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        sb.append(\"Height : \" + windowHeight + \"\\n\");"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        sb.append(\"Position : \" + windowCoordinates);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":72}},{"path":"src/main/java/seedu/club/commons/core/ComponentManager.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Base class for *Manager classes"},{"lineNumber":7,"author":{"gitID":"-"},"content":" *"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Registers the class\u0027 event handlers in eventsCenter"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public abstract class ComponentManager {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    protected EventsCenter eventsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Uses default {@link EventsCenter}"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public ComponentManager() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        this(EventsCenter.getInstance());"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public ComponentManager(EventsCenter eventsCenter) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        this.eventsCenter \u003d eventsCenter;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        eventsCenter.registerHandler(this);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    protected void raise(BaseEvent event) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        eventsCenter.post(event);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":2,"-":26}},{"path":"src/main/java/seedu/club/ui/MemberCard.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.InputStream;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import javafx.scene.image.Image;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.MainApp;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":" * An UI component that displays information of a {@code member}."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"public class MemberCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"    private static final String FXML \u003d \"MemberListCard.fxml\";"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"    private static final String[] TAG_COLORS \u003d {\"red\", \"yellow\", \"grey\", \"brown\", \"pink\", \"white\","},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"        \"orange\", \"blue\", \"violet\"};"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"    //@@author amrut-prabhu"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"    private static final Integer PHOTO_WIDTH \u003d 90;"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"    private static final Integer PHOTO_HEIGHT \u003d 120;"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"    private static final String DEFAULT_PHOTO_PATH \u003d \"/images/defaultProfilePhoto.png\";"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"    private static final String EMPTY_STRING \u003d \"\";"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"    //@@author"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"    public final Member member;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"    private Label matricNumber;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"    private Label group;"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":"    private ImageView profilePhoto;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"    public MemberCard(Member member, int displayedIndex) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":"        this.member \u003d member;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"        name.setText(member.getName().fullName);"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"        phone.setText(member.getPhone().value);"},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":"        matricNumber.setText(member.getMatricNumber().value);"},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":"        group.setText(member.getGroup().groupName);"},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"        email.setText(member.getEmail().value);"},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":"        setProfilePhoto(member);"},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"        createTags(member);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"    //@@author MuhdNurKamal"},{"lineNumber":73,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"MuhdNurKamal"},"content":"     * A constructor to initialize MemberCard using without matricNumber"},{"lineNumber":75,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":76,"author":{"gitID":"MuhdNurKamal"},"content":"     * @param fxml file configure layout of this MemberCard"},{"lineNumber":77,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"MuhdNurKamal"},"content":"    public MemberCard(Member member, int displayedIndex, String fxml) {"},{"lineNumber":79,"author":{"gitID":"MuhdNurKamal"},"content":"        super(fxml);"},{"lineNumber":80,"author":{"gitID":"MuhdNurKamal"},"content":"        this.member \u003d member;"},{"lineNumber":81,"author":{"gitID":"MuhdNurKamal"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":82,"author":{"gitID":"MuhdNurKamal"},"content":"        name.setText(member.getName().fullName);"},{"lineNumber":83,"author":{"gitID":"MuhdNurKamal"},"content":"        phone.setText(member.getPhone().value);"},{"lineNumber":84,"author":{"gitID":"MuhdNurKamal"},"content":"        group.setText(member.getGroup().groupName);"},{"lineNumber":85,"author":{"gitID":"MuhdNurKamal"},"content":"        email.setText(member.getEmail().value);"},{"lineNumber":86,"author":{"gitID":"MuhdNurKamal"},"content":"        setProfilePhoto(member);"},{"lineNumber":87,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":89,"author":{"gitID":"amrut-prabhu"},"content":"    //@@author amrut-prabhu"},{"lineNumber":90,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"amrut-prabhu"},"content":"     * Sets the profile photo of {@code member} to the displayed photo shape."},{"lineNumber":92,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"amrut-prabhu"},"content":"    private void setProfilePhoto(Member member) {"},{"lineNumber":94,"author":{"gitID":"amrut-prabhu"},"content":"        Image photo;"},{"lineNumber":95,"author":{"gitID":"amrut-prabhu"},"content":"        String photoPath \u003d member.getProfilePhoto().getPhotoPath();"},{"lineNumber":96,"author":{"gitID":"amrut-prabhu"},"content":"        if (photoPath.equals(EMPTY_STRING)) {"},{"lineNumber":97,"author":{"gitID":"amrut-prabhu"},"content":"            photo \u003d new Image(MainApp.class.getResourceAsStream(DEFAULT_PHOTO_PATH), PHOTO_WIDTH, PHOTO_HEIGHT,"},{"lineNumber":98,"author":{"gitID":"amrut-prabhu"},"content":"                    false, true);"},{"lineNumber":99,"author":{"gitID":"amrut-prabhu"},"content":"        } else {"},{"lineNumber":100,"author":{"gitID":"amrut-prabhu"},"content":"            try {"},{"lineNumber":101,"author":{"gitID":"amrut-prabhu"},"content":"                InputStream photoStream \u003d MainApp.class.getResourceAsStream(photoPath);"},{"lineNumber":102,"author":{"gitID":"amrut-prabhu"},"content":"                photo \u003d new Image(\"file:\" + photoPath, PHOTO_WIDTH, PHOTO_HEIGHT, false, false);"},{"lineNumber":103,"author":{"gitID":"amrut-prabhu"},"content":"            } catch (NullPointerException npe) {"},{"lineNumber":104,"author":{"gitID":"amrut-prabhu"},"content":"                //Different path (instead of DEFAULT_PHOTO_PATH) used for testing purposes: indicates exception"},{"lineNumber":105,"author":{"gitID":"amrut-prabhu"},"content":"                photo \u003d new Image(MainApp.class.getResourceAsStream(DEFAULT_PHOTO_PATH), PHOTO_WIDTH, PHOTO_HEIGHT,"},{"lineNumber":106,"author":{"gitID":"amrut-prabhu"},"content":"                        false, true);"},{"lineNumber":107,"author":{"gitID":"amrut-prabhu"},"content":"            }"},{"lineNumber":108,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"amrut-prabhu"},"content":"        profilePhoto.setImage(photo);"},{"lineNumber":110,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":112,"author":{"gitID":"yash-chowdhary"},"content":"    //@@author yash-chowdhary"},{"lineNumber":113,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"yash-chowdhary"},"content":"     * Creates the labels for tags by randomly generating a color from `TAG_COLORS`"},{"lineNumber":115,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"yash-chowdhary"},"content":"    private void createTags(Member member) {"},{"lineNumber":117,"author":{"gitID":"yash-chowdhary"},"content":"        member.getTags().forEach(tag -\u003e {"},{"lineNumber":118,"author":{"gitID":"yash-chowdhary"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":119,"author":{"gitID":"yash-chowdhary"},"content":"            tagLabel.getStyleClass().add(returnColor(tag.tagName));"},{"lineNumber":120,"author":{"gitID":"yash-chowdhary"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":121,"author":{"gitID":"yash-chowdhary"},"content":"        });"},{"lineNumber":122,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":124,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns a color chosen uniformly at random from TAG_COLORS"},{"lineNumber":126,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"yash-chowdhary"},"content":"    private String returnColor(String tag) {"},{"lineNumber":128,"author":{"gitID":"yash-chowdhary"},"content":"        return TAG_COLORS[Math.abs(tag.hashCode()) % TAG_COLORS.length];"},{"lineNumber":129,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"yash-chowdhary"},"content":"    //@@author"},{"lineNumber":131,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":140,"author":{"gitID":"amrut-prabhu"},"content":"        if (!(other instanceof MemberCard)) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":145,"author":{"gitID":"amrut-prabhu"},"content":"        MemberCard card \u003d (MemberCard) other;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":147,"author":{"gitID":"amrut-prabhu"},"content":"                \u0026\u0026 member.equals(card.member);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":150,"author":{"gitID":"MuhdNurKamal"},"content":"    protected Label getId() {"},{"lineNumber":151,"author":{"gitID":"MuhdNurKamal"},"content":"        return id;"},{"lineNumber":152,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":24,"amrut-prabhu":57,"yash-chowdhary":21,"-":51}},{"path":"src/main/java/seedu/club/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command!\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_INVALID_MEMBER_FORMAT \u003d \"Invalid member format! \\n%1$s\";"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX \u003d \"The member index provided is invalid.\";"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid.\";"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_MEMBERS_LISTED_OVERVIEW \u003d \"%1$d members listed!\";"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_NON_EXISTENT_GROUP \u003d \"The group \\\u0027%1$s\\\u0027 does not exist in the Club Book.\";"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_MANDATORY_GROUP \u003d \"The group \\\u0027%1$s\\\u0027 cannot be deleted as \""},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"            + \"it is a mandatory group.\";"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String MESSAGE_INVALID_POLL_DISPLAYED_INDEX \u003d \"The poll index provided is invalid\";"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_INVALID_ANSWER_DISPLAYED_INDEX \u003d \"The answer index provided is invalid.\";"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_INVALID_PHOTO_PATH \u003d \"Unable to read profile photo from the path: %1$s\";"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_SAME_PHOTO_PATH \u003d \"Profile photo path entered is same as the current photo\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_REQUIRE_LOG_IN \u003d \"Please log in to Club Connect.\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_REQUIRE_SIGN_UP \u003d \"Please sign up to use Club Connect\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_REQUIRE_EXCO_LOG_IN \u003d \"You need to be an exco to use these features\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_REQUIRE_LOG_OUT \u003d \"Please logout before using the login feature\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":1,"amrut-prabhu":5,"yash-chowdhary":7,"-":12}},{"path":"src/main/java/seedu/club/ui/AnswerListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import javafx.scene.Node;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Answer;"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":" * Panel containing the list of answers."},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"public class AnswerListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final String FXML \u003d \"AnswerListPanel.fxml\";"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(AnswerListPanel.class);"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"    private final Poll poll;"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"    private boolean isShowingResults;"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"    private VBox answersPlaceholder;"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"    public AnswerListPanel(ObservableList\u003cAnswer\u003e answerList, Poll poll, boolean isShowingResults) {"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"        this.poll \u003d poll;"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"        this.isShowingResults \u003d isShowingResults;"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"        setAnswersPlaceholder(answerList);"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"    private void setAnswersPlaceholder(ObservableList\u003cAnswer\u003e answerList) {"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"        int totalVoteCount \u003d poll.getTotalVoteCount();"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"        ObservableList\u003cNode\u003e children \u003d answersPlaceholder.getChildren();"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"        if (isShowingResults) {"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"            for (int index \u003d 0; index \u003c answerList.size(); index++) {"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"                children.add(new AnswerCard(answerList.get(index), index + 1, totalVoteCount).getRoot());"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"            }"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"        } else {"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"            for (int index \u003d 0; index \u003c answerList.size(); index++) {"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"                children.add(new RestrictedAnswerCard(answerList.get(index), index + 1, totalVoteCount).getRoot());"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"            }"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":46}},{"path":"src/main/java/seedu/club/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"    private String appTitle \u003d \"Club Connect\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":2,"-":70}},{"path":"src/main/java/seedu/club/commons/core/LogsCenter.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.ConsoleHandler;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.FileHandler;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Handler;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.SimpleFormatter;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.BaseEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Configures and manages loggers and handlers, including their logging level"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,"},{"lineNumber":17,"author":{"gitID":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"},{"lineNumber":18,"author":{"gitID":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class LogsCenter {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"    private static final String LOG_FILE \u003d \"clubbook.log\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static FileHandler fileHandler;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static ConsoleHandler consoleHandler;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * is requested again from the LogsCenter."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static void init(Config config) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Creates a logger with the given name."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static Logger getLogger(String name) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        logger.setUseParentHandlers(false);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        removeHandlers(logger);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        addConsoleHandler(logger);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        addFileHandler(logger);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return Logger.getLogger(name);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Creates a Logger for the given class name."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        if (clazz \u003d\u003d null) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            return Logger.getLogger(\"\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return getLogger(clazz.getSimpleName());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Creates the {@code consoleHandler} if it is null."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private static void addConsoleHandler(Logger logger) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (consoleHandler \u003d\u003d null) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            consoleHandler \u003d createConsoleHandler();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        logger.addHandler(consoleHandler);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Remove all the handlers from {@code logger}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private static void removeHandlers(Logger logger) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Handler[] handlers \u003d logger.getHandlers();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        for (Handler handler : handlers) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            logger.removeHandler(handler);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Creates {@code fileHandler} if it is null."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private static void addFileHandler(Logger logger) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            if (fileHandler \u003d\u003d null) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                fileHandler \u003d createFileHandler();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            logger.addHandler(fileHandler);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Creates a {@code FileHandler} for the log file."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * @throws IOException if there are problems opening the file."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        fileHandler.setLevel(currentLogLevel);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return fileHandler;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return consoleHandler;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Decorates the given string to create a log message suitable for logging event handling methods."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return \"---[Event handled][\" + e + \"]\" + message;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * @see #getEventHandlingLogMessage(BaseEvent, String)"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public static String getEventHandlingLogMessage(BaseEvent e) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return getEventHandlingLogMessage(e, \"\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":3,"-":127}},{"path":"src/main/java/seedu/club/commons/core/EventsCenter.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.EventBus;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.BaseEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Manages the event dispatching of the app."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class EventsCenter {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(EventsCenter.class);"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static EventsCenter instance;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private final EventBus eventBus;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private EventsCenter() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        eventBus \u003d new EventBus();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static EventsCenter getInstance() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        if (instance \u003d\u003d null) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            instance \u003d new EventsCenter();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        return instance;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static void clearSubscribers() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        instance \u003d null;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void registerHandler(Object handler) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        eventBus.register(handler);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Posts an event to the event bus."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public \u003cE extends BaseEvent\u003e EventsCenter post(E event) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        logger.info(\"------[Event Posted] \" + event.getClass().getCanonicalName() + \": \" + event.toString());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        eventBus.post(event);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":2,"-":43}},{"path":"src/main/java/seedu/club/commons/core/Version.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a version with major, minor and patch number"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class Version implements Comparable\u003cVersion\u003e {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final int major;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final int minor;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final int patch;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final boolean isEarlyAccess;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.major \u003d major;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.minor \u003d minor;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.patch \u003d patch;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.isEarlyAccess \u003d isEarlyAccess;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public int getMajor() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return major;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public int getMinor() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return minor;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public int getPatch() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return patch;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public boolean isEarlyAccess() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return isEarlyAccess;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Parses a version number string in the format V1.2.3."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @param versionString version number string"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @return a Version object"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @JsonCreator"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static Version fromString(String versionString) throws IllegalArgumentException {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (!versionMatcher.find()) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return new Version(Integer.parseInt(versionMatcher.group(1)),"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                Integer.parseInt(versionMatcher.group(2)),"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                Integer.parseInt(versionMatcher.group(3)),"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                versionMatcher.group(4) \u003d\u003d null ? false : true);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @JsonValue"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public int compareTo(Version other) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        if (this.major !\u003d other.major) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return this.major - other.major;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        if (this.minor !\u003d other.minor) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return this.minor - other.minor;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (this.patch !\u003d other.patch) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return this.patch - other.patch;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        if (this.isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return 0;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        if (this.isEarlyAccess) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return -1;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return 1;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d null) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        if (!(obj instanceof Version)) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        final Version other \u003d (Version) obj;"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return this.compareTo(other) \u003d\u003d 0;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        if (!isEarlyAccess) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            hash \u003d \"1\" + hash;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return Integer.parseInt(hash);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":112}},{"path":"src/main/java/seedu/club/ui/MemberListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.events.ui.CompressMembersRequestEvent;"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.events.ui.DecompressMembersRequestEvent;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.ui.MemberPanelSelectionChangedEvent;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":" * Panel containing the list of members."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"public class MemberListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"    private static final String FXML \u003d \"MemberListPanel.fxml\";"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(MemberListPanel.class);"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"    private boolean isDisplayingCompressedMembers;"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"    private ObservableList\u003cMember\u003e memberList;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"    private ListView\u003cMemberCard\u003e memberListView;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"    public MemberListPanel(ObservableList\u003cMember\u003e memberList) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"        this.memberList \u003d memberList;"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"        isDisplayingCompressedMembers \u003d false;"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"        setConnections(memberList);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"    //@@author MuhdNurKamal"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"     * Compresses view of member details."},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"    private void compressMemberCards() {"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"        if (!isDisplayingCompressedMembers) {"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"            isDisplayingCompressedMembers \u003d true;"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"            setMemberListView(memberList);"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"     * Decompresses view of member details."},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"    private void decompressMemberCards() {"},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"        if (isDisplayingCompressedMembers) {"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":"            isDisplayingCompressedMembers \u003d false;"},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"            setMemberListView(memberList);"},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":"    //@@author"},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"    private void setConnections(ObservableList\u003cMember\u003e memberList) {"},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":"        setMemberListView(memberList);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":"    private void setMemberListView(ObservableList\u003cMember\u003e memberList) {"},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":"        ObservableList\u003cMemberCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"                memberList, (member) -\u003e {"},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":"                if (isDisplayingCompressedMembers) {"},{"lineNumber":72,"author":{"gitID":"amrut-prabhu"},"content":"                    return new CompressedMemberCard(member, memberList.indexOf(member) + 1);"},{"lineNumber":73,"author":{"gitID":"MuhdNurKamal"},"content":"                } else {"},{"lineNumber":74,"author":{"gitID":"MuhdNurKamal"},"content":"                    return new MemberCard(member, memberList.indexOf(member) + 1);"},{"lineNumber":75,"author":{"gitID":"MuhdNurKamal"},"content":"                }"},{"lineNumber":76,"author":{"gitID":"MuhdNurKamal"},"content":"            });"},{"lineNumber":77,"author":{"gitID":"amrut-prabhu"},"content":"        memberListView.setItems(mappedList);"},{"lineNumber":78,"author":{"gitID":"amrut-prabhu"},"content":"        memberListView.setCellFactory(listView -\u003e new MemberListViewCell());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":82,"author":{"gitID":"amrut-prabhu"},"content":"        memberListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":85,"author":{"gitID":"amrut-prabhu"},"content":"                        logger.fine(\"Selection in member list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":86,"author":{"gitID":"amrut-prabhu"},"content":"                        raise(new MemberPanelSelectionChangedEvent(newValue));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                });"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"amrut-prabhu"},"content":"     * Scrolls to the {@code MemberCard} at the {@code index} and selects it."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":96,"author":{"gitID":"amrut-prabhu"},"content":"            memberListView.scrollTo(index);"},{"lineNumber":97,"author":{"gitID":"amrut-prabhu"},"content":"            memberListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"amrut-prabhu"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code MemberCard}."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"amrut-prabhu"},"content":"    class MemberListViewCell extends ListCell\u003cMemberCard\u003e {"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":113,"author":{"gitID":"amrut-prabhu"},"content":"        protected void updateItem(MemberCard member, boolean empty) {"},{"lineNumber":114,"author":{"gitID":"amrut-prabhu"},"content":"            super.updateItem(member, empty);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"amrut-prabhu"},"content":"            if (empty || member \u003d\u003d null) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                setGraphic(null);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                setText(null);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":120,"author":{"gitID":"amrut-prabhu"},"content":"                setGraphic(member.getRoot());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"MuhdNurKamal"},"content":"    //@@author MuhdNurKamal"},{"lineNumber":125,"author":{"gitID":"MuhdNurKamal"},"content":"    @Subscribe"},{"lineNumber":126,"author":{"gitID":"MuhdNurKamal"},"content":"    private void handleCompressMembersEvent(CompressMembersRequestEvent event) {"},{"lineNumber":127,"author":{"gitID":"MuhdNurKamal"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":128,"author":{"gitID":"MuhdNurKamal"},"content":"        compressMemberCards();"},{"lineNumber":129,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":131,"author":{"gitID":"MuhdNurKamal"},"content":"    @Subscribe"},{"lineNumber":132,"author":{"gitID":"MuhdNurKamal"},"content":"    private void handledeCompressMembersEvent(DecompressMembersRequestEvent event) {"},{"lineNumber":133,"author":{"gitID":"MuhdNurKamal"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":134,"author":{"gitID":"MuhdNurKamal"},"content":"        decompressMemberCards();"},{"lineNumber":135,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":137,"author":{"gitID":"MuhdNurKamal"},"content":"    public boolean isDisplayingCompressedMembers() {"},{"lineNumber":138,"author":{"gitID":"MuhdNurKamal"},"content":"        return isDisplayingCompressedMembers;"},{"lineNumber":139,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"MuhdNurKamal"},"content":"    //@@author"},{"lineNumber":141,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":54,"amrut-prabhu":28,"-":59}},{"path":"src/main/java/seedu/club/ui/TaskListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.ui;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.commons.events.ui.TaskPanelSelectionChangedEvent;"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":" * Panel containing tasks to be completed by the members."},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"public class TaskListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"    private static final String FXML \u003d \"TaskListPanel.fxml\";"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"    private static final String DIRECTORY_PATH \u003d \"view/\";"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"    private static final String TASK_YET_TO_BEGIN_CSS \u003d DIRECTORY_PATH + \"TaskYetToBegin.css\";"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"    private static final String TASK_IN_PROGRESS_CSS \u003d DIRECTORY_PATH + \"TaskInProgress.css\";"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    private static final String TASK_COMPLETED_CSS \u003d DIRECTORY_PATH + \"TaskCompleted.css\";"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"    private ListView\u003cTaskCard\u003e taskListView;"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"        setConnections(taskList);"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"    public void setConnections(ObservableList\u003cTask\u003e taskList) {"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"        setMemberListView(taskList);"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"        taskListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"                        logger.fine(\"Selection in task list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"                        raise(new TaskPanelSelectionChangedEvent(newValue));"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"                    }"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"                });"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"    public void setMemberListView(ObservableList\u003cTask\u003e taskList) {"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"        ObservableList\u003cTaskCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"                taskList, (task) -\u003e new TaskCard(task, taskList.indexOf(task) + 1));"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"        taskListView.setItems(mappedList);"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"     * Scrolls to the {@code TaskCard} at {@code index} and selects it."},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"    private void scrollTo(int index) {"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"            taskListView.scrollTo(index);"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"            taskListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"        });"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code TaskCard}."},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"    class TaskListViewCell extends ListCell\u003cTaskCard\u003e {"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"        protected void updateItem(TaskCard task, boolean empty) {"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"            super.updateItem(task, empty);"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"            if (empty || task \u003d\u003d null) {"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"                setGraphic(null);"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"                setText(null);"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"                return;"},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":"            this.getStylesheets().clear();"},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"            logger.info(\"Status: \" + task.task.getStatus().getStatus());"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":"            if (task.isTaskYetToBegin()) {"},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":"                logger.info(\"In here\");"},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":"                this.getStylesheets().add(TASK_YET_TO_BEGIN_CSS);"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":"            } else if (task.isTaskInProgress()) {"},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":"                this.getStylesheets().add(TASK_IN_PROGRESS_CSS);"},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":"            } else if (task.isTaskCompleted()) {"},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":"                this.getStylesheets().add(TASK_COMPLETED_CSS);"},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":94,"author":{"gitID":"yash-chowdhary"},"content":"            setGraphic(task.getRoot());"},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":97}},{"path":"src/main/java/seedu/club/commons/core/index/Index.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.core.index;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Represents a zero-based or one-based index."},{"lineNumber":5,"author":{"gitID":"-"},"content":" *"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class Index {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private int zeroBasedIndex;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * {@link Index#fromOneBased(int)}."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private Index(int zeroBasedIndex) {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        if (zeroBasedIndex \u003c 0) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            throw new IndexOutOfBoundsException();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public int getZeroBased() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return zeroBasedIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public int getOneBased() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return zeroBasedIndex + 1;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Creates a new {@code Index} using a zero-based index."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return new Index(zeroBasedIndex);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Creates a new {@code Index} using a one-based index."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return new Index(oneBasedIndex - 1);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                || (other instanceof Index // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":53}},{"path":"src/main/java/seedu/club/commons/util/XmlUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBContext;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.Marshaller;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.Unmarshaller;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Helps with reading from and writing to XML files."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class XmlUtil {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns the xml data in the file as an object of the specified type."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @param file           Points to a valid xml file containing data that match the {@code classToConvert}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *                       Cannot be null."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @param classToConvert The class corresponding to the xml data."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     *                       Cannot be null."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @throws FileNotFoundException Thrown if the file is missing."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @throws JAXBException         Thrown if the file is empty or does not have the correct format."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @SuppressWarnings(\"unchecked\")"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e T getDataFromFile(File file, Class\u003cT\u003e classToConvert)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            throws FileNotFoundException, JAXBException {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        requireNonNull(file);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        requireNonNull(classToConvert);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        if (!FileUtil.isFileExists(file)) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            throw new FileNotFoundException(\"File not found : \" + file.getAbsolutePath());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        JAXBContext context \u003d JAXBContext.newInstance(classToConvert);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Unmarshaller um \u003d context.createUnmarshaller();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return ((T) um.unmarshal(file));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Saves the data in the file in xml format."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * @param file Points to a valid xml file containing data that match the {@code classToConvert}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     *             Cannot be null."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws FileNotFoundException Thrown if the file is missing."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @throws JAXBException         Thrown if there is an error during converting the data"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *                               into xml and writing to the file."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e void saveDataToFile(File file, T data) throws FileNotFoundException, JAXBException {"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        requireNonNull(file);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        requireNonNull(data);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (!file.exists()) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new FileNotFoundException(\"File not found : \" + file.getAbsolutePath());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        JAXBContext context \u003d JAXBContext.newInstance(data.getClass());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Marshaller m \u003d context.createMarshaller();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        m.marshal(data, file);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":69}},{"path":"src/main/java/seedu/club/commons/util/AppUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.MainApp;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * A container for App specific utility functions"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class AppUtil {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static Image getImage(String imagePath) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        requireNonNull(imagePath);"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @throws IllegalArgumentException if {@code condition} is false."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static void checkArgument(Boolean condition) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!condition) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static void checkArgument(Boolean condition, String errorMessage) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        if (!condition) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(errorMessage);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":2,"-":37}},{"path":"src/main/java/seedu/club/commons/util/ConfigUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.Config;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * A class for accessing the Config File."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class ConfigUtil {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static Optional\u003cConfig\u003e readConfig(String configFilePath) throws DataConversionException {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        return JsonUtil.readJsonFile(configFilePath, Config.class);"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static void saveConfig(Config config, String configFilePath) throws IOException {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        JsonUtil.saveJsonFile(config, configFilePath);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":3,"-":19}},{"path":"src/main/java/seedu/club/commons/util/JsonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.LogsCenter;"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.DataConversionException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Converts a Java object instance to JSON and vice versa"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class JsonUtil {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(File jsonFile, T objectToSerialize) throws IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(File jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throws IOException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @param filePath cannot be null."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("},{"lineNumber":58,"author":{"gitID":"-"},"content":"            String filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (!file.exists()) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            logger.info(\"Json file \"  + file + \" not found\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        T jsonFile;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(file, classOfObjectToDeserialize);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + file + \": \" + e);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return Optional.of(jsonFile);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Saves the Json object to the specified file."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * @param jsonFile cannot be null"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @param filePath cannot be null"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * @throws IOException if there was an error during writing to the file"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, String filePath) throws IOException {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        requireNonNull(jsonFile);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        serializeObjectToJsonFile(new File(filePath), jsonFile);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * @return The instance of T with the specified values in the JSON string"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return objectMapper.readValue(json, instanceClass);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * @param instance The T object to be converted into the JSON string"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * @return JSON data representation of the given class instance, in string"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Contains methods that retrieve logging level from serialized string."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            super(vc);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) throws IOException {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            return getLoggingLevel(value);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"         * Gets the logging level that matches loggingLevelString"},{"lineNumber":129,"author":{"gitID":"-"},"content":"         * \u003cp\u003e"},{"lineNumber":130,"author":{"gitID":"-"},"content":"         * Returns null if there are no matches"},{"lineNumber":131,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":132,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            return Level.parse(loggingLevelString);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        public Class\u003cLevel\u003e handledType() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            return Level.class;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":3,"-":140}},{"path":"src/main/java/seedu/club/commons/util/StringUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.StringWriter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Helper functions for handling strings."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class StringUtil {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     *   Ignores case, but a full word match is required."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @param sentence cannot be null"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        requireNonNull(sentence);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        requireNonNull(word);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        String preppedWord \u003d word.trim();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        String preppedSentence \u003d sentence;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        for (String wordInSentence: wordsInPreppedSentence) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            if (wordInSentence.equalsIgnoreCase(preppedWord)) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return false;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"    //@@author MuhdNurKamal"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"     * Returns true if the {@code sentence} contains the {@code word}."},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"     *   Ignores case and finds partial match."},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true (partial match)"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"ABCD\") \u003d\u003d false"},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"     * @param sentence cannot be null"},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"     * @param word cannot be null, cannot be empty, must be a single word"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"    public static boolean partiallyContainsWordIgnoreCase(String sentence, String word) {"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":"        requireNonNull(sentence);"},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"        requireNonNull(word);"},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":"        String preppedWord \u003d word.trim();"},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":"        return sentence.toLowerCase().contains(preppedWord.toLowerCase());"},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":"    //@@author"},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Returns a detailed message of the t, including the stack trace."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static String getDetails(Throwable t) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        requireNonNull(t);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        StringWriter sw \u003d new StringWriter();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Will return false for any other non-null string input"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code s} is null."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        requireNonNull(s);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            int value \u003d Integer.parseInt(s);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":25,"amrut-prabhu":2,"-":68}},{"path":"src/main/java/seedu/club/commons/util/CollectionUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Utility methods related to Collections"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class CollectionUtil {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /** @see #requireAllNonNull(Collection) */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static void requireAllNonNull(Object... items) {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        requireNonNull(items);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Stream.of(items).forEach(Objects::requireNonNull);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Throws NullPointerException if {@code items} or any element of {@code items} is null."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static void requireAllNonNull(Collection\u003c?\u003e items) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        requireNonNull(items);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        items.forEach(Objects::requireNonNull);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Returns true if {@code items} contain any elements that are non-null."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static boolean isAnyNonNull(Object... items) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Returns true if every element in a collection are unique by {@link Object#equals(Object)}."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static boolean elementsAreUnique(Collection\u003c?\u003e items) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        final Set\u003cObject\u003e testSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        for (Object item : items) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            final boolean itemAlreadyExists \u003d !testSet.add(item); // see Set documentation"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            if (itemAlreadyExists) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return true;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":50}},{"path":"src/main/java/seedu/club/commons/exceptions/DataConversionException.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Represents an error during conversion of data from one format to another"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class DataConversionException extends Exception {"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public DataConversionException(Exception cause) {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"        super(cause);"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":2,"-":10}},{"path":"src/main/java/seedu/club/commons/exceptions/DuplicateDataException.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Signals an error caused by duplicate data where there should be none."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public abstract class DuplicateDataException extends IllegalValueException {"},{"lineNumber":7,"author":{"gitID":"-"},"content":"    public DuplicateDataException(String message) {"},{"lineNumber":8,"author":{"gitID":"-"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":10,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":9}},{"path":"src/main/java/seedu/club/commons/exceptions/IllegalValueException.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Signals that some given data does not fulfill some constraints."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class IllegalValueException extends Exception {"},{"lineNumber":7,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":8,"author":{"gitID":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)"},{"lineNumber":9,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public IllegalValueException(String message) {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"        super(message);"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @param cause of the main exception"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public IllegalValueException(String message, Throwable cause) {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        super(message, cause);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":20}},{"path":"src/main/java/seedu/club/commons/util/FileUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import java.nio.file.StandardOpenOption;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Writes and reads files"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class FileUtil {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_INVALID_PATH \u003d \"Path should be a valid absolute path to a file.\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static boolean isFileExists(File file) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return file.exists() \u0026\u0026 file.isFile();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @throws IOException if the file or directory cannot be created."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static void createIfMissing(File file) throws IOException {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        if (!isFileExists(file)) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            createFile(file);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @return true if file is created, false if file already exists"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static boolean createFile(File file) throws IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        if (file.exists()) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        createParentDirsOfFile(file);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return file.createNewFile();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Creates the given directory along with its parent directories"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @param dir the directory to be created; assumed not null"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @throws IOException if the directory or a parent directory cannot be created"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static void createDirs(File dir) throws IOException {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        if (!dir.exists() \u0026\u0026 !dir.mkdirs()) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new IOException(\"Failed to make directories of \" + dir.getName());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Creates parent directories of file if it has a parent directory"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static void createParentDirsOfFile(File file) throws IOException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        File parentDir \u003d file.getParentFile();"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (parentDir !\u003d null) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            createDirs(parentDir);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Assumes file exists"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static String readFromFile(File file) throws IOException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return new String(Files.readAllBytes(file.toPath()), CHARSET);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Writes given string to a file."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Will create the file if it does not exist yet."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static void writeToFile(File file, String content) throws IOException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Files.write(file.toPath(), content.getBytes(CHARSET));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"amrut-prabhu"},"content":"    //@@author amrut-prabhu"},{"lineNumber":90,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"amrut-prabhu"},"content":"     * Appends given string to a file."},{"lineNumber":92,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"amrut-prabhu"},"content":"    public static void appendToFile(File file, String content) throws IOException {"},{"lineNumber":94,"author":{"gitID":"amrut-prabhu"},"content":"        Files.write(file.toPath(), content.getBytes(CHARSET), StandardOpenOption.APPEND);"},{"lineNumber":95,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":97,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns true if {@code file} does not represent the absolute path of a file."},{"lineNumber":99,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"amrut-prabhu"},"content":"    public static boolean isNotValidFileName(File file) {"},{"lineNumber":101,"author":{"gitID":"amrut-prabhu"},"content":"        return !file.isAbsolute() || file.isDirectory();"},{"lineNumber":102,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":104,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"amrut-prabhu"},"content":"     * Parses a {@code path} into a {@code File}."},{"lineNumber":106,"author":{"gitID":"amrut-prabhu"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":107,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":108,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws IllegalValueException if the given {@code path} is invalid."},{"lineNumber":109,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"amrut-prabhu"},"content":"    public static File parsePath(String path) throws IllegalValueException {"},{"lineNumber":111,"author":{"gitID":"amrut-prabhu"},"content":"        requireNonNull(path);"},{"lineNumber":112,"author":{"gitID":"amrut-prabhu"},"content":"        String trimmedPath \u003d path.trim();"},{"lineNumber":113,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":114,"author":{"gitID":"amrut-prabhu"},"content":"        if (trimmedPath.isEmpty()) {"},{"lineNumber":115,"author":{"gitID":"amrut-prabhu"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_PATH);"},{"lineNumber":116,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":118,"author":{"gitID":"amrut-prabhu"},"content":"        return new File(trimmedPath);"},{"lineNumber":119,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"amrut-prabhu"},"content":"    //@@author"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Converts a string to a platform-specific file path"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * @param pathWithForwardSlash A String representing a file path but using \u0027/\u0027 as the separator"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * @return {@code pathWithForwardSlash} but \u0027/\u0027 replaced with {@code File.separator}"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public static String getPath(String pathWithForwardSlash) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        checkArgument(pathWithForwardSlash.contains(\"/\"));"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return pathWithForwardSlash.replace(\"/\", File.separator);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":38,"-":93}},{"path":"src/main/java/seedu/club/commons/exceptions/PhotoReadException.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"//@@author amrut-prabhu"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.exceptions;"},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":" * Represents an error while reading a photo file."},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":" */"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"public class PhotoReadException extends IOException {"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"    public PhotoReadException() {}"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"    public PhotoReadException(String message) {"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"        super(message);"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"        return this.getMessage();"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":22}},{"path":"src/main/java/seedu/club/commons/exceptions/PhotoWriteException.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"//@@author amrut-prabhu"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.exceptions;"},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":" * Represents an error while writing a photo file."},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":" */"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"public class PhotoWriteException extends IOException {"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"    public PhotoWriteException(String message) {"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"        super(message);"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"        return this.getMessage();"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":20}},{"path":"src/main/java/seedu/club/commons/events/ui/CompressMembersRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":" * An event requesting to view the help page."},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"public class CompressMembersRequestEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":15}},{"path":"src/main/java/seedu/club/commons/events/ui/HideResultsRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":" * An event requesting to hide all poll results."},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"public class HideResultsRequestEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":14}},{"path":"src/main/java/seedu/club/commons/events/ui/NewResultAvailableEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Indicates that a new result is available."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class NewResultAvailableEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public final String message;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public NewResultAvailableEvent(String message) {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"        this.message \u003d message;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":2,"-":19}},{"path":"src/main/java/seedu/club/commons/events/ui/MemberPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.ui.MemberCard;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":" * Represents a selection change in the member List Panel"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"public class MemberPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"    private final MemberCard newSelection;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"    public MemberPanelSelectionChangedEvent(MemberCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"    public MemberCard getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":8,"-":18}},{"path":"src/main/java/seedu/club/commons/events/ui/ShowHelpRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * An event requesting to view the help page."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ShowHelpRequestEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":2,"-":13}},{"path":"src/main/java/seedu/club/commons/events/ui/SendEmailRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Body;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Client;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Subject;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":" *"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"public class SendEmailRequestEvent extends BaseEvent {"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"    private String recipients;"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"    private Subject subject;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"    private Body body;"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"    private Client client;"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"    public SendEmailRequestEvent(String recipients, Subject subject, Body body, Client client) {"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"        this.recipients \u003d recipients;"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"        this.subject \u003d subject;"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"        this.body \u003d body;"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"        this.client \u003d client;"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"    public String toString() {"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"    public String getRecipients() {"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"        return recipients;"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"    public Subject getSubject() {"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"        return subject;"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"    public Body getBody() {"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"        return body;"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"    public Client getClient() {"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"        return client;"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":2,"yash-chowdhary":43,"-":1}},{"path":"src/main/java/seedu/club/commons/events/ui/JumpToListRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":" * Indicates a request to jump to the list of members"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class JumpToListRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public final int targetIndex;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public JumpToListRequestEvent(Index targetIndex) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex.getZeroBased();"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":4,"-":18}},{"path":"src/main/java/seedu/club/commons/events/ui/ExitAppRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Indicates a request for App termination"},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ExitAppRequestEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":2,"-":12}},{"path":"src/main/java/seedu/club/commons/events/ui/ShowResultsRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":" * An event requesting to show all poll results."},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"public class ShowResultsRequestEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":14}},{"path":"src/main/java/seedu/club/commons/events/BaseEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.events;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * The base class for all event classes."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public abstract class BaseEvent {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":9,"author":{"gitID":"-"},"content":"     * All Events should have a clear unambiguous custom toString message so that feedback message creation"},{"lineNumber":10,"author":{"gitID":"-"},"content":"     * stays consistent and reusable."},{"lineNumber":11,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":12,"author":{"gitID":"-"},"content":"     * For example, the event manager post method will call any posted event\u0027s toString and print it in the console."},{"lineNumber":13,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public abstract String toString();"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":15}},{"path":"src/main/java/seedu/club/commons/events/storage/DataSavingExceptionEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.events.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Indicates an exception during a file saving"},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class DataSavingExceptionEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public final Exception exception;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public DataSavingExceptionEvent(Exception exception) {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"        this.exception \u003d exception;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        return exception.toString();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":2,"-":19}},{"path":"src/main/java/seedu/club/commons/events/ui/TaskPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.ui.TaskCard;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":" * Represents a change in the Task List Panel"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"public class TaskPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"    private final TaskCard newSelection;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"    public TaskPanelSelectionChangedEvent(TaskCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"    public TaskCard getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":26}},{"path":"src/main/java/seedu/club/commons/events/model/ProfilePhotoChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"//@@author amrut-prabhu"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.events.model;"},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.storage.ProfilePhotoStorage.PHOTO_FILE_EXTENSION;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.BaseEvent;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":" * Indicates that the profile photo of a member has changed."},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":" */"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"public class ProfilePhotoChangedEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"    public final String originalPhotoPath;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"    public final String newFileName;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"    private boolean isPhotoChanged;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"    public ProfilePhotoChangedEvent(String originalPhotoPath, String newFileName) {"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"        this.originalPhotoPath \u003d originalPhotoPath;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"        this.newFileName \u003d newFileName;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"        this.isPhotoChanged \u003d true;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"    public boolean isPhotoChanged() {"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"        return isPhotoChanged;"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"    public void setPhotoChanged(boolean isPhotoChanged) {"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"        this.isPhotoChanged \u003d isPhotoChanged;"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"    public String toString() {"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"        return originalPhotoPath + \" is being stored as \" + newFileName + PHOTO_FILE_EXTENSION;"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":37}},{"path":"src/main/java/seedu/club/commons/events/ui/DecompressMembersRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":" * An event requesting to view the help page."},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"public class DecompressMembersRequestEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":15}},{"path":"src/main/java/seedu/club/logic/CommandHistory.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.LinkedList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Stores the history of commands executed."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class CommandHistory {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private LinkedList\u003cString\u003e userInputHistory;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public CommandHistory() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        userInputHistory \u003d new LinkedList\u003c\u003e();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Appends {@code userInput} to the list of user input entered."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void add(String userInput) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireNonNull(userInput);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        userInputHistory.add(userInput);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of {@code userInputHistory}."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getHistory() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new LinkedList\u003c\u003e(userInputHistory);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":31}},{"path":"src/main/java/seedu/club/commons/events/storage/DataReadingExceptionEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"//@@author amrut-prabhu"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.events.storage;"},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":" * Indicates an exception during a file reading."},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":" */"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"public class DataReadingExceptionEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"    public final Exception exception;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"    public DataReadingExceptionEvent(Exception exception) {"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"        this.exception \u003d exception;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"        return exception.toString();"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":22}},{"path":"src/main/java/seedu/club/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"    /** Returns an unmodifiable view of the filtered list of members */"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"    ObservableList\u003cMember\u003e getFilteredMemberList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"    /** Returns an unmodifiable view of the filtered list of polls */"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"    ObservableList\u003cPoll\u003e getFilteredPollList();"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"    /** Returns an unmodifiable view of the filtered list of tasks */"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"    ObservableList\u003cTask\u003e getFilteredTaskList();"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":5,"amrut-prabhu":7,"yash-chowdhary":3,"-":20}},{"path":"src/main/java/seedu/club/commons/events/model/NewExportDataAvailableEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"//@@author amrut-prabhu"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.events.model;"},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.BaseEvent;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":" * Indicates that a new member to export is available."},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":" */"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"public class NewExportDataAvailableEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"    public final File exportFile;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"    public final String data;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"    private boolean isFileChanged;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"    public NewExportDataAvailableEvent(File exportFile) {"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"        this.exportFile \u003d exportFile;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"        this.data \u003d null;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"        this.isFileChanged \u003d true;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"    public NewExportDataAvailableEvent(String data) {"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"        this.data \u003d data;"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"        this.exportFile \u003d null;"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"        this.isFileChanged \u003d true;"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"    public boolean isFileChanged() {"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"        return isFileChanged;"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"    public void setFileChanged(boolean isFileChanged) {"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"        this.isFileChanged \u003d isFileChanged;"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"        return \"add \" + data + \" to file\";"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":42}},{"path":"src/main/java/seedu/club/commons/events/model/ClubBookChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ReadOnlyClubBook;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"/** Indicates the ClubBook in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"public class ClubBookChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"    public final ReadOnlyClubBook data;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"    public ClubBookChangedEvent(ReadOnlyClubBook data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"        return \"number of members \" + data.getMemberList().size() + \", number of tags \" + data.getTagList().size();"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":14,"-":5}},{"path":"src/main/java/seedu/club/logic/UndoRedoStack.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Stack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.Command;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.club.logic.commands.LogOutCommand;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.RedoCommand;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.UndoCommand;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.UndoableCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Maintains the undo-stack (the stack of commands that can be undone) and the redo-stack (the stack of"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * commands that can be undone)."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class UndoRedoStack {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private Stack\u003cUndoableCommand\u003e undoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private Stack\u003cUndoableCommand\u003e redoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public UndoRedoStack() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        undoStack \u003d new Stack\u003c\u003e();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        redoStack \u003d new Stack\u003c\u003e();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Pushes {@code command} onto the undo-stack if it is of type {@code UndoableCommand}. Clears the redo-stack"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * if {@code command} is not of type {@code UndoCommand} or {@code RedoCommand}."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void push(Command command) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        if (!(command instanceof UndoCommand) \u0026\u0026 !(command instanceof RedoCommand)) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            redoStack.clear();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        if (!(command instanceof UndoableCommand)) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            if (command instanceof LogOutCommand) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                clear();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        undoStack.add((UndoableCommand) command);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"th14thmusician"},"content":"    //@@author th14thmusician"},{"lineNumber":44,"author":{"gitID":"th14thmusician"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"th14thmusician"},"content":"     * Clear the stacks if it logouts"},{"lineNumber":46,"author":{"gitID":"th14thmusician"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"th14thmusician"},"content":"    private void clear() {"},{"lineNumber":48,"author":{"gitID":"th14thmusician"},"content":"        redoStack.clear();"},{"lineNumber":49,"author":{"gitID":"th14thmusician"},"content":"        undoStack.clear();"},{"lineNumber":50,"author":{"gitID":"th14thmusician"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"th14thmusician"},"content":"    //@@author"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Pops and returns the next {@code UndoableCommand} to be undone in the stack."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public UndoableCommand popUndo() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        UndoableCommand toUndo \u003d undoStack.pop();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        redoStack.push(toUndo);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return toUndo;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Pops and returns the next {@code UndoableCommand} to be redone in the stack."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public UndoableCommand popRedo() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        UndoableCommand toRedo \u003d redoStack.pop();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        undoStack.push(toRedo);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return toRedo;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Returns true if there are more commands that can be undone."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public boolean canUndo() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return !undoStack.empty();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Returns true if there are more commands that can be redone."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public boolean canRedo() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return !redoStack.empty();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        if (!(other instanceof UndoRedoStack)) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        UndoRedoStack stack \u003d (UndoRedoStack) other;"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return undoStack.equals(stack.undoStack)"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                \u0026\u0026 redoStack.equals(stack.redoStack);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":5,"th14thmusician":9,"-":89}},{"path":"src/main/java/seedu/club/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.AddCommand;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Email;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Name;"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Phone;"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"                        PREFIX_MATRIC_NUMBER, PREFIX_GROUP, PREFIX_TAG, PREFIX_USERNAME,"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"                        PREFIX_PASSWORD);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_MATRIC_NUMBER, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"            MatricNumber matricNumber \u003d ParserUtil.parseMatricNumber(argMultimap.getValue(PREFIX_MATRIC_NUMBER)).get();"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"            Group group \u003d ParserUtil.parseGroup(argMultimap.getValue(PREFIX_GROUP))"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"                    .orElse(new Group(Group.DEFAULT_GROUP));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"            Member member \u003d new Member(name, phone, email, matricNumber, group, tagList);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"            return new AddCommand(member);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":3,"amrut-prabhu":23,"yash-chowdhary":2,"-":45}},{"path":"src/main/java/seedu/club/logic/parser/ArgumentMultimap.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Stores mapping of prefixes to their respective arguments."},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Each key may be associated with multiple argument values."},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * can be inserted multiple times for the same prefix."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class ArgumentMultimap {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /** Prefixes mapped to their respective arguments**/"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void put(Prefix prefix, String argValue) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        argValues.add(argValue);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        argMultimap.put(prefix, argValues);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Returns the last value of {@code prefix}."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Returns all values of {@code prefix}."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public String getPreamble() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":59}},{"path":"src/main/java/seedu/club/commons/util/CsvUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"//@@author amrut-prabhu"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.commons.util;"},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_MEMBER_FORMAT;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.File;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.IOException;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.logging.Logger;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.stream.Stream;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.LogsCenter;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.DataConversionException;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.parser.ArgumentMultimap;"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.parser.ArgumentTokenizer;"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.parser.ParserUtil;"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.parser.Prefix;"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Email;"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Name;"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Phone;"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.UniqueMemberList;"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.DuplicateMatricNumberException;"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":" * Helps with reading from and writing to CSV files."},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":" */"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"public class CsvUtil {"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"    private static final String CSV_FIELD_SEPARATOR \u003d \",\";"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"    private static final String CSV_FIELD_SURROUNDER \u003d \"\\\"\";"},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"    private static final String CSV_VALUE_SEPARATOR \u003d \",\";"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"    private static final String EMPTY_STRING \u003d \"\";"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"    private static final String NEWLINE \u003d System.lineSeparator();"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"    private static final String SPACE \u003d \" \";"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(CsvUtil.class);"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":51,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns true if {@code path} does not represent the path of a CSV (.csv) file."},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"    public static boolean isNotValidCsvFileName(String path) {"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"        String csvFileExtension \u003d \".csv\";"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"        int length \u003d path.length();"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"        String fileExtension \u003d path.substring(length - 4);"},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"        return fileExtension.compareToIgnoreCase(csvFileExtension) !\u003d 0;"},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns {@code this} Member\u0027s data in the format of a CSV record."},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":"     * @return {@code String} containing the data in CSV format."},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"    public static String getHeaders() {"},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":70,"author":{"gitID":"amrut-prabhu"},"content":"        addCsvField(builder, \"Name\");"},{"lineNumber":71,"author":{"gitID":"amrut-prabhu"},"content":"        addCsvField(builder, \"Phone\");"},{"lineNumber":72,"author":{"gitID":"amrut-prabhu"},"content":"        addCsvField(builder, \"Email\");"},{"lineNumber":73,"author":{"gitID":"amrut-prabhu"},"content":"        addCsvField(builder, \"Matriculation Number\");"},{"lineNumber":74,"author":{"gitID":"amrut-prabhu"},"content":"        addCsvField(builder, \"Group\");"},{"lineNumber":75,"author":{"gitID":"amrut-prabhu"},"content":"        addLastCsvField(builder, \"Tags\");"},{"lineNumber":76,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":77,"author":{"gitID":"amrut-prabhu"},"content":"        builder.append(NEWLINE);"},{"lineNumber":78,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":79,"author":{"gitID":"amrut-prabhu"},"content":"        return builder.toString();"},{"lineNumber":80,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":82,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns {@code this} Member\u0027s data in the format of a CSV record."},{"lineNumber":84,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":85,"author":{"gitID":"amrut-prabhu"},"content":"     * @return {@code String} containing the data in CSV format."},{"lineNumber":86,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"amrut-prabhu"},"content":"    public static String toCsvFormat(Object objectToConvert) {"},{"lineNumber":88,"author":{"gitID":"amrut-prabhu"},"content":"        requireNonNull(objectToConvert);"},{"lineNumber":89,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":90,"author":{"gitID":"amrut-prabhu"},"content":"        Member memberToConvert;"},{"lineNumber":91,"author":{"gitID":"amrut-prabhu"},"content":"        if (objectToConvert instanceof Member) {"},{"lineNumber":92,"author":{"gitID":"amrut-prabhu"},"content":"            memberToConvert \u003d (Member) objectToConvert;"},{"lineNumber":93,"author":{"gitID":"amrut-prabhu"},"content":"        } else {"},{"lineNumber":94,"author":{"gitID":"amrut-prabhu"},"content":"            return EMPTY_STRING;"},{"lineNumber":95,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":97,"author":{"gitID":"amrut-prabhu"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":98,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":99,"author":{"gitID":"amrut-prabhu"},"content":"        addCsvField(builder, memberToConvert.getName().toString());"},{"lineNumber":100,"author":{"gitID":"amrut-prabhu"},"content":"        addCsvField(builder, memberToConvert.getPhone().toString());"},{"lineNumber":101,"author":{"gitID":"amrut-prabhu"},"content":"        addCsvField(builder, memberToConvert.getEmail().toString());"},{"lineNumber":102,"author":{"gitID":"amrut-prabhu"},"content":"        addCsvField(builder, memberToConvert.getMatricNumber().toString());"},{"lineNumber":103,"author":{"gitID":"amrut-prabhu"},"content":"        addCsvField(builder, memberToConvert.getGroup().toString());"},{"lineNumber":104,"author":{"gitID":"amrut-prabhu"},"content":"        addCsvTags(builder, memberToConvert);"},{"lineNumber":105,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":106,"author":{"gitID":"amrut-prabhu"},"content":"        builder.append(NEWLINE);"},{"lineNumber":107,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":108,"author":{"gitID":"amrut-prabhu"},"content":"        return builder.toString();"},{"lineNumber":109,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":111,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"amrut-prabhu"},"content":"     * Appends (@code builder} with all tags of {@code member} in CSV format."},{"lineNumber":113,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":114,"author":{"gitID":"amrut-prabhu"},"content":"     * @param builder StringBuilder which is to be appended."},{"lineNumber":115,"author":{"gitID":"amrut-prabhu"},"content":"     * @param member Member whose tags are to be appended."},{"lineNumber":116,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"amrut-prabhu"},"content":"    private static void addCsvTags(StringBuilder builder, Member member) {"},{"lineNumber":118,"author":{"gitID":"amrut-prabhu"},"content":"        builder.append(CSV_FIELD_SURROUNDER);"},{"lineNumber":119,"author":{"gitID":"amrut-prabhu"},"content":"        member.getTags().forEach(tag -\u003e builder.append(tag.getTagName())"},{"lineNumber":120,"author":{"gitID":"amrut-prabhu"},"content":"                .append(CSV_VALUE_SEPARATOR)); //Results in an extra \",\" at end of tag list."},{"lineNumber":121,"author":{"gitID":"amrut-prabhu"},"content":"        builder.append(CSV_FIELD_SURROUNDER); //No CSV_FIELD_SEPARATOR as this is the last field."},{"lineNumber":122,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":124,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"amrut-prabhu"},"content":"     * Appends (@code builder} with {@code field} in CSV format."},{"lineNumber":126,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":127,"author":{"gitID":"amrut-prabhu"},"content":"     * @param builder StringBuilder which is to be appended."},{"lineNumber":128,"author":{"gitID":"amrut-prabhu"},"content":"     * @param field Field value that is to be appended."},{"lineNumber":129,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"amrut-prabhu"},"content":"    private static void addCsvField(StringBuilder builder, String field) {"},{"lineNumber":131,"author":{"gitID":"amrut-prabhu"},"content":"        assert field !\u003d null : \"Field cannot be null in Member object\";"},{"lineNumber":132,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":133,"author":{"gitID":"amrut-prabhu"},"content":"        builder.append(CSV_FIELD_SURROUNDER)"},{"lineNumber":134,"author":{"gitID":"amrut-prabhu"},"content":"                .append(field)"},{"lineNumber":135,"author":{"gitID":"amrut-prabhu"},"content":"                .append(CSV_FIELD_SURROUNDER)"},{"lineNumber":136,"author":{"gitID":"amrut-prabhu"},"content":"                .append(CSV_FIELD_SEPARATOR);"},{"lineNumber":137,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":139,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"amrut-prabhu"},"content":"     * Appends (@code builder} with last {@code field} in CSV format without suffixing with{@code CSV_FIELD_SEPARATOR}."},{"lineNumber":141,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":142,"author":{"gitID":"amrut-prabhu"},"content":"     * @param builder StringBuilder which is to be appended."},{"lineNumber":143,"author":{"gitID":"amrut-prabhu"},"content":"     * @param field The final field value that is to be appended."},{"lineNumber":144,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"amrut-prabhu"},"content":"    private static void addLastCsvField(StringBuilder builder, String field) {"},{"lineNumber":146,"author":{"gitID":"amrut-prabhu"},"content":"        assert field !\u003d null : \"Field cannot be null in Member object\";"},{"lineNumber":147,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":148,"author":{"gitID":"amrut-prabhu"},"content":"        builder.append(CSV_FIELD_SURROUNDER)"},{"lineNumber":149,"author":{"gitID":"amrut-prabhu"},"content":"                .append(field)"},{"lineNumber":150,"author":{"gitID":"amrut-prabhu"},"content":"                .append(CSV_FIELD_SURROUNDER);"},{"lineNumber":151,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":153,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"amrut-prabhu"},"content":"     * Saves the data in the file in csv format."},{"lineNumber":155,"author":{"gitID":"amrut-prabhu"},"content":"     * Assumes file exists."},{"lineNumber":156,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":157,"author":{"gitID":"amrut-prabhu"},"content":"     * @param file Points to a valid csv file."},{"lineNumber":158,"author":{"gitID":"amrut-prabhu"},"content":"     *             Cannot be null."},{"lineNumber":159,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws IOException Thrown if there is an error writing to the file."},{"lineNumber":160,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"amrut-prabhu"},"content":"    public static void saveDataToFile(File file, String data) throws IOException {"},{"lineNumber":162,"author":{"gitID":"amrut-prabhu"},"content":"        requireNonNull(file);"},{"lineNumber":163,"author":{"gitID":"amrut-prabhu"},"content":"        requireNonNull(data);"},{"lineNumber":164,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":165,"author":{"gitID":"amrut-prabhu"},"content":"        FileUtil.appendToFile(file, data);"},{"lineNumber":166,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":168,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"amrut-prabhu"},"content":"     * Loads a {@code UniqueMemberList} from the data in the csv file."},{"lineNumber":170,"author":{"gitID":"amrut-prabhu"},"content":"     * Assumes file exists."},{"lineNumber":171,"author":{"gitID":"amrut-prabhu"},"content":"     * Ignores DataConversionException and DuplicateMemberException."},{"lineNumber":172,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":173,"author":{"gitID":"amrut-prabhu"},"content":"     * @param file Points to a valid csv file containing data that match the {@code Member}."},{"lineNumber":174,"author":{"gitID":"amrut-prabhu"},"content":"     *             Cannot be null."},{"lineNumber":175,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws IOException Thrown if there is an error reading from the file."},{"lineNumber":176,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"amrut-prabhu"},"content":"    public static UniqueMemberList getDataFromFile(File file) throws IOException {"},{"lineNumber":178,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":179,"author":{"gitID":"amrut-prabhu"},"content":"        UniqueMemberList importedMembers \u003d new UniqueMemberList();"},{"lineNumber":180,"author":{"gitID":"amrut-prabhu"},"content":"        String data \u003d FileUtil.readFromFile(file);"},{"lineNumber":181,"author":{"gitID":"amrut-prabhu"},"content":"        String[] membersData \u003d data.split(\"\\n\");"},{"lineNumber":182,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":183,"author":{"gitID":"amrut-prabhu"},"content":"        for (int i \u003d 1; i \u003c membersData.length; i++) { //membersData[0] contains Headers"},{"lineNumber":184,"author":{"gitID":"amrut-prabhu"},"content":"            try {"},{"lineNumber":185,"author":{"gitID":"amrut-prabhu"},"content":"                Member member \u003d getMember(membersData[i]);"},{"lineNumber":186,"author":{"gitID":"amrut-prabhu"},"content":"                importedMembers.add(member);"},{"lineNumber":187,"author":{"gitID":"amrut-prabhu"},"content":"            } catch (DataConversionException dce) {"},{"lineNumber":188,"author":{"gitID":"amrut-prabhu"},"content":"                logger.warning(\"DataConversionException encountered while converting \" + membersData[i]);"},{"lineNumber":189,"author":{"gitID":"amrut-prabhu"},"content":"            } catch (DuplicateMatricNumberException dmne) {"},{"lineNumber":190,"author":{"gitID":"amrut-prabhu"},"content":"                logger.warning(\"DuplicateMemberException encountered due to \" + membersData[i]);"},{"lineNumber":191,"author":{"gitID":"amrut-prabhu"},"content":"            }"},{"lineNumber":192,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":194,"author":{"gitID":"amrut-prabhu"},"content":"        return importedMembers;"},{"lineNumber":195,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":197,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns a {@code Member} created using the given raw {@code rawData}."},{"lineNumber":199,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":200,"author":{"gitID":"amrut-prabhu"},"content":"     * @param rawData Contains all the rawData of the member extracted from the file."},{"lineNumber":201,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws DataConversionException Thrown if the rawData of the member is not in the specified format."},{"lineNumber":202,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":203,"author":{"gitID":"amrut-prabhu"},"content":"    private static Member getMember(String rawData) throws DataConversionException {"},{"lineNumber":204,"author":{"gitID":"amrut-prabhu"},"content":"        String remainingData \u003d rawData;"},{"lineNumber":205,"author":{"gitID":"amrut-prabhu"},"content":"        String memberData \u003d SPACE;"},{"lineNumber":206,"author":{"gitID":"amrut-prabhu"},"content":"        String memberFieldValue;"},{"lineNumber":207,"author":{"gitID":"amrut-prabhu"},"content":"        String[] fieldValues;"},{"lineNumber":208,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":209,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":210,"author":{"gitID":"amrut-prabhu"},"content":"            fieldValues \u003d nextValue(remainingData);"},{"lineNumber":211,"author":{"gitID":"amrut-prabhu"},"content":"            memberFieldValue \u003d fieldValues[0];"},{"lineNumber":212,"author":{"gitID":"amrut-prabhu"},"content":"            remainingData \u003d fieldValues[1];"},{"lineNumber":213,"author":{"gitID":"amrut-prabhu"},"content":"            memberData \u003d addMemberData(memberData, PREFIX_NAME.toString(), memberFieldValue);"},{"lineNumber":214,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":215,"author":{"gitID":"amrut-prabhu"},"content":"            fieldValues \u003d nextValue(remainingData);"},{"lineNumber":216,"author":{"gitID":"amrut-prabhu"},"content":"            memberFieldValue \u003d fieldValues[0];"},{"lineNumber":217,"author":{"gitID":"amrut-prabhu"},"content":"            remainingData \u003d fieldValues[1];"},{"lineNumber":218,"author":{"gitID":"amrut-prabhu"},"content":"            memberData \u003d addMemberData(memberData, PREFIX_PHONE.toString(), memberFieldValue);"},{"lineNumber":219,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":220,"author":{"gitID":"amrut-prabhu"},"content":"            fieldValues \u003d nextValue(remainingData);"},{"lineNumber":221,"author":{"gitID":"amrut-prabhu"},"content":"            memberFieldValue \u003d fieldValues[0];"},{"lineNumber":222,"author":{"gitID":"amrut-prabhu"},"content":"            remainingData \u003d fieldValues[1];"},{"lineNumber":223,"author":{"gitID":"amrut-prabhu"},"content":"            memberData \u003d addMemberData(memberData, PREFIX_EMAIL.toString(), memberFieldValue);"},{"lineNumber":224,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":225,"author":{"gitID":"amrut-prabhu"},"content":"            fieldValues \u003d nextValue(remainingData);"},{"lineNumber":226,"author":{"gitID":"amrut-prabhu"},"content":"            memberFieldValue \u003d fieldValues[0];"},{"lineNumber":227,"author":{"gitID":"amrut-prabhu"},"content":"            remainingData \u003d fieldValues[1];"},{"lineNumber":228,"author":{"gitID":"amrut-prabhu"},"content":"            memberData \u003d addMemberData(memberData, PREFIX_MATRIC_NUMBER.toString(), memberFieldValue);"},{"lineNumber":229,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":230,"author":{"gitID":"amrut-prabhu"},"content":"            fieldValues \u003d nextValue(remainingData);"},{"lineNumber":231,"author":{"gitID":"amrut-prabhu"},"content":"            memberFieldValue \u003d fieldValues[0];"},{"lineNumber":232,"author":{"gitID":"amrut-prabhu"},"content":"            remainingData \u003d fieldValues[1];"},{"lineNumber":233,"author":{"gitID":"amrut-prabhu"},"content":"            memberData \u003d addMemberData(memberData, PREFIX_GROUP.toString(), memberFieldValue);"},{"lineNumber":234,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":235,"author":{"gitID":"amrut-prabhu"},"content":"            fieldValues \u003d nextValue(remainingData);"},{"lineNumber":236,"author":{"gitID":"amrut-prabhu"},"content":"            memberFieldValue \u003d fieldValues[0];"},{"lineNumber":237,"author":{"gitID":"amrut-prabhu"},"content":"            memberData \u003d addMemberData(memberData, PREFIX_TAG.toString(), memberFieldValue);"},{"lineNumber":238,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (ArrayIndexOutOfBoundsException aioobe) {"},{"lineNumber":239,"author":{"gitID":"amrut-prabhu"},"content":"            throw new DataConversionException(aioobe);"},{"lineNumber":240,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":241,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":242,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":243,"author":{"gitID":"amrut-prabhu"},"content":"            return parseMember(memberData);"},{"lineNumber":244,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":245,"author":{"gitID":"amrut-prabhu"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":246,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":247,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":249,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns the next data value of the member."},{"lineNumber":251,"author":{"gitID":"amrut-prabhu"},"content":"     * @param data Raw member data."},{"lineNumber":252,"author":{"gitID":"amrut-prabhu"},"content":"     * @return {@code String[]} with the next data value at index 0 and remaining data (if it exists) at index 1."},{"lineNumber":253,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"amrut-prabhu"},"content":"    private static String[] nextValue(String data) {"},{"lineNumber":255,"author":{"gitID":"amrut-prabhu"},"content":"        String[] values;"},{"lineNumber":256,"author":{"gitID":"amrut-prabhu"},"content":"        if (data.charAt(0) \u003d\u003d \u0027\\\"\u0027) {"},{"lineNumber":257,"author":{"gitID":"amrut-prabhu"},"content":"            values \u003d data.substring(1).split(CSV_FIELD_SURROUNDER + CSV_FIELD_SEPARATOR, 2);"},{"lineNumber":258,"author":{"gitID":"amrut-prabhu"},"content":"        } else {"},{"lineNumber":259,"author":{"gitID":"amrut-prabhu"},"content":"            values \u003d data.split(CSV_FIELD_SEPARATOR, 2);"},{"lineNumber":260,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":261,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":262,"author":{"gitID":"amrut-prabhu"},"content":"        return values;"},{"lineNumber":263,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":265,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":266,"author":{"gitID":"amrut-prabhu"},"content":"     * Removes leading and trailing whitespaces and double quotes (\") from {@code data}."},{"lineNumber":267,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":268,"author":{"gitID":"amrut-prabhu"},"content":"    private static String removeExcessCharacters(String data) {"},{"lineNumber":269,"author":{"gitID":"amrut-prabhu"},"content":"        requireNonNull(data);"},{"lineNumber":270,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":271,"author":{"gitID":"amrut-prabhu"},"content":"        data \u003d data.trim();"},{"lineNumber":272,"author":{"gitID":"amrut-prabhu"},"content":"        //Remove double quotes(\")"},{"lineNumber":273,"author":{"gitID":"amrut-prabhu"},"content":"        if (data.length() \u003e 0 \u0026\u0026 data.charAt(0) \u003d\u003d \u0027\\\"\u0027) { //First character is \""},{"lineNumber":274,"author":{"gitID":"amrut-prabhu"},"content":"            data \u003d data.substring(1);"},{"lineNumber":275,"author":{"gitID":"amrut-prabhu"},"content":"        } else if (data.length() \u003e 0 \u0026\u0026 data.charAt(data.length() - 1) \u003d\u003d \u0027\\\"\u0027) { //Last character is \""},{"lineNumber":276,"author":{"gitID":"amrut-prabhu"},"content":"            data \u003d data.substring(0, data.length() - 1);"},{"lineNumber":277,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":278,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":279,"author":{"gitID":"amrut-prabhu"},"content":"        return data;"},{"lineNumber":280,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":282,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":283,"author":{"gitID":"amrut-prabhu"},"content":"     * Appends {@code dataToAdd} to {@code memberData} in the required format."},{"lineNumber":284,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":285,"author":{"gitID":"amrut-prabhu"},"content":"     * @param memberData The current data of the member."},{"lineNumber":286,"author":{"gitID":"amrut-prabhu"},"content":"     * @param prefix The prefix needed, depending on the type of {@code dataToAdd}."},{"lineNumber":287,"author":{"gitID":"amrut-prabhu"},"content":"     * @param dataToAdd"},{"lineNumber":288,"author":{"gitID":"amrut-prabhu"},"content":"     * @return {@code memberData} appended with {@code dataToAdd} in the required format."},{"lineNumber":289,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":290,"author":{"gitID":"amrut-prabhu"},"content":"    private static String addMemberData(String memberData, String prefix, String dataToAdd) {"},{"lineNumber":291,"author":{"gitID":"amrut-prabhu"},"content":"        StringBuilder builder \u003d new StringBuilder(memberData);"},{"lineNumber":292,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":293,"author":{"gitID":"amrut-prabhu"},"content":"        if (prefix.equals(PREFIX_TAG.toString())) {"},{"lineNumber":294,"author":{"gitID":"amrut-prabhu"},"content":"            return addMemberTags(memberData, dataToAdd);"},{"lineNumber":295,"author":{"gitID":"amrut-prabhu"},"content":"        } else if (dataToAdd.length() !\u003d 0) {"},{"lineNumber":296,"author":{"gitID":"amrut-prabhu"},"content":"            builder.append(prefix).append(removeExcessCharacters(dataToAdd)).append(SPACE);"},{"lineNumber":297,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":298,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":299,"author":{"gitID":"amrut-prabhu"},"content":"        return builder.toString();"},{"lineNumber":300,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":301,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":302,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":303,"author":{"gitID":"amrut-prabhu"},"content":"     * Appends the tags in {@code dataToAdd} to {@code memberData} in the required format."},{"lineNumber":304,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":305,"author":{"gitID":"amrut-prabhu"},"content":"     * @param memberData The current data of the member."},{"lineNumber":306,"author":{"gitID":"amrut-prabhu"},"content":"     * @param dataToAdd The tags to be added to {@code memberData}."},{"lineNumber":307,"author":{"gitID":"amrut-prabhu"},"content":"     * @return {@code memberData} appended with {@code dataToAdd} in the required format."},{"lineNumber":308,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":309,"author":{"gitID":"amrut-prabhu"},"content":"    private static String addMemberTags(String memberData, String dataToAdd) {"},{"lineNumber":310,"author":{"gitID":"amrut-prabhu"},"content":"        StringBuilder builder \u003d new StringBuilder(memberData);"},{"lineNumber":311,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":312,"author":{"gitID":"amrut-prabhu"},"content":"        if (dataToAdd.length() !\u003d 0) {"},{"lineNumber":313,"author":{"gitID":"amrut-prabhu"},"content":"            String[] tags \u003d dataToAdd.split(\",\");"},{"lineNumber":314,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":315,"author":{"gitID":"amrut-prabhu"},"content":"            for (String tag : tags) {"},{"lineNumber":316,"author":{"gitID":"amrut-prabhu"},"content":"                tag \u003d removeExcessCharacters(tag);"},{"lineNumber":317,"author":{"gitID":"amrut-prabhu"},"content":"                if (tag.length() \u003e 0) {"},{"lineNumber":318,"author":{"gitID":"amrut-prabhu"},"content":"                    builder.append(PREFIX_TAG).append(tag).append(SPACE);"},{"lineNumber":319,"author":{"gitID":"amrut-prabhu"},"content":"                }"},{"lineNumber":320,"author":{"gitID":"amrut-prabhu"},"content":"            }"},{"lineNumber":321,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":322,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":323,"author":{"gitID":"amrut-prabhu"},"content":"        return builder.toString();"},{"lineNumber":324,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":325,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":326,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":327,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns a member created by parsing {@code memberData}."},{"lineNumber":328,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":329,"author":{"gitID":"amrut-prabhu"},"content":"     * @param memberData Data of the member with cli prefixes."},{"lineNumber":330,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws IllegalValueException Thrown if the data does not conform the expected format."},{"lineNumber":331,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":332,"author":{"gitID":"amrut-prabhu"},"content":"    private static Member parseMember(String memberData) throws IllegalValueException {"},{"lineNumber":333,"author":{"gitID":"amrut-prabhu"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":334,"author":{"gitID":"amrut-prabhu"},"content":"                ArgumentTokenizer.tokenize(memberData, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":335,"author":{"gitID":"amrut-prabhu"},"content":"                        PREFIX_MATRIC_NUMBER, PREFIX_GROUP, PREFIX_TAG);"},{"lineNumber":336,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":337,"author":{"gitID":"amrut-prabhu"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_MATRIC_NUMBER, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":338,"author":{"gitID":"amrut-prabhu"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":339,"author":{"gitID":"amrut-prabhu"},"content":"            throw new IllegalValueException(String.format(MESSAGE_INVALID_MEMBER_FORMAT, memberData));"},{"lineNumber":340,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":341,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":342,"author":{"gitID":"amrut-prabhu"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":343,"author":{"gitID":"amrut-prabhu"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":344,"author":{"gitID":"amrut-prabhu"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":345,"author":{"gitID":"amrut-prabhu"},"content":"        MatricNumber matricNumber \u003d ParserUtil.parseMatricNumber(argMultimap.getValue(PREFIX_MATRIC_NUMBER)).get();"},{"lineNumber":346,"author":{"gitID":"amrut-prabhu"},"content":"        Group group \u003d ParserUtil.parseGroup(argMultimap.getValue(PREFIX_GROUP))"},{"lineNumber":347,"author":{"gitID":"amrut-prabhu"},"content":"                .orElse(new Group(Group.DEFAULT_GROUP));"},{"lineNumber":348,"author":{"gitID":"amrut-prabhu"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":349,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":350,"author":{"gitID":"amrut-prabhu"},"content":"        Member member \u003d new Member(name, phone, email, matricNumber, group, tagList);"},{"lineNumber":351,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":352,"author":{"gitID":"amrut-prabhu"},"content":"        return member;"},{"lineNumber":353,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":354,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":355,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":356,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":357,"author":{"gitID":"amrut-prabhu"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":358,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":359,"author":{"gitID":"amrut-prabhu"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":360,"author":{"gitID":"amrut-prabhu"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":361,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":362,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":363,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":363}},{"path":"src/main/java/seedu/club/logic/parser/Prefix.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * A prefix that marks the beginning of an argument in an arguments string."},{"lineNumber":5,"author":{"gitID":"-"},"content":" * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."},{"lineNumber":6,"author":{"gitID":"-"},"content":" */"},{"lineNumber":7,"author":{"gitID":"-"},"content":"public class Prefix {"},{"lineNumber":8,"author":{"gitID":"-"},"content":"    private final String prefix;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public Prefix(String prefix) {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"        this.prefix \u003d prefix;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public String getPrefix() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        return prefix;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return getPrefix();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        if (!(obj instanceof Prefix)) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Prefix otherPrefix \u003d (Prefix) obj;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return otherPrefix.getPrefix().equals(getPrefix());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":38}},{"path":"src/main/java/seedu/club/logic/parser/Parser.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.Command;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public interface Parser\u003cT extends Command\u003e {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a command and returns it."},{"lineNumber":13,"author":{"gitID":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    T parse(String userInput) throws ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":3,"-":13}},{"path":"src/main/java/seedu/club/logic/parser/ImportCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"//@@author amrut-prabhu"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.ImportCommand;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":" * Parses input arguments and creates a new ImportCommand object."},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":" */"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"     * Parses the given {@code String} of arguments in the context of the ImportCommand"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"     * and returns an ImportCommand object for execution."},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"    public ImportCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"            File importFile \u003d ParserUtil.parseImportPath(args);"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"            return new ImportCommand(importFile);"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"            throw new ParseException("},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":32}},{"path":"src/main/java/seedu/club/logic/parser/DeleteTaskCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.DeleteTaskCommand;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":" * Parses input arguments and creates a new DeleteTaskCommand object"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"public class DeleteTaskCommandParser implements Parser\u003cDeleteTaskCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteTaskCommand"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"     * and returns an DeleteTaskCommand object for execution."},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"    public DeleteTaskCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"            return new DeleteTaskCommand(index);"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"                    DeleteTaskCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":31}},{"path":"src/main/java/seedu/club/logic/parser/DeleteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.DeleteCommand;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * and returns an DeleteCommand object for execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            return new DeleteCommand(index);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":6,"-":24}},{"path":"src/main/java/seedu/club/logic/parser/DeletePollCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.DeletePollCommand;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":" * Parses input arguments and creates a new DeletePollCommand object"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"public class DeletePollCommandParser implements Parser\u003cDeletePollCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"     * Parses the given {@code String} of arguments in the context of the DeletePollCommand"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"     * and returns a DeletePollCommand object for execution."},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"     * @throws ParseException if the user input does not conform to the expected format"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"    public DeletePollCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"            return new DeletePollCommand(index);"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePollCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":30}},{"path":"src/main/java/seedu/club/logic/parser/AddTaskCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_TIME;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.stream.Stream;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.AddTaskCommand;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Date;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Description;"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Time;"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":" * Parses input arguments and creates a new AddTaskCommand object"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"public class AddTaskCommandParser implements Parser\u003cAddTaskCommand\u003e {"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"    public AddTaskCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_DATE, PREFIX_TIME);"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_DATE, PREFIX_TIME)"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"            Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"            Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"            Time time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"            Task newTask \u003d new Task(description, time, date);"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"            return new AddTaskCommand(newTask);"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":56}},{"path":"src/main/java/seedu/club/logic/parser/SelectCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.SelectCommand;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new SelectCommand object"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the SelectCommand"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * and returns an SelectCommand object for execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public SelectCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            return new SelectCommand(index);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":6,"-":23}},{"path":"src/main/java/seedu/club/logic/parser/VoteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.VoteCommand;"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":" * Parses input arguments and creates a new VoteCommand object"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"public class VoteCommandParser implements Parser\u003cVoteCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final int INDEX_ARGUMENT_POLL \u003d 0;"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final int INDEX_ARGUMENT_ANSWER \u003d 1;"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"     * Parses the given {@code String} of arguments in the context of the VoteCommand"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"     * and returns a VoteCommand object for execution."},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"    public VoteCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"        try {"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"            List\u003cIndex\u003e indexes \u003d ParserUtil.parseIndices(args);"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"            if (indexes.size() !\u003d 2) {"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"                throw new IllegalValueException(MESSAGE_INVALID_COMMAND_FORMAT);"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"            }"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"            return new VoteCommand(indexes.get(INDEX_ARGUMENT_POLL), indexes.get(INDEX_ARGUMENT_ANSWER));"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new ParseException("},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, VoteCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":37}},{"path":"src/main/java/seedu/club/logic/parser/ExportCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"//@@author amrut-prabhu"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.ExportCommand;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":" * Parses input arguments and creates a new ExportCommand object."},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":" */"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_FILE_CREATION_ERROR \u003d \"Error while creating file %1$s\";"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"     * Parses the given {@code String} of arguments in the context of the ExportCommand"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"     * and returns an ExportCommand object for execution."},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"    public ExportCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"            File exportFile \u003d ParserUtil.parseExportPath(args);"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"            return new ExportCommand(exportFile);"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"            throw new ParseException("},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (IOException ioe) {"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"            throw new ParseException(String.format(MESSAGE_FILE_CREATION_ERROR, args));"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"}"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"//@@author"}],"authorContributionMap":{"amrut-prabhu":38}},{"path":"src/main/java/seedu/club/logic/parser/FindCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.FindCommand;"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.member.FieldContainsKeywordsPredicate;"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final Prefix[] VALID_SEARCH_PREFIXES \u003d {PREFIX_NAME, PREFIX_EMAIL, PREFIX_PHONE,"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"        PREFIX_MATRIC_NUMBER, PREFIX_GROUP, PREFIX_TAG};"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new ParseException("},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"        String[] findArgs \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"        if (findArgs.length \u003c 1) {"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new ParseException("},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"        } else if (findArgs.length \u003e 1) {"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"            for (Prefix prefix : VALID_SEARCH_PREFIXES) {"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"                if (findArgs[0].equalsIgnoreCase(prefix.toString())) {"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"                    return new FindCommand(new FieldContainsKeywordsPredicate("},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"                            Arrays.asList(findArgs).subList(1, findArgs.length), prefix));"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"                }"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"            }"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"        return new FindCommand(new FieldContainsKeywordsPredicate("},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"                Arrays.asList(findArgs), null));"},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":52,"amrut-prabhu":1}},{"path":"src/main/java/seedu/club/logic/parser/DeleteTagCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"//@@author amrut-prabhu"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.model.tag.Tag.MESSAGE_TAG_CONSTRAINTS;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.DeleteTagCommand;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":" * Parses input arguments and creates a new DeleteTagCommand object"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":" */"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"public class DeleteTagCommandParser implements Parser\u003cDeleteTagCommand\u003e {"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteTagCommand"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"     * and returns an DeleteTagCommand object for execution."},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"    public DeleteTagCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"        ArgumentMultimap argumentMultimap \u003d"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_TAG);"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"        if (!arePrefixesPresent(argumentMultimap, PREFIX_TAG)"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"                || !argumentMultimap.getPreamble().isEmpty()) {"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTagCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"            Tag tag \u003d ParserUtil.parseTag(argumentMultimap.getValue(PREFIX_TAG).get());"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"            return new DeleteTagCommand(tag);"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"            throw new ParseException("},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"                    String.format(MESSAGE_TAG_CONSTRAINTS, DeleteTagCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns true if none of the prefixes contains empty values in the given"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"     * {@code ArgumentMultimap}"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":51,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":51}},{"path":"src/main/java/seedu/club/logic/parser/exceptions/ParseException.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Represents a parse error encountered by a parser."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ParseException extends IllegalValueException {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public ParseException(String message) {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"        super(message);"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public ParseException(String message, Throwable cause) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        super(message, cause);"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":2,"-":15}},{"path":"src/main/java/seedu/club/logic/parser/ChangeProfilePhotoCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"//@@author amrut-prabhu"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.ChangeProfilePhotoCommand;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.ProfilePhoto;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":" * Parses input arguments and creates a new ChangeProfilePhotoCommand object"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":" */"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"public class ChangeProfilePhotoCommandParser implements Parser\u003cChangeProfilePhotoCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"     * Parses the given {@code String} of arguments in the context of the ChangeProfilePhotoCommand"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"     * and returns a ChangeProfilePhotoCommand object for execution."},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"    public ChangeProfilePhotoCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"        String path \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"        if (path.isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeProfilePhotoCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"        return new ChangeProfilePhotoCommand(new ProfilePhoto(path));"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":32}},{"path":"src/main/java/seedu/club/logic/parser/ClubBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.AddPollCommand;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.AddTaskCommand;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.AssignTaskCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.club.logic.commands.ChangePasswordCommand;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.ChangeProfilePhotoCommand;"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.ChangeTaskStatusCommand;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.ClearCommand;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.Command;"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.CompressCommand;"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.DecompressCommand;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.DeleteCommand;"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.DeletePollCommand;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.DeleteTagCommand;"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.DeleteTaskCommand;"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.EditCommand;"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.EmailCommand;"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.ExitCommand;"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.ExportCommand;"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.FindCommand;"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.HelpCommand;"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.HideResultsCommand;"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.HistoryCommand;"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.ImportCommand;"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.ListCommand;"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.LogInCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.club.logic.commands.LogOutCommand;"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.RedoCommand;"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.RemoveGroupCommand;"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.SelectCommand;"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.ShowResultsCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.club.logic.commands.SignUpCommand;"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.UndoCommand;"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.ViewAllTasksCommand;"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.ViewMyTasksCommand;"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.VoteCommand;"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":48,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":49,"author":{"gitID":"-"},"content":" */"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"public class ClubBookParser {"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"        //@@author yash-chowdhary"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"        if (isAddCommand(commandWord)) {"},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isAddPollCommand(commandWord)) {"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"            return new AddPollCommandParser().parse(arguments);"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isAddTaskCommand(commandWord)) {"},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"            return new AddTaskCommandParser().parse(arguments);"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isAssignTaskCommand(commandWord)) {"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"            return new AssignTaskCommandParser().parse(arguments);"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isChangePasswordCommand(commandWord)) {"},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"            return new ChangePasswordCommandParser().parse(arguments);"},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isChangePicCommand(commandWord)) {"},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":"            return new ChangeProfilePhotoCommandParser().parse(arguments);"},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isChangeTaskStatusCommand(commandWord)) {"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":"            return new ChangeTaskStatusCommandParser().parse(arguments);"},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isClearCommand(commandWord)) {"},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":"            return new ClearCommandParser().parse(arguments);"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isCompressCommand(commandWord)) {"},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":"            return new CompressCommand();"},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isDecompressCommand(commandWord)) {"},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":"            return new DecompressCommand();"},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isDeleteCommand(commandWord)) {"},{"lineNumber":94,"author":{"gitID":"yash-chowdhary"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isDeletePollCommand(commandWord)) {"},{"lineNumber":96,"author":{"gitID":"yash-chowdhary"},"content":"            return new DeletePollCommandParser().parse(arguments);"},{"lineNumber":97,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isDeleteTagCommand(commandWord)) {"},{"lineNumber":98,"author":{"gitID":"yash-chowdhary"},"content":"            return new DeleteTagCommandParser().parse(arguments);"},{"lineNumber":99,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isDeleteTaskCommand(commandWord)) {"},{"lineNumber":100,"author":{"gitID":"yash-chowdhary"},"content":"            return new DeleteTaskCommandParser().parse(arguments);"},{"lineNumber":101,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isEditCommand(commandWord)) {"},{"lineNumber":102,"author":{"gitID":"yash-chowdhary"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":103,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isEmailCommand(commandWord)) {"},{"lineNumber":104,"author":{"gitID":"yash-chowdhary"},"content":"            return new EmailCommandParser().parse(arguments);"},{"lineNumber":105,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isExitCommand(commandWord)) {"},{"lineNumber":106,"author":{"gitID":"yash-chowdhary"},"content":"            return new ExitCommand();"},{"lineNumber":107,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isExportCommand(commandWord)) {"},{"lineNumber":108,"author":{"gitID":"yash-chowdhary"},"content":"            return new ExportCommandParser().parse(arguments);"},{"lineNumber":109,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isImportCommand(commandWord)) {"},{"lineNumber":110,"author":{"gitID":"yash-chowdhary"},"content":"            return new ImportCommandParser().parse(arguments);"},{"lineNumber":111,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isFindCommand(commandWord)) {"},{"lineNumber":112,"author":{"gitID":"yash-chowdhary"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":113,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isHelpCommand(commandWord)) {"},{"lineNumber":114,"author":{"gitID":"yash-chowdhary"},"content":"            return new HelpCommand();"},{"lineNumber":115,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isHideResults(commandWord)) {"},{"lineNumber":116,"author":{"gitID":"yash-chowdhary"},"content":"            return new HideResultsCommand();"},{"lineNumber":117,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isHistoryCommand(commandWord)) {"},{"lineNumber":118,"author":{"gitID":"yash-chowdhary"},"content":"            return new HistoryCommand();"},{"lineNumber":119,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isListCommand(commandWord)) {"},{"lineNumber":120,"author":{"gitID":"yash-chowdhary"},"content":"            return new ListCommand();"},{"lineNumber":121,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isLoginCommand(commandWord)) {"},{"lineNumber":122,"author":{"gitID":"yash-chowdhary"},"content":"            return new LoginCommandParser().parse(arguments);"},{"lineNumber":123,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isLogoutCommand(commandWord)) {"},{"lineNumber":124,"author":{"gitID":"yash-chowdhary"},"content":"            return new LogOutCommand();"},{"lineNumber":125,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isRedoCommand(commandWord)) {"},{"lineNumber":126,"author":{"gitID":"yash-chowdhary"},"content":"            return new RedoCommand();"},{"lineNumber":127,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isRemoveGroupCommand(commandWord)) {"},{"lineNumber":128,"author":{"gitID":"yash-chowdhary"},"content":"            return new RemoveGroupCommandParser().parse(arguments);"},{"lineNumber":129,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isSelectCommand(commandWord)) {"},{"lineNumber":130,"author":{"gitID":"yash-chowdhary"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":131,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isShowResultsCommand(commandWord)) {"},{"lineNumber":132,"author":{"gitID":"yash-chowdhary"},"content":"            return new ShowResultsCommand();"},{"lineNumber":133,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isSignUpCommand(commandWord)) {"},{"lineNumber":134,"author":{"gitID":"yash-chowdhary"},"content":"            return new SignUpCommandParser().parse(arguments);"},{"lineNumber":135,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isUndoCommand(commandWord)) {"},{"lineNumber":136,"author":{"gitID":"yash-chowdhary"},"content":"            return new UndoCommand();"},{"lineNumber":137,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isViewAllTasksCommand(commandWord)) {"},{"lineNumber":138,"author":{"gitID":"yash-chowdhary"},"content":"            return new ViewAllTasksCommand();"},{"lineNumber":139,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isViewMyTasksCommand(commandWord)) {"},{"lineNumber":140,"author":{"gitID":"yash-chowdhary"},"content":"            return new ViewMyTasksCommand();"},{"lineNumber":141,"author":{"gitID":"yash-chowdhary"},"content":"        } else if (isVoteCommand(commandWord)) {"},{"lineNumber":142,"author":{"gitID":"yash-chowdhary"},"content":"            return new VoteCommandParser().parse(arguments);"},{"lineNumber":143,"author":{"gitID":"yash-chowdhary"},"content":"        } else {"},{"lineNumber":144,"author":{"gitID":"yash-chowdhary"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":145,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":148,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of ChangeTaskStatusCommand\u0027s aliases"},{"lineNumber":150,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isChangeTaskStatusCommand(String commandWord) {"},{"lineNumber":152,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : ChangeTaskStatusCommand.COMMAND_ALIASES) {"},{"lineNumber":153,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":154,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":155,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":156,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":158,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":160,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of VoteCommand\u0027s aliases"},{"lineNumber":162,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isVoteCommand(String commandWord) {"},{"lineNumber":164,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : VoteCommand.COMMAND_ALIASES) {"},{"lineNumber":165,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":166,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":167,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":168,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":170,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":172,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of ChangePasswordCommand\u0027s aliases"},{"lineNumber":174,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isChangePasswordCommand(String commandWord) {"},{"lineNumber":176,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : ChangePasswordCommand.COMMAND_ALIASES) {"},{"lineNumber":177,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":178,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":179,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":180,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":182,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":184,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of ViewMyTasksCommand\u0027s aliases"},{"lineNumber":186,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isViewMyTasksCommand(String commandWord) {"},{"lineNumber":188,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : ViewMyTasksCommand.COMMAND_ALIASES) {"},{"lineNumber":189,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":190,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":191,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":192,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":194,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":196,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of ViewAllTasksCommand\u0027s aliases"},{"lineNumber":198,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isViewAllTasksCommand(String commandWord) {"},{"lineNumber":200,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : ViewAllTasksCommand.COMMAND_ALIASES) {"},{"lineNumber":201,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":202,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":203,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":204,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":206,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":208,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of UndoCommand\u0027s aliases"},{"lineNumber":210,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isUndoCommand(String commandWord) {"},{"lineNumber":212,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : UndoCommand.COMMAND_ALIASES) {"},{"lineNumber":213,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":214,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":215,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":216,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":218,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":220,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of SignUpCommand\u0027s aliases"},{"lineNumber":222,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":223,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isSignUpCommand(String commandWord) {"},{"lineNumber":224,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : SignUpCommand.COMMAND_ALIASES) {"},{"lineNumber":225,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":226,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":227,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":228,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":229,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":230,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":232,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":233,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of ShowResultsCommand\u0027s aliases"},{"lineNumber":234,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":235,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isShowResultsCommand(String commandWord) {"},{"lineNumber":236,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : ShowResultsCommand.COMMAND_ALIASES) {"},{"lineNumber":237,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":238,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":239,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":240,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":241,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":242,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":244,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":245,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of SelectCommand\u0027s aliases"},{"lineNumber":246,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":247,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isSelectCommand(String commandWord) {"},{"lineNumber":248,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : SelectCommand.COMMAND_ALIASES) {"},{"lineNumber":249,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":250,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":251,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":252,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":253,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":254,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":256,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":257,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of RemoveGroupCommand\u0027s aliases"},{"lineNumber":258,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":259,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isRemoveGroupCommand(String commandWord) {"},{"lineNumber":260,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : RemoveGroupCommand.COMMAND_ALIASES) {"},{"lineNumber":261,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":262,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":263,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":264,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":265,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":266,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":268,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":269,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of RedoCommand\u0027s aliases"},{"lineNumber":270,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":271,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isRedoCommand(String commandWord) {"},{"lineNumber":272,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : RedoCommand.COMMAND_ALIASES) {"},{"lineNumber":273,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":274,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":275,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":276,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":277,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":278,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":279,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":280,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":281,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of LogoutCommand\u0027s aliases"},{"lineNumber":282,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":283,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isLogoutCommand(String commandWord) {"},{"lineNumber":284,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : LogOutCommand.COMMAND_ALIASES) {"},{"lineNumber":285,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":286,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":287,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":288,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":289,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":290,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":292,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":293,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of LoginCommand\u0027s aliases"},{"lineNumber":294,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":295,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isLoginCommand(String commandWord) {"},{"lineNumber":296,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : LogInCommand.COMMAND_ALIASES) {"},{"lineNumber":297,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":298,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":299,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":300,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":301,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":302,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":303,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":304,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":305,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of ListCommand\u0027s aliases"},{"lineNumber":306,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":307,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isListCommand(String commandWord) {"},{"lineNumber":308,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : ListCommand.COMMAND_ALIASES) {"},{"lineNumber":309,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":310,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":311,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":312,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":313,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":314,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":315,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":316,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":317,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of HistoryCommand\u0027s aliases"},{"lineNumber":318,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":319,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isHistoryCommand(String commandWord) {"},{"lineNumber":320,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : HistoryCommand.COMMAND_ALIASES) {"},{"lineNumber":321,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":322,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":323,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":324,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":325,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":326,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":327,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":328,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":329,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of HideResultsCommand\u0027s aliases"},{"lineNumber":330,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":331,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isHideResults(String commandWord) {"},{"lineNumber":332,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : HideResultsCommand.COMMAND_ALIASES) {"},{"lineNumber":333,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":334,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":335,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":336,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":337,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":338,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":339,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":340,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":341,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of HelpCommand\u0027s aliases"},{"lineNumber":342,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":343,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isHelpCommand(String commandWord) {"},{"lineNumber":344,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : HelpCommand.COMMAND_ALIASES) {"},{"lineNumber":345,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":346,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":347,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":348,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":349,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":350,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":351,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":352,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":353,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of FindCommand\u0027s aliases"},{"lineNumber":354,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":355,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isFindCommand(String commandWord) {"},{"lineNumber":356,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : FindCommand.COMMAND_ALIASES) {"},{"lineNumber":357,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":358,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":359,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":360,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":361,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":362,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":363,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":364,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":365,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of ImportCommand\u0027s aliases"},{"lineNumber":366,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":367,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isImportCommand(String commandWord) {"},{"lineNumber":368,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : ImportCommand.COMMAND_ALIASES) {"},{"lineNumber":369,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":370,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":371,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":372,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":373,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":374,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":375,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":376,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":377,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of ExportCommand\u0027s aliases"},{"lineNumber":378,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":379,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isExportCommand(String commandWord) {"},{"lineNumber":380,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : ExportCommand.COMMAND_ALIASES) {"},{"lineNumber":381,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":382,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":383,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":384,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":385,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":386,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":387,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":388,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":389,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of ExitCommand\u0027s aliases"},{"lineNumber":390,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":391,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isExitCommand(String commandWord) {"},{"lineNumber":392,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : ExitCommand.COMMAND_ALIASES) {"},{"lineNumber":393,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":394,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":395,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":396,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":397,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":398,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":399,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":400,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":401,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of EmailCommand\u0027s aliases"},{"lineNumber":402,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":403,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isEmailCommand(String commandWord) {"},{"lineNumber":404,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : EmailCommand.COMMAND_ALIASES) {"},{"lineNumber":405,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":406,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":407,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":408,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":409,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":410,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":411,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":412,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":413,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of EditCommand\u0027s aliases"},{"lineNumber":414,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":415,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isEditCommand(String commandWord) {"},{"lineNumber":416,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : EditCommand.COMMAND_ALIASES) {"},{"lineNumber":417,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":418,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":419,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":420,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":421,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":422,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":423,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":424,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":425,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of DeleteTaskCommand\u0027s aliases"},{"lineNumber":426,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":427,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isDeleteTaskCommand(String commandWord) {"},{"lineNumber":428,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : DeleteTaskCommand.COMMAND_ALIASES) {"},{"lineNumber":429,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":430,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":431,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":432,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":433,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":434,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":435,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":436,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":437,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of DeleteTagCommand\u0027s aliases"},{"lineNumber":438,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":439,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isDeleteTagCommand(String commandWord) {"},{"lineNumber":440,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : DeleteTagCommand.COMMAND_ALIASES) {"},{"lineNumber":441,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":442,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":443,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":444,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":445,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":446,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":447,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":448,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":449,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of DeletePollCommand\u0027s aliases"},{"lineNumber":450,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":451,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isDeletePollCommand(String commandWord) {"},{"lineNumber":452,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : DeletePollCommand.COMMAND_ALIASES) {"},{"lineNumber":453,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":454,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":455,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":456,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":457,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":458,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":459,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":460,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":461,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of DecompressCommand\u0027s aliases"},{"lineNumber":462,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":463,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isDeleteCommand(String commandWord) {"},{"lineNumber":464,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : DeleteCommand.COMMAND_ALIASES) {"},{"lineNumber":465,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":466,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":467,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":468,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":469,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":470,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":471,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":472,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":473,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of DecompressCommand\u0027s aliases"},{"lineNumber":474,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":475,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isDecompressCommand(String commandWord) {"},{"lineNumber":476,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : DecompressCommand.COMMAND_ALIASES) {"},{"lineNumber":477,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":478,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":479,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":480,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":481,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":482,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":483,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":484,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":485,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of CompressCommand\u0027s aliases"},{"lineNumber":486,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":487,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isCompressCommand(String commandWord) {"},{"lineNumber":488,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : CompressCommand.COMMAND_ALIASES) {"},{"lineNumber":489,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":490,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":491,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":492,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":493,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":494,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":495,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":496,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":497,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of ClearCommand\u0027s aliases"},{"lineNumber":498,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":499,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isClearCommand(String commandWord) {"},{"lineNumber":500,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : ClearCommand.COMMAND_ALIASES) {"},{"lineNumber":501,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":502,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":503,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":504,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":505,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":506,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":507,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":508,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":509,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of ChangeProfilePhotoCommand\u0027s aliases"},{"lineNumber":510,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":511,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isChangePicCommand(String commandWord) {"},{"lineNumber":512,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : ChangeProfilePhotoCommand.COMMAND_ALIASES) {"},{"lineNumber":513,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":514,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":515,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":516,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":517,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":518,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":519,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":520,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":521,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of AssignTaskCommand\u0027s aliases"},{"lineNumber":522,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":523,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isAssignTaskCommand(String commandWord) {"},{"lineNumber":524,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : AssignTaskCommand.COMMAND_ALIASES) {"},{"lineNumber":525,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":526,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":527,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":528,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":529,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":530,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":531,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":532,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":533,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of AddPollCommand\u0027s aliases"},{"lineNumber":534,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":535,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isAddTaskCommand(String commandWord) {"},{"lineNumber":536,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : AddTaskCommand.COMMAND_ALIASES) {"},{"lineNumber":537,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":538,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":539,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":540,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":541,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":542,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":543,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":544,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":545,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of AddPollCommand\u0027s aliases"},{"lineNumber":546,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":547,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isAddPollCommand(String commandWord) {"},{"lineNumber":548,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : AddPollCommand.COMMAND_ALIASES) {"},{"lineNumber":549,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":550,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":551,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":552,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":553,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":554,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":555,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":556,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":557,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if {@code commandWord} matches any of AddCommand\u0027s aliases"},{"lineNumber":558,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":559,"author":{"gitID":"yash-chowdhary"},"content":"    private boolean isAddCommand(String commandWord) {"},{"lineNumber":560,"author":{"gitID":"yash-chowdhary"},"content":"        for (String commandAlias : AddCommand.COMMAND_ALIASES) {"},{"lineNumber":561,"author":{"gitID":"yash-chowdhary"},"content":"            if (commandWord.equals(commandAlias)) {"},{"lineNumber":562,"author":{"gitID":"yash-chowdhary"},"content":"                return true;"},{"lineNumber":563,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":564,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":565,"author":{"gitID":"yash-chowdhary"},"content":"        return false;"},{"lineNumber":566,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":567,"author":{"gitID":"yash-chowdhary"},"content":"    //@@author"},{"lineNumber":568,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":7,"amrut-prabhu":24,"yash-chowdhary":503,"-":34}},{"path":"src/main/java/seedu/club/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.logging.Logger;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.util.CsvUtil;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.util.FileUtil;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Body;"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Client;"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Subject;"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Email;"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Name;"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Password;"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Phone;"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.ProfilePhoto;"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Username;"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Answer;"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Question;"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Date;"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Description;"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Status;"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Time;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":42,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":43,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":44,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":45,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":46,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":47,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":48,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":49,"author":{"gitID":"-"},"content":" */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_INVALID_PATH \u003d \"Path should be a valid absolute path to a file.\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ParserUtil.class);"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":"    //@@author MuhdNurKamal"},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"MuhdNurKamal"},"content":"     * Parses {@code oneBasedIndex} into a list of {@code Index} and returns it. Leading and trailing"},{"lineNumber":74,"author":{"gitID":"MuhdNurKamal"},"content":"     * whitespaces will be trimmed."},{"lineNumber":75,"author":{"gitID":"MuhdNurKamal"},"content":"     * @throws IllegalValueException if any of the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":76,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"MuhdNurKamal"},"content":"    public static List\u003cIndex\u003e parseIndices(String oneBasedIndexes) throws IllegalValueException {"},{"lineNumber":78,"author":{"gitID":"MuhdNurKamal"},"content":"        String trimmedIndexes \u003d oneBasedIndexes.trim();"},{"lineNumber":79,"author":{"gitID":"MuhdNurKamal"},"content":"        String[] stringIndexes \u003d trimmedIndexes.split(\" \");"},{"lineNumber":80,"author":{"gitID":"MuhdNurKamal"},"content":"        List\u003cIndex\u003e indexes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":81,"author":{"gitID":"MuhdNurKamal"},"content":"        for (String s : stringIndexes) {"},{"lineNumber":82,"author":{"gitID":"MuhdNurKamal"},"content":"            if (!StringUtil.isNonZeroUnsignedInteger(s)) {"},{"lineNumber":83,"author":{"gitID":"MuhdNurKamal"},"content":"                throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":84,"author":{"gitID":"MuhdNurKamal"},"content":"            } else {"},{"lineNumber":85,"author":{"gitID":"MuhdNurKamal"},"content":"                indexes.add(Index.fromOneBased((Integer.parseInt(s))));"},{"lineNumber":86,"author":{"gitID":"MuhdNurKamal"},"content":"            }"},{"lineNumber":87,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"MuhdNurKamal"},"content":"        return indexes;"},{"lineNumber":89,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"MuhdNurKamal"},"content":"    //@@author"},{"lineNumber":91,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"MuhdNurKamal"},"content":"     * Parses a {@code String matricNumber} into an {@code MatricNumber}."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":144,"author":{"gitID":"MuhdNurKamal"},"content":"     * @throws IllegalValueException if the given {@code matricNumber} is invalid."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"MuhdNurKamal"},"content":"    public static MatricNumber parseMatricNumber(String matricNumber) throws IllegalValueException {"},{"lineNumber":147,"author":{"gitID":"MuhdNurKamal"},"content":"        requireNonNull(matricNumber);"},{"lineNumber":148,"author":{"gitID":"MuhdNurKamal"},"content":"        String trimmedMatricNumber \u003d matricNumber.trim();"},{"lineNumber":149,"author":{"gitID":"MuhdNurKamal"},"content":"        if (!MatricNumber.isValidMatricNumber(trimmedMatricNumber)) {"},{"lineNumber":150,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new IllegalValueException(MatricNumber.MESSAGE_MATRIC_NUMBER_CONSTRAINTS);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"MuhdNurKamal"},"content":"        return new MatricNumber(trimmedMatricNumber);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"MuhdNurKamal"},"content":"     * Parses a {@code Optional\u003cString\u003e matricNumber} into an {@code Optional\u003cMatricNumber\u003e}"},{"lineNumber":157,"author":{"gitID":"MuhdNurKamal"},"content":"     * if {@code matricNumber} is present."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"MuhdNurKamal"},"content":"    public static Optional\u003cMatricNumber\u003e parseMatricNumber(Optional\u003cString\u003e matricNumber) throws IllegalValueException {"},{"lineNumber":161,"author":{"gitID":"MuhdNurKamal"},"content":"        requireNonNull(matricNumber);"},{"lineNumber":162,"author":{"gitID":"MuhdNurKamal"},"content":"        return matricNumber.isPresent() ? Optional.of(parseMatricNumber(matricNumber.get())) : Optional.empty();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"content":"    //@@author Song Weiyang"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * Parses a {@code String username} into an {@code Username}."},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":192,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    public static Username parseUsername(String username) {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        requireNonNull(username);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        String trimmedUsername \u003d username.trim();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        return new Username(trimmedUsername);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e username} into an {@code Optional\u003cUsername\u003e} if {@code username} is present."},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":203,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public static Optional\u003cUsername\u003e parseUsername(Optional\u003cString\u003e username) throws IllegalValueException {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        requireNonNull(username);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        return  username.isPresent() ? Optional.of(parseUsername(username.get())) : Optional.empty();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * Parses a {@code String password} into an {@code Password}."},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":212,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    public static Password parsePassword(String password) {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        requireNonNull(password);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        String trimmedPassword \u003d password.trim();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        return new Password(trimmedPassword);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e password} into an {@code Optional\u003cPassowrd\u003e} if {@code password} is present."},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":223,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    public static Optional\u003cPassword\u003e parsePassword(Optional\u003cString\u003e password) {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        return password.isPresent() ? Optional.of(parsePassword(password.get())) : Optional.empty();"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"amrut-prabhu"},"content":"    //@@author amrut-prabhu"},{"lineNumber":229,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":230,"author":{"gitID":"amrut-prabhu"},"content":"     * Parses a {@code String photo} into an {@code ProfilePhoto}."},{"lineNumber":231,"author":{"gitID":"amrut-prabhu"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":232,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":233,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws IllegalValueException if the given {@code photo} is invalid."},{"lineNumber":234,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":235,"author":{"gitID":"amrut-prabhu"},"content":"    public static ProfilePhoto parseProfilePhoto(String photo) throws IllegalValueException {"},{"lineNumber":236,"author":{"gitID":"amrut-prabhu"},"content":"        requireNonNull(photo);"},{"lineNumber":237,"author":{"gitID":"amrut-prabhu"},"content":"        String trimmedProfilePhoto \u003d photo.trim();"},{"lineNumber":238,"author":{"gitID":"amrut-prabhu"},"content":"        if (!ProfilePhoto.isValidProfilePhoto(trimmedProfilePhoto)) {"},{"lineNumber":239,"author":{"gitID":"amrut-prabhu"},"content":"            throw new IllegalValueException(ProfilePhoto.MESSAGE_PHOTO_PATH_CONSTRAINTS);"},{"lineNumber":240,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":241,"author":{"gitID":"amrut-prabhu"},"content":"        return new ProfilePhoto(trimmedProfilePhoto);"},{"lineNumber":242,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":244,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":245,"author":{"gitID":"amrut-prabhu"},"content":"     * Parses a {@code path} into a {@code File}."},{"lineNumber":246,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":247,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws IllegalValueException if the given {@code path} is is not an absolute file path or does not exist."},{"lineNumber":248,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":249,"author":{"gitID":"amrut-prabhu"},"content":"    public static File parseImportPath(String path) throws IllegalValueException {"},{"lineNumber":250,"author":{"gitID":"amrut-prabhu"},"content":"        File file \u003d FileUtil.parsePath(path);"},{"lineNumber":251,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":252,"author":{"gitID":"amrut-prabhu"},"content":"        if (FileUtil.isNotValidFileName(file) || CsvUtil.isNotValidCsvFileName(path)) {"},{"lineNumber":253,"author":{"gitID":"amrut-prabhu"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_PATH);"},{"lineNumber":254,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":255,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":256,"author":{"gitID":"amrut-prabhu"},"content":"        return file;"},{"lineNumber":257,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":259,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"amrut-prabhu"},"content":"     * Parses a {@code path} into a {@code File}."},{"lineNumber":261,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":262,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws IllegalValueException if the given {@code path} is not absolute or is a directory."},{"lineNumber":263,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"amrut-prabhu"},"content":"    public static File parseExportPath(String path) throws IllegalValueException, IOException {"},{"lineNumber":265,"author":{"gitID":"amrut-prabhu"},"content":"        File file \u003d FileUtil.parsePath(path);"},{"lineNumber":266,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":267,"author":{"gitID":"amrut-prabhu"},"content":"        if (FileUtil.isNotValidFileName(file) || CsvUtil.isNotValidCsvFileName(path)) {"},{"lineNumber":268,"author":{"gitID":"amrut-prabhu"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_PATH);"},{"lineNumber":269,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":270,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":271,"author":{"gitID":"amrut-prabhu"},"content":"        file.createNewFile();"},{"lineNumber":272,"author":{"gitID":"amrut-prabhu"},"content":"        return file;"},{"lineNumber":273,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":275,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":276,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":277,"author":{"gitID":"yash-chowdhary"},"content":"    //@@author yash-chowdhary"},{"lineNumber":278,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":279,"author":{"gitID":"yash-chowdhary"},"content":"     * Parses a {@code String group} into a {@code Group}."},{"lineNumber":280,"author":{"gitID":"yash-chowdhary"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":281,"author":{"gitID":"yash-chowdhary"},"content":"     *"},{"lineNumber":282,"author":{"gitID":"yash-chowdhary"},"content":"     * @throws IllegalValueException if the given {@code group} is invalid."},{"lineNumber":283,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":284,"author":{"gitID":"yash-chowdhary"},"content":"    public static Group parseGroup(String group) throws IllegalValueException {"},{"lineNumber":285,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(group);"},{"lineNumber":286,"author":{"gitID":"yash-chowdhary"},"content":"        String trimmedGroup \u003d group.trim();"},{"lineNumber":287,"author":{"gitID":"yash-chowdhary"},"content":"        if (!Group.isValidGroup(trimmedGroup)) {"},{"lineNumber":288,"author":{"gitID":"yash-chowdhary"},"content":"            throw new IllegalValueException(Group.MESSAGE_GROUP_CONSTRAINTS);"},{"lineNumber":289,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":290,"author":{"gitID":"yash-chowdhary"},"content":"        return new Group(trimmedGroup);"},{"lineNumber":291,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":293,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":294,"author":{"gitID":"yash-chowdhary"},"content":"     * Parses a {@code Optional\u003cString\u003e group} into a {@code Optional\u003cGroup\u003e} if {@code group} is present."},{"lineNumber":295,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":296,"author":{"gitID":"yash-chowdhary"},"content":"    public static Optional\u003cGroup\u003e parseGroup(Optional\u003cString\u003e group) throws  IllegalValueException {"},{"lineNumber":297,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(group);"},{"lineNumber":298,"author":{"gitID":"yash-chowdhary"},"content":"        return group.isPresent() ? Optional.of(parseGroup(group.get())) : Optional.empty();"},{"lineNumber":299,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":300,"author":{"gitID":"yash-chowdhary"},"content":"    //@@author"},{"lineNumber":301,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":302,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":303,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":304,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":305,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":306,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":307,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":309,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":310,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":311,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":312,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":314,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":317,"author":{"gitID":"yash-chowdhary"},"content":"     * Parses a {@code Optional\u003cString\u003e tag} into a {@code Optional\u003cTag\u003e} if {@code group} is present"},{"lineNumber":318,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":319,"author":{"gitID":"yash-chowdhary"},"content":"    public static Optional\u003cTag\u003e parseOptionalTag(Optional\u003cString\u003e tag) throws IllegalValueException {"},{"lineNumber":320,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(tag);"},{"lineNumber":321,"author":{"gitID":"yash-chowdhary"},"content":"        return tag.isPresent() ? Optional.of(parseTag(tag.get())) : Optional.empty();"},{"lineNumber":322,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":323,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":324,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":325,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":326,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":327,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":328,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":329,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":330,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":331,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":332,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":333,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":334,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":335,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":336,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":337,"author":{"gitID":"MuhdNurKamal"},"content":"     * Parses a {@code String question} into a {@code Question}."},{"lineNumber":338,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":339,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":340,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":341,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":342,"author":{"gitID":"MuhdNurKamal"},"content":"    public static Question parseQuestion(String question) throws IllegalValueException {"},{"lineNumber":343,"author":{"gitID":"MuhdNurKamal"},"content":"        requireNonNull(question);"},{"lineNumber":344,"author":{"gitID":"MuhdNurKamal"},"content":"        String trimmedQuestion \u003d question.trim();"},{"lineNumber":345,"author":{"gitID":"MuhdNurKamal"},"content":"        if (!Question.isValidQuestion(trimmedQuestion)) {"},{"lineNumber":346,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new IllegalValueException(Question.MESSAGE_QUESTION_CONSTRAINTS);"},{"lineNumber":347,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":348,"author":{"gitID":"MuhdNurKamal"},"content":"        return new Question(trimmedQuestion);"},{"lineNumber":349,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":350,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":351,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":352,"author":{"gitID":"MuhdNurKamal"},"content":"     * Parses a {@code Optional\u003cString\u003e question} into an {@code Optional\u003cQuestion\u003e} if {@code question} is present."},{"lineNumber":353,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":354,"author":{"gitID":"MuhdNurKamal"},"content":"    public static Optional\u003cQuestion\u003e parseQuestion(Optional\u003cString\u003e question) throws IllegalValueException {"},{"lineNumber":355,"author":{"gitID":"MuhdNurKamal"},"content":"        requireNonNull(question);"},{"lineNumber":356,"author":{"gitID":"MuhdNurKamal"},"content":"        return question.isPresent() ? Optional.of(parseQuestion(question.get())) : Optional.empty();"},{"lineNumber":357,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":358,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":359,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":360,"author":{"gitID":"MuhdNurKamal"},"content":"     * Parses a {@code String answer} into a {@code answer}."},{"lineNumber":361,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":362,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":363,"author":{"gitID":"MuhdNurKamal"},"content":"     * @throws IllegalValueException if the given {@code answer} is invalid."},{"lineNumber":364,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":365,"author":{"gitID":"MuhdNurKamal"},"content":"    public static Answer parseAnswer(String answer) throws IllegalValueException {"},{"lineNumber":366,"author":{"gitID":"MuhdNurKamal"},"content":"        requireNonNull(answer);"},{"lineNumber":367,"author":{"gitID":"MuhdNurKamal"},"content":"        String trimmedAnswer \u003d answer.trim();"},{"lineNumber":368,"author":{"gitID":"MuhdNurKamal"},"content":"        if (!Answer.isValidAnswer(trimmedAnswer)) {"},{"lineNumber":369,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new IllegalValueException(Answer.MESSAGE_ANSWER_CONSTRAINTS);"},{"lineNumber":370,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":371,"author":{"gitID":"MuhdNurKamal"},"content":"        return new Answer(trimmedAnswer);"},{"lineNumber":372,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":373,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":374,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":375,"author":{"gitID":"MuhdNurKamal"},"content":"     * Parses a {@code Optional\u003cString\u003e answer} into a {@code Optional\u003cAnswer\u003e} if {@code group} is present"},{"lineNumber":376,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":377,"author":{"gitID":"MuhdNurKamal"},"content":"    public static Optional\u003cAnswer\u003e parseOptionalAnswer(Optional\u003cString\u003e answer) throws IllegalValueException {"},{"lineNumber":378,"author":{"gitID":"MuhdNurKamal"},"content":"        requireNonNull(answer);"},{"lineNumber":379,"author":{"gitID":"MuhdNurKamal"},"content":"        return answer.isPresent() ? Optional.of(parseAnswer(answer.get())) : Optional.empty();"},{"lineNumber":380,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":381,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":382,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":383,"author":{"gitID":"MuhdNurKamal"},"content":"     * Parses {@code Collection\u003cString\u003e answers} into a {@code List\u003cAnswer\u003e}."},{"lineNumber":384,"author":{"gitID":"MuhdNurKamal"},"content":"     * Removes any duplicates if any"},{"lineNumber":385,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":386,"author":{"gitID":"MuhdNurKamal"},"content":"    public static List\u003cAnswer\u003e parseAnswers(Collection\u003cString\u003e answers) throws IllegalValueException {"},{"lineNumber":387,"author":{"gitID":"MuhdNurKamal"},"content":"        requireNonNull(answers);"},{"lineNumber":388,"author":{"gitID":"MuhdNurKamal"},"content":"        final Set\u003cString\u003e answerStringSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":389,"author":{"gitID":"MuhdNurKamal"},"content":"        final List\u003cAnswer\u003e answerList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":390,"author":{"gitID":"MuhdNurKamal"},"content":"        for (String answer : answers) {"},{"lineNumber":391,"author":{"gitID":"MuhdNurKamal"},"content":"            if (!answerStringSet.contains(answer)) {"},{"lineNumber":392,"author":{"gitID":"MuhdNurKamal"},"content":"                Answer parsedAnswer \u003d parseAnswer(answer);"},{"lineNumber":393,"author":{"gitID":"MuhdNurKamal"},"content":"                answerStringSet.add(answer);"},{"lineNumber":394,"author":{"gitID":"MuhdNurKamal"},"content":"                answerList.add(parsedAnswer);"},{"lineNumber":395,"author":{"gitID":"MuhdNurKamal"},"content":"            }"},{"lineNumber":396,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":397,"author":{"gitID":"MuhdNurKamal"},"content":"        return answerList;"},{"lineNumber":398,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":399,"author":{"gitID":"-"},"content":""},{"lineNumber":400,"author":{"gitID":"yash-chowdhary"},"content":"    //@@author yash-chowdhary"},{"lineNumber":401,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":402,"author":{"gitID":"yash-chowdhary"},"content":"     * Parses a {@code String client} into a {@code Client}."},{"lineNumber":403,"author":{"gitID":"yash-chowdhary"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":404,"author":{"gitID":"yash-chowdhary"},"content":"     *"},{"lineNumber":405,"author":{"gitID":"yash-chowdhary"},"content":"     * @throws IllegalValueException if the given {@code client} is invalid."},{"lineNumber":406,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":407,"author":{"gitID":"yash-chowdhary"},"content":"    public static Client parseClient(String client) throws IllegalValueException {"},{"lineNumber":408,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(client);"},{"lineNumber":409,"author":{"gitID":"yash-chowdhary"},"content":"        String trimmedClient \u003d client.trim();"},{"lineNumber":410,"author":{"gitID":"yash-chowdhary"},"content":"        if (!Client.isValidClient(trimmedClient)) {"},{"lineNumber":411,"author":{"gitID":"yash-chowdhary"},"content":"            throw new IllegalValueException(Client.MESSAGE_CLIENT_CONSTRAINTS);"},{"lineNumber":412,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":413,"author":{"gitID":"yash-chowdhary"},"content":"        return new Client(trimmedClient);"},{"lineNumber":414,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":415,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":416,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":417,"author":{"gitID":"yash-chowdhary"},"content":"     * Parses a {@code Optional\u003cString\u003e client} into a {@code Optional\u003cClient\u003e} if {@code client} is present."},{"lineNumber":418,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":419,"author":{"gitID":"yash-chowdhary"},"content":"    public static Optional\u003cClient\u003e parseClient(Optional\u003cString\u003e client) throws IllegalValueException {"},{"lineNumber":420,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(client);"},{"lineNumber":421,"author":{"gitID":"yash-chowdhary"},"content":"        return client.isPresent() ? Optional.of(parseClient(client.get())) : Optional.empty();"},{"lineNumber":422,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":423,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":424,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":425,"author":{"gitID":"yash-chowdhary"},"content":"     * Parses a {@code String subject} into a {@code Subject}."},{"lineNumber":426,"author":{"gitID":"yash-chowdhary"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":427,"author":{"gitID":"yash-chowdhary"},"content":"     *"},{"lineNumber":428,"author":{"gitID":"yash-chowdhary"},"content":"     * @throws IllegalValueException if the given {@code subject} is invalid."},{"lineNumber":429,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":430,"author":{"gitID":"yash-chowdhary"},"content":"    public static Subject parseSubject(String subject) {"},{"lineNumber":431,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(subject);"},{"lineNumber":432,"author":{"gitID":"yash-chowdhary"},"content":"        String trimmedSubject \u003d subject.trim();"},{"lineNumber":433,"author":{"gitID":"yash-chowdhary"},"content":"        return new Subject(trimmedSubject);"},{"lineNumber":434,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":435,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":436,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":437,"author":{"gitID":"yash-chowdhary"},"content":"     * Parses a {@code Optional\u003cString\u003e subject} into a {@code Optional\u003cSubject\u003e} if {@code subject} is present."},{"lineNumber":438,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":439,"author":{"gitID":"yash-chowdhary"},"content":"    public static Optional\u003cSubject\u003e parseSubject(Optional\u003cString\u003e subject) {"},{"lineNumber":440,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(subject);"},{"lineNumber":441,"author":{"gitID":"yash-chowdhary"},"content":"        return subject.isPresent() ? Optional.of(parseSubject(subject.get())) : Optional.empty();"},{"lineNumber":442,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":443,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":444,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":445,"author":{"gitID":"yash-chowdhary"},"content":"     * Parses a {@code String body} into a {@code Body}."},{"lineNumber":446,"author":{"gitID":"yash-chowdhary"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":447,"author":{"gitID":"yash-chowdhary"},"content":"     *"},{"lineNumber":448,"author":{"gitID":"yash-chowdhary"},"content":"     * @throws IllegalValueException if the given {@code body} is invalid."},{"lineNumber":449,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":450,"author":{"gitID":"yash-chowdhary"},"content":"    public static Body parseBody(String body) {"},{"lineNumber":451,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(body);"},{"lineNumber":452,"author":{"gitID":"yash-chowdhary"},"content":"        String trimmedBody \u003d body.trim();"},{"lineNumber":453,"author":{"gitID":"yash-chowdhary"},"content":"        return new Body(trimmedBody);"},{"lineNumber":454,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":455,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":456,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":457,"author":{"gitID":"yash-chowdhary"},"content":"     * Parses a {@code Optional\u003cString\u003e body} into a {@code Optional\u003cBody\u003e} if {@code body} is present."},{"lineNumber":458,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":459,"author":{"gitID":"yash-chowdhary"},"content":"    public static Optional\u003cBody\u003e parseBody(Optional\u003cString\u003e body) {"},{"lineNumber":460,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(body);"},{"lineNumber":461,"author":{"gitID":"yash-chowdhary"},"content":"        return body.isPresent() ? Optional.of(parseBody(body.get())) : Optional.empty();"},{"lineNumber":462,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":463,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":464,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":465,"author":{"gitID":"yash-chowdhary"},"content":"     * Parses a {@code String description} into a {@code Description}."},{"lineNumber":466,"author":{"gitID":"yash-chowdhary"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":467,"author":{"gitID":"yash-chowdhary"},"content":"     *"},{"lineNumber":468,"author":{"gitID":"yash-chowdhary"},"content":"     * @throws IllegalValueException if the given {@code description} is invalid."},{"lineNumber":469,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":470,"author":{"gitID":"yash-chowdhary"},"content":"    public static Description parseDescription(String description) throws IllegalValueException {"},{"lineNumber":471,"author":{"gitID":"yash-chowdhary"},"content":"        logger.info(description);"},{"lineNumber":472,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(description);"},{"lineNumber":473,"author":{"gitID":"yash-chowdhary"},"content":"        String trimmedDescription \u003d description.trim();"},{"lineNumber":474,"author":{"gitID":"yash-chowdhary"},"content":"        if (!Description.isValidDescription(trimmedDescription)) {"},{"lineNumber":475,"author":{"gitID":"yash-chowdhary"},"content":"            throw new IllegalValueException(Description.MESSAGE_DESCRIPTION_CONSTRAINTS);"},{"lineNumber":476,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":477,"author":{"gitID":"yash-chowdhary"},"content":"        return new Description(trimmedDescription);"},{"lineNumber":478,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":479,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":480,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":481,"author":{"gitID":"yash-chowdhary"},"content":"     * Parses a {@code Optional\u003cString\u003e description} into a {@code Optional\u003cDescription\u003e} if {@code description}"},{"lineNumber":482,"author":{"gitID":"yash-chowdhary"},"content":"     * is present."},{"lineNumber":483,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":484,"author":{"gitID":"yash-chowdhary"},"content":"    public static Optional\u003cDescription\u003e parseDescription(Optional\u003cString\u003e description) throws IllegalValueException {"},{"lineNumber":485,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(description);"},{"lineNumber":486,"author":{"gitID":"yash-chowdhary"},"content":"        return description.isPresent() ? Optional.of(parseDescription(description.get())) : Optional.empty();"},{"lineNumber":487,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":488,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":489,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":490,"author":{"gitID":"yash-chowdhary"},"content":"     * Parses a {@code String date} into a {@code Date}."},{"lineNumber":491,"author":{"gitID":"yash-chowdhary"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":492,"author":{"gitID":"yash-chowdhary"},"content":"     *"},{"lineNumber":493,"author":{"gitID":"yash-chowdhary"},"content":"     * @throws IllegalValueException if the given {@code date} is invalid."},{"lineNumber":494,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":495,"author":{"gitID":"yash-chowdhary"},"content":"    public static Date parseDate(String date) throws IllegalValueException {"},{"lineNumber":496,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(date);"},{"lineNumber":497,"author":{"gitID":"yash-chowdhary"},"content":"        String trimmedDate \u003d date.trim();"},{"lineNumber":498,"author":{"gitID":"yash-chowdhary"},"content":"        if (!Date.isValidDate(trimmedDate)) {"},{"lineNumber":499,"author":{"gitID":"yash-chowdhary"},"content":"            throw new IllegalValueException(Date.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":500,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":501,"author":{"gitID":"yash-chowdhary"},"content":"        return new Date(trimmedDate);"},{"lineNumber":502,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":503,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":504,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":505,"author":{"gitID":"yash-chowdhary"},"content":"     * Parses a {@code Optional\u003cString\u003e date} into a {@code Optional\u003cDate\u003e} if {@code date} is present."},{"lineNumber":506,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":507,"author":{"gitID":"yash-chowdhary"},"content":"    public static Optional\u003cDate\u003e parseDate(Optional\u003cString\u003e date) throws IllegalValueException {"},{"lineNumber":508,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(date);"},{"lineNumber":509,"author":{"gitID":"yash-chowdhary"},"content":"        return date.isPresent() ? Optional.of(parseDate(date.get())) : Optional.empty();"},{"lineNumber":510,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":511,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":512,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":513,"author":{"gitID":"yash-chowdhary"},"content":"     * Parses a {@code String time} into a {@code Date}."},{"lineNumber":514,"author":{"gitID":"yash-chowdhary"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":515,"author":{"gitID":"yash-chowdhary"},"content":"     *"},{"lineNumber":516,"author":{"gitID":"yash-chowdhary"},"content":"     * @throws IllegalValueException if the given {@code time} is invalid."},{"lineNumber":517,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":518,"author":{"gitID":"yash-chowdhary"},"content":"    public static Time parseTime(String time) throws IllegalValueException {"},{"lineNumber":519,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(time);"},{"lineNumber":520,"author":{"gitID":"yash-chowdhary"},"content":"        String trimmedTime \u003d time.trim();"},{"lineNumber":521,"author":{"gitID":"yash-chowdhary"},"content":"        if (!Time.isValidTime(trimmedTime)) {"},{"lineNumber":522,"author":{"gitID":"yash-chowdhary"},"content":"            throw new IllegalValueException(Time.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":523,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":524,"author":{"gitID":"yash-chowdhary"},"content":"        return new Time(trimmedTime);"},{"lineNumber":525,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":526,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":527,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":528,"author":{"gitID":"yash-chowdhary"},"content":"     * Parses a {@code Optional\u003cString\u003e time} into a {@code Optional\u003cTime\u003e} if {@code time} is present."},{"lineNumber":529,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":530,"author":{"gitID":"yash-chowdhary"},"content":"    public static Optional\u003cTime\u003e parseTime(Optional\u003cString\u003e time) throws IllegalValueException {"},{"lineNumber":531,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(time);"},{"lineNumber":532,"author":{"gitID":"yash-chowdhary"},"content":"        return time.isPresent() ? Optional.of(parseTime(time.get())) : Optional.empty();"},{"lineNumber":533,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":534,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":535,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":536,"author":{"gitID":"yash-chowdhary"},"content":"     * Parses a {@code Optional\u003cString\u003e status} into a {@code Optional\u003cStatus\u003e} if {@code status} is present."},{"lineNumber":537,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":538,"author":{"gitID":"yash-chowdhary"},"content":"    public static Optional\u003cStatus\u003e parseStatus(Optional\u003cString\u003e status) throws IllegalValueException {"},{"lineNumber":539,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(status);"},{"lineNumber":540,"author":{"gitID":"yash-chowdhary"},"content":"        return status.isPresent() ? Optional.of(parseStatus(status.get())) : Optional.empty();"},{"lineNumber":541,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":542,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":543,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":544,"author":{"gitID":"yash-chowdhary"},"content":"     * Parses a {@code String status} into a {@code Name}."},{"lineNumber":545,"author":{"gitID":"yash-chowdhary"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":546,"author":{"gitID":"yash-chowdhary"},"content":"     *"},{"lineNumber":547,"author":{"gitID":"yash-chowdhary"},"content":"     * @throws IllegalValueException if the given {@code status} is invalid."},{"lineNumber":548,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":549,"author":{"gitID":"yash-chowdhary"},"content":"    public static Status parseStatus(String status) throws IllegalValueException {"},{"lineNumber":550,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(status);"},{"lineNumber":551,"author":{"gitID":"yash-chowdhary"},"content":"        String trimmedStatus \u003d status.trim();"},{"lineNumber":552,"author":{"gitID":"yash-chowdhary"},"content":"        if (!Status.isValidStatus(trimmedStatus)) {"},{"lineNumber":553,"author":{"gitID":"yash-chowdhary"},"content":"            throw new IllegalValueException(Status.MESSAGE_INVALID_STATUS);"},{"lineNumber":554,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":555,"author":{"gitID":"yash-chowdhary"},"content":"        return new Status(trimmedStatus);"},{"lineNumber":556,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":557,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":558,"author":{"gitID":"yash-chowdhary"},"content":"    //@@author"},{"lineNumber":559,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"MuhdNurKamal":95,"amrut-prabhu":68,"yash-chowdhary":202,"-":193}},{"path":"src/main/java/seedu/club/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class    CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final Prefix PREFIX_MATRIC_NUMBER \u003d new Prefix(\"m/\");"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"    public static final Prefix PREFIX_GROUP \u003d new Prefix(\"g/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_USERNAME \u003d new Prefix((\"u/\"));"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"pw/\");"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"    public static final Prefix PREFIX_TO \u003d new Prefix(\"to/\");"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"    public static final Prefix PREFIX_CLIENT \u003d new Prefix(\"c/\");"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"    public static final Prefix PREFIX_SUBJECT \u003d new Prefix(\"s/\");"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"    public static final Prefix PREFIX_BODY \u003d new Prefix(\"b/\");"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final Prefix PREFIX_QUESTION \u003d new Prefix(\"q/\");"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final Prefix PREFIX_ANSWER \u003d new Prefix(\"ans/\");"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"desc/\");"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    public static final Prefix PREFIX_TIME \u003d new Prefix(\"ti/\");"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"    public static final Prefix PREFIX_STATUS \u003d new Prefix(\"st/\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NEWPASSWORD \u003d new Prefix(\"npw/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":3,"amrut-prabhu":1,"yash-chowdhary":9,"-":15}},{"path":"src/main/java/seedu/club/logic/parser/AddPollCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_ANSWER;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_QUESTION;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.AddPollCommand;"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Answer;"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Question;"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":" * Parses input arguments and creates a new AddPollCommand object"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"public class AddPollCommandParser implements Parser\u003cAddPollCommand\u003e {"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPollCommand"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"     * and returns an AddPollCommand object for execution."},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"    public AddPollCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_QUESTION, PREFIX_ANSWER);"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_QUESTION, PREFIX_ANSWER)"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPollCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"            Question question \u003d ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION)).get();"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"            List\u003cAnswer\u003e answerList \u003d ParserUtil.parseAnswers(argMultimap.getAllValues(PREFIX_ANSWER));"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"            Poll poll \u003d new Poll(question, answerList);"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"            return new AddPollCommand(poll);"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":56}},{"path":"src/main/java/seedu/club/logic/parser/RemoveGroupCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.stream.Stream;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.RemoveGroupCommand;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":" * Parses input arguments and creates a new RemoveGroupCommand object"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"public class RemoveGroupCommandParser implements Parser\u003cRemoveGroupCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"     * Parses the given {@code String} of arguments in the context of the RemoveGroupCommand"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"     * and returns an RemoveGroupCommand object for execution."},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"    public RemoveGroupCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"        ArgumentMultimap argumentMultimap \u003d"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_GROUP);"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"        if (!arePrefixesPresent(argumentMultimap, PREFIX_GROUP)"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"                || !argumentMultimap.getPreamble().isEmpty()) {"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveGroupCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"            Group group \u003d ParserUtil.parseGroup(argumentMultimap.getValue(PREFIX_GROUP).get());"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"            return new RemoveGroupCommand(group);"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if none of the prefixes contains empty values in the given"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"     * {@code ArgumentMultimap}"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"yash-chowdhary":46}},{"path":"src/main/java/seedu/club/logic/parser/LoginCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.LogInCommand;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Password;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Username;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new LogInCommand object"},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class LoginCommandParser {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the LogInCommand"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * and returns an LogInCommand object for execution."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public LogInCommand parse(String args) throws ParseException {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":26,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_USERNAME, PREFIX_PASSWORD);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_USERNAME, PREFIX_PASSWORD)"},{"lineNumber":29,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LogInCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            Username username \u003d ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME)).get();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            Password password \u003d ParserUtil.parsePassword(argMultimap.getValue(PREFIX_PASSWORD)).get();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            return new LogInCommand(username, password);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":9,"-":41}},{"path":"src/main/java/seedu/club/logic/parser/AssignTaskCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_TIME;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.AssignTaskCommand;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Date;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Description;"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Time;"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":" * Parses input arguments and creates a new AssignTaskCommand object"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"public class AssignTaskCommandParser implements Parser\u003cAssignTaskCommand\u003e {"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"    public AssignTaskCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_TIME, PREFIX_DATE, PREFIX_MATRIC_NUMBER);"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_TIME, PREFIX_DATE, PREFIX_MATRIC_NUMBER)"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignTaskCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"            Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"            Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"            Time time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"            MatricNumber matricNumber \u003d ParserUtil.parseMatricNumber(argMultimap.getValue(PREFIX_MATRIC_NUMBER).get());"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"            Task newTask \u003d new Task(description, time, date);"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"            return new AssignTaskCommand(newTask, matricNumber);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":4,"yash-chowdhary":39,"-":13}},{"path":"src/main/java/seedu/club/logic/parser/EmailCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_BODY;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_CLIENT;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.stream.Stream;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.EmailCommand;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Body;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Client;"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Subject;"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":" * Parses input arguments and creates a new EmailCommand object"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"public class EmailCommandParser implements Parser\u003cEmailCommand\u003e {"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"    public EmailCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_GROUP, PREFIX_TAG, PREFIX_CLIENT,"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"                PREFIX_SUBJECT, PREFIX_BODY);"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"        if (arePrefixesPresent(argMultimap, PREFIX_GROUP) \u0026\u0026 arePrefixesPresent(argMultimap, PREFIX_TAG)) {"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.COMMAND_USAGE));"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"        if (!((arePrefixesPresent(argMultimap, PREFIX_GROUP)) || arePrefixesPresent(argMultimap, PREFIX_TAG))) {"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.COMMAND_USAGE));"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_CLIENT)"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.COMMAND_USAGE));"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"            Group group \u003d ParserUtil.parseGroup(argMultimap.getValue(PREFIX_GROUP)).orElse(null);"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"            Tag tag \u003d ParserUtil.parseOptionalTag(argMultimap.getValue(PREFIX_TAG)).orElse(null);"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"            Client client \u003d ParserUtil.parseClient(argMultimap.getValue(PREFIX_CLIENT)).get();"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"            Subject subject \u003d ParserUtil.parseSubject(argMultimap.getValue(PREFIX_SUBJECT))"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"                    .orElse(new Subject(Subject.EMPTY_SUBJECT_STRING));"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"            Body body \u003d ParserUtil.parseBody(argMultimap.getValue(PREFIX_BODY))"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"                    .orElse(new Body(Body.EMPTY_BODY_STRING));"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"            return new EmailCommand(group, tag, client, subject, body);"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":66}},{"path":"src/main/java/seedu/club/logic/parser/ClearCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.ClearCommand;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"th14thmusician"},"content":"//@@author th14thmusician"},{"lineNumber":7,"author":{"gitID":"th14thmusician"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"th14thmusician"},"content":" * Parses input arguments and creates a new ClearCommand object"},{"lineNumber":9,"author":{"gitID":"th14thmusician"},"content":" */"},{"lineNumber":10,"author":{"gitID":"th14thmusician"},"content":"public class ClearCommandParser implements Parser\u003cClearCommand\u003e {"},{"lineNumber":11,"author":{"gitID":"th14thmusician"},"content":"    /**"},{"lineNumber":12,"author":{"gitID":"th14thmusician"},"content":"     * Parses the given {@code String} of arguments in the context of the ClearCommand"},{"lineNumber":13,"author":{"gitID":"th14thmusician"},"content":"     * and returns a ClearCommand object for execution."},{"lineNumber":14,"author":{"gitID":"th14thmusician"},"content":"     */"},{"lineNumber":15,"author":{"gitID":"th14thmusician"},"content":"    public ClearCommand parse(String args) throws ParseException {"},{"lineNumber":16,"author":{"gitID":"th14thmusician"},"content":"        if (args.equals(\"\")) {"},{"lineNumber":17,"author":{"gitID":"th14thmusician"},"content":"            return  new ClearCommand();"},{"lineNumber":18,"author":{"gitID":"th14thmusician"},"content":"        } else {"},{"lineNumber":19,"author":{"gitID":"th14thmusician"},"content":"            return new ClearCommand(args);"},{"lineNumber":20,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":21,"author":{"gitID":"th14thmusician"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"th14thmusician"},"content":"}"},{"lineNumber":23,"author":{"gitID":"th14thmusician"},"content":"//@@author"}],"authorContributionMap":{"amrut-prabhu":2,"th14thmusician":18,"-":3}},{"path":"src/main/java/seedu/club/logic/parser/ArgumentTokenizer.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"},{"lineNumber":8,"author":{"gitID":"-"},"content":" *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"},{"lineNumber":12,"author":{"gitID":"-"},"content":" *    in the above example.\u003cbr\u003e"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ArgumentTokenizer {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return extractArguments(argsString, positions);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        for (Prefix prefix : prefixes) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            positions.addAll(findPrefixPositions(argsString, prefix));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return positions;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * {@see findAllPrefixPositions}"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        while (prefixPosition !\u003d -1) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            positions.add(extendedPrefix);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return positions;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * such occurrence can be found."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                : prefixIndex + 1; // +1 as offset for whitespace"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * {@code argsString}."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // Sort by start position"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // Insert a PrefixPosition to represent the preamble"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        prefixPositions.add(0, preambleMarker);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        prefixPositions.add(endPositionMarker);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // Map prefixes to their argument values (if any)"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            // Extract and store prefixes and their arguments"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            argMultimap.put(argPrefix, argValue);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return argMultimap;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    private static String extractArgumentValue(String argsString,"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                                        PrefixPosition currentPrefixPosition,"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                                        PrefixPosition nextPrefixPosition) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return value.trim();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    private static class PrefixPosition {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        private int startPosition;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        private final Prefix prefix;"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            this.prefix \u003d prefix;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            this.startPosition \u003d startPosition;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        int getStartPosition() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            return this.startPosition;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Prefix getPrefix() {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            return this.prefix;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":149}},{"path":"src/main/java/seedu/club/logic/parser/SignUpCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.club.logic.commands.SignUpCommand;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Email;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Name;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Phone;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"content":"//@@author Song Weiyang"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new SignUpCommand object"},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class SignUpCommandParser {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the SignUpCommand"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * and returns an SignUpCommand object for execution."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public SignUpCommand parse(String args) throws ParseException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                        PREFIX_MATRIC_NUMBER, PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_MATRIC_NUMBER, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SignUpCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"            MatricNumber matricNumber \u003d ParserUtil.parseMatricNumber(argMultimap.getValue(PREFIX_MATRIC_NUMBER)).get();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            Group group \u003d new Group(\"exco\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            Member member \u003d new Member(name, phone, email, matricNumber, group, tagList);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"            return new SignUpCommand(member);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"MuhdNurKamal":6,"amrut-prabhu":13,"-":49}},{"path":"src/main/java/seedu/club/logic/parser/ChangePasswordCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_NEWPASSWORD;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.club.logic.commands.ChangePasswordCommand;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Password;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Username;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"content":"//@@author Song Weiyang"},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new ChangePasswordCommand object"},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class ChangePasswordCommandParser implements Parser\u003cChangePasswordCommand\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the ChangePasswordCommand"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * and returns an ChangeCommandCommand object for execution."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public ChangePasswordCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_USERNAME, PREFIX_PASSWORD, PREFIX_NEWPASSWORD);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_USERNAME, PREFIX_PASSWORD, PREFIX_NEWPASSWORD)"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                    ChangePasswordCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            Username username \u003d ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME)).get();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            Password oldPassword \u003d ParserUtil.parsePassword(argMultimap.getValue(PREFIX_PASSWORD)).get();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            Password newPassword \u003d ParserUtil.parsePassword(argMultimap.getValue(PREFIX_NEWPASSWORD)).get();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            return new ChangePasswordCommand(username, oldPassword, newPassword);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"amrut-prabhu":8,"yash-chowdhary":2,"-":44}},{"path":"src/main/java/seedu/club/logic/ListElementPointer.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.NoSuchElementException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Has a cursor that points to an element in the list, and is able to iterate through the list."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * This is different from {@code ListIterator}, which has a cursor that points in between elements."},{"lineNumber":10,"author":{"gitID":"-"},"content":" * The {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * {@code previous()}, the same element is returned on both calls."},{"lineNumber":12,"author":{"gitID":"-"},"content":" * In contrast, {@code ListElementPointer}\u0027s behaviour: when making alternating calls of"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * {@code next()} and {@code previous()}, the next and previous elements are returned respectively."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ListElementPointer {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private List\u003cString\u003e list;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private int index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * The cursor points to the last element in {@code list}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public ListElementPointer(List\u003cString\u003e list) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        this.list \u003d new ArrayList\u003c\u003e(list);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        index \u003d this.list.size() - 1;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Appends {@code element} to the end of the list."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void add(String element) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        list.add(element);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Returns true if calling {@code #next()} does not throw an {@code NoSuchElementException}."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public boolean hasNext() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        int nextIndex \u003d index + 1;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return isWithinBounds(nextIndex);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Returns true if calling {@code #previous()} does not throw an {@code NoSuchElementException}."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public boolean hasPrevious() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        int previousIndex \u003d index - 1;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return isWithinBounds(previousIndex);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Returns true if calling {@code #current()} does not throw an {@code NoSuchElementException}."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public boolean hasCurrent() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return isWithinBounds(index);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private boolean isWithinBounds(int index) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Returns the next element in the list and advances the cursor position."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * @throws NoSuchElementException if there is no more next element in the list."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public String next() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        if (!hasNext()) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            throw new NoSuchElementException();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return list.get(++index);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns the previous element in the list and moves the cursor position backwards."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @throws NoSuchElementException if there is no more previous element in the list."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public String previous() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        if (!hasPrevious()) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            throw new NoSuchElementException();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return list.get(--index);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Returns the current element in the list."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * @throws NoSuchElementException if the list is empty."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public String current() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        if (!hasCurrent()) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            throw new NoSuchElementException();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return list.get(index);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        if (!(other instanceof ListElementPointer)) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        ListElementPointer iterator \u003d (ListElementPointer) other;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":110}},{"path":"src/main/java/seedu/club/logic/parser/CommandList.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.AddCommand;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.AddPollCommand;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.AddTaskCommand;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.AssignTaskCommand;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.ChangeProfilePhotoCommand;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.ChangeTaskStatusCommand;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.ClearCommand;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.CompressCommand;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.DecompressCommand;"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.DeleteCommand;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.DeletePollCommand;"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.DeleteTagCommand;"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.DeleteTaskCommand;"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.EmailCommand;"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.ExitCommand;"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.ExportCommand;"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.FindCommand;"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.HelpCommand;"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.HideResultsCommand;"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.ImportCommand;"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.ListCommand;"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.LogInCommand;"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.LogOutCommand;"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.RedoCommand;"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.RemoveGroupCommand;"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.SelectCommand;"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.ShowResultsCommand;"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.SignUpCommand;"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.UndoCommand;"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.ViewAllTasksCommand;"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.ViewMyTasksCommand;"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.VoteCommand;"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":" * Stores list of commands"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"public class CommandList {"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"    private final ArrayList\u003cString\u003e commandList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"    public ArrayList\u003cString\u003e getCommandList() {"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(AddCommand.COMMAND_FORMAT);"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(ChangeProfilePhotoCommand.COMMAND_FORMAT);"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(ClearCommand.COMMAND_WORD);"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(CompressCommand.COMMAND_WORD);"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(ChangeTaskStatusCommand.COMMAND_FORMAT);"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(DecompressCommand.COMMAND_WORD);"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(DeleteCommand.COMMAND_FORMAT);"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(DeleteTagCommand.COMMAND_FORMAT);"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(EditCommand.COMMAND_FORMAT);"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(EmailCommand.COMMAND_FORMAT);"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(ExitCommand.COMMAND_WORD);"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(FindCommand.COMMAND_FORMAT);"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(HelpCommand.COMMAND_WORD);"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(ListCommand.COMMAND_WORD);"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(LogInCommand.COMMAND_FORMAT);"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(RedoCommand.COMMAND_WORD);"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(RemoveGroupCommand.COMMAND_FORMAT);"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(SelectCommand.COMMAND_FORMAT);"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(UndoCommand.COMMAND_WORD);"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(AddTaskCommand.COMMAND_FORMAT);"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(DeleteTaskCommand.COMMAND_FORMAT);"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(ShowResultsCommand.COMMAND_WORD);"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(HideResultsCommand.COMMAND_WORD);"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(ViewAllTasksCommand.COMMAND_WORD);"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(ViewMyTasksCommand.COMMAND_WORD);"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(AssignTaskCommand.COMMAND_FORMAT);"},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(AddPollCommand.COMMAND_FORMAT);"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(DeletePollCommand.COMMAND_FORMAT);"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(ExportCommand.COMMAND_FORMAT);"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(LogOutCommand.COMMAND_WORD);"},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(VoteCommand.COMMAND_WORD);"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(SignUpCommand.COMMAND_FORMAT);"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(ChangeTaskStatusCommand.COMMAND_FORMAT);"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"        commandList.add(ImportCommand.COMMAND_FORMAT);"},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"        Collections.sort(commandList);"},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":"        return commandList;"},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":86}},{"path":"src/main/java/seedu/club/logic/commands/ChangeProfilePhotoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"//@@author amrut-prabhu"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.PhotoReadException;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.ProfilePhoto;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":" * Changes the profile photo of the currently logged in member."},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":" */"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"public class ChangeProfilePhotoCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String COMMAND_WORD \u003d \"changepic\";"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"            Arrays.asList(COMMAND_WORD, \"pic\", \"profilepic\")"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"    );"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String COMMAND_FORMAT \u003d \"changepic PATH\";"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Changes your profile photo.\\n\""},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"            + \"Parameters: PHOTO_FILE_PATH (must be an absolute file path to your new profile photo)\\n\""},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"            + \"Example: \" + COMMAND_WORD"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"            + \" C:/Users/John Doe/Desktop/john_doe.jpg\";"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_INVALID_PHOTO_PATH \u003d \"Invalid photo path: %1$s\";"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_CHANGE_PROFILE_PHOTO_SUCCESS \u003d \"Your profile photo has been changed to: %1$s\";"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"    private ProfilePhoto profilePhoto;"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"     * @param profilePhoto of the member"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"    public ChangeProfilePhotoCommand(ProfilePhoto profilePhoto) {"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"        requireNonNull(profilePhoto);"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"        this.profilePhoto \u003d profilePhoto;"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"        //Defensive programming"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"        assert profilePhoto.getPhotoPath() !\u003d null : \"Photo path should not be null.\";"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"        requireToSignUp();"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"        requireToLogIn();"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"            model.addProfilePhoto(profilePhoto.getPhotoPath());"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"            return new CommandResult(String.format(MESSAGE_CHANGE_PROFILE_PHOTO_SUCCESS, profilePhoto.getPhotoPath()));"},{"lineNumber":51,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (PhotoReadException pre) {"},{"lineNumber":52,"author":{"gitID":"amrut-prabhu"},"content":"            throw new CommandException(String.format(MESSAGE_INVALID_PHOTO_PATH, profilePhoto.getPhotoPath()));"},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"        // short circuit if same object"},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"            return true;"},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"        // instanceof handles nulls"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"        if (!(other instanceof ChangeProfilePhotoCommand)) {"},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":"            return false;"},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":"        // state check"},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"        ChangeProfilePhotoCommand e \u003d (ChangeProfilePhotoCommand) other;"},{"lineNumber":70,"author":{"gitID":"amrut-prabhu"},"content":"        return this.profilePhoto.equals(e.profilePhoto);"},{"lineNumber":71,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":72}},{"path":"src/main/java/seedu/club/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.EditCommand.EditMemberDescriptor;"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_MATRIC_NUMBER,"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"                        PREFIX_GROUP, PREFIX_TAG, PREFIX_USERNAME, PREFIX_PASSWORD);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"        EditMemberDescriptor editMemberDescriptor \u003d new EditMemberDescriptor();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"amrut-prabhu"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editMemberDescriptor::setName);"},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editMemberDescriptor::setPhone);"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editMemberDescriptor::setEmail);"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"            ParserUtil.parseMatricNumber(argMultimap.getValue(PREFIX_MATRIC_NUMBER))"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"                    .ifPresent(editMemberDescriptor::setMatricNumber);"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"            ParserUtil.parseGroup(argMultimap.getValue(PREFIX_GROUP)).ifPresent(editMemberDescriptor::setGroup);"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editMemberDescriptor::setTags);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"        if (!editMemberDescriptor.isAnyFieldEdited()) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":"        return new EditCommand(index, editMemberDescriptor);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":2,"amrut-prabhu":26,"-":58}},{"path":"src/main/java/seedu/club/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.MemberNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":" * Deletes a member identified using it\u0027s last displayed index from the club book."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String COMMAND_FORMAT \u003d \"delete INDEX\";"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"            Arrays.asList(COMMAND_WORD, \"del\", \"rm\", \"remove\")"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    );"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"            + \": Deletes the member identified by the index number used in the last member listing.\\n\""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_DELETE_MEMBER_SUCCESS \u003d \"Deleted member: %1$s\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"    private Member memberToDelete;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"        requireNonNull(memberToDelete);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireToSignUp();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        requireToLogIn();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        requireExcoLogIn();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"            model.deleteMember(memberToDelete);"},{"lineNumber":51,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (MemberNotFoundException mnfe) {"},{"lineNumber":52,"author":{"gitID":"amrut-prabhu"},"content":"            throw new AssertionError(\"The target member cannot be missing\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_MEMBER_SUCCESS, memberToDelete));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        requireToSignUp();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        requireToLogIn();"},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":"        List\u003cMember\u003e lastShownList \u003d model.getFilteredMemberList();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":"        memberToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":76,"author":{"gitID":"amrut-prabhu"},"content":"                \u0026\u0026 Objects.equals(this.memberToDelete, ((DeleteCommand) other).memberToDelete));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":19,"yash-chowdhary":6,"-":53}},{"path":"src/main/java/seedu/club/logic/parser/ChangeTaskStatusCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.logic.parser;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.ChangeTaskStatusCommand;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Status;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":" * Parses input arguments and creates a new ChangeTaskStatus object"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"public class ChangeTaskStatusCommandParser implements Parser\u003cChangeTaskStatusCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"    public ChangeTaskStatusCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(args);"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_STATUS);"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"        Index index;"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"                    ChangeTaskStatusCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"            Status status \u003d ParserUtil.parseStatus(argMultimap.getValue(PREFIX_STATUS)).get();"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"            return new ChangeTaskStatusCommand(index, status);"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":39}},{"path":"src/main/java/seedu/club/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.model.Model.PREDICATE_SHOW_ALL_MEMBERS;"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":" * Lists all members in the club book to the user."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"            Arrays.asList(COMMAND_WORD, \"l\")"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"    );"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all members.\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireToSignUp();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        requireToLogIn();"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"        model.updateFilteredMemberList(PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":6,"yash-chowdhary":5,"-":18}},{"path":"src/main/java/seedu/club/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"            Arrays.asList(COMMAND_WORD, \"r\")"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"    );"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo successful.\";"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo.\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":8,"yash-chowdhary":6,"-":28}},{"path":"src/main/java/seedu/club/logic/commands/DecompressCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.core.EventsCenter;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.events.ui.DecompressMembersRequestEvent;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":" * Lists all members in the club book to the user."},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"public class DecompressCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String COMMAND_WORD \u003d \"decompress\";"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Member list view decompressed.\";"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"            Arrays.asList(COMMAND_WORD, \"decomp\")"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"    );"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"        EventsCenter.getInstance().post(new DecompressMembersRequestEvent());"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"        requireToSignUp();"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"        requireToLogIn();"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":29}},{"path":"src/main/java/seedu/club/logic/commands/EmailCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_NON_EXISTENT_GROUP;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_BODY;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_CLIENT;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Body;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Client;"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Subject;"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":" * Sends an email to the desired recipient(s) in a particular group of the club book."},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"public class EmailCommand extends Command {"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String COMMAND_WORD \u003d \"email\";"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"            Arrays.asList(COMMAND_WORD, \"mail\")"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"    );"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String COMMAND_FORMAT \u003d \"email [g/ ] [t/ ] c/ [s/ ] [b/ ]\";"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String COMMAND_USAGE \u003d COMMAND_WORD + \": Sends an email to the desired recipients(s) \""},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"            + \"in EITHER a particular group OR a particular tag of the club book.\\n\""},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"            + \"Parameters: \" + \" \""},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_GROUP + \"GROUP\" + \" [OR] \""},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_TAG + \"TAG\" + \" \""},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_CLIENT + \"EMAIL CLIENT\" + \" \""},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_SUBJECT + \"SUBJECT\" + \" \""},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_BODY + \"BODY\\n\""},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_GROUP + \"Member \""},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_CLIENT + \"gmail \""},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_SUBJECT + \"New Club Management application \""},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_BODY + \"Hi all, I hope you have enjoyed using Club Connect so far. \""},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"            + \"Please do share your experience with us. Regards, John Doe\";"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String EMAIL_CLIENT_OPENED \u003d \"Email client opened!\";"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_NOT_SENT \u003d \"Please adhere to the command usage.\";"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"    private Tag tag;"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"    private Group group;"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"    private Client client;"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"    private Subject subject;"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"    private Body body;"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"    public EmailCommand(Group group, Tag tag, Client client, Subject subject, Body body) {"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"        this.group \u003d group;"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"        this.tag \u003d tag;"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"        this.client \u003d client;"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"        this.subject \u003d new Subject(subject.toString().replaceAll(\"\\\\s\", \"+\"));"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"        this.body \u003d new Body(body.toString().replaceAll(\"\\\\s\", \"+\"));"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"        requireToSignUp();"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"        requireToLogIn();"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"            String emailRecipients \u003d model.generateEmailRecipients(group, tag);"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"            model.sendEmail(emailRecipients, client, subject, body);"},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"            return new CommandResult(EMAIL_CLIENT_OPENED);"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (GroupNotFoundException gnfe) {"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"            throw new CommandException(String.format(MESSAGE_NON_EXISTENT_GROUP, group));"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (TagNotFoundException tnfe) {"},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"            throw new CommandException(DeleteTagCommand.MESSAGE_NON_EXISTENT_TAG);"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean equals(Object other) {"},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"                || (other instanceof EmailCommand // instanceof handles nulls"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 (group \u003d\u003d ((EmailCommand) other).group || group.equals(((EmailCommand) other).group))"},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 (tag \u003d\u003d ((EmailCommand) other).tag || tag.equals(((EmailCommand) other).tag))"},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 client.equals(((EmailCommand) other).client));"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":90}},{"path":"src/main/java/seedu/club/logic/commands/ViewMyTasksCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TasksAlreadyListedException;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":" * Lists all tasks of the currently logged-in member in the club book."},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"public class ViewMyTasksCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String  COMMAND_WORD \u003d \"viewmytasks\";"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"            Arrays.asList(COMMAND_WORD, \"mytasks\")"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"    );"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Your tasks have been listed.\";"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_ALREADY_LISTED \u003d \"All your tasks have already been listed.\";"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(model);"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"        requireToSignUp();"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"        requireToLogIn();"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"            model.viewMyTasks();"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (TasksAlreadyListedException tale) {"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"            throw new CommandException(MESSAGE_ALREADY_LISTED);"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":35}},{"path":"src/main/java/seedu/club/logic/commands/AddPollCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_ANSWER;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_QUESTION;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.DuplicatePollException;"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":" * Adds a poll to the club book."},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"public class AddPollCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String COMMAND_WORD \u003d \"addpoll\";"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String COMMAND_FORMAT \u003d \"addpoll q/ ans/ [ans/...]\";"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"            Arrays.asList(COMMAND_WORD, \"addp\", \"poll\")"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"    );"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"            + \": Adds a poll for members to respond to on Club Connect.\\n\""},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"            + \"Parameters: \""},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"            + PREFIX_QUESTION + \"QUESTION \""},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"            + PREFIX_ANSWER + \"ANSWER...\\n\""},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"            + PREFIX_QUESTION + \"When should the annual Appreciation Dinner be held? \""},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"            + PREFIX_ANSWER + \"April 13 \""},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"            + PREFIX_ANSWER + \"April 14 \""},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"            + PREFIX_ANSWER + \"April 21 \";"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New poll added: %1$s\";"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String MESSAGE_DUPLICATE_POLL \u003d \"This poll already exists in the club book.\";"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"    private final Poll toAdd;"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"     * Creates an AddPollCommand to add the specified {@code poll}"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"    public AddPollCommand(Poll poll) {"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"        requireNonNull(poll);"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"        toAdd \u003d poll;"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"        requireNonNull(model);"},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"        requireToSignUp();"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"        requireToLogIn();"},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"        requireExcoLogIn();"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"            model.addPoll(toAdd);"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"        } catch (DuplicatePollException e) {"},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_POLL);"},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":"                || (other instanceof AddPollCommand // instanceof handles nulls"},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":"                \u0026\u0026 toAdd.equals(((AddPollCommand) other).toAdd));"},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":70}},{"path":"src/main/java/seedu/club/logic/commands/ExportCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"//@@author amrut-prabhu"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":" * Exports Club Connect\u0027s members\u0027 information to the file specified."},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":" */"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"public class ExportCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String COMMAND_WORD \u003d \"export\";"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String COMMAND_FORMAT \u003d \"export FILE_PATH\";"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"            Arrays.asList(COMMAND_WORD, \"exp\")"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"    );"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"            + \": Exports the members\u0027 information to the specified CSV file.\\n\""},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"            + \"Parameters: FILE_PATH (must be an absolute path to a CSV file)\\n\""},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"            + \"Example: \" + COMMAND_WORD + \" C:/Users/Jane Doe/Desktop/Club Connect Members.csv\";"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_EXPORT_SUCCESS \u003d \"Successfully exported details of members to %1$s\";"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_EXPORT_FAILURE \u003d \"Error occurred while exporting to the file: %1$s\";"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"    private final File exportFile;"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"     * @param exportFile CSV file to be exported to."},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"    public ExportCommand(File exportFile) {"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"        requireNonNull(exportFile);"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"        this.exportFile \u003d exportFile;"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"        requireToSignUp();"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"        requireToLogIn();"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"            model.exportClubConnectMembers(exportFile);"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (IOException ioe) {"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"            throw new CommandException(String.format(MESSAGE_EXPORT_FAILURE, exportFile));"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":52,"author":{"gitID":"amrut-prabhu"},"content":"        return new CommandResult(String.format(MESSAGE_EXPORT_SUCCESS, exportFile));"},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"                || (other instanceof ExportCommand // instanceof handles nulls"},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"                \u0026\u0026 this.exportFile.equals(((ExportCommand) other).exportFile)); // state check"},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":61}},{"path":"src/main/java/seedu/club/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.club.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ClubBook;"},{"lineNumber":11,"author":{"gitID":"th14thmusician"},"content":"//@@author th14thmusician"},{"lineNumber":12,"author":{"gitID":"th14thmusician"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"th14thmusician"},"content":" * Clears the club book."},{"lineNumber":14,"author":{"gitID":"th14thmusician"},"content":" */"},{"lineNumber":15,"author":{"gitID":"th14thmusician"},"content":"public class ClearCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"th14thmusician"},"content":""},{"lineNumber":17,"author":{"gitID":"th14thmusician"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":18,"author":{"gitID":"th14thmusician"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Club Connect has been cleared.\";"},{"lineNumber":19,"author":{"gitID":"th14thmusician"},"content":"    public static final String MESSAGE_FAILURE \u003d \"Action to Clear data in Club Connect has been cancelled\";"},{"lineNumber":20,"author":{"gitID":"th14thmusician"},"content":"    public static final String MESSAGE_CONFRIMATION \u003d \"Confirm clearing all data in Club Connect?\""},{"lineNumber":21,"author":{"gitID":"th14thmusician"},"content":"            + \" Type \u0027clear Y\u0027 to confirm and \u0027clear N\u0027 to cancel.\""},{"lineNumber":22,"author":{"gitID":"th14thmusician"},"content":"            + \" \\nWARNING: THIS IS NOT A UNDOABLE COMMAND\";"},{"lineNumber":23,"author":{"gitID":"th14thmusician"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" \""},{"lineNumber":24,"author":{"gitID":"th14thmusician"},"content":"            + \"Y/N\";"},{"lineNumber":25,"author":{"gitID":"th14thmusician"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":26,"author":{"gitID":"th14thmusician"},"content":"            Arrays.asList(COMMAND_WORD, \"c\", \"erase\")"},{"lineNumber":27,"author":{"gitID":"th14thmusician"},"content":"    );"},{"lineNumber":28,"author":{"gitID":"th14thmusician"},"content":"    private String args;"},{"lineNumber":29,"author":{"gitID":"th14thmusician"},"content":""},{"lineNumber":30,"author":{"gitID":"th14thmusician"},"content":"    public ClearCommand() {"},{"lineNumber":31,"author":{"gitID":"th14thmusician"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"th14thmusician"},"content":""},{"lineNumber":33,"author":{"gitID":"th14thmusician"},"content":"    public ClearCommand(String args) {"},{"lineNumber":34,"author":{"gitID":"th14thmusician"},"content":"        this.args \u003d args;"},{"lineNumber":35,"author":{"gitID":"th14thmusician"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"th14thmusician"},"content":""},{"lineNumber":37,"author":{"gitID":"th14thmusician"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"th14thmusician"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":39,"author":{"gitID":"th14thmusician"},"content":"        requireNonNull(model);"},{"lineNumber":40,"author":{"gitID":"th14thmusician"},"content":"        requireToSignUp();"},{"lineNumber":41,"author":{"gitID":"th14thmusician"},"content":"        requireToLogIn();"},{"lineNumber":42,"author":{"gitID":"th14thmusician"},"content":"        requireExcoLogIn();"},{"lineNumber":43,"author":{"gitID":"th14thmusician"},"content":"        if (!model.getClearConfirmation()) {"},{"lineNumber":44,"author":{"gitID":"th14thmusician"},"content":"            model.setClearConfirmation(true);"},{"lineNumber":45,"author":{"gitID":"th14thmusician"},"content":"            return new CommandResult(MESSAGE_CONFRIMATION);"},{"lineNumber":46,"author":{"gitID":"th14thmusician"},"content":"        } else {"},{"lineNumber":47,"author":{"gitID":"th14thmusician"},"content":"            if (args \u003d\u003d null) {"},{"lineNumber":48,"author":{"gitID":"th14thmusician"},"content":"                return new CommandResult(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, COMMAND_FORMAT));"},{"lineNumber":49,"author":{"gitID":"th14thmusician"},"content":"            } else if (args.equals(\" Y\")) {"},{"lineNumber":50,"author":{"gitID":"th14thmusician"},"content":"                model.resetData(new ClubBook());"},{"lineNumber":51,"author":{"gitID":"th14thmusician"},"content":"                model.clearClubBook();"},{"lineNumber":52,"author":{"gitID":"th14thmusician"},"content":"                return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":53,"author":{"gitID":"th14thmusician"},"content":"            } else {"},{"lineNumber":54,"author":{"gitID":"th14thmusician"},"content":"                model.setClearConfirmation(false);"},{"lineNumber":55,"author":{"gitID":"th14thmusician"},"content":"                return new CommandResult(MESSAGE_FAILURE);"},{"lineNumber":56,"author":{"gitID":"th14thmusician"},"content":"            }"},{"lineNumber":57,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"th14thmusician"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"th14thmusician"},"content":"}"},{"lineNumber":60,"author":{"gitID":"th14thmusician"},"content":"//@@author"}],"authorContributionMap":{"amrut-prabhu":3,"yash-chowdhary":3,"th14thmusician":50,"-":4}},{"path":"src/main/java/seedu/club/logic/commands/Command.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.Messages;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public abstract class Command {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    protected UndoRedoStack undoRedoStack;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of members."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"     * @return summary message for members displayed"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"    public static String getMessageForMemberListShownSummary(int displaySize) {"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"        return String.format(Messages.MESSAGE_MEMBERS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public abstract CommandResult execute() throws CommandException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * access to the dependencies."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"th14thmusician"},"content":"    //@@author th14thmusician"},{"lineNumber":45,"author":{"gitID":"th14thmusician"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"th14thmusician"},"content":"     * Requires user to login before proceeding"},{"lineNumber":47,"author":{"gitID":"th14thmusician"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"th14thmusician"},"content":"    protected void requireToLogIn () throws CommandException {"},{"lineNumber":49,"author":{"gitID":"th14thmusician"},"content":"        if (model.getLoggedInMember() \u003d\u003d null) {"},{"lineNumber":50,"author":{"gitID":"th14thmusician"},"content":"            throw new CommandException(Messages.MESSAGE_REQUIRE_LOG_IN);"},{"lineNumber":51,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"th14thmusician"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"th14thmusician"},"content":""},{"lineNumber":54,"author":{"gitID":"th14thmusician"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"th14thmusician"},"content":"     * Requires user to Sign Up"},{"lineNumber":56,"author":{"gitID":"th14thmusician"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"th14thmusician"},"content":"    protected void requireToSignUp () throws CommandException {"},{"lineNumber":58,"author":{"gitID":"th14thmusician"},"content":"        if (model.getClubBook().getMemberList().isEmpty()) {"},{"lineNumber":59,"author":{"gitID":"th14thmusician"},"content":"            throw new CommandException(Messages.MESSAGE_REQUIRE_SIGN_UP);"},{"lineNumber":60,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"th14thmusician"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"th14thmusician"},"content":""},{"lineNumber":63,"author":{"gitID":"th14thmusician"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"th14thmusician"},"content":"     * Requires exco access to use the command"},{"lineNumber":65,"author":{"gitID":"th14thmusician"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"th14thmusician"},"content":"    protected void requireExcoLogIn () throws CommandException {"},{"lineNumber":67,"author":{"gitID":"th14thmusician"},"content":"        if (!model.getLoggedInMember().getGroup().groupName.equals(\"exco\")) {"},{"lineNumber":68,"author":{"gitID":"th14thmusician"},"content":"            throw new CommandException(Messages.MESSAGE_REQUIRE_EXCO_LOG_IN);"},{"lineNumber":69,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"th14thmusician"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"th14thmusician"},"content":""},{"lineNumber":72,"author":{"gitID":"th14thmusician"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"th14thmusician"},"content":"     * Requires user to logout"},{"lineNumber":74,"author":{"gitID":"th14thmusician"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"th14thmusician"},"content":"    protected void requireToLogOut () throws CommandException {"},{"lineNumber":76,"author":{"gitID":"th14thmusician"},"content":"        if (model.getLoggedInMember() !\u003d null) {"},{"lineNumber":77,"author":{"gitID":"th14thmusician"},"content":"            throw new CommandException(Messages.MESSAGE_REQUIRE_LOG_OUT);"},{"lineNumber":78,"author":{"gitID":"th14thmusician"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"th14thmusician"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"th14thmusician"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":10,"th14thmusician":37,"-":33}},{"path":"src/main/java/seedu/club/logic/commands/LogInCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.club.model.Model;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Password;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Username;"},{"lineNumber":16,"content":"//@@author Song Weiyang"},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":" * Logs in a member to ClubConnect"},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class LogInCommand extends Command {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"login\";"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"            Arrays.asList(COMMAND_WORD, \"signin\")"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    );"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String COMMAND_FORMAT \u003d \"login u/ pw/ \";"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Hi %1$s. Welcome to Club Connect!\";"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_FAILURE \u003d \"Login unsuccessful. Please try again.\";"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Allows you to log in to Club Connect.\\n\""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"            + PREFIX_USERNAME + \"USERNAME \""},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"            + PREFIX_PASSWORD + \"PASSWORD\\n\""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"            + PREFIX_USERNAME + \"A0167855F\" + \" \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_PASSWORD + \"password\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private final Username username;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private final Password password;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public LogInCommand(Username username, Password password) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.username \u003d username;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.password \u003d password;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        requireToSignUp();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        requireToLogOut();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        model.logsInMember(username.value, password.value);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        if (model.getLoggedInMember() !\u003d null) {"},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, model.getLoggedInMember().getName().toString()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_FAILURE);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        super.setData(model, history, undoRedoStack);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"amrut-prabhu":14,"yash-chowdhary":8,"-":39}},{"path":"src/main/java/seedu/club/logic/commands/HelpCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.EventsCenter;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Format full help instructions for every command for display."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class HelpCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"            Arrays.asList(COMMAND_WORD, \"h\", \"info\")"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"    );"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Brings up usage instructions for Club Connect.\\n\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":4,"yash-chowdhary":6,"-":18}},{"path":"src/main/java/seedu/club/logic/commands/ViewAllTasksCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TasksCannotBeDisplayedException;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":" * Lists all tasks in the club book to the user."},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"public class ViewAllTasksCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String COMMAND_WORD \u003d \"viewalltasks\";"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"            Arrays.asList(COMMAND_WORD, \"alltasks\")"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"    );"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays all tasks in Club Connect.\";"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"All tasks are displayed.\";"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_CANNOT_VIEW \u003d \"You do not have permission to view all tasks.\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(model);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireToSignUp();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        requireToLogIn();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"            model.viewAllTasks();"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (TasksCannotBeDisplayedException tcbde) {"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"            throw new CommandException(MESSAGE_CANNOT_VIEW);"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":5,"yash-chowdhary":25,"-":8}},{"path":"src/main/java/seedu/club/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.DuplicateMatricNumberException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":" * Adds a member to the club book."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"            Arrays.asList(COMMAND_WORD, \"a\", \"insert\")"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"    );"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" \""},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"            + PREFIX_NAME + \" \""},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"            + PREFIX_PHONE + \" \""},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"            + PREFIX_EMAIL + \" \""},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"            + PREFIX_MATRIC_NUMBER + \" \""},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"            + \"[\" + PREFIX_GROUP + \" ] \""},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"            + \"[\" + PREFIX_TAG + \" ] \";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a member to Club Connect.\\n\""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"            + PREFIX_MATRIC_NUMBER + \"MATRIC NUMBER \""},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"            + \"[\" + PREFIX_GROUP + \"GROUP] \""},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]... \\n\""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"            + PREFIX_MATRIC_NUMBER + \"A0123456H \""},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"            + PREFIX_GROUP + \"Logistics \""},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"            + PREFIX_TAG + \"Head \""},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"            + PREFIX_TAG + \"EventCoordinator\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New member added: %1$s\";"},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_DUPLICATE_MATRIC_NUMBER \u003d \"A member with the same matriculation number already \""},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"            + \"exists in Club Connect.\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"    private final Member toAdd;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"     * Creates an AddCommand to add the specified {@code member}"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":"    public AddCommand(Member member) {"},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":"        requireNonNull(member);"},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"        toAdd \u003d member;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        requireToSignUp();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        requireToLogIn();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        requireExcoLogIn();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":73,"author":{"gitID":"amrut-prabhu"},"content":"            model.addMember(toAdd);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":75,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (DuplicateMatricNumberException e) {"},{"lineNumber":76,"author":{"gitID":"amrut-prabhu"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_MATRIC_NUMBER);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":2,"amrut-prabhu":33,"yash-chowdhary":8,"-":44}},{"path":"src/main/java/seedu/club/logic/commands/exceptions/CommandException.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":" * Represents an error which occurs during execution of a {@link seedu.club.logic.commands.Command}."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CommandException extends Exception {"},{"lineNumber":7,"author":{"gitID":"-"},"content":"    public CommandException(String message) {"},{"lineNumber":8,"author":{"gitID":"-"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":10,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":2,"-":8}},{"path":"src/main/java/seedu/club/logic/commands/exceptions/IllegalExecutionException.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.logic.commands.exceptions;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":" * Signals that execution of this command is illegal due to invalid permissions."},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"public class IllegalExecutionException extends Exception {"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":7}},{"path":"src/main/java/seedu/club/logic/commands/RemoveGroupCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_MANDATORY_GROUP;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.commons.core.Messages.MESSAGE_NON_EXISTENT_GROUP;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.group.exceptions.GroupCannotBeRemovedException;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":" * Removes a group from the Club Book"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"public class RemoveGroupCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String COMMAND_WORD \u003d \"removegroup\";"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String COMMAND_FORMAT \u003d \"removegroup g/ \";"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"            Arrays.asList(COMMAND_WORD, \"rmgroup\", \"delgroup\")"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    );"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes a Group from the Club Connect.\\n\""},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"            + \"Parameters: \""},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_GROUP + \"GROUP\";"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Group deleted from Club Connect: %1$s\";"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"    private final Group toRemove;"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"     * Creates an AddCommand to add the specified {@code member}"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"    public RemoveGroupCommand(Group group) {"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(group);"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"        toRemove \u003d group;"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(model);"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"        requireToSignUp();"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"        requireToLogIn();"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"        requireExcoLogIn();"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"            model.removeGroup(toRemove);"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toRemove));"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (GroupNotFoundException gnfe) {"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"            throw new CommandException(String.format(MESSAGE_NON_EXISTENT_GROUP, toRemove));"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (GroupCannotBeRemovedException gcbre) {"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"            throw new CommandException(String.format(MESSAGE_MANDATORY_GROUP, toRemove.toString()));"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"                || (other instanceof RemoveGroupCommand // instanceof handles nulls"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 toRemove.equals(((RemoveGroupCommand) other).toRemove));"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"yash-chowdhary":65}},{"path":"src/main/java/seedu/club/logic/commands/UndoableCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.model.Model.PREDICATE_SHOW_ALL_MEMBERS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ClubBook;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ReadOnlyClubBook;"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.PollIsRelevantToMemberPredicate;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Represents a command which can be undone and redone."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"    private ReadOnlyClubBook previousClubBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    protected abstract CommandResult executeUndoableCommand() throws CommandException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"     * Stores the current state of {@code model#clubBook}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"    private void saveClubBookSnapshot() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"        this.previousClubBook \u003d new ClubBook(model.getClubBook());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * This method is called before the execution of {@code UndoableCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * {@code UndoableCommand}s that require this preprocessing step should override this method."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {}"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"     * Reverts the ClubBook to the state before this command"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"     * was executed and updates the filtered member list to"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"     * show all members."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    protected final void undo() {"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"        requireAllNonNull(model, previousClubBook);"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"        model.resetData(previousClubBook);"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"        model.updateFilteredMemberList(PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"        model.updateFilteredPollList(new PollIsRelevantToMemberPredicate(model.getLoggedInMember()));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"     * Executes the command and updates the filtered member"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"     * list to show all members."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected final void redo() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            executeUndoableCommand();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The command has been successfully executed previously; \""},{"lineNumber":56,"author":{"gitID":"-"},"content":"                    + \"it should not fail now\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"        model.updateFilteredMemberList(PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":"        model.updateFilteredPollList(new PollIsRelevantToMemberPredicate(model.getLoggedInMember()));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public final CommandResult execute() throws CommandException {"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"        saveClubBookSnapshot();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        preprocessUndoableCommand();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return executeUndoableCommand();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":3,"amrut-prabhu":20,"-":45}},{"path":"src/main/java/seedu/club/logic/commands/DeleteTagCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"//@@author amrut-prabhu"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":" * Removes a tag from all members in the club book."},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":" */"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"public class DeleteTagCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String COMMAND_WORD \u003d \"deletetag\";"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String COMMAND_FORMAT \u003d \"deletetag t/ \";"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"            Arrays.asList(COMMAND_WORD, \"deltag\", \"rmtag\")"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"    );"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"            + \": Deletes the specified tag from all members.\\n\""},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"            + \"Parameters: TAG (must be an existing tag)\\n\""},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"            + \"Example: \" + COMMAND_WORD + \" t/EventHelper\";"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_DELETE_TAG_SUCCESS \u003d \"Deleted Tag: %1$s\";"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_NON_EXISTENT_TAG \u003d \"This tag does not exist in Club Connect.\";"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"    private Tag tagToDelete;"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"    public DeleteTagCommand(Tag tagToDelete) {"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"        this.tagToDelete \u003d tagToDelete;"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"        requireNonNull(tagToDelete);"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"        requireToSignUp();"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"        requireToLogIn();"},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"        requireExcoLogIn();"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"            model.deleteTag(tagToDelete);"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"            return new CommandResult(String.format(MESSAGE_DELETE_TAG_SUCCESS, tagToDelete));"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (TagNotFoundException tnfe) {"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"            throw new CommandException(MESSAGE_NON_EXISTENT_TAG);"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"        requireToSignUp();"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"        requireToLogIn();"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"        List\u003cTag\u003e lastShownList \u003d model.getFilteredTagList();"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"        if (!getMasterTagList().contains(tagToDelete)) {"},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"            throw new CommandException(MESSAGE_NON_EXISTENT_TAG);"},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"        int targetIndex \u003d lastShownList.indexOf(tagToDelete);"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"        tagToDelete \u003d lastShownList.get(targetIndex);"},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"    private List\u003cTag\u003e getMasterTagList() {"},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":"        return new ArrayList\u003c\u003e(model.getClubBook().getTagList());"},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":71,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"amrut-prabhu"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitID":"amrut-prabhu"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":74,"author":{"gitID":"amrut-prabhu"},"content":"                || (other instanceof DeleteTagCommand // instanceof handles nulls"},{"lineNumber":75,"author":{"gitID":"amrut-prabhu"},"content":"                \u0026\u0026 this.tagToDelete.equals(((DeleteTagCommand) other).tagToDelete));"},{"lineNumber":76,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":77}},{"path":"src/main/java/seedu/club/logic/commands/DeleteTaskCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.commons.core.Messages;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TaskCannotBeDeletedException;"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":" * Deletes a task identified using its last displayed index from the club book."},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"public class DeleteTaskCommand extends UndoableCommand {"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String COMMAND_WORD \u003d \"deletetask\";"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"            Arrays.asList(COMMAND_WORD, \"deltask\", \"rmtask\")"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"    );"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"            + \": Deletes the task identified by the index number used in the last task listing.\\n\""},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" INDEX\";"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_TASK_CANNOT_BE_DELETED \u003d \"This task cannot be deleted as you are \""},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"            + \" neither the assignor nor the assignee of the task.\";"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_TASK_NOT_FOUND \u003d \"This task does not exist in Club Connect.\";"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"    private final Index targetIndex;"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"    private Task taskToDelete;"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"    public DeleteTaskCommand(Index targetIndex) {"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(targetIndex);"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(taskToDelete);"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"        requireToSignUp();"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"        requireToLogIn();"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"            model.deleteTask(taskToDelete);"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (TaskNotFoundException tnfe) {"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"            throw new CommandException(MESSAGE_TASK_NOT_FOUND);"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (TaskCannotBeDeletedException tcbde) {"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"            throw new CommandException(MESSAGE_TASK_CANNOT_BE_DELETED);"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete.getDescription()"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"                .getDescription()));"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"        requireToSignUp();"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"        requireToLogIn();"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"        taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean equals(Object other) {"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"                || (other instanceof DeleteTaskCommand // instanceof handles nulls"},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteTaskCommand) other).targetIndex) // state check"},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 Objects.equals(this.taskToDelete, ((DeleteTaskCommand) other).taskToDelete));"},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":86}},{"path":"src/main/java/seedu/club/logic/commands/HistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"            Arrays.asList(COMMAND_WORD, \"his\")"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"    );"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireToSignUp();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        requireToLogIn();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        requireNonNull(history);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.history \u003d history;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":5,"yash-chowdhary":5,"-":38}},{"path":"src/main/java/seedu/club/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.EventsCenter;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":" * Selects a member identified using it\u0027s last displayed index from the club book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"            Arrays.asList(COMMAND_WORD, \"s\", \"show\")"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"    );"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String COMMAND_FORMAT \u003d \"select INDEX\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"            + \": Opens the profile of the member identified by the index number used in the last member listing.\\n\""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_SELECT_MEMBER_SUCCESS \u003d \"Selected member: %1$s\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        requireToSignUp();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        requireToLogIn();"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"        List\u003cMember\u003e lastShownList \u003d model.getFilteredMemberList();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_MEMBER_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":13,"yash-chowdhary":6,"-":40}},{"path":"src/main/java/seedu/club/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"            Arrays.asList(COMMAND_WORD, \"u\")"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"    );"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo successful.\";"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo.\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":8,"yash-chowdhary":6,"-":28}},{"path":"src/main/java/seedu/club/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.model.Model.PREDICATE_SHOW_ALL_MEMBERS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.Messages;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.util.CollectionUtil;"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Credentials;"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Email;"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Name;"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Phone;"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.ProfilePhoto;"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.DuplicateMatricNumberException;"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.MemberNotFoundException;"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":" * Edits the details of an existing member in the club book."},{"lineNumber":39,"author":{"gitID":"-"},"content":" */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"            Arrays.asList(COMMAND_WORD, \"e\", \"update\")"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"    );"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String COMMAND_FORMAT \u003d \"edit [n/ ] [p/ ] [e/ ] [m/ ] [g/ ] [t/ ]\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"            + \": Edits the details of the member identified by the index number used in the last member listing. \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"            + \"[\" + PREFIX_MATRIC_NUMBER + \"MATRIC NUMBER] \""},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"            + \"[\" + PREFIX_GROUP + \"GROUP] \""},{"lineNumber":57,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":58,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":59,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":60,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_EDIT_MEMBER_SUCCESS \u003d \"Edited member: %1$s\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_DUPLICATE_MATRIC_NUMBER \u003d \"A member with the same matriculation number already \""},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":"            + \"exists in Club Connect.\";"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":"    private final EditMemberDescriptor editMemberDescriptor;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"amrut-prabhu"},"content":"    private Member memberToEdit;"},{"lineNumber":71,"author":{"gitID":"amrut-prabhu"},"content":"    private Member editedMember;"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"amrut-prabhu"},"content":"     * @param index of the member in the filtered member list to edit"},{"lineNumber":75,"author":{"gitID":"amrut-prabhu"},"content":"     * @param editMemberDescriptor details to edit the member with"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"amrut-prabhu"},"content":"    public EditCommand(Index index, EditMemberDescriptor editMemberDescriptor) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":79,"author":{"gitID":"amrut-prabhu"},"content":"        requireNonNull(editMemberDescriptor);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":82,"author":{"gitID":"amrut-prabhu"},"content":"        this.editMemberDescriptor \u003d new EditMemberDescriptor(editMemberDescriptor);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        requireToSignUp();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        requireToLogIn();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        requireExcoLogIn();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"amrut-prabhu"},"content":"            model.updateMember(memberToEdit, editedMember);"},{"lineNumber":92,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (DuplicateMatricNumberException dmne) {"},{"lineNumber":93,"author":{"gitID":"amrut-prabhu"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_MATRIC_NUMBER);"},{"lineNumber":94,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (MemberNotFoundException mnfe) {"},{"lineNumber":95,"author":{"gitID":"amrut-prabhu"},"content":"            throw new AssertionError(\"The target member cannot be missing\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"amrut-prabhu"},"content":"        model.updateFilteredMemberList(PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":98,"author":{"gitID":"amrut-prabhu"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_MEMBER_SUCCESS, editedMember));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        requireToSignUp();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        requireToLogIn();"},{"lineNumber":105,"author":{"gitID":"amrut-prabhu"},"content":"        List\u003cMember\u003e lastShownList \u003d model.getFilteredMemberList();"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":108,"author":{"gitID":"amrut-prabhu"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_MEMBER_DISPLAYED_INDEX);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"amrut-prabhu"},"content":"        memberToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":112,"author":{"gitID":"amrut-prabhu"},"content":"        editedMember \u003d createEditedMember(memberToEdit, editMemberDescriptor);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"amrut-prabhu"},"content":"     * Creates and returns a {@code member} with the details of {@code memberToEdit}"},{"lineNumber":117,"author":{"gitID":"amrut-prabhu"},"content":"     * edited with {@code editMemberDescriptor}."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"amrut-prabhu"},"content":"    private static Member createEditedMember(Member memberToEdit, EditMemberDescriptor editMemberDescriptor) {"},{"lineNumber":120,"author":{"gitID":"amrut-prabhu"},"content":"        assert memberToEdit !\u003d null;"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"amrut-prabhu"},"content":"        Name updatedName \u003d editMemberDescriptor.getName().orElse(memberToEdit.getName());"},{"lineNumber":123,"author":{"gitID":"amrut-prabhu"},"content":"        Phone updatedPhone \u003d editMemberDescriptor.getPhone().orElse(memberToEdit.getPhone());"},{"lineNumber":124,"author":{"gitID":"amrut-prabhu"},"content":"        Email updatedEmail \u003d editMemberDescriptor.getEmail().orElse(memberToEdit.getEmail());"},{"lineNumber":125,"author":{"gitID":"amrut-prabhu"},"content":"        MatricNumber updatedMatricNumber \u003d editMemberDescriptor.getMatricNumber()"},{"lineNumber":126,"author":{"gitID":"amrut-prabhu"},"content":"                .orElse(memberToEdit.getMatricNumber());"},{"lineNumber":127,"author":{"gitID":"amrut-prabhu"},"content":"        Group updatedGroup \u003d editMemberDescriptor.getGroup().orElse(memberToEdit.getGroup());"},{"lineNumber":128,"author":{"gitID":"amrut-prabhu"},"content":"        Set\u003cTag\u003e updatedTags \u003d editMemberDescriptor.getTags().orElse(memberToEdit.getTags());"},{"lineNumber":129,"author":{"gitID":"amrut-prabhu"},"content":"        ProfilePhoto updatedProfilePhoto \u003d editMemberDescriptor.getProfilePhoto()"},{"lineNumber":130,"author":{"gitID":"amrut-prabhu"},"content":"                .orElse(memberToEdit.getProfilePhoto());"},{"lineNumber":131,"author":{"gitID":"amrut-prabhu"},"content":"        Credentials updatedCredentials \u003d editMemberDescriptor.getCredentials().orElse(memberToEdit.getCredentials());"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"amrut-prabhu"},"content":"        return new Member(updatedName, updatedPhone, updatedEmail, updatedMatricNumber, updatedGroup,"},{"lineNumber":134,"author":{"gitID":"amrut-prabhu"},"content":"                updatedTags, updatedCredentials, updatedProfilePhoto);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":152,"author":{"gitID":"amrut-prabhu"},"content":"                \u0026\u0026 editMemberDescriptor.equals(e.editMemberDescriptor)"},{"lineNumber":153,"author":{"gitID":"amrut-prabhu"},"content":"                \u0026\u0026 Objects.equals(memberToEdit, e.memberToEdit);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"amrut-prabhu"},"content":"     * Stores the details to edit the member with. Each non-empty field value will replace the"},{"lineNumber":158,"author":{"gitID":"amrut-prabhu"},"content":"     * corresponding field value of the member."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"amrut-prabhu"},"content":"    public static class EditMemberDescriptor {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":164,"author":{"gitID":"MuhdNurKamal"},"content":"        private MatricNumber matricNumber;"},{"lineNumber":165,"author":{"gitID":"yash-chowdhary"},"content":"        private Group group;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":167,"author":{"gitID":"amrut-prabhu"},"content":"        private Credentials credentials;"},{"lineNumber":168,"author":{"gitID":"amrut-prabhu"},"content":"        private ProfilePhoto profilePhoto;"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"amrut-prabhu"},"content":"        public EditMemberDescriptor() {}"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":174,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":175,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":176,"author":{"gitID":"amrut-prabhu"},"content":"        public EditMemberDescriptor(EditMemberDescriptor toCopy) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":180,"author":{"gitID":"MuhdNurKamal"},"content":"            setMatricNumber(toCopy.matricNumber);"},{"lineNumber":181,"author":{"gitID":"yash-chowdhary"},"content":"            setGroup(toCopy.group);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":183,"author":{"gitID":"amrut-prabhu"},"content":"            setCredentials(toCopy.credentials);"},{"lineNumber":184,"author":{"gitID":"amrut-prabhu"},"content":"            setProfilePhoto(toCopy.profilePhoto);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":188,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":189,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":191,"author":{"gitID":"MuhdNurKamal"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email,"},{"lineNumber":192,"author":{"gitID":"MuhdNurKamal"},"content":"                    this.matricNumber, this.group, this.tags);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"MuhdNurKamal"},"content":"        public void setMatricNumber(MatricNumber matricNumber) {"},{"lineNumber":220,"author":{"gitID":"MuhdNurKamal"},"content":"            this.matricNumber \u003d matricNumber;"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"MuhdNurKamal"},"content":"        public Optional\u003cMatricNumber\u003e getMatricNumber() {"},{"lineNumber":224,"author":{"gitID":"MuhdNurKamal"},"content":"            return Optional.ofNullable(matricNumber);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"yash-chowdhary"},"content":"        public Optional\u003cGroup\u003e getGroup() {"},{"lineNumber":228,"author":{"gitID":"yash-chowdhary"},"content":"            return Optional.ofNullable(group);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"yash-chowdhary"},"content":"        public void setGroup(Group group) {"},{"lineNumber":232,"author":{"gitID":"yash-chowdhary"},"content":"            this.group \u003d group;"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"amrut-prabhu"},"content":"        public void setCredentials(Credentials credentials) {"},{"lineNumber":236,"author":{"gitID":"amrut-prabhu"},"content":"            this.credentials \u003d credentials;"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"amrut-prabhu"},"content":"        public Optional\u003cCredentials\u003e getCredentials() {"},{"lineNumber":240,"author":{"gitID":"amrut-prabhu"},"content":"            return Optional.ofNullable(credentials);"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"amrut-prabhu"},"content":"        public void setProfilePhoto(ProfilePhoto profilePhoto) {"},{"lineNumber":244,"author":{"gitID":"amrut-prabhu"},"content":"            this.profilePhoto \u003d profilePhoto;"},{"lineNumber":245,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":247,"author":{"gitID":"amrut-prabhu"},"content":"        public Optional\u003cProfilePhoto\u003e getProfilePhoto() {"},{"lineNumber":248,"author":{"gitID":"amrut-prabhu"},"content":"            return Optional.ofNullable(profilePhoto);"},{"lineNumber":249,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":250,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":252,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":253,"author":{"gitID":"amrut-prabhu"},"content":"         *"},{"lineNumber":254,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":255,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":256,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":262,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":263,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":264,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":265,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":273,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":275,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":278,"author":{"gitID":"amrut-prabhu"},"content":"            if (!(other instanceof EditMemberDescriptor)) {"},{"lineNumber":279,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":280,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":283,"author":{"gitID":"amrut-prabhu"},"content":"            EditMemberDescriptor e \u003d (EditMemberDescriptor) other;"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":286,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":287,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":288,"author":{"gitID":"MuhdNurKamal"},"content":"                    \u0026\u0026 getMatricNumber().equals(e.getMatricNumber())"},{"lineNumber":289,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags())"},{"lineNumber":290,"author":{"gitID":"amrut-prabhu"},"content":"                    \u0026\u0026 getCredentials().equals(e.getCredentials());"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":10,"amrut-prabhu":91,"yash-chowdhary":12,"-":180}},{"path":"src/main/java/seedu/club/logic/commands/ShowResultsCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.core.EventsCenter;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.events.ui.ShowResultsRequestEvent;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":" * Shows all poll results in the club book to the user."},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"public class ShowResultsCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String COMMAND_WORD \u003d \"showresults\";"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"            Arrays.asList(COMMAND_WORD, \"showres\")"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"    );"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Showing poll results.\";"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireToSignUp();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        requireToLogIn();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        requireExcoLogIn();"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"        EventsCenter.getInstance().post(new ShowResultsRequestEvent());"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":18,"amrut-prabhu":2,"yash-chowdhary":6,"-":4}},{"path":"src/main/java/seedu/club/logic/commands/ChangePasswordCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_NEWPASSWORD;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.club.model.Model;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Password;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Username;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.club.model.member.exceptions.DataToChangeIsNotCurrentlyLoggedInMemberException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.club.model.member.exceptions.PasswordIncorrectException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"content":"//@@author Song Weiyang"},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Changes the password of a member in the ClubBook"},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class ChangePasswordCommand extends Command {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"changepass\";"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"            Arrays.asList(COMMAND_WORD, \"changepw\")"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"    );"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String COMMAND_FORMAT \u003d \"changepass u/ pw/ npw/\";"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Changes your password.\\n\""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"            + PREFIX_USERNAME + \"USERNAME \""},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"            + PREFIX_PASSWORD + \"OLD_PASSWORD \""},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"            + PREFIX_NEWPASSWORD + \"NEW_PASSWORD\\n\""},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"            + PREFIX_USERNAME + \"A0164589X \""},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"            + PREFIX_PASSWORD + \"password \""},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"            + PREFIX_NEWPASSWORD + \"iLovecats18\";"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Password changed successfully.\";"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_PASSWORD_INCORRECT \u003d \"The old password entered is incorrect.\";"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_AUTHENTICATION_FAILED \u003d \"You can only change your own password.\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Username username;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Password oldPassword;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Password newPassword;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public ChangePasswordCommand (Username username, Password oldPassword, Password newPassword) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.username \u003d username;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.oldPassword \u003d oldPassword;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.newPassword \u003d newPassword;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        requireToSignUp();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        requireToLogIn();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            model.changePassword(username.value, oldPassword.value, newPassword.value);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (PasswordIncorrectException e) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_PASSWORD_INCORRECT);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        } catch (DataToChangeIsNotCurrentlyLoggedInMemberException dataToChangeIsNotCurrentlyLoggedInMemberException) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_AUTHENTICATION_FAILED);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        super.setData(model, history, undoRedoStack);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"amrut-prabhu":16,"yash-chowdhary":6,"-":46}},{"path":"src/main/java/seedu/club/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.FieldContainsKeywordsPredicate;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":" * Finds and lists all members in club book whose field contains any of the argument keywords."},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":" * Partial match is acceptable."},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":" * Keyword matching is case insensitive."},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":" * Finds by all possible fields if prefix is not specified"},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"            Arrays.asList(COMMAND_WORD, \"f\", \"search\")"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"    );"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String COMMAND_FORMAT \u003d \"find [n/  ] || [p/  ] || [e/  ] || [m/  ]\""},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"            + \" || [g/  ] || [t/  ]\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all members whose field contain any of \""},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers. \""},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"            + \"Insert the field prefix after \u0027find\u0027 to search by field. Otherwise, all fields will be searched.\\n\""},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"            + \"Parameters: \""},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"            + \"[ \""},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"            + PREFIX_NAME + \" or \""},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"            + PREFIX_PHONE + \" or \""},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"            + PREFIX_EMAIL + \" or \""},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"            + PREFIX_MATRIC_NUMBER + \" or \""},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"            + PREFIX_GROUP + \" or \""},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"            + PREFIX_TAG"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"            + \" ]\""},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"            + \" KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_GROUP + \" Logistics\";"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"    private final FieldContainsKeywordsPredicate predicate;"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"    public FindCommand(FieldContainsKeywordsPredicate predicate) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        requireToSignUp();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        requireToLogIn();"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"        model.updateFilteredMemberList(predicate);"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"        return new CommandResult(getMessageForMemberListShownSummary(model.getFilteredMemberList().size()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":19,"amrut-prabhu":15,"yash-chowdhary":8,"-":24}},{"path":"src/main/java/seedu/club/logic/commands/HideResultsCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.core.EventsCenter;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.events.ui.HideResultsRequestEvent;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":" * Hides all poll results in the club book to the user."},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"public class HideResultsCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String COMMAND_WORD \u003d \"hideresults\";"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Poll results have been hidden.\";"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"            Arrays.asList(COMMAND_WORD, \"hideres\")"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"    );"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"        requireToSignUp();"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"        requireToLogIn();"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"        EventsCenter.getInstance().post(new HideResultsRequestEvent());"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":29}},{"path":"src/main/java/seedu/club/logic/commands/ExitCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.EventsCenter;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Terminates the program."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"            Arrays.asList(COMMAND_WORD, \"q\", \"quit\")"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"    );"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Club Connect as requested ...\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ExitAppRequestEvent());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":4,"yash-chowdhary":6,"-":17}},{"path":"src/main/java/seedu/club/logic/commands/CommandResult.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Represents the result of a command execution."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class CommandResult {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public final String feedbackToUser;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public CommandResult(String feedbackToUser) {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":15}},{"path":"src/main/java/seedu/club/logic/commands/LogOutCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Logs a member out of the clubbook"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class LogOutCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"logout\";"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"            Arrays.asList(COMMAND_WORD, \"signout\")"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"    );"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Logout successful.\";"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_FAILURE \u003d \"You are not logged in.\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public LogOutCommand(){"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        if (model.getLoggedInMember() \u003d\u003d null) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_FAILURE);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            model.logOutMember();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            model.updateFilteredMemberList(Model.PREDICATE_NOT_SHOW_ALL_MEMBERS);"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"            model.updateFilteredTaskList(Model.PREDICATE_NOT_SHOW_ALL_TASKS);"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"            model.updateFilteredPollList(Model.PREDICATE_NOT_SHOW_ALL_POLLS);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        super.setData(model, history, undoRedoStack);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":1,"amrut-prabhu":5,"yash-chowdhary":7,"-":33}},{"path":"src/main/java/seedu/club/logic/commands/AddTaskCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_TIME;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":" * Adds a task to the currently logged-in member\u0027s Task list"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"public class AddTaskCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String COMMAND_WORD \u003d \"addtask\";"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"            Arrays.asList(COMMAND_WORD, \"addt\", \"task\")"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"    );"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" \""},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_DESCRIPTION + \"  \""},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_TIME + \"  \""},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_DATE + \" \";"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to your task list.\\n\""},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"            + \"Parameters: \""},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_DESCRIPTION + \"DESCRIPTION \""},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_DATE + \"DATE \""},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_TIME + \"TIME\\n\""},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_DESCRIPTION + \"Book YIH Function Room 4 \""},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_DATE + \"02/04/2018 \""},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_TIME + \"17:00\";"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New task created.\";"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists.\";"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"    private final Task toAdd;"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"    public AddTaskCommand(Task toAdd) {"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(toAdd);"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"        this.toAdd \u003d toAdd;"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(model);"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"        requireToSignUp();"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"        requireToLogIn();"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"            model.addTaskToTaskList(toAdd);"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (DuplicateTaskException dte) {"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TASK);"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"                || (other instanceof AddTaskCommand // instanceof handles nulls"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 toAdd.equals(((AddTaskCommand) other).toAdd));"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":68}},{"path":"src/main/java/seedu/club/logic/commands/ImportCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"//@@author amrut-prabhu"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":" * Exports members\u0027 information from the specified file into Club Connect."},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":" */"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"public class ImportCommand extends UndoableCommand {"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String COMMAND_WORD \u003d \"import\";"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String COMMAND_FORMAT \u003d \"import FILE_PATH\";"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"            Arrays.asList(COMMAND_WORD, \"imp\")"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"    );"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"            + \": Imports the members\u0027 information from the specified CSV file into Club Connect.\\n\""},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"            + \"Parameters: FILE_PATH (must be an absolute path to a CSV file)\\n\""},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"            + \"Example: \" + COMMAND_WORD + \" C:/Users/John Doe/Downloads/new_members.csv\";"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_IMPORT_SUCCESS \u003d \"Successfully imported %d member(s) from %s\";"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_IMPORT_FAILURE \u003d \"Error occurred while importing from %1$s\";"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_MEMBERS_NOT_IMPORTED \u003d \"0 members imported from %1$s. This may be due to \""},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"            + \"incorrect format of the data or duplicate members in the file.\";"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"    private final File importFile;"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"     * @param importFile CSV file to import members from."},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"    public ImportCommand(File importFile) {"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"        requireNonNull(importFile);"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"        this.importFile \u003d importFile;"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"        requireToSignUp();"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"        requireToLogIn();"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"        requireExcoLogIn();"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"            int numberImported \u003d model.importMembers(importFile);"},{"lineNumber":51,"author":{"gitID":"amrut-prabhu"},"content":"            if (numberImported \u003d\u003d 0) {"},{"lineNumber":52,"author":{"gitID":"amrut-prabhu"},"content":"                return new CommandResult(String.format(MESSAGE_MEMBERS_NOT_IMPORTED, numberImported, importFile));"},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"            }"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"            return new CommandResult(String.format(MESSAGE_IMPORT_SUCCESS, numberImported, importFile));"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (IOException ioe) {"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"            throw new CommandException(String.format(MESSAGE_IMPORT_FAILURE, importFile));"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"                || (other instanceof ImportCommand // instanceof handles nulls"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"                \u0026\u0026 this.importFile.equals(((ImportCommand) other).importFile)); // state check"},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":66}},{"path":"src/main/java/seedu/club/logic/commands/ChangeTaskStatusCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import org.apache.commons.lang3.text.WordUtils;"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.Messages;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Assignee;"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Assignor;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Date;"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Description;"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Status;"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Time;"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":" * Edits the status of a existing task in the club book."},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"public class ChangeTaskStatusCommand extends UndoableCommand {"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String COMMAND_WORD \u003d \"changetaskstatus\";"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"            Arrays.asList(COMMAND_WORD, \"status\", \"changestatus\", \"cts\")"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"    );"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" INDEX \" + PREFIX_STATUS + \"STATUS\";"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Modifies the status of the task identified \""},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"            + \"by the index number used in the last task listing. \""},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"            + \"The existing status will be overwritten by the input status.\\n\""},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"            + \"st/STATUS\\n\""},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_STATUS + \"Completed\";"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_INVALID_PERMISSION \u003d \"This task\u0027s status cannot be updated \""},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"            + \"as you are not assigned to the task!\";"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_CHANGE_SUCCESS \u003d \"Status of task - %1$s, successfully changed!\";"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_NOT_CHANGED \u003d \"Status of task unchanged as the input status is \""},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"            + \"same as the identified task\u0027s status!\";"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"    private final Index index;"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"    private Task taskToEdit;"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"    private Task editedTask;"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"    private final Status newStatus;"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"    public ChangeTaskStatusCommand(Index index, Status newStatus) {"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"        this.index \u003d index;"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"        String status \u003d newStatus.getStatus();"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"        String capitalizedStatus \u003d WordUtils.capitalize(status);"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"        this.newStatus \u003d new Status(capitalizedStatus);"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"        requireToSignUp();"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"        requireToLogIn();"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"        taskToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"        editedTask \u003d createEditedTask(taskToEdit);"},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"            requireToSignUp();"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"            requireToLogIn();"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"            model.changeStatus(taskToEdit, editedTask);"},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (TaskNotFoundException tnfe) {"},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"            throw new AssertionError(\"The target task cannot be missing\");"},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (DuplicateTaskException dte) {"},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"            throw new CommandException(MESSAGE_NOT_CHANGED);"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":"        return new CommandResult(String.format(MESSAGE_CHANGE_SUCCESS, editedTask.getDescription().getDescription()));"},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":"     * Creates and returns a {@code task} with the details of {@code taskToEdit}"},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":"     * edited with {@code newStatus}."},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"yash-chowdhary"},"content":"    private Task createEditedTask(Task taskToEdit) {"},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":"        assert taskToEdit !\u003d null;"},{"lineNumber":96,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":97,"author":{"gitID":"yash-chowdhary"},"content":"        Description description \u003d new Description(taskToEdit.getDescription().getDescription());"},{"lineNumber":98,"author":{"gitID":"yash-chowdhary"},"content":"        Assignor assignor \u003d new Assignor(taskToEdit.getAssignor().getAssignor());"},{"lineNumber":99,"author":{"gitID":"yash-chowdhary"},"content":"        Assignee assignee \u003d new Assignee(taskToEdit.getAssignee().getAssignee());"},{"lineNumber":100,"author":{"gitID":"yash-chowdhary"},"content":"        Date date \u003d new Date(taskToEdit.getDate().getDate());"},{"lineNumber":101,"author":{"gitID":"yash-chowdhary"},"content":"        Time time \u003d new Time(taskToEdit.getTime().getTime());"},{"lineNumber":102,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":103,"author":{"gitID":"yash-chowdhary"},"content":"        return new Task(description, time, date, assignor, assignee, newStatus);"},{"lineNumber":104,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":106,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean equals(Object other) {"},{"lineNumber":108,"author":{"gitID":"yash-chowdhary"},"content":"        return (other \u003d\u003d this"},{"lineNumber":109,"author":{"gitID":"yash-chowdhary"},"content":"                || (other instanceof ChangeTaskStatusCommand"},{"lineNumber":110,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 index.equals(((ChangeTaskStatusCommand) other).index)"},{"lineNumber":111,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 newStatus.equals(((ChangeTaskStatusCommand) other).newStatus)));"},{"lineNumber":112,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":1,"amrut-prabhu":3,"yash-chowdhary":101,"-":8}},{"path":"src/main/java/seedu/club/logic/commands/CompressCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.core.EventsCenter;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.events.ui.CompressMembersRequestEvent;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":" * Lists all members in the club book to the user."},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"public class CompressCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String COMMAND_WORD \u003d \"compress\";"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Member list view compressed.\";"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"            Arrays.asList(COMMAND_WORD, \"comp\")"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"    );"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"        EventsCenter.getInstance().post(new CompressMembersRequestEvent());"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"        requireToSignUp();"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"        requireToLogIn();"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":29}},{"path":"src/main/java/seedu/club/logic/commands/AssignTaskCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_TIME;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.MemberNotFoundException;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":" * Adds a task to the currently logged-in member\u0027s Task list"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"public class AssignTaskCommand extends UndoableCommand {"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String COMMAND_WORD \u003d \"assigntask\";"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"            Arrays.asList(COMMAND_WORD, \"assignt\")"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"    );"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" \""},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_DESCRIPTION + \" \""},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_TIME + \" \""},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_DATE + \" \""},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_MATRIC_NUMBER + \" \";"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Assigns a task to a member in Club Connect.\\n\""},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"            + \"Parameters: \""},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_DESCRIPTION + \"DESCRIPTION \""},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_TIME + \"TIME \""},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_DATE + \"DATE \""},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_NAME + \"NAME\\n\""},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"            + \"Example \" + COMMAND_WORD + \" \""},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_DESCRIPTION + \"Arrange DJ for Music Night \""},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_DATE + \"10/05/2018 \""},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_TIME + \"16:00 \""},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_MATRIC_NUMBER + \"A1234567H\";"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New task created and assigned to %1$s\";"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists\";"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_MEMBER_NOT_FOUND \u003d \"This member doesn\u0027t exist in the club book\";"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"    private final Task toAdd;"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"    private final MatricNumber matricNumber;"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"    public AssignTaskCommand(Task toAdd, MatricNumber matricNumber) {"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(toAdd);"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"        this.toAdd \u003d toAdd;"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"        this.matricNumber \u003d matricNumber;"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(model);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        requireToSignUp();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        requireToLogIn();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        requireExcoLogIn();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"            model.assignTask(toAdd, matricNumber);"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, matricNumber));"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (MemberNotFoundException mnfe) {"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"            throw new CommandException(MESSAGE_MEMBER_NOT_FOUND);"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (DuplicateTaskException dte) {"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TASK);"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean equals(Object other) {"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"        return (other \u003d\u003d this)"},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"                || (other instanceof AssignTaskCommand // instanceof handles nulls"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 toAdd.equals(((AssignTaskCommand) other).toAdd)"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 matricNumber.equals(((AssignTaskCommand) other).matricNumber));"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":6,"yash-chowdhary":70,"-":6}},{"path":"src/main/java/seedu/club/logic/commands/SignUpCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.club.model.member.exceptions.MemberListNotEmptyException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"content":"//@@author Song Weiyang"},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Signs up a member when the clubbook is empty"},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class SignUpCommand extends Command {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"signup\";"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"            Arrays.asList(COMMAND_WORD, \"register\", \"enroll\")"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"    );"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String COMMAND_FORMAT \u003d COMMAND_WORD + \" n/ p/ e/ m/ [pic/ ] \";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Sign up successful! Please log in to start using Club Connect.\";"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_FAILURE \u003d \"Club Connect is already set up. Please log in to start.\";"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_USAGE \u003d \"Lets you sign up for Club Connect.\\n\""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"            + PREFIX_MATRIC_NUMBER + \"MATRIC NUMBER \""},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"            + PREFIX_MATRIC_NUMBER + \"A0123456H \""},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_TAG + \"president \";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private final Member toSignUp;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public SignUpCommand(Member member) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.toSignUp \u003d member;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            model.signUpMember(toSignUp);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        } catch (MemberListNotEmptyException e) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_FAILURE);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        super.setData(model, history, undoRedoStack);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"MuhdNurKamal":2,"amrut-prabhu":13,"yash-chowdhary":8,"-":42}},{"path":"src/main/java/seedu/club/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.ComponentManager;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.Command;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.CommandResult;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.parser.ClubBookParser;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.parser.CommandList;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"    public static final List\u003cString\u003e COMMAND_LIST \u003d new CommandList().getCommandList();"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private CommandHistory history;"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"    private final ClubBookParser clubBookParser;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private UndoRedoStack undoRedoStack;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"        clubBookParser \u003d new ClubBookParser();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"            Command command \u003d clubBookParser.parseCommand(commandText);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"    public ObservableList\u003cMember\u003e getFilteredMemberList() {"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"        return model.getFilteredMemberList();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":"    public ObservableList\u003cPoll\u003e getFilteredPollList() {"},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":"        return model.getFilteredPollList();"},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"    public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"        return model.getFilteredTaskList();"},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":7,"amrut-prabhu":16,"yash-chowdhary":6,"-":44}},{"path":"src/main/java/seedu/club/storage/CsvClubBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"//@@author amrut-prabhu"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.storage;"},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.UniqueMemberList;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":" * A class to manage storage of ClubBook data as a csv file on the hard disk."},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":" */"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"public class CsvClubBookStorage {"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(CsvClubBookStorage.class);"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"    private File file;"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"    public CsvClubBookStorage() {"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"        this.file \u003d null;"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"    public CsvClubBookStorage(File file) {"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"        setClubBookFile(file);"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"    public File getClubBookFile() {"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"        return this.file;"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"    public void setClubBookFile(File file) {"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"        this.file \u003d file;"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns data from the file as a {@link UniqueMemberList}."},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"    public UniqueMemberList readClubBook() throws IOException {"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"        return readClubBook(file);"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"     * Similar to {@link #readClubBook()}"},{"lineNumber":51,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"amrut-prabhu"},"content":"     * @param importFile location of the data. Cannot be null."},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"    public UniqueMemberList readClubBook(File importFile) throws IOException {"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"        requireNonNull(importFile);"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"        if (!importFile.exists()) {"},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"            logger.info(\"ClubBook import file \"  + importFile + \" not found\");"},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"            throw new FileNotFoundException();"},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"        return CsvFileStorage.readClubBook(importFile);"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":"    public void saveData(String data) throws IOException {"},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"        saveData(data, file);"},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":70,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"amrut-prabhu"},"content":"     * @param file location of the data. Cannot be null"},{"lineNumber":72,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"amrut-prabhu"},"content":"    public void saveData(String data, File file) throws IOException {"},{"lineNumber":74,"author":{"gitID":"amrut-prabhu"},"content":"        requireNonNull(data);"},{"lineNumber":75,"author":{"gitID":"amrut-prabhu"},"content":"        requireNonNull(file);"},{"lineNumber":76,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":77,"author":{"gitID":"amrut-prabhu"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":78,"author":{"gitID":"amrut-prabhu"},"content":"        assert file.exists() : \"ClubBook export file \" + file + \" is guaranteed to exist\";"},{"lineNumber":79,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":80,"author":{"gitID":"amrut-prabhu"},"content":"        CsvFileStorage.saveDataToFile(file, data);"},{"lineNumber":81,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":82}},{"path":"src/main/java/seedu/club/storage/Storage.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.model.ClubBookChangedEvent;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.model.NewExportDataAvailableEvent;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.model.ProfilePhotoChangedEvent;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.DataConversionException;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.PhotoReadException;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.PhotoWriteException;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ReadOnlyClubBook;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * API of the Storage component"},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"public interface Storage extends ClubBookStorage, UserPrefsStorage, PhotoStorage {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"    String getClubBookFilePath();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"    Optional\u003cReadOnlyClubBook\u003e readClubBook() throws DataConversionException, IOException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"    void saveClubBook(ReadOnlyClubBook clubBook) throws IOException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"     * Saves the current version of the Club Book to the hard disk."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"    void handleClubBookChangedEvent(ClubBookChangedEvent cbce);"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"    //@@author amrut-prabhu"},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"    void copyOriginalPhotoFile(String originalPhotoPath, String newPhotoName)"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"            throws PhotoReadException, PhotoWriteException;"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"     * Saves a copy of the newly added photo to Club Connect\u0027s resources."},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"amrut-prabhu"},"content":"    void handleProfilePictureChangedEvent(ProfilePhotoChangedEvent event);"},{"lineNumber":52,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"     * Writes data to a CSV file on the hard disk."},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during writing."},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"    void handleExportDataEvent(NewExportDataAvailableEvent event);"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"    //@@author"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":33,"-":26}},{"path":"src/main/java/seedu/club/storage/UserPrefsStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":" * Represents a storage for {@link seedu.club.model.UserPrefs}."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface UserPrefsStorage {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns the file path of the UserPrefs data file."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    String getUserPrefsFilePath();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns UserPrefs data from storage."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"     * Saves the given {@link seedu.club.model.UserPrefs} to the storage."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * @param userPrefs cannot be null."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":5,"-":29}},{"path":"src/main/java/seedu/club/logic/commands/DeletePollCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.PollNotFoundException;"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":" * Deletes a poll identified using it\u0027s last displayed index from the club book."},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"public class DeletePollCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String COMMAND_WORD \u003d \"deletepoll\";"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String COMMAND_FORMAT \u003d \"deletepoll INDEX\";"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"            Arrays.asList(COMMAND_WORD, \"delpoll\", \"rmpoll\")"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"    );"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"            + \": Deletes the poll identified by the index number used in the last poll listing.\\n\""},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String MESSAGE_DELETE_POLL_SUCCESS \u003d \"Deleted poll: %1$s\";"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"    private final Index targetIndex;"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"    private Poll pollToDelete;"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"    public DeletePollCommand(Index targetIndex) {"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"        requireNonNull(pollToDelete);"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"        requireToSignUp();"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"        requireToLogIn();"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"        requireExcoLogIn();"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"            model.deletePoll(pollToDelete);"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"        } catch (PollNotFoundException pnfe) {"},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new AssertionError(\"The target poll cannot be missing\");"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_POLL_SUCCESS, pollToDelete));"},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":"        requireToSignUp();"},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":"        requireToLogIn();"},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":"        List\u003cPoll\u003e lastShownList \u003d model.getFilteredPollList();"},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_POLL_DISPLAYED_INDEX);"},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":"        pollToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":"    public boolean equals(Object other) {"},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":73,"author":{"gitID":"MuhdNurKamal"},"content":"                || (other instanceof DeletePollCommand // instanceof handles nulls"},{"lineNumber":74,"author":{"gitID":"MuhdNurKamal"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeletePollCommand) other).targetIndex) // state check"},{"lineNumber":75,"author":{"gitID":"MuhdNurKamal"},"content":"                \u0026\u0026 Objects.equals(this.pollToDelete, ((DeletePollCommand) other).pollToDelete));"},{"lineNumber":76,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":77}},{"path":"src/main/java/seedu/club/storage/XmlAdaptedTag.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * JAXB-friendly adapted version of the Tag."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class XmlAdaptedTag {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @XmlValue"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private String tagName;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedTag."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag() {}"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(String tagName) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Converts a given Tag into this class for JAXB use."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(Tag source) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        tagName \u003d source.tagName;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted member"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Tag toModelType() throws IllegalValueException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return new Tag(tagName);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedTag)) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return tagName.equals(((XmlAdaptedTag) other).tagName);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":4,"-":58}},{"path":"src/main/java/seedu/club/storage/XmlClubBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ReadOnlyClubBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":" * A class to access ClubBook data stored as an xml file on the hard disk."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"public class XmlClubBookStorage implements ClubBookStorage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlClubBookStorage.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"    public XmlClubBookStorage(String filePath) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"    public String getClubBookFilePath() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"    public Optional\u003cReadOnlyClubBook\u003e readClubBook() throws DataConversionException, IOException {"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"        return readClubBook(filePath);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"     * Similar to {@link #readClubBook()}"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"    public Optional\u003cReadOnlyClubBook\u003e readClubBook(String filePath) throws DataConversionException,"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"        File clubBookFile \u003d new File(filePath);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"        if (!clubBookFile.exists()) {"},{"lineNumber":51,"author":{"gitID":"amrut-prabhu"},"content":"            logger.info(\"ClubBook file \"  + clubBookFile + \" not found\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"        XmlSerializableClubBook xmlClubBook \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"            return Optional.of(xmlClubBook.toModelType());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"            logger.info(\"Illegal values found in \" + clubBookFile + \": \" + ive.getMessage());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":"    public void saveClubBook(ReadOnlyClubBook clubBook) throws IOException {"},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":"        saveClubBook(clubBook, filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"amrut-prabhu"},"content":"     * Similar to {@link #saveClubBook(ReadOnlyClubBook)}"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"amrut-prabhu"},"content":"    public void saveClubBook(ReadOnlyClubBook clubBook, String filePath) throws IOException {"},{"lineNumber":74,"author":{"gitID":"amrut-prabhu"},"content":"        requireNonNull(clubBook);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":79,"author":{"gitID":"amrut-prabhu"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableClubBook(clubBook));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":27,"-":55}},{"path":"src/main/java/seedu/club/storage/ProfilePhotoStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"//@@author amrut-prabhu"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.storage;"},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import java.awt.image.BufferedImage;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import java.net.URL;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import javax.imageio.ImageIO;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.PhotoReadException;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.PhotoWriteException;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.util.FileUtil;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":" * To copy the profile photo to this application\u0027s resources."},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":" */"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"public class ProfilePhotoStorage implements  PhotoStorage {"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String PHOTO_FILE_EXTENSION \u003d \".png\";"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String SAVE_PHOTO_DIRECTORY \u003d \"photos/\";"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"    private static final String URL_PREFIX \u003d \"file:///\";"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ProfilePhotoStorage.class);"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"    public void copyOriginalPhotoFile(String originalPhotoPath, String newPhotoName)"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"            throws PhotoReadException, PhotoWriteException {"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"        BufferedImage originalPhoto \u003d null;"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"        File newPath \u003d null;"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"            logger.info(\"Profile Photo is being read from \" + originalPhotoPath);"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"            URL photoUrl \u003d new URL(URL_PREFIX + originalPhotoPath);"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"            originalPhoto \u003d ImageIO.read(photoUrl);"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"            String saveAs \u003d newPhotoName + PHOTO_FILE_EXTENSION;"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"            newPath \u003d new File(SAVE_PHOTO_DIRECTORY + saveAs);"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"            createPhotoFileCopy(originalPhoto, newPath);"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (PhotoWriteException pwe) {"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"            logger.info(\"Error while writing photo file\");"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"            throw new PhotoWriteException(newPath.getAbsolutePath());"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (IOException ioe) {"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"            logger.info(\"Error while reading photo file\");"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"            throw new PhotoReadException(originalPhotoPath);"},{"lineNumber":51,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"     * Creates a copy the given {@code originalPhoto} in the application\u0027s resources."},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws PhotoWriteException if there was any problem writing to the file."},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"    public void createPhotoFileCopy(BufferedImage originalPhoto, File newPath) throws PhotoWriteException {"},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"        logger.info(\"Profile Photo is being copied to \" + newPath);"},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":"            FileUtil.createDirs(new File(SAVE_PHOTO_DIRECTORY));"},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":"            ImageIO.write(originalPhoto, \"png\", newPath);"},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (IOException ioe) {"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"            throw new PhotoWriteException(newPath.getAbsolutePath());"},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":"        logger.info(\"Profile Photo copying successful\");"},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":68}},{"path":"src/main/java/seedu/club/logic/commands/VoteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.logic.commands;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.AnswerNotFoundException;"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.PollNotFoundException;"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.UserAlreadyVotedException;"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":" * Votes in a poll of an existing poll in the club book."},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"public class VoteCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String COMMAND_WORD \u003d \"vote\";"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final ArrayList\u003cString\u003e COMMAND_ALIASES \u003d new ArrayList\u003c\u003e("},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"            Arrays.asList(COMMAND_WORD, \"vpoll\")"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"    );"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String COMMAND_FORMAT \u003d \"vote POLL_INDEX ANSWER_INDEX\";"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds your vote to the poll identified \""},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"            + \"by the index number used in the last poll listing. \\n\""},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"            + \"Parameters: POLL_INDEX (must be a positive integer) ANSWER_INDEX (must be a positive integer)\\n\""},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"            + \"Example: \" + COMMAND_WORD + \" 3 2\";"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String MESSAGE_VOTE_SUCCESS \u003d \"Your vote has been received\";"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String MESSAGE_VOTE_FAIL_ALREADY_VOTED \u003d \"You have already voted in this poll\";"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"    private final Index pollIndex;"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"    private final Index answerIndex;"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"    private Poll pollToVoteIn;"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"     * @param pollIndex   of the poll in the filtered poll list to vote in"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"     * @param answerIndex of the answer of the poll in the filtered poll list to vote in"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"    public VoteCommand(Index pollIndex, Index answerIndex) {"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"        requireNonNull(pollIndex);"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"        requireNonNull(answerIndex);"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"        this.pollIndex \u003d pollIndex;"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"        this.answerIndex \u003d answerIndex;"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"        requireToSignUp();"},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"        requireToLogIn();"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"            model.voteInPoll(pollToVoteIn, answerIndex);"},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":"        } catch (UserAlreadyVotedException userAlreadyVotedException) {"},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new CommandException(MESSAGE_VOTE_FAIL_ALREADY_VOTED);"},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":"        } catch (PollNotFoundException questionNotFoundException) {"},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new AssertionError(\"The target poll cannot be missing\");"},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":"        } catch (AnswerNotFoundException answerNotFoundException) {"},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new AssertionError(\"The target answer cannot be missing\");"},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":"        return new CommandResult(String.format(MESSAGE_VOTE_SUCCESS));"},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":"        requireToSignUp();"},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"        requireToLogIn();"},{"lineNumber":73,"author":{"gitID":"MuhdNurKamal"},"content":"        List\u003cPoll\u003e lastShownList \u003d model.getFilteredPollList();"},{"lineNumber":74,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":75,"author":{"gitID":"MuhdNurKamal"},"content":"        if (pollIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":76,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_POLL_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":79,"author":{"gitID":"MuhdNurKamal"},"content":"        pollToVoteIn \u003d lastShownList.get(pollIndex.getZeroBased());"},{"lineNumber":80,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":81,"author":{"gitID":"MuhdNurKamal"},"content":"        if (answerIndex.getZeroBased() \u003e\u003d pollToVoteIn.getAnswers().size()) {"},{"lineNumber":82,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ANSWER_DISPLAYED_INDEX);"},{"lineNumber":83,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":86,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"MuhdNurKamal"},"content":"    public boolean equals(Object other) {"},{"lineNumber":88,"author":{"gitID":"MuhdNurKamal"},"content":"        // short circuit if same object"},{"lineNumber":89,"author":{"gitID":"MuhdNurKamal"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":90,"author":{"gitID":"MuhdNurKamal"},"content":"            return true;"},{"lineNumber":91,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":93,"author":{"gitID":"MuhdNurKamal"},"content":"        // instanceof handles nulls"},{"lineNumber":94,"author":{"gitID":"MuhdNurKamal"},"content":"        if (!(other instanceof VoteCommand)) {"},{"lineNumber":95,"author":{"gitID":"MuhdNurKamal"},"content":"            return false;"},{"lineNumber":96,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":98,"author":{"gitID":"MuhdNurKamal"},"content":"        // state check"},{"lineNumber":99,"author":{"gitID":"MuhdNurKamal"},"content":"        VoteCommand e \u003d (VoteCommand) other;"},{"lineNumber":100,"author":{"gitID":"MuhdNurKamal"},"content":"        return pollIndex.equals(e.pollIndex)"},{"lineNumber":101,"author":{"gitID":"MuhdNurKamal"},"content":"                \u0026\u0026 answerIndex.equals(e.answerIndex)"},{"lineNumber":102,"author":{"gitID":"MuhdNurKamal"},"content":"                \u0026\u0026 Objects.equals(pollToVoteIn, e.pollToVoteIn);"},{"lineNumber":103,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":105,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":105}},{"path":"src/main/java/seedu/club/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.model.ClubBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.model.NewExportDataAvailableEvent;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.model.ProfilePhotoChangedEvent;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.storage.DataReadingExceptionEvent;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.DataConversionException;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.PhotoReadException;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.PhotoWriteException;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ReadOnlyClubBook;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":" * Manages storage of ClubBook data in local storage."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"    private ClubBookStorage clubBookStorage;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"    private ProfilePhotoStorage profilePhotoStorage;"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"    private  CsvClubBookStorage csvClubBookStorage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"    public StorageManager(ClubBookStorage clubBookStorage, UserPrefsStorage userPrefsStorage,"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"                          ProfilePhotoStorage profilePhotoStorage, CsvClubBookStorage csvClubBookStorage) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"        this.clubBookStorage \u003d clubBookStorage;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"        this.profilePhotoStorage \u003d profilePhotoStorage;"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"        this.csvClubBookStorage \u003d csvClubBookStorage;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ClubBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"    public String getClubBookFilePath() {"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"        return clubBookStorage.getClubBookFilePath();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":"    public Optional\u003cReadOnlyClubBook\u003e readClubBook() throws DataConversionException, IOException {"},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"        return readClubBook(clubBookStorage.getClubBookFilePath());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"amrut-prabhu"},"content":"    public Optional\u003cReadOnlyClubBook\u003e readClubBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":75,"author":{"gitID":"amrut-prabhu"},"content":"        return clubBookStorage.readClubBook(filePath);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"amrut-prabhu"},"content":"    public void saveClubBook(ReadOnlyClubBook clubBook) throws IOException {"},{"lineNumber":80,"author":{"gitID":"amrut-prabhu"},"content":"        saveClubBook(clubBook, clubBookStorage.getClubBookFilePath());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"amrut-prabhu"},"content":"    public void saveClubBook(ReadOnlyClubBook clubBook, String filePath) throws IOException {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":86,"author":{"gitID":"amrut-prabhu"},"content":"        clubBookStorage.saveClubBook(clubBook, filePath);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":91,"author":{"gitID":"amrut-prabhu"},"content":"    public void handleClubBookChangedEvent(ClubBookChangedEvent event) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":94,"author":{"gitID":"amrut-prabhu"},"content":"            saveClubBook(event.data);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":101,"author":{"gitID":"amrut-prabhu"},"content":"    //@@author amrut-prabhu"},{"lineNumber":102,"author":{"gitID":"amrut-prabhu"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ProfilePhoto methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":103,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":104,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"amrut-prabhu"},"content":"    public void copyOriginalPhotoFile(String originalPath, String newPhotoName)"},{"lineNumber":106,"author":{"gitID":"amrut-prabhu"},"content":"            throws PhotoReadException, PhotoWriteException {"},{"lineNumber":107,"author":{"gitID":"amrut-prabhu"},"content":"        logger.fine(\"Attempting to read photo from file: \" + originalPath);"},{"lineNumber":108,"author":{"gitID":"amrut-prabhu"},"content":"        profilePhotoStorage.copyOriginalPhotoFile(originalPath, newPhotoName);"},{"lineNumber":109,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":111,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"amrut-prabhu"},"content":"    @Subscribe"},{"lineNumber":113,"author":{"gitID":"amrut-prabhu"},"content":"    public void handleProfilePictureChangedEvent(ProfilePhotoChangedEvent event) {"},{"lineNumber":114,"author":{"gitID":"amrut-prabhu"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Profile photo changed, copying file\"));"},{"lineNumber":115,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"amrut-prabhu"},"content":"            copyOriginalPhotoFile(event.originalPhotoPath, event.newFileName);"},{"lineNumber":117,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (PhotoReadException pre) {"},{"lineNumber":118,"author":{"gitID":"amrut-prabhu"},"content":"            event.setPhotoChanged(false);"},{"lineNumber":119,"author":{"gitID":"amrut-prabhu"},"content":"            raise(new DataReadingExceptionEvent(pre));"},{"lineNumber":120,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (PhotoWriteException pwe) {"},{"lineNumber":121,"author":{"gitID":"amrut-prabhu"},"content":"            raise(new DataSavingExceptionEvent(pwe));"},{"lineNumber":122,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":125,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":126,"author":{"gitID":"amrut-prabhu"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CSV Storage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":127,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":128,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"amrut-prabhu"},"content":"     * Writes {@code content} to the export file."},{"lineNumber":130,"author":{"gitID":"amrut-prabhu"},"content":"     * @param content Data that is to be appended to the export file."},{"lineNumber":131,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws IOException when there is an error writing to the file."},{"lineNumber":132,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"amrut-prabhu"},"content":"    private void exportData(String content) throws IOException {"},{"lineNumber":134,"author":{"gitID":"amrut-prabhu"},"content":"        logger.fine(\"Attempting to export data to file: \" + csvClubBookStorage.getClubBookFile());"},{"lineNumber":135,"author":{"gitID":"amrut-prabhu"},"content":"        csvClubBookStorage.saveData(content);"},{"lineNumber":136,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":138,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":139,"author":{"gitID":"amrut-prabhu"},"content":"    @Subscribe"},{"lineNumber":140,"author":{"gitID":"amrut-prabhu"},"content":"    public void handleExportDataEvent(NewExportDataAvailableEvent event) {"},{"lineNumber":141,"author":{"gitID":"amrut-prabhu"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Adding member data to file\"));"},{"lineNumber":142,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":143,"author":{"gitID":"amrut-prabhu"},"content":"        if (event.exportFile !\u003d null) {"},{"lineNumber":144,"author":{"gitID":"amrut-prabhu"},"content":"            csvClubBookStorage.setClubBookFile(event.exportFile);"},{"lineNumber":145,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":147,"author":{"gitID":"amrut-prabhu"},"content":"            if (event.data !\u003d null) {"},{"lineNumber":148,"author":{"gitID":"amrut-prabhu"},"content":"                exportData(event.data);"},{"lineNumber":149,"author":{"gitID":"amrut-prabhu"},"content":"            }"},{"lineNumber":150,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (IOException e) {"},{"lineNumber":151,"author":{"gitID":"amrut-prabhu"},"content":"            event.setFileChanged(false);"},{"lineNumber":152,"author":{"gitID":"amrut-prabhu"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":153,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"amrut-prabhu"},"content":"    //@@author"},{"lineNumber":156,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":91,"-":65}},{"path":"src/main/java/seedu/club/storage/XmlSerializableClubBook.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ClubBook;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ReadOnlyClubBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":" * An Immutable ClubBook that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"@XmlRootElement(name \u003d \"clubbook\")"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"public class XmlSerializableClubBook {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"    private List\u003cXmlAdaptedMember\u003e members;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"    private List\u003cXmlAdaptedPoll\u003e polls;"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"    @XmlElement"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"    private List\u003cXmlAdaptedTask\u003e tasks;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"     * Creates an empty XmlSerializableClubBook."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"    public XmlSerializableClubBook() {"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"        members \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"        polls \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"    public XmlSerializableClubBook(ReadOnlyClubBook src) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"        members.addAll(src.getMemberList().stream().map(XmlAdaptedMember::new).collect(Collectors.toList()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"        polls.addAll(src.getPollList().stream().map(XmlAdaptedPoll::new).collect(Collectors.toList()));"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"        tasks.addAll(src.getTaskList().stream().map(XmlAdaptedTask::new).collect(Collectors.toList()));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"amrut-prabhu"},"content":"     * Converts this clubbook into the model\u0027s {@code ClubBook} object."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"     * {@code XmlAdaptedMember} or {@code XmlAdaptedTag}."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"    public ClubBook toModelType() throws IllegalValueException {"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"        ClubBook clubBook \u003d new ClubBook();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"            clubBook.addTag(t.toModelType());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":"        for (XmlAdaptedMember m : members) {"},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"            clubBook.addMember(m.toModelType());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":"        for (XmlAdaptedPoll p : polls) {"},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":"            clubBook.addPoll(p.toModelType());"},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"        for (XmlAdaptedTask task : tasks) {"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"            clubBook.addTaskToTaskList(task.toModelType());"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"amrut-prabhu"},"content":"        return clubBook;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"amrut-prabhu"},"content":"        if (!(other instanceof XmlSerializableClubBook)) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"amrut-prabhu"},"content":"        XmlSerializableClubBook otherAb \u003d (XmlSerializableClubBook) other;"},{"lineNumber":85,"author":{"gitID":"MuhdNurKamal"},"content":"        return members.equals(otherAb.members) \u0026\u0026 tags.equals(otherAb.tags)"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                \u0026\u0026 polls.equals(otherAb.polls) \u0026\u0026 tasks.equals(otherAb.tasks);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":9,"amrut-prabhu":23,"yash-chowdhary":6,"-":50}},{"path":"src/main/java/seedu/club/storage/CsvFileStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"//@@author amrut-prabhu"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.storage;"},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.util.CsvUtil;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.UniqueMemberList;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":" * Stores ClubBook data in a CSV file."},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":" */"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"public class CsvFileStorage {"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"     * Saves the given clubBook data to the specified file."},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"    public static void saveDataToFile(File file, String data) throws IOException {"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"            CsvUtil.saveDataToFile(file, data);"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (IOException ioe) {"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"            throw new IOException(\"Unexpected error \" + ioe.getMessage());"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns club book in the file or an empty club book"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"    public static UniqueMemberList readClubBook(File file) throws IOException {"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"        return CsvUtil.getDataFromFile(file);"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":32}},{"path":"src/main/java/seedu/club/storage/ClubBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.storage;"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ClubBook;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ReadOnlyClubBook;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":" * Represents a storage for {@link ClubBook}."},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":" */"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"public interface ClubBookStorage {"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns the file path of the data file."},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"    String getClubBookFilePath();"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns ClubBook data as a {@link ReadOnlyClubBook}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"    Optional\u003cReadOnlyClubBook\u003e readClubBook() throws DataConversionException, IOException;"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"     * @see #getClubBookFilePath()"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"    Optional\u003cReadOnlyClubBook\u003e readClubBook(String filePath) throws DataConversionException, IOException;"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"     * Saves the given {@link ReadOnlyClubBook} to the storage."},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"     * @param clubBook cannot be null."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"    void saveClubBook(ReadOnlyClubBook clubBook) throws IOException;"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"     * @see #saveClubBook(ReadOnlyClubBook)"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"    void saveClubBook(ReadOnlyClubBook clubBook, String filePath) throws IOException;"},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":36,"-":9}},{"path":"src/main/java/seedu/club/storage/JsonUserPrefsStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.util.JsonUtil;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public JsonUserPrefsStorage(String filePath) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return readUserPrefs(filePath);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Similar to {@link #readUserPrefs()}"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs(String prefsFilePath) throws DataConversionException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":4,"-":41}},{"path":"src/main/java/seedu/club/storage/XmlAdaptedPoll.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.storage;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Answer;"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Question;"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":" * JAXB-friendly version of the member."},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"public class XmlAdaptedPoll {"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"member\u0027s %s field is missing!\";"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"    private String question;"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"    private List\u003cXmlAdaptedAnswer\u003e answers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"    @XmlElement"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"    private List\u003cXmlAdaptedMatricNumber\u003e polleesMatricNumbers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"     * Constructs an XmlAdaptedMember."},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"    public XmlAdaptedPoll() {}"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"     * Constructs an {@code XmlAdaptedMember} with the given member details."},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"    public XmlAdaptedPoll(String question, List\u003cXmlAdaptedAnswer\u003e answers,"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"                          List\u003cXmlAdaptedMatricNumber\u003e polleesMatricNumbers) {"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"        this.question \u003d question;"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"        if (polleesMatricNumbers !\u003d null) {"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"            this.polleesMatricNumbers \u003d new ArrayList\u003cXmlAdaptedMatricNumber\u003e(polleesMatricNumbers);"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"        if (answers !\u003d null) {"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"            this.answers \u003d new ArrayList\u003c\u003e(answers);"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"     * Converts a given Poll into this class for JAXB use."},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPoll"},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":"    public XmlAdaptedPoll(Poll source) {"},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"        question \u003d source.getQuestion().getValue();"},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":"        answers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":"        for (Answer answer : source.getAnswers()) {"},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":"            answers.add(new XmlAdaptedAnswer(answer));"},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":"        polleesMatricNumbers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":"        for (MatricNumber polleeMatricNumber : source.getPolleesMatricNumbers()) {"},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":"            polleesMatricNumbers.add(new XmlAdaptedMatricNumber(polleeMatricNumber));"},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"     * Converts this jaxb-friendly adapted poll object into the model\u0027s poll object."},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted member"},{"lineNumber":73,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"MuhdNurKamal"},"content":"    public Poll toModelType() throws IllegalValueException {"},{"lineNumber":75,"author":{"gitID":"MuhdNurKamal"},"content":"        if (this.answers \u003d\u003d null || answers.isEmpty()) {"},{"lineNumber":76,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":77,"author":{"gitID":"MuhdNurKamal"},"content":"                    Answer.class.getSimpleName()));"},{"lineNumber":78,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":80,"author":{"gitID":"MuhdNurKamal"},"content":"        final List\u003cAnswer\u003e answersToReturn \u003d new ArrayList\u003c\u003e();"},{"lineNumber":81,"author":{"gitID":"MuhdNurKamal"},"content":"        for (XmlAdaptedAnswer answer : answers) {"},{"lineNumber":82,"author":{"gitID":"MuhdNurKamal"},"content":"            answersToReturn.add(answer.toModelType());"},{"lineNumber":83,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":85,"author":{"gitID":"MuhdNurKamal"},"content":"        if (this.polleesMatricNumbers \u003d\u003d null) {"},{"lineNumber":86,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":87,"author":{"gitID":"MuhdNurKamal"},"content":"                    MatricNumber.class.getSimpleName()));"},{"lineNumber":88,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":90,"author":{"gitID":"MuhdNurKamal"},"content":"        final Set\u003cMatricNumber\u003e polleesMatricNumbersToReturn \u003d new HashSet\u003c\u003e();"},{"lineNumber":91,"author":{"gitID":"MuhdNurKamal"},"content":"        for (XmlAdaptedMatricNumber matricNumber : polleesMatricNumbers) {"},{"lineNumber":92,"author":{"gitID":"MuhdNurKamal"},"content":"            polleesMatricNumbersToReturn.add(matricNumber.toModelType());"},{"lineNumber":93,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":95,"author":{"gitID":"MuhdNurKamal"},"content":"        if (this.question \u003d\u003d null) {"},{"lineNumber":96,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":97,"author":{"gitID":"MuhdNurKamal"},"content":"                    Question.class.getSimpleName()));"},{"lineNumber":98,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"MuhdNurKamal"},"content":"        if (!Question.isValidQuestion(question)) {"},{"lineNumber":100,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new IllegalValueException(Question.MESSAGE_QUESTION_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"MuhdNurKamal"},"content":"        final Question questionToReturn \u003d new Question(this.question);"},{"lineNumber":103,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":104,"author":{"gitID":"MuhdNurKamal"},"content":"        Poll poll \u003d new Poll (questionToReturn, answersToReturn, polleesMatricNumbersToReturn);"},{"lineNumber":105,"author":{"gitID":"MuhdNurKamal"},"content":"        return poll;"},{"lineNumber":106,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":108,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"MuhdNurKamal"},"content":"    public boolean equals(Object other) {"},{"lineNumber":110,"author":{"gitID":"MuhdNurKamal"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":111,"author":{"gitID":"MuhdNurKamal"},"content":"            return true;"},{"lineNumber":112,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":114,"author":{"gitID":"MuhdNurKamal"},"content":"        if (!(other instanceof XmlAdaptedPoll)) {"},{"lineNumber":115,"author":{"gitID":"MuhdNurKamal"},"content":"            return false;"},{"lineNumber":116,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":118,"author":{"gitID":"MuhdNurKamal"},"content":"        XmlAdaptedPoll otherPoll \u003d (XmlAdaptedPoll) other;"},{"lineNumber":119,"author":{"gitID":"MuhdNurKamal"},"content":"        return Objects.equals(question, otherPoll.question)"},{"lineNumber":120,"author":{"gitID":"MuhdNurKamal"},"content":"                \u0026\u0026 Objects.equals(answers, otherPoll.answers)"},{"lineNumber":121,"author":{"gitID":"MuhdNurKamal"},"content":"                \u0026\u0026 Objects.equals(polleesMatricNumbers, otherPoll.polleesMatricNumbers);"},{"lineNumber":122,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":123}},{"path":"src/main/java/seedu/club/storage/XmlAdaptedAnswer.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.storage;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import javax.xml.bind.annotation.XmlAttribute;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Answer;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":" * JAXB-friendly adapted version of the Answer."},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"public class XmlAdaptedAnswer {"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"    @XmlValue"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"    private String value;"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"    @XmlAttribute"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"    private int noOfMembersAnswered;"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"     * Constructs an XmlAdaptedAnswer."},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"    public XmlAdaptedAnswer() {}"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"    public XmlAdaptedAnswer(String value, int noOfMembersAnswered) {"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"        this.value \u003d value;"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"        this.noOfMembersAnswered \u003d noOfMembersAnswered;"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"     * Converts a given Answer into this class for JAXB use."},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"    public XmlAdaptedAnswer(Answer source) {"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"        value \u003d source.getValue();"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"        noOfMembersAnswered \u003d source.getVoteCount();"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"     * Converts this jaxb-friendly adapted Answer object into the model\u0027s Answer object."},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted member"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"    public Answer toModelType() throws IllegalValueException {"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"        if (!Answer.isValidAnswer(value)) {"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new IllegalValueException(Answer.MESSAGE_ANSWER_CONSTRAINTS);"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"        if (!Answer.isValidNoOfMembersAnswered(noOfMembersAnswered)) {"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new IllegalValueException(Answer.MESSAGE_ANSWER_NUMBER_ANSWERED_CONSTRAINTS);"},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"        return new Answer(value, noOfMembersAnswered);"},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":"    public boolean equals(Object other) {"},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":"            return true;"},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":"        if (!(other instanceof XmlAdaptedAnswer)) {"},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":"            return false;"},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":"        return value.equals(((XmlAdaptedAnswer) other).value)"},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":"                \u0026\u0026 noOfMembersAnswered \u003d\u003d ((XmlAdaptedAnswer) other).noOfMembersAnswered;"},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":71}},{"path":"src/main/java/seedu/club/storage/PhotoStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"//@@author amrut-prabhu"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.storage;"},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.PhotoReadException;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.PhotoWriteException;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":" * Represents a storage for the file specfied by {@link seedu.club.model.member.ProfilePhoto}."},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":" */"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"public interface PhotoStorage {"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns UserPrefs data from storage."},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"     * @param originalPhotoPath The absolute file path of the {@link seedu.club.model.member.ProfilePhoto}."},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"     * @param newPhotoName The file name of the copy of the photo specified by {@code originalPhotoPath}."},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws PhotoReadException if the {@code originalPhotoPath} is invalid."},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws PhotoWriteException if there was an error while copying the photo."},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"    void copyOriginalPhotoFile(String originalPhotoPath, String newPhotoName)"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"            throws PhotoReadException, PhotoWriteException;"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":24}},{"path":"src/main/java/seedu/club/storage/XmlFileStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.util.XmlUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":" * Stores clubbook data in an XML file"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class XmlFileStorage {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"     * Saves the given clubbook data to the specified file."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"    public static void saveDataToFile(File file, XmlSerializableClubBook clubBook)"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            throws FileNotFoundException {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"            XmlUtil.saveDataToFile(file, clubBook);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns club book in the file or an empty club book"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"    public static XmlSerializableClubBook loadDataFromSaveFile(File file) throws DataConversionException,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                                                                            FileNotFoundException {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"            return XmlUtil.getDataFromFile(file, XmlSerializableClubBook.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":10,"-":29}},{"path":"src/main/java/seedu/club/model/ReadOnlyClubBook.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":" * Unmodifiable view of an club book"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"public interface ReadOnlyClubBook {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns an unmodifiable view of the members list."},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"     * This list will not contain any duplicate members."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"    ObservableList\u003cMember\u003e getMemberList();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"     * Returns an unmodifiable view of the polls list."},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"     * This list will not contain any duplicate polls."},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"    ObservableList\u003cPoll\u003e getPollList();"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns an unmodifiable view of the orders list."},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"     * This list will not contain any duplicate orders."},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"    ObservableList\u003cTask\u003e getTaskList();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    void setPolls(Set\u003cPoll\u003e polls);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    void setTasks(Set\u003cTask\u003e tasks);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":7,"amrut-prabhu":8,"yash-chowdhary":6,"-":25}},{"path":"src/main/java/seedu/club/storage/XmlAdaptedMatricNumber.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.storage;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":" * JAXB-friendly version of the member."},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"public class XmlAdaptedMatricNumber {"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Matric Number missing\";"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"    @XmlValue"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"    private String matricNumber;"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"     * Constructs an XmlAdaptedMember."},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"    public XmlAdaptedMatricNumber() {}"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"     * Constructs an {@code XmlAdaptedMember} with the given member details."},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"    public XmlAdaptedMatricNumber(String matricNumber) {"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"        this.matricNumber \u003d matricNumber;"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"     * Converts a given MatricNumber into this class for JAXB use."},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedMatricNumber"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"    public XmlAdaptedMatricNumber(MatricNumber source) {"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"        matricNumber \u003d source.toString();"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"     * Converts this jaxb-friendly adapted matricNumber object into the model\u0027s matricNumber object."},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted member"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"    public MatricNumber toModelType() throws IllegalValueException {"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"        if (this.matricNumber \u003d\u003d null) {"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new IllegalValueException(MISSING_FIELD_MESSAGE_FORMAT);"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"        if (!MatricNumber.isValidMatricNumber(this.matricNumber)) {"},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new IllegalValueException(MatricNumber.MESSAGE_MATRIC_NUMBER_CONSTRAINTS);"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"        return new MatricNumber(matricNumber);"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":"            return true;"},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":"        if (!(other instanceof XmlAdaptedMatricNumber)) {"},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":"            return false;"},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":"        XmlAdaptedMatricNumber otherMatricNumber \u003d (XmlAdaptedMatricNumber) other;"},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":"        return Objects.equals(matricNumber, otherMatricNumber.matricNumber);"},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":70}},{"path":"src/main/java/seedu/club/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ClubBook;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ReadOnlyClubBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Email;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Name;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Phone;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.DuplicateMatricNumberException;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Answer;"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Question;"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.DuplicatePollException;"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":" * Contains utility methods for populating {@code ClubBook} with sample data."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"    public static Member[] getSampleMembers() {"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"        return new Member[] {"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"            new Member(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"                    new MatricNumber(\"A5215090A\"), new Group(\"logistics\"),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                    getTagSet(\"friends\")),"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"            new Member(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"                    new MatricNumber(\"A0632713Q\"), new Group(\"production\"),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                    getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"            new Member(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"                    new MatricNumber(\"A1010027G\"), new Group(\"exco\"),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                    getTagSet(\"neighbours\")),"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"            new Member(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"                    new MatricNumber(\"A7251856A\"), new Group(\"marketing\"),"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                    getTagSet(\"family\")),"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"            new Member(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"                    new MatricNumber(\"A4960627S\"), new Group(\"pr\"),"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                    getTagSet(\"classmates\")),"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"            new Member(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"                    new MatricNumber(\"A2488865L\"), new Group(\"legal\"),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    getTagSet(\"colleagues\"))"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"    public static Poll[] getSamplePolls() {"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"        return new Poll[] {"},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"            new Poll(new Question(\"How are you?\"),"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":"                    Arrays.asList(new Answer(\"I\u0027m fine\"), new Answer(\"Not good man\"))),"},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"            new Poll(new Question(\"What are you?\"),"},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":"                    Arrays.asList(new Answer(\"A vampire\"), (new Answer(\"A zombie\")))),"},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":"            new Poll(new Question(\"Who are you?\"),"},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":"                Arrays.asList(new Answer(\"Your father\"), (new Answer(\"Your mom\")))),"},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":"            new Poll(new Question(\"When are you?\"),"},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":"                Arrays.asList(new Answer(\"I don\u0027t get it\"), (new Answer(\"Umm..\"))))"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"    public static ReadOnlyClubBook getSampleClubBook() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"            ClubBook sampleCb \u003d new ClubBook();"},{"lineNumber":70,"author":{"gitID":"amrut-prabhu"},"content":"            for (Member sampleMember : getSampleMembers()) {"},{"lineNumber":71,"author":{"gitID":"amrut-prabhu"},"content":"                sampleCb.addMember(sampleMember);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":73,"author":{"gitID":"MuhdNurKamal"},"content":"            for (Poll samplePoll : getSamplePolls()) {"},{"lineNumber":74,"author":{"gitID":"MuhdNurKamal"},"content":"                sampleCb.addPoll(samplePoll);"},{"lineNumber":75,"author":{"gitID":"MuhdNurKamal"},"content":"            }"},{"lineNumber":76,"author":{"gitID":"amrut-prabhu"},"content":"            return sampleCb;"},{"lineNumber":77,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (DuplicateMatricNumberException e) {"},{"lineNumber":78,"author":{"gitID":"amrut-prabhu"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate members\", e);"},{"lineNumber":79,"author":{"gitID":"MuhdNurKamal"},"content":"        } catch (DuplicatePollException e) {"},{"lineNumber":80,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate polls\", e);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"MuhdNurKamal"},"content":"     * Returns a answer list containing the list of strings given."},{"lineNumber":98,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"MuhdNurKamal"},"content":"    public static List\u003cAnswer\u003e getAnswerList(String... strings) {"},{"lineNumber":100,"author":{"gitID":"MuhdNurKamal"},"content":"        List\u003cAnswer\u003e answers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":101,"author":{"gitID":"MuhdNurKamal"},"content":"        for (String s : strings) {"},{"lineNumber":102,"author":{"gitID":"MuhdNurKamal"},"content":"            answers.add(new Answer(s));"},{"lineNumber":103,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"MuhdNurKamal"},"content":"        return answers;"},{"lineNumber":105,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":107,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"MuhdNurKamal"},"content":"     * Returns a matric number set containing the list of strings given."},{"lineNumber":109,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"MuhdNurKamal"},"content":"    public static Set\u003cMatricNumber\u003e getMatricNumberSet(String... strings) {"},{"lineNumber":111,"author":{"gitID":"MuhdNurKamal"},"content":"        Set\u003cMatricNumber\u003e matricNumbers \u003d new HashSet\u003c\u003e();"},{"lineNumber":112,"author":{"gitID":"MuhdNurKamal"},"content":"        for (String s : strings) {"},{"lineNumber":113,"author":{"gitID":"MuhdNurKamal"},"content":"            matricNumbers.add(new MatricNumber(s));"},{"lineNumber":114,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"MuhdNurKamal"},"content":"        return matricNumbers;"},{"lineNumber":116,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":50,"amrut-prabhu":28,"-":40}},{"path":"src/main/java/seedu/club/storage/XmlAdaptedMember.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Credentials;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Email;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Name;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Phone;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.ProfilePhoto;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Username;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":" * JAXB-friendly version of the member."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"public class XmlAdaptedMember {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"member\u0027s %s field is missing!\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String username;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private String password;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"    private String matricNumber;"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"    @XmlElement"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"    private String group;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"    private String profilePhoto;"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"    @XmlElement"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"amrut-prabhu"},"content":"     * Constructs an XmlAdaptedMember."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"    public XmlAdaptedMember() {}"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"     * Constructs an {@code XmlAdaptedMember} with the given member details."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"    public XmlAdaptedMember(String name, String phone, String email, String matricNumber, String group,"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                            List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":"        this.matricNumber \u003d matricNumber;"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"        this.group \u003d group;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.username \u003d this.matricNumber;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this.password \u003d \"password\";"},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"        this.profilePhoto \u003d \"\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"amrut-prabhu"},"content":"     * Converts a given member into this class for JAXB use."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":78,"author":{"gitID":"amrut-prabhu"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedMember"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"amrut-prabhu"},"content":"    public XmlAdaptedMember(Member source) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":84,"author":{"gitID":"MuhdNurKamal"},"content":"        matricNumber \u003d source.getMatricNumber().value;"},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"        group \u003d source.getGroup().groupName;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        username \u003d source.getCredentials().getUsername().value;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        password \u003d source.getCredentials().getPassword().value;"},{"lineNumber":88,"author":{"gitID":"amrut-prabhu"},"content":"        profilePhoto \u003d source.getProfilePhoto().getPhotoPath();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"amrut-prabhu"},"content":"     * Converts this jaxb-friendly adapted member object into the model\u0027s member object."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":98,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted member"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"amrut-prabhu"},"content":"    public Member toModelType() throws IllegalValueException {"},{"lineNumber":101,"author":{"gitID":"amrut-prabhu"},"content":"        final List\u003cTag\u003e memberTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":103,"author":{"gitID":"amrut-prabhu"},"content":"            memberTags.add(tag.toModelType());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"MuhdNurKamal"},"content":"        if (this.matricNumber \u003d\u003d null) {"},{"lineNumber":131,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":132,"author":{"gitID":"MuhdNurKamal"},"content":"                    MatricNumber.class.getSimpleName()));"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"MuhdNurKamal"},"content":"        if (!MatricNumber.isValidMatricNumber(this.matricNumber)) {"},{"lineNumber":135,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new IllegalValueException(MatricNumber.MESSAGE_MATRIC_NUMBER_CONSTRAINTS);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"MuhdNurKamal"},"content":"        final MatricNumber matricNumber \u003d new MatricNumber(this.matricNumber);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"yash-chowdhary"},"content":"        if (!Group.isValidGroup(this.group)) {"},{"lineNumber":140,"author":{"gitID":"yash-chowdhary"},"content":"            throw new IllegalValueException(Group.MESSAGE_GROUP_CONSTRAINTS);"},{"lineNumber":141,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"yash-chowdhary"},"content":"        final Group group \u003d new Group(this.group);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"amrut-prabhu"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(memberTags);"},{"lineNumber":145,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        final ProfilePhoto profilePhoto \u003d new ProfilePhoto(this.profilePhoto);"},{"lineNumber":147,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":148,"author":{"gitID":"amrut-prabhu"},"content":"        Member member \u003d new Member(name, phone, email, matricNumber, group, tags,"},{"lineNumber":149,"author":{"gitID":"amrut-prabhu"},"content":"                new Credentials(new Username(matricNumber.value)), profilePhoto);"},{"lineNumber":150,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":151,"author":{"gitID":"amrut-prabhu"},"content":"        return member;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"amrut-prabhu"},"content":"        if (!(other instanceof XmlAdaptedMember)) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"amrut-prabhu"},"content":"        XmlAdaptedMember otherMember \u003d (XmlAdaptedMember) other;"},{"lineNumber":165,"author":{"gitID":"amrut-prabhu"},"content":"        return Objects.equals(name, otherMember.name)"},{"lineNumber":166,"author":{"gitID":"amrut-prabhu"},"content":"                \u0026\u0026 Objects.equals(phone, otherMember.phone)"},{"lineNumber":167,"author":{"gitID":"amrut-prabhu"},"content":"                \u0026\u0026 Objects.equals(email, otherMember.email)"},{"lineNumber":168,"author":{"gitID":"amrut-prabhu"},"content":"                \u0026\u0026 Objects.equals(matricNumber, otherMember.matricNumber)"},{"lineNumber":169,"author":{"gitID":"amrut-prabhu"},"content":"                \u0026\u0026 Objects.equals(group, otherMember.group)"},{"lineNumber":170,"author":{"gitID":"amrut-prabhu"},"content":"                \u0026\u0026 Objects.equals(profilePhoto, otherMember.profilePhoto)"},{"lineNumber":171,"author":{"gitID":"amrut-prabhu"},"content":"                \u0026\u0026 tagged.equals(otherMember.tagged);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":9,"amrut-prabhu":47,"yash-chowdhary":8,"-":109}},{"path":"src/main/java/seedu/club/model/group/exceptions/GroupCannotBeRemovedException.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model.group.exceptions;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":" * Signals that the desired Group cannot be removed as it is a mandatory one."},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"public class GroupCannotBeRemovedException extends Exception {"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"yash-chowdhary":6}},{"path":"src/main/java/seedu/club/model/group/exceptions/GroupNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model.group.exceptions;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":" * Signals that the operation is unable to find the required Group"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"public class GroupNotFoundException extends Exception {"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"yash-chowdhary":6}},{"path":"src/main/java/seedu/club/model/member/Phone.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model.member;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":" * Represents a member\u0027s phone number in the club book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Phone {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"-"},"content":"            \"Phone numbers can only contain numbers, and should be at least 3 digits long\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Constructs a {@code Phone}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @param phone A valid phone number."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public Phone(String phone) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.value \u003d phone;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns true if a given string is a valid member phone number."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static boolean isValidPhone(String test) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return test.matches(PHONE_VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Phone) other).value)); // state check"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":4,"-":49}},{"path":"src/main/java/seedu/club/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ClubBook;"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.Model;"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.ReadOnlyClubBook;"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"//import seedu.club.model.util.SampleDataUtil;"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.storage.ClubBookStorage;"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.storage.CsvClubBookStorage;"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.storage.JsonUserPrefsStorage;"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.storage.ProfilePhotoStorage;"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.storage.Storage;"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.storage.StorageManager;"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.storage.UserPrefsStorage;"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.storage.XmlClubBookStorage;"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.ui.Ui;"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.ui.UiManager;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":41,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":42,"author":{"gitID":"-"},"content":" */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"    public static final Version VERSION \u003d new Version(1, 4, 0, true);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing ClubBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":"        ClubBookStorage clubBookStorage \u003d new XmlClubBookStorage(userPrefs.getClubBookFilePath());"},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"        ProfilePhotoStorage profilePhotoStorage \u003d new ProfilePhotoStorage();"},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":"        CsvClubBookStorage csvClubBookStorage \u003d new CsvClubBookStorage();"},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"        storage \u003d new StorageManager(clubBookStorage, userPrefsStorage, profilePhotoStorage, csvClubBookStorage);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s club book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"amrut-prabhu"},"content":"     * The data from the sample club book will be used instead if {@code storage}\u0027s club book is not found,"},{"lineNumber":90,"author":{"gitID":"amrut-prabhu"},"content":"     * or an empty club book will be used instead if errors occur when reading {@code storage}\u0027s club book."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":93,"author":{"gitID":"amrut-prabhu"},"content":"        Optional\u003cReadOnlyClubBook\u003e clubBookOptional;"},{"lineNumber":94,"author":{"gitID":"amrut-prabhu"},"content":"        ReadOnlyClubBook initialData;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":96,"author":{"gitID":"amrut-prabhu"},"content":"            clubBookOptional \u003d storage.readClubBook();"},{"lineNumber":97,"author":{"gitID":"amrut-prabhu"},"content":"            if (!clubBookOptional.isPresent()) {"},{"lineNumber":98,"author":{"gitID":"amrut-prabhu"},"content":"                logger.info(\"Data file not found. Will be starting with a sample ClubBook\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            initialData \u003d clubBookOptional.orElse(new ClubBook());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":102,"author":{"gitID":"amrut-prabhu"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty ClubBook\");"},{"lineNumber":103,"author":{"gitID":"amrut-prabhu"},"content":"            initialData \u003d new ClubBook();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":105,"author":{"gitID":"amrut-prabhu"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty ClubBook\");"},{"lineNumber":106,"author":{"gitID":"amrut-prabhu"},"content":"            initialData \u003d new ClubBook();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":139,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":167,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":170,"author":{"gitID":"amrut-prabhu"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty ClubBook\");"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":190,"author":{"gitID":"amrut-prabhu"},"content":"        logger.info(\"Starting ClubBook \" + MainApp.VERSION);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":196,"author":{"gitID":"amrut-prabhu"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Club Connect ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":47,"-":169}},{"path":"src/main/java/seedu/club/model/group/Group.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model.group;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":" * Represents a member\u0027s Group in the club book"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidGroup(String)}"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"public class Group {"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_GROUP_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"            \"Groups should only contain alphanumeric characters, and it should not be blank\";"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"    /*"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"     * The first character of the group must not be a whitespace,"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String GROUP_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}]*\";"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String DEFAULT_GROUP \u003d \"Member\";"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String GROUP_EXCO \u003d \"Exco\";"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"    public final String groupName;"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"     * Constructs a {@code Group}."},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"     * @param group A valid group."},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"    public Group(String group) {"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(group);"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"        checkArgument(isValidGroup(group), MESSAGE_GROUP_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"        this.groupName \u003d group;"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if given string is a valid member group."},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"    public static Boolean isValidGroup(String test) {"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"        return test.matches(GROUP_VALIDATION_REGEX);"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"        return groupName;"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"        return other \u003d\u003d this    // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"                || (other instanceof Group  // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 this.groupName.equalsIgnoreCase(((Group) other).groupName));   // state check"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"        return groupName.hashCode();"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"yash-chowdhary":58}},{"path":"src/main/java/seedu/club/model/member/ProfilePhoto.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"//@@author amrut-prabhu"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model.member;"},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":" * Represents a member\u0027s profile photo in the club book."},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":" */"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"public class ProfilePhoto {"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_PHOTO_PATH_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"            \"the photo path should follow the format of this example: C:/Downloads/.../mypic.png\";"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String IMAGE_PATH_VALIDATION_REGEX \u003d \".:(.*/)*.+/.+(png|jpg|jpeg|PNG|JPG)\";"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"    private String profilePhotoPath;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"     * Constructs a {@code ProfilePhoto}."},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"     * @param path A valid image path."},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"    public ProfilePhoto(String path) {"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"        //checkArgument(isValidProfilePhoto(path), IMAGE_PATH_VALIDATION_REGEX);"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"        this.profilePhotoPath \u003d path;"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns true if a given string is a valid photo path."},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"     * @param test Path whose validity is to be checked."},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"    public static boolean isValidProfilePhoto(String test) {"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"        return test.matches(IMAGE_PATH_VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"     * Sets the {@code photoFilePath} to the specified {@code path}."},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"     * @param path A valid image path."},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"    public void setNewPhotoPath(String path) {"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"        requireNonNull(path);"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"        //checkArgument(isValidProfilePhoto(path), IMAGE_PATH_VALIDATION_REGEX);"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"        this.profilePhotoPath \u003d path;"},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"    public String getPhotoPath() {"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"        return profilePhotoPath;"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"amrut-prabhu"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"amrut-prabhu"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"                || (other instanceof ProfilePhoto // instanceof handles nulls"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"                \u0026\u0026 this.getPhotoPath().equals(((ProfilePhoto) other).getPhotoPath())); // state check"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"    public String toString() {"},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"        return profilePhotoPath;"},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"    public int hashCode() {"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"        return profilePhotoPath.hashCode();"},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":67}},{"path":"src/main/java/seedu/club/model/member/Email.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model.member;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":" * Represents a member\u0027s email in the club book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Email {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private static  final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d \"member emails should be of the format local-part@domain \""},{"lineNumber":14,"author":{"gitID":"-"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \"The domain name must:\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"            + \"    - be at least 2 characters long\\n\""},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \"    - start and end with alphanumeric characters\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    // alphanumeric and special characters"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String EMAIL_VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Constructs an {@code Email}."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"     * @param email A valid email club."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public Email(String email) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.value \u003d email;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns if a given string is a valid member email."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static boolean isValidEmail(String test) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return test.matches(EMAIL_VALIDATION_REGEX);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                || (other instanceof Email // instanceof handles nulls"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Email) other).value)); // state check"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":6,"-":61}},{"path":"src/main/java/seedu/club/model/member/Username.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model.member;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":" * Represents a member\u0027s username."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Username {"},{"lineNumber":7,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public Username(String name) {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"        this.value \u003d name;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":2,"-":15}},{"path":"src/main/java/seedu/club/model/member/exceptions/MemberNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model.member.exceptions;"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":" * Signals that the operation is unable to find the specified member."},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":" */"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"public class MemberNotFoundException extends Exception {}"}],"authorContributionMap":{"amrut-prabhu":6}},{"path":"src/main/java/seedu/club/model/member/exceptions/DuplicateMatricNumberException.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"//@@author amrut-prabhu"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model.member.exceptions;"},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.DuplicateDataException;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":" * Signals that the operation will result in a member object with a non-unique matric number."},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":" */"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"public class DuplicateMatricNumberException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"    public DuplicateMatricNumberException() {"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"        super(\"Operation would result in a member with duplicate matric number\");"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":13}},{"path":"src/main/java/seedu/club/model/member/MatricNumber.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model.member;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":" * Represents a member\u0027s matric number in the club book."},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidMatricNumber(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"public class MatricNumber {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String MESSAGE_MATRIC_NUMBER_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"            \"Member matric number must be non-empty, begin with a letter, have 7 digits in the middle, \""},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"                    + \"and end with a letter\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String MATRIC_NUMBER_VALIDATION_REGEX \u003d \"^[aA]\\\\d{7}[a-zA-Z]$\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"     * Constructs a {@code MatricNumber}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"     * @param matricNumber A valid matric number."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"    public MatricNumber(String matricNumber) {"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"        requireNonNull(matricNumber);"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"        checkArgument(isValidMatricNumber(matricNumber), MESSAGE_MATRIC_NUMBER_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"        this.value \u003d matricNumber.toUpperCase();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns true if a given string is a valid member email."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"    public static boolean isValidMatricNumber(String test) {"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"        return test.matches(MATRIC_NUMBER_VALIDATION_REGEX);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"                || (other instanceof MatricNumber // instanceof handles nulls"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"                \u0026\u0026 this.value.equals(((MatricNumber) other).value)); // state check"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":14,"amrut-prabhu":4,"yash-chowdhary":2,"-":34}},{"path":"src/main/java/seedu/club/storage/XmlAdaptedTask.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.storage;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Assignee;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Assignor;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Date;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Description;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Status;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Time;"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":" * JAXB-friendly version of Task"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"public class XmlAdaptedTask {"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"    @XmlElement"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"    private String description;"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    @XmlElement"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"    private String time;"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"    @XmlElement"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"    private String date;"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"    @XmlElement"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"    private String assignor;"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"    @XmlElement"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"    private String assignee;"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"    @XmlElement"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"    private String status;"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"     * Constructs an empty XmlAdaptedTask"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"    public XmlAdaptedTask() {}"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"     * Constructs an {@code XmlAdaptedTask} with the given task details."},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"    public XmlAdaptedTask(String description, String time, String date, String assignor, String assignee,"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"                          String status) {"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"        this.description \u003d description;"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"        this.time \u003d time;"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"        this.date \u003d date;"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"        this.assignor \u003d assignor;"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"        this.assignee \u003d assignee;"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"        this.status \u003d status;"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"     * Overloaded Constructor for constructing an {@code XmlAdaptedTask} with the given task details."},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"    public XmlAdaptedTask(String description, String time, String date) {"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"        this.description \u003d description;"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"        this.time \u003d time;"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"        this.date \u003d date;"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"        this.assignor \u003d \"\";"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"        this.assignee \u003d \"\";"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"        this.status \u003d \"\";"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"     * Converts a given Task into XmlAdaptedTask for JAXB use."},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"    public XmlAdaptedTask(Task source) {"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"        description \u003d source.getDescription().getDescription();"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"        time \u003d source.getTime().getTime();"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"        date \u003d source.getDate().getDate();"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"        assignor \u003d source.getAssignor().getAssignor();"},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"        assignee \u003d source.getAssignee().getAssignee();"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"        status \u003d source.getStatus().getStatus();"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"     * Converts the jaxb-friendly adaptedTask object into the model\u0027s Task object."},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"     * @throws IllegalValueException if any values do not follow the valid format."},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"    public Task toModelType() throws IllegalValueException {"},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"        if (this.description \u003d\u003d null) {"},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"                    Description.class.getSimpleName()));"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":"        final Description description \u003d new Description(this.description);"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":"        if (this.time \u003d\u003d null) {"},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":"                    Time.class.getSimpleName()));"},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"yash-chowdhary"},"content":"        if (!Time.isValidTime(this.time)) {"},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":"            throw new IllegalValueException(Time.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"yash-chowdhary"},"content":"        final Time time \u003d new Time(this.time);"},{"lineNumber":98,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":99,"author":{"gitID":"yash-chowdhary"},"content":"        if (this.date \u003d\u003d null) {"},{"lineNumber":100,"author":{"gitID":"yash-chowdhary"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":101,"author":{"gitID":"yash-chowdhary"},"content":"                    Date.class.getSimpleName()));"},{"lineNumber":102,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"yash-chowdhary"},"content":"        if (!Date.isValidDate(this.date)) {"},{"lineNumber":104,"author":{"gitID":"yash-chowdhary"},"content":"            throw new IllegalValueException(Date.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"yash-chowdhary"},"content":"        final Date date \u003d new Date(this.date);"},{"lineNumber":107,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":108,"author":{"gitID":"yash-chowdhary"},"content":"        if (this.assignor \u003d\u003d null) {"},{"lineNumber":109,"author":{"gitID":"yash-chowdhary"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":110,"author":{"gitID":"yash-chowdhary"},"content":"                    Assignor.class.getSimpleName()));"},{"lineNumber":111,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"yash-chowdhary"},"content":"        final Assignor assignor \u003d new Assignor(this.assignor);"},{"lineNumber":113,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":114,"author":{"gitID":"yash-chowdhary"},"content":"        if (this.assignee \u003d\u003d null) {"},{"lineNumber":115,"author":{"gitID":"yash-chowdhary"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":116,"author":{"gitID":"yash-chowdhary"},"content":"                    Assignee.class.getSimpleName()));"},{"lineNumber":117,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"yash-chowdhary"},"content":"        final Assignee assignee \u003d new Assignee(this.assignee);"},{"lineNumber":119,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":120,"author":{"gitID":"yash-chowdhary"},"content":"        if (this.status \u003d\u003d null) {"},{"lineNumber":121,"author":{"gitID":"yash-chowdhary"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":122,"author":{"gitID":"yash-chowdhary"},"content":"                    Status.class.getSimpleName()));"},{"lineNumber":123,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"yash-chowdhary"},"content":"        final Status status \u003d new Status(this.status);"},{"lineNumber":125,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":126,"author":{"gitID":"yash-chowdhary"},"content":"        return new Task(description, time, date, assignor, assignee, status);"},{"lineNumber":127,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":129,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":130,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean equals(Object other) {"},{"lineNumber":131,"author":{"gitID":"yash-chowdhary"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":132,"author":{"gitID":"yash-chowdhary"},"content":"            return true;"},{"lineNumber":133,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":135,"author":{"gitID":"yash-chowdhary"},"content":"        if (!(other instanceof XmlAdaptedTask)) {"},{"lineNumber":136,"author":{"gitID":"yash-chowdhary"},"content":"            return false;"},{"lineNumber":137,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":139,"author":{"gitID":"yash-chowdhary"},"content":"        XmlAdaptedTask otherTask \u003d (XmlAdaptedTask) other;"},{"lineNumber":140,"author":{"gitID":"yash-chowdhary"},"content":"        return Objects.equals(description, otherTask.description)"},{"lineNumber":141,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 Objects.equals(time, otherTask.time)"},{"lineNumber":142,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 Objects.equals(date, otherTask.date)"},{"lineNumber":143,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 Objects.equals(assignor, otherTask.assignor)"},{"lineNumber":144,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 Objects.equals(assignee, otherTask.assignee);"},{"lineNumber":145,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":146}},{"path":"src/main/java/seedu/club/model/member/FieldContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model.member;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.util.StringUtil;"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.logic.parser.Prefix;"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":" * Tests that a {@code member}\u0027s matches any of the keywords given according to the fieldType given by {@code prefix}."},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"public class FieldContainsKeywordsPredicate implements Predicate\u003cMember\u003e {"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"    private final Prefix prefix;"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"    public FieldContainsKeywordsPredicate(List\u003cString\u003e keywords, Prefix prefix) {"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"        this.prefix \u003d prefix;"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"    public boolean test(Member member) {"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"        return keywords.stream()"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"                .anyMatch(keyword -\u003e StringUtil.partiallyContainsWordIgnoreCase(getFieldValue(member), keyword));"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"    public boolean equals(Object other) {"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"            return true;"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"        if (!(other instanceof  FieldContainsKeywordsPredicate)) {"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"            return false;"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"        if (!(this.keywords.equals(((FieldContainsKeywordsPredicate) other).keywords))) {"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"            return false;"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"        if (this.prefix \u003d\u003d null \u0026\u0026 ((FieldContainsKeywordsPredicate) other).prefix \u003d\u003d null) {"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"            return true;"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"        if (this.prefix \u003d\u003d null || ((FieldContainsKeywordsPredicate) other).prefix \u003d\u003d null) {"},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"            return false;"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"        return this.prefix.equals(((FieldContainsKeywordsPredicate) other).prefix);"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"     * Get relevant field value of member according to {@code prefix}"},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":"     *  or all field values if {@code prefix} is null     *"},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":"    private String getFieldValue(Member member) {"},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":"        String name \u003d member.getName().toString();"},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":"        String phone \u003d member.getPhone().toString();"},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":"        String email \u003d member.getEmail().toString();"},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":"        String matricNumber \u003d member.getMatricNumber().toString();"},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":"        String group \u003d member.getGroup().toString();"},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":"        String tags \u003d member.getTags().stream().map(Tag::toString).collect(Collectors.joining(\" \"));"},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"        if (PREFIX_NAME.equals(prefix)) {"},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":"            return name;"},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"        } else if (PREFIX_PHONE.equals(prefix)) {"},{"lineNumber":73,"author":{"gitID":"MuhdNurKamal"},"content":"            return phone;"},{"lineNumber":74,"author":{"gitID":"MuhdNurKamal"},"content":"        } else if (PREFIX_EMAIL.equals(prefix)) {"},{"lineNumber":75,"author":{"gitID":"MuhdNurKamal"},"content":"            return email;"},{"lineNumber":76,"author":{"gitID":"MuhdNurKamal"},"content":"        } else if (PREFIX_MATRIC_NUMBER.equals(prefix)) {"},{"lineNumber":77,"author":{"gitID":"MuhdNurKamal"},"content":"            return matricNumber;"},{"lineNumber":78,"author":{"gitID":"MuhdNurKamal"},"content":"        } else if (PREFIX_GROUP.equals(prefix)) {"},{"lineNumber":79,"author":{"gitID":"MuhdNurKamal"},"content":"            return group;"},{"lineNumber":80,"author":{"gitID":"MuhdNurKamal"},"content":"        } else if (PREFIX_TAG.equals(prefix)) {"},{"lineNumber":81,"author":{"gitID":"MuhdNurKamal"},"content":"            return tags;"},{"lineNumber":82,"author":{"gitID":"MuhdNurKamal"},"content":"        } else {"},{"lineNumber":83,"author":{"gitID":"MuhdNurKamal"},"content":"            return name + \" \" + phone + \" \" + email + \" \" + matricNumber + \" \" + group + \" \" + tags;"},{"lineNumber":84,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":85,"amrut-prabhu":1}},{"path":"src/main/java/seedu/club/model/member/Password.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model.member;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":" * Represents a member\u0027s password."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Password {"},{"lineNumber":7,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public Password(String password) {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"        this.value \u003d password;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":2,"-":15}},{"path":"src/main/java/seedu/club/model/UserPrefs.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class UserPrefs {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"    private String clubBookFilePath \u003d \"data/clubbook.xml\";"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"    private String clubBookName \u003d \"TypicalClubBookName\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public UserPrefs() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        this.setGuiSettings(500, 500, 0, 0);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"    public String getClubBookFilePath() {"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"        return clubBookFilePath;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"    public void setClubBookFilePath(String clubBookFilePath) {"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"        this.clubBookFilePath \u003d clubBookFilePath;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"    public String getClubBookName() {"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"        return clubBookName;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"    public void setClubBookName(String clubBookName) {"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"        this.clubBookName \u003d clubBookName;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":54,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"                \u0026\u0026 Objects.equals(clubBookFilePath, o.clubBookFilePath)"},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":"                \u0026\u0026 Objects.equals(clubBookName, o.clubBookName);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":"        return Objects.hash(guiSettings, clubBookFilePath, clubBookName);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":73,"author":{"gitID":"amrut-prabhu"},"content":"        sb.append(\"\\nLocal data file location : \" + clubBookFilePath);"},{"lineNumber":74,"author":{"gitID":"amrut-prabhu"},"content":"        sb.append(\"\\nClubBook name : \" + clubBookName);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":17,"-":61}},{"path":"src/main/java/seedu/club/model/member/NameContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model.member;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":" * Tests that a {@code member}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cMember\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"    public boolean test(Member member) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(member.getName().fullName, keyword));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":6,"-":25}},{"path":"src/main/java/seedu/club/model/member/Member.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model.member;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.UniqueTaskList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":" * Represents a member in the club book."},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"public class Member {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Credentials credentials;"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"    private final MatricNumber matricNumber;"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"    private Group group;"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"    private final UniqueTaskList tasks;"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"    //@@author amrut-prabhu"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"    private final HashMap\u003cString, Tag\u003e tags;"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"    private ProfilePhoto profilePhoto;"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"    private final String emptyString \u003d \"\";"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"    //@@author"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public Member(Name name, Phone phone, Email email, MatricNumber matricNumber, Group group, Set\u003cTag\u003e tags) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, matricNumber, group, tags);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"        this.matricNumber \u003d matricNumber;"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"        this.group \u003d group;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.credentials \u003d new Credentials(new Username(matricNumber.value));"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"        this.profilePhoto \u003d new ProfilePhoto(emptyString);"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"        this.tasks \u003d new UniqueTaskList();"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"        this.tags \u003d new HashMap\u003cString, Tag\u003e();"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"        setTags(tags);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"    public Member(Name name, Phone phone, Email email, MatricNumber matricNumber, Group group, Set\u003cTag\u003e tags,"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"                  Credentials credentials, ProfilePhoto profilePhoto) {"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"        requireAllNonNull(name, phone, email, matricNumber, group, tags, credentials);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":"        this.matricNumber \u003d matricNumber;"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"        this.group \u003d group;"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"        this.tags \u003d new HashMap\u003cString, Tag\u003e();"},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":"        this.profilePhoto \u003d profilePhoto;"},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":"        setTags(tags);"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"        this.tasks \u003d new UniqueTaskList();"},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":"        this.credentials \u003d credentials;"},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"MuhdNurKamal"},"content":"    public MatricNumber getMatricNumber() {"},{"lineNumber":84,"author":{"gitID":"MuhdNurKamal"},"content":"        return matricNumber;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":"    public Group getGroup() {"},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":"        return group;"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":91,"author":{"gitID":"amrut-prabhu"},"content":"    //@@author amrut-prabhu"},{"lineNumber":92,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":93,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"amrut-prabhu"},"content":"     * Adds {@code memberTags} to {@code this} member\u0027s {@code tags}."},{"lineNumber":95,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":96,"author":{"gitID":"amrut-prabhu"},"content":"     * @param memberTags Tags to be added to {@code this} member."},{"lineNumber":97,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"amrut-prabhu"},"content":"    private void setTags(Set\u003cTag\u003e memberTags) {"},{"lineNumber":99,"author":{"gitID":"amrut-prabhu"},"content":"        Iterator itr \u003d memberTags.iterator();"},{"lineNumber":100,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":101,"author":{"gitID":"amrut-prabhu"},"content":"        while (itr.hasNext()) {"},{"lineNumber":102,"author":{"gitID":"amrut-prabhu"},"content":"            Tag tag \u003d (Tag) itr.next();"},{"lineNumber":103,"author":{"gitID":"amrut-prabhu"},"content":"            tags.put(tag.tagName, tag);"},{"lineNumber":104,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":107,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":109,"author":{"gitID":"amrut-prabhu"},"content":"     * if modification is attempted."},{"lineNumber":110,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"amrut-prabhu"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":112,"author":{"gitID":"amrut-prabhu"},"content":"        Set\u003cTag\u003e memberTags \u003d new HashSet\u003cTag\u003e();"},{"lineNumber":113,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":114,"author":{"gitID":"amrut-prabhu"},"content":"        Set\u003cString\u003e tagNames \u003d tags.keySet();"},{"lineNumber":115,"author":{"gitID":"amrut-prabhu"},"content":"        Iterator itr \u003d tagNames.iterator();"},{"lineNumber":116,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":117,"author":{"gitID":"amrut-prabhu"},"content":"        while (itr.hasNext()) {"},{"lineNumber":118,"author":{"gitID":"amrut-prabhu"},"content":"            String key \u003d (String) itr.next();"},{"lineNumber":119,"author":{"gitID":"amrut-prabhu"},"content":"            memberTags.add(tags.get(key));"},{"lineNumber":120,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":122,"author":{"gitID":"amrut-prabhu"},"content":"        return Collections.unmodifiableSet(memberTags);"},{"lineNumber":123,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":125,"author":{"gitID":"amrut-prabhu"},"content":"    public boolean hasTag(Tag tag) {"},{"lineNumber":126,"author":{"gitID":"amrut-prabhu"},"content":"        return getTags().contains(tag);"},{"lineNumber":127,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":129,"author":{"gitID":"amrut-prabhu"},"content":"    public ProfilePhoto getProfilePhoto() {"},{"lineNumber":130,"author":{"gitID":"amrut-prabhu"},"content":"        return profilePhoto;"},{"lineNumber":131,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":133,"author":{"gitID":"amrut-prabhu"},"content":"    public void setProfilePhoto(ProfilePhoto profilePhoto) {"},{"lineNumber":134,"author":{"gitID":"amrut-prabhu"},"content":"        this.profilePhoto \u003d profilePhoto;"},{"lineNumber":135,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":137,"author":{"gitID":"amrut-prabhu"},"content":"    public void setProfilePhotoPath(String newPath) {"},{"lineNumber":138,"author":{"gitID":"amrut-prabhu"},"content":"        profilePhoto.setNewPhotoPath(newPath);"},{"lineNumber":139,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":141,"author":{"gitID":"amrut-prabhu"},"content":"    //@@author"},{"lineNumber":142,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns an immutable task set, which throws {@code UnsupportedOperationException}"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"yash-chowdhary"},"content":"    public Set\u003cTask\u003e getTasks() {"},{"lineNumber":147,"author":{"gitID":"yash-chowdhary"},"content":"        return Collections.unmodifiableSet(tasks.toSet());"},{"lineNumber":148,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"amrut-prabhu"},"content":"        if (!(other instanceof Member)) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"amrut-prabhu"},"content":"        Member otherMember \u003d (Member) other;"},{"lineNumber":161,"author":{"gitID":"amrut-prabhu"},"content":"        return otherMember.getName().equals(this.getName())"},{"lineNumber":162,"author":{"gitID":"amrut-prabhu"},"content":"                \u0026\u0026 otherMember.getPhone().equals(this.getPhone())"},{"lineNumber":163,"author":{"gitID":"amrut-prabhu"},"content":"                \u0026\u0026 otherMember.getEmail().equals(this.getEmail())"},{"lineNumber":164,"author":{"gitID":"amrut-prabhu"},"content":"                \u0026\u0026 otherMember.getMatricNumber().equals(this.getMatricNumber());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":170,"author":{"gitID":"MuhdNurKamal"},"content":"        return Objects.hash(name, phone, email, matricNumber, group, tags);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":181,"author":{"gitID":"MuhdNurKamal"},"content":"                .append(\" MatricNumber: \")"},{"lineNumber":182,"author":{"gitID":"MuhdNurKamal"},"content":"                .append(getMatricNumber())"},{"lineNumber":183,"author":{"gitID":"yash-chowdhary"},"content":"                .append(\" Group: \")"},{"lineNumber":184,"author":{"gitID":"yash-chowdhary"},"content":"                .append(getGroup())"},{"lineNumber":185,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":187,"author":{"gitID":"yash-chowdhary"},"content":"        builder.append(\"Tasks: \");"},{"lineNumber":188,"author":{"gitID":"yash-chowdhary"},"content":"        getTasks().forEach(builder::append);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    public Credentials getCredentials() {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        return credentials;"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":8,"amrut-prabhu":83,"yash-chowdhary":23,"-":81}},{"path":"src/main/java/seedu/club/model/task/TaskIsRelatedToMemberPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.model.task;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":" * Tests that a {@code task} is related to (Assignor or Assignee) the {@code member}."},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"public class TaskIsRelatedToMemberPredicate implements Predicate\u003cTask\u003e {"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"    private final Member member;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"    public TaskIsRelatedToMemberPredicate(Member member) {"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"        this.member \u003d member;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean test(Task task) {"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"        return member.getMatricNumber().toString().equalsIgnoreCase(task.getAssignor().getAssignor())"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"                || member.getMatricNumber().toString().equalsIgnoreCase(task.getAssignee().getAssignee());"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"    public Member getMember() {"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"        return member;"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean equals(Object other) {"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"        return (other \u003d\u003d this)  // short circuit if same object"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"                || (other instanceof TaskIsRelatedToMemberPredicate     // handles nulls"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 this.member.equals(((TaskIsRelatedToMemberPredicate) other).getMember()));   // state check"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":34}},{"path":"src/main/java/seedu/club/model/member/Name.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model.member;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":" * Represents a member\u0027s name in the club book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"            \"member names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"     * The first character of the name must not be a whitespace, otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public final String fullName;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Constructs a {@code Name}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @param name A valid name."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public Name(String name) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.fullName \u003d name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns true if a given string is a valid member name."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return fullName;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":6,"-":52}},{"path":"src/main/java/seedu/club/model/member/UniqueMemberList.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model.member;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Comparator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.util.CollectionUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.club.model.member.exceptions.DataToChangeIsNotCurrentlyLoggedInMemberException;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.DuplicateMatricNumberException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.club.model.member.exceptions.MemberListNotEmptyException;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.MemberNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.club.model.member.exceptions.PasswordIncorrectException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":" * A list of members that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":23,"author":{"gitID":"-"},"content":" *"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":25,"author":{"gitID":"-"},"content":" *"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":" * @see Member#equals(Object)"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"public class UniqueMemberList implements Iterable\u003cMember\u003e {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"    private final ObservableList\u003cMember\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private HashMap\u003cString, Member\u003e usernameCredentialsHashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private HashMap\u003cString, String\u003e usernamePasswordHashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Member currentlyLogInMember \u003d null;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns true if the list contains an equivalent member as the given argument."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"    public boolean contains(Member toCheck) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"        return containsMatricNumber(toCheck.getMatricNumber());"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"    // @@author amrut-prabhu"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns true if {@code internalList} of members contains a member with the same {@code MatricNumber}."},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"     * @param toCheck Matric Number that is to be checked for uniqueness."},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"    private boolean containsMatricNumber(MatricNumber toCheck) {"},{"lineNumber":51,"author":{"gitID":"amrut-prabhu"},"content":"        requireNonNull(toCheck);"},{"lineNumber":52,"author":{"gitID":"amrut-prabhu"},"content":"        for (Member member: internalList) {"},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"            if (member.getMatricNumber().equals(toCheck)) {"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"                return true;"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"            }"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"        return false;"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":"     * Adds a member to the list."},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws DuplicateMatricNumberException if a member with the same matriculation number as member to add exists."},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":"    public void add(Member toAdd) throws DuplicateMatricNumberException {"},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":"        requireNonNull(toAdd);"},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"        if (this.containsMatricNumber(toAdd.getMatricNumber())) {"},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":"            throw new DuplicateMatricNumberException();"},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"amrut-prabhu"},"content":"        // @@author"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        usernameCredentialsHashMap.put(toAdd.getCredentials().getUsername().value, toAdd);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        usernamePasswordHashMap.put(toAdd.getCredentials().getUsername().value,"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                toAdd.getCredentials().getPassword().value);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"amrut-prabhu"},"content":"     * Replaces the member {@code target} in the list with {@code editedMember}."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":80,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws DuplicateMatricNumberException if the replacement\u0027s matriculation number is equivalent to that of"},{"lineNumber":81,"author":{"gitID":"amrut-prabhu"},"content":"     *  `                               another existing member in the list."},{"lineNumber":82,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws MemberNotFoundException if {@code target} could not be found in the list."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"amrut-prabhu"},"content":"    public void setMember(Member target, Member editedMember)"},{"lineNumber":85,"author":{"gitID":"amrut-prabhu"},"content":"            throws DuplicateMatricNumberException, MemberNotFoundException {"},{"lineNumber":86,"author":{"gitID":"amrut-prabhu"},"content":"        requireNonNull(editedMember);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1 || usernamePasswordHashMap.get(target.getCredentials().getUsername().toString()) \u003d\u003d null) {"},{"lineNumber":90,"author":{"gitID":"amrut-prabhu"},"content":"            throw new MemberNotFoundException();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"amrut-prabhu"},"content":"        // @@author amrut-prabhu"},{"lineNumber":94,"author":{"gitID":"amrut-prabhu"},"content":"        if (!target.equals(editedMember) \u0026\u0026 this.containsMatricNumber(editedMember.getMatricNumber())"},{"lineNumber":95,"author":{"gitID":"amrut-prabhu"},"content":"                \u0026\u0026 !target.getMatricNumber().equals(editedMember.getMatricNumber())) {"},{"lineNumber":96,"author":{"gitID":"amrut-prabhu"},"content":"            throw new DuplicateMatricNumberException();"},{"lineNumber":97,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"amrut-prabhu"},"content":"        // @@author"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"amrut-prabhu"},"content":"        internalList.set(index, editedMember);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        usernamePasswordHashMap.remove(target.getCredentials().getUsername().value);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        usernamePasswordHashMap.put(editedMember.getCredentials().getUsername().value,"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                editedMember.getCredentials().getPassword().value);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"amrut-prabhu"},"content":"     * Removes the equivalent member from the list."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":109,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws MemberNotFoundException if no such member could be found in the list."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"amrut-prabhu"},"content":"    public boolean remove(Member toRemove) throws MemberNotFoundException {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":113,"author":{"gitID":"amrut-prabhu"},"content":"        final boolean memberFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":114,"author":{"gitID":"amrut-prabhu"},"content":"        if (!memberFoundAndDeleted) {"},{"lineNumber":115,"author":{"gitID":"amrut-prabhu"},"content":"            throw new MemberNotFoundException();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        usernameCredentialsHashMap.remove(toRemove.getCredentials().getUsername().toString());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        usernamePasswordHashMap.remove(toRemove.getCredentials().getUsername().toString());"},{"lineNumber":119,"author":{"gitID":"amrut-prabhu"},"content":"        return memberFoundAndDeleted;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"amrut-prabhu"},"content":"    public void setMembers(UniqueMemberList replacement) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"amrut-prabhu"},"content":"    public void setMembers(List\u003cMember\u003e members) throws DuplicateMatricNumberException {"},{"lineNumber":127,"author":{"gitID":"amrut-prabhu"},"content":"        requireAllNonNull(members);"},{"lineNumber":128,"author":{"gitID":"amrut-prabhu"},"content":"        final UniqueMemberList replacement \u003d new UniqueMemberList();"},{"lineNumber":129,"author":{"gitID":"amrut-prabhu"},"content":"        for (final Member member : members) {"},{"lineNumber":130,"author":{"gitID":"amrut-prabhu"},"content":"            replacement.add(member);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"amrut-prabhu"},"content":"        setMembers(replacement);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"amrut-prabhu"},"content":"    public ObservableList\u003cMember\u003e asObservableList() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        sort();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":144,"author":{"gitID":"amrut-prabhu"},"content":"    public Iterator\u003cMember\u003e iterator() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":151,"author":{"gitID":"amrut-prabhu"},"content":"                || (other instanceof UniqueMemberList // instanceof handles nulls"},{"lineNumber":152,"author":{"gitID":"amrut-prabhu"},"content":"                        \u0026\u0026 this.internalList.equals(((UniqueMemberList) other).internalList));"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Logs in a member successfully and return a true value"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * @return"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    public void logsInMember(String username, String password) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        Member checkMember \u003d usernameCredentialsHashMap.get(username);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        if (checkMember !\u003d null \u0026\u0026 usernamePasswordHashMap.get(username).equals(password)) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            currentlyLogInMember \u003d checkMember;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Get the member who is logged in"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * @return"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    public Member getCurrentlyLogInMember() {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        return currentlyLogInMember;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * Fill the hashmap with username and member, and also username and password"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    public void fillHashMap() {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        for (Member anInternalList : internalList) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            usernameCredentialsHashMap.put(anInternalList.getCredentials().getUsername().value, anInternalList);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            usernamePasswordHashMap.put(anInternalList.getCredentials().getUsername().value,"},{"lineNumber":186,"author":{"gitID":"-"},"content":"                    anInternalList.getCredentials().getPassword().value);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     Sort the list according to alphabetical order"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    public void sort() {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        internalList.sort(new Comparator\u003cMember\u003e() {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            @Override"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            public int compare(Member otherMember1, Member otherMember2) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                return otherMember1.getName().toString().compareTo(otherMember2.getName().toString());"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * Logs out the user"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    public void logout() {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        setCurrentlyLogInMember(null);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public void setCurrentlyLogInMember(Member member) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        currentlyLogInMember \u003d member;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"content":"    //@@author Song Weiyang"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * Changes the password of a member"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    public void changePassword (String username, String oldPassword, String newPassword)"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            throws PasswordIncorrectException, DataToChangeIsNotCurrentlyLoggedInMemberException {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        Member checkMember \u003d usernameCredentialsHashMap.get(username);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        if (!checkMember.equals(currentlyLogInMember)) {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            throw new DataToChangeIsNotCurrentlyLoggedInMemberException();"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        if (checkMember !\u003d null \u0026\u0026 usernamePasswordHashMap.get(username).equals(oldPassword)) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            internalList.get(internalList.indexOf(checkMember)).getCredentials().setPassword(new Password(newPassword));"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            usernamePasswordHashMap.remove(username);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            usernamePasswordHashMap.put(username, newPassword);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"            throw new PasswordIncorrectException();"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * Sign up a user when the clubbook is empty"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    public void signup(Member member) throws MemberListNotEmptyException {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        if (!internalList.isEmpty()) {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"            throw new MemberListNotEmptyException();"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        internalList.add(member);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        usernameCredentialsHashMap.put(member.getCredentials().getUsername().value, member);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        usernamePasswordHashMap.put(member.getCredentials().getUsername().value,"},{"lineNumber":241,"author":{"gitID":"-"},"content":"                member.getCredentials().getPassword().value);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * Clears the clubbook"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        internalList.clear();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        usernamePasswordHashMap.clear();"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        usernameCredentialsHashMap.clear();"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        setCurrentlyLogInMember(null);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        System.out.println(getCurrentlyLogInMember());"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"amrut-prabhu":74,"-":179}},{"path":"src/main/java/seedu/club/model/task/exceptions/TaskCannotBeDeletedException.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.model.task.exceptions;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":" * Signals that the desired Task cannot be removed."},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"public class TaskCannotBeDeletedException extends Exception {"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":7}},{"path":"src/main/java/seedu/club/model/task/exceptions/TasksAlreadyListedException.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.model.task.exceptions;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":" * Signals that the task list is already listed."},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"public class TasksAlreadyListedException extends Exception {"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"    public TasksAlreadyListedException(String message) {"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":10}},{"path":"src/main/java/seedu/club/model/task/exceptions/TasksCannotBeDisplayedException.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.model.task.exceptions;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":" * Signals that the task list cannot be displayed."},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"public class TasksCannotBeDisplayedException extends Exception {"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":7}},{"path":"src/main/java/seedu/club/model/task/Status.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.model.task;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":" * Represents the status of a Task"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"public class Status {"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String NOT_STARTED_STATUS \u003d \"Yet To Begin\";"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String IN_PROGRESS_STATUS \u003d \"In Progress\";"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String COMPLETED_STATUS \u003d \"Completed\";"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_INVALID_STATUS \u003d \"Invalid status entered!\";"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"    private String status;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"    public Status(String status) {"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(status);"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"        this.status \u003d status;"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"    public int hashCode() {"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"        return status.hashCode();"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"    public String getStatus() {"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"        return status;"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"        return other \u003d\u003d this        //short circuit if same object"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"                || (other instanceof Status   //handles nulls"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 this.status.equalsIgnoreCase(((Status) other).status));    //state check"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"     * Checks if the given status {@code test} is a valid status"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"    public static boolean isValidStatus(String test) {"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"        return test.equalsIgnoreCase(NOT_STARTED_STATUS)"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"                || test.equalsIgnoreCase(IN_PROGRESS_STATUS)"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"                || test.equalsIgnoreCase(COMPLETED_STATUS);"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":46}},{"path":"src/main/java/seedu/club/model/task/exceptions/TaskNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.model.task.exceptions;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":" * Signals that the desired Task cannot be found."},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"public class TaskNotFoundException extends Exception {"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":7}},{"path":"src/main/java/seedu/club/model/task/exceptions/DuplicateTaskException.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.model.task.exceptions;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":" * Signals that the operation would result in duplicate task objects."},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"public class DuplicateTaskException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"    public DuplicateTaskException() {"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"        super(\"Operation would result in duplicate tasks\");"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"yash-chowdhary":11}},{"path":"src/main/java/seedu/club/model/task/Description.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.model.task;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.commons.util.AppUtil.checkArgument;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":" * Refers to the Description of a Task"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"public class Description {"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String DESCRIPTION_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_DESCRIPTION_CONSTRAINTS \u003d \"Description should a non-empty alphanumeric string\";"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"    public final String description;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"    public Description(String description) {"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(description);"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"        checkArgument(isValidDescription(description), MESSAGE_DESCRIPTION_CONSTRAINTS);"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"        this.description \u003d description;"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"    public String getDescription() {"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"        return description;"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if the given string is a valid description."},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"    public static boolean isValidDescription(String test) {"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"        return test.matches(DESCRIPTION_VALIDATION_REGEX);"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"    public int hashCode() {"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"        return description.hashCode();"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean equals(Object other) {"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"        return other \u003d\u003d this        //short circuit if same object"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"                || (other instanceof Description   //handles nulls"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 this.description.equalsIgnoreCase(((Description) other).description));    //state check"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":45}},{"path":"src/main/java/seedu/club/model/task/Time.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.model.task;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.commons.util.AppUtil.checkArgument;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":" * Refers to the time (deadline) the Task should be completed by."},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"public class Time {"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_TIME_CONSTRAINTS \u003d \"Time must be in the format HH:MM and can be separated \""},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"            + \"by \u0027:\u0027\";"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"     * Adapted from {@linktourl http://www.mkyong.com/regular-expressions/how-to-validate-time-in-24-hours-format-"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"     * with-regular-expression/}"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String TIME_VALIDATION_REGEX \u003d \"(0[0-9]|1[0-9]|2[0-3]):\""},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"            + \"(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])\";"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String TIME_SPLITTER \u003d \":\";"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"    public final String time;"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    public Time(String time) {"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(time);"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"        checkArgument(isValidTime(time), MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"        this.time \u003d time;"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if the given string {@code test} is a valid test."},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"    public static boolean isValidTime(String test) {"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"        if (!test.matches(TIME_VALIDATION_REGEX)) {"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"            return false;"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"        String[] timeFields \u003d test.split(TIME_SPLITTER);"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"        final int hour \u003d Integer.parseInt(timeFields[0]);"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"        final int minute \u003d Integer.parseInt(timeFields[1]);"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"        return true;"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns the time in a standard \u0027:\u0027-separated, \u0027HH:MM\u0027 format."},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"    public String standardizeTime(String time) {"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"        String[] timeFields \u003d time.split(TIME_SPLITTER);"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"        final int hour \u003d Integer.parseInt(timeFields[0]);"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"        sb.append(hour);"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"        sb.append(TIME_SPLITTER);"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"        final int minute \u003d Integer.parseInt(timeFields[1]);"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"        if (minute \u003c 10) {"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"            sb.append(0);"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"        sb.append(minute);"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"        return sb.toString();"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"    public String getTime() {"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"        return standardizeTime(time);"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"    public int hashCode() {"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"        return time.hashCode();"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean equals(Object other) {"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"        return other \u003d\u003d this        //short circuit if same object"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"                || (other instanceof Time   //handles nulls"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 this.time.equalsIgnoreCase(((Time) other).time));    //state check"},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":79}},{"path":"src/main/java/seedu/club/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.storage.ProfilePhotoStorage.PHOTO_FILE_EXTENSION;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.storage.ProfilePhotoStorage.SAVE_PHOTO_DIRECTORY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.ComponentManager;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.core.LogsCenter;"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.model.ClubBookChangedEvent;"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.model.NewExportDataAvailableEvent;"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.events.model.ProfilePhotoChangedEvent;"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.commons.events.ui.SendEmailRequestEvent;"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.PhotoReadException;"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.util.CsvUtil;"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.logic.commands.ViewMyTasksCommand;"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Body;"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Client;"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Subject;"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.exceptions.GroupCannotBeRemovedException;"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.UniqueMemberList;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.club.model.member.exceptions.DataToChangeIsNotCurrentlyLoggedInMemberException;"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.DuplicateMatricNumberException;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.club.model.member.exceptions.MemberListNotEmptyException;"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.MemberNotFoundException;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.club.model.member.exceptions.PasswordIncorrectException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.PollIsRelevantToMemberPredicate;"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.AnswerNotFoundException;"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.DuplicatePollException;"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.PollNotFoundException;"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.UserAlreadyVotedException;"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.club.model.task.Assignee;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.club.model.task.Assignor;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.club.model.task.Status;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.TaskIsRelatedToMemberPredicate;"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TaskCannotBeDeletedException;"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TasksAlreadyListedException;"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TasksCannotBeDisplayedException;"},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.storage.CsvClubBookStorage;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":" * Represents the in-memory model of the club book data."},{"lineNumber":65,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":66,"author":{"gitID":"-"},"content":" */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"amrut-prabhu"},"content":"    private final ClubBook clubBook;"},{"lineNumber":71,"author":{"gitID":"amrut-prabhu"},"content":"    private final FilteredList\u003cMember\u003e filteredMembers;"},{"lineNumber":72,"author":{"gitID":"amrut-prabhu"},"content":"    private final FilteredList\u003cTag\u003e filteredTags;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPoll\u003e filteredPolls;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cTask\u003e filteredTasks;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    private boolean isConfirmedClear;"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"amrut-prabhu"},"content":"     * Initializes a ModelManager with the given clubBook and userPrefs."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"amrut-prabhu"},"content":"    public ModelManager(ReadOnlyClubBook clubBook, UserPrefs userPrefs) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":82,"author":{"gitID":"amrut-prabhu"},"content":"        requireAllNonNull(clubBook, userPrefs);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"amrut-prabhu"},"content":"        logger.fine(\"Initializing with club book: \" + clubBook + \" and user prefs \" + userPrefs);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"amrut-prabhu"},"content":"        this.clubBook \u003d new ClubBook(clubBook);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        isConfirmedClear \u003d false;"},{"lineNumber":88,"author":{"gitID":"amrut-prabhu"},"content":"        filteredMembers \u003d new FilteredList\u003c\u003e(this.clubBook.getMemberList());"},{"lineNumber":89,"author":{"gitID":"amrut-prabhu"},"content":"        filteredTags \u003d new FilteredList\u003c\u003e(this.clubBook.getTagList());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        filteredPolls \u003d new FilteredList\u003c\u003e(this.clubBook.getPollList());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        filteredTasks \u003d new FilteredList\u003c\u003e(this.clubBook.getTaskList());"},{"lineNumber":92,"author":{"gitID":"amrut-prabhu"},"content":"        updateFilteredMemberList(PREDICATE_NOT_SHOW_ALL_MEMBERS);"},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":"        updateFilteredTaskList(PREDICATE_NOT_SHOW_ALL_TASKS);"},{"lineNumber":94,"author":{"gitID":"MuhdNurKamal"},"content":"        updateFilteredPollList(new PollIsRelevantToMemberPredicate(getLoggedInMember()));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":98,"author":{"gitID":"amrut-prabhu"},"content":"        this(new ClubBook(), new UserPrefs());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"amrut-prabhu"},"content":"    public void resetData(ReadOnlyClubBook newData) {"},{"lineNumber":103,"author":{"gitID":"amrut-prabhu"},"content":"        clubBook.resetData(newData);"},{"lineNumber":104,"author":{"gitID":"amrut-prabhu"},"content":"        indicateClubBookChanged();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"amrut-prabhu"},"content":"    public ReadOnlyClubBook getClubBook() {"},{"lineNumber":109,"author":{"gitID":"amrut-prabhu"},"content":"        return clubBook;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":113,"author":{"gitID":"amrut-prabhu"},"content":"    private void indicateClubBookChanged() {"},{"lineNumber":114,"author":{"gitID":"amrut-prabhu"},"content":"        raise(new ClubBookChangedEvent(clubBook));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"amrut-prabhu"},"content":"    public synchronized void deleteMember(Member target) throws MemberNotFoundException {"},{"lineNumber":119,"author":{"gitID":"amrut-prabhu"},"content":"        clubBook.removeMember(target);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        filteredMembers.remove(target);"},{"lineNumber":121,"author":{"gitID":"amrut-prabhu"},"content":"        indicateClubBookChanged();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"amrut-prabhu"},"content":"    public synchronized void addMember(Member member) throws DuplicateMatricNumberException {"},{"lineNumber":126,"author":{"gitID":"amrut-prabhu"},"content":"        clubBook.addMember(member);"},{"lineNumber":127,"author":{"gitID":"amrut-prabhu"},"content":"        updateFilteredMemberList(PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":128,"author":{"gitID":"amrut-prabhu"},"content":"        indicateClubBookChanged();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"amrut-prabhu"},"content":"    public void updateMember(Member target, Member editedMember)"},{"lineNumber":133,"author":{"gitID":"amrut-prabhu"},"content":"            throws DuplicateMatricNumberException, MemberNotFoundException {"},{"lineNumber":134,"author":{"gitID":"amrut-prabhu"},"content":"        requireAllNonNull(target, editedMember);"},{"lineNumber":135,"author":{"gitID":"amrut-prabhu"},"content":"        clubBook.updateMember(target, editedMember);"},{"lineNumber":136,"author":{"gitID":"amrut-prabhu"},"content":"        indicateClubBookChanged();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"MuhdNurKamal"},"content":"    //@@author MuhdNurKamal"},{"lineNumber":140,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":141,"author":{"gitID":"MuhdNurKamal"},"content":"    public synchronized void addPoll(Poll poll) throws DuplicatePollException {"},{"lineNumber":142,"author":{"gitID":"MuhdNurKamal"},"content":"        clubBook.addPoll(poll);"},{"lineNumber":143,"author":{"gitID":"MuhdNurKamal"},"content":"        updateFilteredPollList(new PollIsRelevantToMemberPredicate(getLoggedInMember()));"},{"lineNumber":144,"author":{"gitID":"MuhdNurKamal"},"content":"        indicateClubBookChanged();"},{"lineNumber":145,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":147,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":148,"author":{"gitID":"MuhdNurKamal"},"content":"    public void voteInPoll(Poll poll, Index answerIndex)"},{"lineNumber":149,"author":{"gitID":"MuhdNurKamal"},"content":"            throws PollNotFoundException, AnswerNotFoundException, UserAlreadyVotedException {"},{"lineNumber":150,"author":{"gitID":"MuhdNurKamal"},"content":"        requireAllNonNull(poll, answerIndex);"},{"lineNumber":151,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":152,"author":{"gitID":"MuhdNurKamal"},"content":"        clubBook.voteInPoll(poll, answerIndex, getLoggedInMember().getMatricNumber());"},{"lineNumber":153,"author":{"gitID":"MuhdNurKamal"},"content":"        indicateClubBookChanged();"},{"lineNumber":154,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":156,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":157,"author":{"gitID":"MuhdNurKamal"},"content":"    public synchronized void deletePoll(Poll target) throws PollNotFoundException {"},{"lineNumber":158,"author":{"gitID":"MuhdNurKamal"},"content":"        clubBook.removePoll(target);"},{"lineNumber":159,"author":{"gitID":"MuhdNurKamal"},"content":"        indicateClubBookChanged();"},{"lineNumber":160,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"MuhdNurKamal"},"content":"    //@@author"},{"lineNumber":162,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":163,"content":"    //@@author Song Weiyang"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public void logsInMember(String username, String password) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        requireAllNonNull(username, password);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        clubBook.logInMember(username, password);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        if (getLoggedInMember() !\u003d null) {"},{"lineNumber":169,"author":{"gitID":"amrut-prabhu"},"content":"            updateFilteredMemberList(PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":170,"author":{"gitID":"MuhdNurKamal"},"content":"            updateFilteredPollList(new PollIsRelevantToMemberPredicate(getLoggedInMember()));"},{"lineNumber":171,"author":{"gitID":"yash-chowdhary"},"content":"            updateFilteredTaskList(new TaskIsRelatedToMemberPredicate(getLoggedInMember()));"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"content":"    //@@author Song Weiyang"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public Member getLoggedInMember() {"},{"lineNumber":178,"author":{"gitID":"yash-chowdhary"},"content":"        return clubBook.getLoggedInMember();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"amrut-prabhu"},"content":"    //@@author amrut-prabhu"},{"lineNumber":182,"author":{"gitID":"amrut-prabhu"},"content":"    /** Raises an event to indicate the profile photo of a member has changed */"},{"lineNumber":183,"author":{"gitID":"amrut-prabhu"},"content":"    private void indicateProfilePhotoChanged(String originalPath, String newFileName) throws PhotoReadException {"},{"lineNumber":184,"author":{"gitID":"amrut-prabhu"},"content":"        ProfilePhotoChangedEvent profilePhotoChangedEvent \u003d new ProfilePhotoChangedEvent(originalPath, newFileName);"},{"lineNumber":185,"author":{"gitID":"amrut-prabhu"},"content":"        raise(profilePhotoChangedEvent);"},{"lineNumber":186,"author":{"gitID":"amrut-prabhu"},"content":"        if (!profilePhotoChangedEvent.isPhotoChanged()) {"},{"lineNumber":187,"author":{"gitID":"amrut-prabhu"},"content":"            throw new PhotoReadException();"},{"lineNumber":188,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":191,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":192,"author":{"gitID":"amrut-prabhu"},"content":"    public void addProfilePhoto(String originalPhotoPath) throws PhotoReadException {"},{"lineNumber":193,"author":{"gitID":"amrut-prabhu"},"content":"        requireNonNull(originalPhotoPath);"},{"lineNumber":194,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":195,"author":{"gitID":"amrut-prabhu"},"content":"        String newFileName \u003d getLoggedInMember().getMatricNumber().toString();"},{"lineNumber":196,"author":{"gitID":"amrut-prabhu"},"content":"        indicateProfilePhotoChanged(originalPhotoPath, newFileName);"},{"lineNumber":197,"author":{"gitID":"amrut-prabhu"},"content":"        String newProfilePhotoPath \u003d SAVE_PHOTO_DIRECTORY + newFileName + PHOTO_FILE_EXTENSION;"},{"lineNumber":198,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":199,"author":{"gitID":"amrut-prabhu"},"content":"        getLoggedInMember().setProfilePhotoPath(newProfilePhotoPath);"},{"lineNumber":200,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":201,"author":{"gitID":"amrut-prabhu"},"content":"        updateFilteredMemberList(PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":202,"author":{"gitID":"amrut-prabhu"},"content":"        indicateClubBookChanged();"},{"lineNumber":203,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":205,"author":{"gitID":"yash-chowdhary"},"content":"    //@@author yash-chowdhary"},{"lineNumber":206,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":207,"author":{"gitID":"yash-chowdhary"},"content":"    public void removeGroup(Group toRemove) throws GroupNotFoundException, GroupCannotBeRemovedException {"},{"lineNumber":208,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(toRemove);"},{"lineNumber":209,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":210,"author":{"gitID":"yash-chowdhary"},"content":"        clubBook.removeGroup(toRemove);"},{"lineNumber":211,"author":{"gitID":"yash-chowdhary"},"content":"        indicateClubBookChanged();"},{"lineNumber":212,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":214,"author":{"gitID":"amrut-prabhu"},"content":"    //@@author amrut-prabhu"},{"lineNumber":215,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":216,"author":{"gitID":"amrut-prabhu"},"content":"    public void deleteTag(Tag tag) throws TagNotFoundException {"},{"lineNumber":217,"author":{"gitID":"amrut-prabhu"},"content":"        clubBook.deleteTag(tag);"},{"lineNumber":218,"author":{"gitID":"amrut-prabhu"},"content":"        updateFilteredMemberList(PREDICATE_SHOW_ALL_MEMBERS);"},{"lineNumber":219,"author":{"gitID":"amrut-prabhu"},"content":"        indicateClubBookChanged();"},{"lineNumber":220,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":222,"author":{"gitID":"yash-chowdhary"},"content":"    //@@author yash-chowdhary"},{"lineNumber":223,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":224,"author":{"gitID":"yash-chowdhary"},"content":"    public String generateEmailRecipients(Group group, Tag tag) throws GroupNotFoundException, TagNotFoundException {"},{"lineNumber":225,"author":{"gitID":"yash-chowdhary"},"content":"        if (group !\u003d null) {"},{"lineNumber":226,"author":{"gitID":"yash-chowdhary"},"content":"            return generateGroupEmailRecipients(group);"},{"lineNumber":227,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"yash-chowdhary"},"content":"        return generateTagEmailRecipients(tag);"},{"lineNumber":229,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":231,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"yash-chowdhary"},"content":"     * Generates recipient list of all members part of {@code Tag toSendEmailTo}"},{"lineNumber":233,"author":{"gitID":"yash-chowdhary"},"content":"     * @throws TagNotFoundException if {@code Tag toSendEmailTo} doesn\u0027t exist in the club book"},{"lineNumber":234,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":235,"author":{"gitID":"yash-chowdhary"},"content":"    private String generateTagEmailRecipients(Tag toSendEmailTo) throws TagNotFoundException {"},{"lineNumber":236,"author":{"gitID":"yash-chowdhary"},"content":"        List\u003cMember\u003e members \u003d new ArrayList\u003c\u003e(clubBook.getMemberList());"},{"lineNumber":237,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":238,"author":{"gitID":"yash-chowdhary"},"content":"        List\u003cString\u003e emailRecipients \u003d new ArrayList\u003c\u003e();"},{"lineNumber":239,"author":{"gitID":"yash-chowdhary"},"content":"        Boolean tagFound \u003d false;"},{"lineNumber":240,"author":{"gitID":"yash-chowdhary"},"content":"        for (Member member : members) {"},{"lineNumber":241,"author":{"gitID":"yash-chowdhary"},"content":"            Set\u003cTag\u003e memberTags \u003d member.getTags();"},{"lineNumber":242,"author":{"gitID":"yash-chowdhary"},"content":"            if (memberTags.contains(toSendEmailTo)) {"},{"lineNumber":243,"author":{"gitID":"yash-chowdhary"},"content":"                emailRecipients.add(member.getEmail().toString());"},{"lineNumber":244,"author":{"gitID":"yash-chowdhary"},"content":"                tagFound \u003d true;"},{"lineNumber":245,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":246,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":247,"author":{"gitID":"yash-chowdhary"},"content":"        if (!tagFound) {"},{"lineNumber":248,"author":{"gitID":"yash-chowdhary"},"content":"            throw new TagNotFoundException();"},{"lineNumber":249,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":250,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":251,"author":{"gitID":"yash-chowdhary"},"content":"        return String.join(\",\", emailRecipients);"},{"lineNumber":252,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":254,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":255,"author":{"gitID":"yash-chowdhary"},"content":"     * Generates recipient list of all members part of {@code Group toSendEmailTo}"},{"lineNumber":256,"author":{"gitID":"yash-chowdhary"},"content":"     * @throws GroupNotFoundException if {@code Group toSendEmailTo} doesn\u0027t exist in the club book"},{"lineNumber":257,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":258,"author":{"gitID":"yash-chowdhary"},"content":"    private String generateGroupEmailRecipients(Group toSendEmailTo) throws GroupNotFoundException {"},{"lineNumber":259,"author":{"gitID":"yash-chowdhary"},"content":"        List\u003cMember\u003e members \u003d new ArrayList\u003c\u003e(clubBook.getMemberList());"},{"lineNumber":260,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":261,"author":{"gitID":"yash-chowdhary"},"content":"        List\u003cString\u003e emailRecipients \u003d new ArrayList\u003c\u003e();"},{"lineNumber":262,"author":{"gitID":"yash-chowdhary"},"content":"        Boolean groupFound \u003d false;"},{"lineNumber":263,"author":{"gitID":"yash-chowdhary"},"content":"        for (Member member : members) {"},{"lineNumber":264,"author":{"gitID":"yash-chowdhary"},"content":"            if (member.getGroup().equals(toSendEmailTo)) {"},{"lineNumber":265,"author":{"gitID":"yash-chowdhary"},"content":"                emailRecipients.add(member.getEmail().toString());"},{"lineNumber":266,"author":{"gitID":"yash-chowdhary"},"content":"                groupFound \u003d true;"},{"lineNumber":267,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":268,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":269,"author":{"gitID":"yash-chowdhary"},"content":"        if (!groupFound) {"},{"lineNumber":270,"author":{"gitID":"yash-chowdhary"},"content":"            throw new GroupNotFoundException();"},{"lineNumber":271,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":272,"author":{"gitID":"yash-chowdhary"},"content":"        return String.join(\",\", emailRecipients);"},{"lineNumber":273,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":275,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":276,"author":{"gitID":"yash-chowdhary"},"content":"    public void sendEmail(String recipients, Client client, Subject subject, Body body) {"},{"lineNumber":277,"author":{"gitID":"yash-chowdhary"},"content":"        raise(new SendEmailRequestEvent(recipients, subject, body, client));"},{"lineNumber":278,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":279,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":280,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":281,"author":{"gitID":"yash-chowdhary"},"content":"    public void changeStatus(Task taskToEdit, Task editedTask) throws TaskNotFoundException,"},{"lineNumber":282,"author":{"gitID":"yash-chowdhary"},"content":"            DuplicateTaskException {"},{"lineNumber":283,"author":{"gitID":"yash-chowdhary"},"content":"        requireAllNonNull(taskToEdit, editedTask);"},{"lineNumber":284,"author":{"gitID":"yash-chowdhary"},"content":"        clubBook.updateTask(taskToEdit, editedTask);"},{"lineNumber":285,"author":{"gitID":"yash-chowdhary"},"content":"        updateFilteredTaskList(new TaskIsRelatedToMemberPredicate(getLoggedInMember()));"},{"lineNumber":286,"author":{"gitID":"yash-chowdhary"},"content":"        indicateClubBookChanged();"},{"lineNumber":287,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":289,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":290,"author":{"gitID":"yash-chowdhary"},"content":"    //@@author Song Weiyang"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    public void logOutMember() {"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        clubBook.logOutMember();"},{"lineNumber":294,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"yash-chowdhary"},"content":"    //@@author yash-chowdhary"},{"lineNumber":297,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":298,"author":{"gitID":"yash-chowdhary"},"content":"    public void addTaskToTaskList(Task toAdd) throws DuplicateTaskException {"},{"lineNumber":299,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":300,"author":{"gitID":"yash-chowdhary"},"content":"            Assignor assignor \u003d new Assignor(clubBook.getLoggedInMember().getMatricNumber().toString());"},{"lineNumber":301,"author":{"gitID":"yash-chowdhary"},"content":"            Assignee assignee \u003d new Assignee(clubBook.getLoggedInMember().getMatricNumber().toString());"},{"lineNumber":302,"author":{"gitID":"yash-chowdhary"},"content":"            Status status \u003d new Status(Status.NOT_STARTED_STATUS);"},{"lineNumber":303,"author":{"gitID":"yash-chowdhary"},"content":"            toAdd.setAssignor(assignor);"},{"lineNumber":304,"author":{"gitID":"yash-chowdhary"},"content":"            toAdd.setAssignee(assignee);"},{"lineNumber":305,"author":{"gitID":"yash-chowdhary"},"content":"            toAdd.setStatus(status);"},{"lineNumber":306,"author":{"gitID":"yash-chowdhary"},"content":"            clubBook.addTaskToTaskList(toAdd);"},{"lineNumber":307,"author":{"gitID":"yash-chowdhary"},"content":"            updateFilteredTaskList(new TaskIsRelatedToMemberPredicate(getLoggedInMember()));"},{"lineNumber":308,"author":{"gitID":"yash-chowdhary"},"content":"            indicateClubBookChanged();"},{"lineNumber":309,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (DuplicateTaskException dte) {"},{"lineNumber":310,"author":{"gitID":"yash-chowdhary"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":311,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":312,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":313,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":314,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":315,"author":{"gitID":"yash-chowdhary"},"content":"    public void assignTask(Task toAdd, MatricNumber matricNumber) throws MemberNotFoundException,"},{"lineNumber":316,"author":{"gitID":"yash-chowdhary"},"content":"            DuplicateTaskException {"},{"lineNumber":317,"author":{"gitID":"yash-chowdhary"},"content":"        boolean found \u003d false;"},{"lineNumber":318,"author":{"gitID":"yash-chowdhary"},"content":"        for (Member member : clubBook.getMemberList()) {"},{"lineNumber":319,"author":{"gitID":"yash-chowdhary"},"content":"            if (member.getMatricNumber().equals(matricNumber)) {"},{"lineNumber":320,"author":{"gitID":"yash-chowdhary"},"content":"                found \u003d true;"},{"lineNumber":321,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":322,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":323,"author":{"gitID":"yash-chowdhary"},"content":"        if (!found) {"},{"lineNumber":324,"author":{"gitID":"yash-chowdhary"},"content":"            throw new MemberNotFoundException();"},{"lineNumber":325,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":326,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":327,"author":{"gitID":"yash-chowdhary"},"content":"            Assignor assignor \u003d new Assignor(clubBook.getLoggedInMember().getMatricNumber().toString());"},{"lineNumber":328,"author":{"gitID":"yash-chowdhary"},"content":"            Assignee assignee \u003d new Assignee(matricNumber.toString());"},{"lineNumber":329,"author":{"gitID":"yash-chowdhary"},"content":"            Status status \u003d new Status(Status.NOT_STARTED_STATUS);"},{"lineNumber":330,"author":{"gitID":"yash-chowdhary"},"content":"            toAdd.setAssignor(assignor);"},{"lineNumber":331,"author":{"gitID":"yash-chowdhary"},"content":"            toAdd.setAssignee(assignee);"},{"lineNumber":332,"author":{"gitID":"yash-chowdhary"},"content":"            toAdd.setStatus(status);"},{"lineNumber":333,"author":{"gitID":"yash-chowdhary"},"content":"            clubBook.addTaskToTaskList(toAdd);"},{"lineNumber":334,"author":{"gitID":"yash-chowdhary"},"content":"            updateFilteredTaskList(new TaskIsRelatedToMemberPredicate(getLoggedInMember()));"},{"lineNumber":335,"author":{"gitID":"yash-chowdhary"},"content":"            indicateClubBookChanged();"},{"lineNumber":336,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (DuplicateTaskException dte) {"},{"lineNumber":337,"author":{"gitID":"yash-chowdhary"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":338,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":339,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":340,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":341,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":342,"author":{"gitID":"yash-chowdhary"},"content":"    public void deleteTask(Task targetTask) throws TaskNotFoundException, TaskCannotBeDeletedException {"},{"lineNumber":343,"author":{"gitID":"yash-chowdhary"},"content":"        Assignor assignor \u003d targetTask.getAssignor();"},{"lineNumber":344,"author":{"gitID":"yash-chowdhary"},"content":"        Assignee assignee \u003d targetTask.getAssignee();"},{"lineNumber":345,"author":{"gitID":"yash-chowdhary"},"content":"        String currentMember \u003d getLoggedInMember().getMatricNumber().toString();"},{"lineNumber":346,"author":{"gitID":"yash-chowdhary"},"content":"        if (!currentMember.equalsIgnoreCase(assignor.getAssignor())"},{"lineNumber":347,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 !currentMember.equalsIgnoreCase(assignee.getAssignee())) {"},{"lineNumber":348,"author":{"gitID":"yash-chowdhary"},"content":"            throw new TaskCannotBeDeletedException();"},{"lineNumber":349,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":350,"author":{"gitID":"yash-chowdhary"},"content":"        clubBook.deleteTask(targetTask);"},{"lineNumber":351,"author":{"gitID":"yash-chowdhary"},"content":"        indicateClubBookChanged();"},{"lineNumber":352,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":353,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":354,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":355,"author":{"gitID":"yash-chowdhary"},"content":"    public void viewAllTasks() throws TasksCannotBeDisplayedException {"},{"lineNumber":356,"author":{"gitID":"yash-chowdhary"},"content":"        if (!getLoggedInMember().getGroup().toString().equalsIgnoreCase(Group.GROUP_EXCO)) {"},{"lineNumber":357,"author":{"gitID":"yash-chowdhary"},"content":"            throw new TasksCannotBeDisplayedException();"},{"lineNumber":358,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":359,"author":{"gitID":"yash-chowdhary"},"content":"        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":360,"author":{"gitID":"yash-chowdhary"},"content":"        indicateClubBookChanged();"},{"lineNumber":361,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":362,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":363,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":364,"author":{"gitID":"yash-chowdhary"},"content":"    public void viewMyTasks() throws TasksAlreadyListedException {"},{"lineNumber":365,"author":{"gitID":"yash-chowdhary"},"content":"        if (filteredTasks.getPredicate().equals(new TaskIsRelatedToMemberPredicate(getLoggedInMember()))) {"},{"lineNumber":366,"author":{"gitID":"yash-chowdhary"},"content":"            throw new TasksAlreadyListedException(ViewMyTasksCommand.MESSAGE_ALREADY_LISTED);"},{"lineNumber":367,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":368,"author":{"gitID":"yash-chowdhary"},"content":"        updateFilteredTaskList(new TaskIsRelatedToMemberPredicate(getLoggedInMember()));"},{"lineNumber":369,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":370,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":371,"author":{"gitID":"amrut-prabhu"},"content":"    //@@author amrut-prabhu"},{"lineNumber":372,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":373,"author":{"gitID":"amrut-prabhu"},"content":"    public int importMembers(File importFile) throws IOException {"},{"lineNumber":374,"author":{"gitID":"amrut-prabhu"},"content":"        CsvClubBookStorage storage \u003d new CsvClubBookStorage(importFile);"},{"lineNumber":375,"author":{"gitID":"amrut-prabhu"},"content":"        UniqueMemberList importedMembers \u003d storage.readClubBook();"},{"lineNumber":376,"author":{"gitID":"amrut-prabhu"},"content":"        int numberMembers \u003d 0;"},{"lineNumber":377,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":378,"author":{"gitID":"amrut-prabhu"},"content":"        for (Member member: importedMembers) {"},{"lineNumber":379,"author":{"gitID":"amrut-prabhu"},"content":"            try {"},{"lineNumber":380,"author":{"gitID":"amrut-prabhu"},"content":"                clubBook.addMember(member);"},{"lineNumber":381,"author":{"gitID":"amrut-prabhu"},"content":"                numberMembers++;"},{"lineNumber":382,"author":{"gitID":"amrut-prabhu"},"content":"            } catch (DuplicateMatricNumberException dmne) {"},{"lineNumber":383,"author":{"gitID":"amrut-prabhu"},"content":"                logger.info(\"DuplicateMemberException encountered due to \" + member);"},{"lineNumber":384,"author":{"gitID":"amrut-prabhu"},"content":"            }"},{"lineNumber":385,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":386,"author":{"gitID":"amrut-prabhu"},"content":"        indicateClubBookChanged();"},{"lineNumber":387,"author":{"gitID":"amrut-prabhu"},"content":"        return numberMembers;"},{"lineNumber":388,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":389,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":390,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":391,"author":{"gitID":"amrut-prabhu"},"content":"    public void exportClubConnectMembers(File exportFile) throws IOException {"},{"lineNumber":392,"author":{"gitID":"amrut-prabhu"},"content":"        requireNonNull(exportFile);"},{"lineNumber":393,"author":{"gitID":"amrut-prabhu"},"content":"        indicateNewExport(exportFile);"},{"lineNumber":394,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":395,"author":{"gitID":"amrut-prabhu"},"content":"        exportHeaders(exportFile);"},{"lineNumber":396,"author":{"gitID":"amrut-prabhu"},"content":"        List\u003cMember\u003e members \u003d new ArrayList\u003c\u003e(clubBook.getMemberList());"},{"lineNumber":397,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":398,"author":{"gitID":"amrut-prabhu"},"content":"        for (Member member: members) {"},{"lineNumber":399,"author":{"gitID":"amrut-prabhu"},"content":"            exportMember(member);"},{"lineNumber":400,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":401,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":402,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":403,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":404,"author":{"gitID":"amrut-prabhu"},"content":"     * Raises a {@code NewMemberAvailableEvent} to indicate that new data is ready to be exported."},{"lineNumber":405,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":406,"author":{"gitID":"amrut-prabhu"},"content":"     * @param data Member data to be added to the file."},{"lineNumber":407,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws IOException if there was an error writing to file."},{"lineNumber":408,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":409,"author":{"gitID":"amrut-prabhu"},"content":"    private void indicateNewExport(String data) throws IOException {"},{"lineNumber":410,"author":{"gitID":"amrut-prabhu"},"content":"        NewExportDataAvailableEvent newExportDataAvailableEvent \u003d new NewExportDataAvailableEvent(data);"},{"lineNumber":411,"author":{"gitID":"amrut-prabhu"},"content":"        raise(newExportDataAvailableEvent);"},{"lineNumber":412,"author":{"gitID":"amrut-prabhu"},"content":"        if (!newExportDataAvailableEvent.isFileChanged()) {"},{"lineNumber":413,"author":{"gitID":"amrut-prabhu"},"content":"            throw new IOException();"},{"lineNumber":414,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":415,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":416,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":417,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":418,"author":{"gitID":"amrut-prabhu"},"content":"     * Raises a {@code NewMemberAvailableEvent} to indicate that data is to be written to {@code exportFile}."},{"lineNumber":419,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":420,"author":{"gitID":"amrut-prabhu"},"content":"     * @param exportFile CSV file to be exported to."},{"lineNumber":421,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws IOException if there was an error writing to file."},{"lineNumber":422,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":423,"author":{"gitID":"amrut-prabhu"},"content":"    private void indicateNewExport(File exportFile) throws IOException {"},{"lineNumber":424,"author":{"gitID":"amrut-prabhu"},"content":"        NewExportDataAvailableEvent newExportDataAvailableEvent \u003d new NewExportDataAvailableEvent(exportFile);"},{"lineNumber":425,"author":{"gitID":"amrut-prabhu"},"content":"        raise(newExportDataAvailableEvent);"},{"lineNumber":426,"author":{"gitID":"amrut-prabhu"},"content":"        if (!newExportDataAvailableEvent.isFileChanged()) {"},{"lineNumber":427,"author":{"gitID":"amrut-prabhu"},"content":"            throw new IOException();"},{"lineNumber":428,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":429,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":430,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":431,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":432,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns true if {@code file} is empty."},{"lineNumber":433,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":434,"author":{"gitID":"amrut-prabhu"},"content":"    private boolean isEmptyFile(File file) {"},{"lineNumber":435,"author":{"gitID":"amrut-prabhu"},"content":"        return file.length() \u003d\u003d 0;"},{"lineNumber":436,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":437,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":438,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":439,"author":{"gitID":"amrut-prabhu"},"content":"     * Exports the header fields of {@code Member} object if the file is empty."},{"lineNumber":440,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":441,"author":{"gitID":"amrut-prabhu"},"content":"    private void exportHeaders(File exportFile) throws IOException {"},{"lineNumber":442,"author":{"gitID":"amrut-prabhu"},"content":"        if (isEmptyFile(exportFile)) {"},{"lineNumber":443,"author":{"gitID":"amrut-prabhu"},"content":"            String headers \u003d CsvUtil.getHeaders();"},{"lineNumber":444,"author":{"gitID":"amrut-prabhu"},"content":"            indicateNewExport(headers);"},{"lineNumber":445,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":446,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":447,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":448,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":449,"author":{"gitID":"amrut-prabhu"},"content":"     * Exports the information of {@code member} to the file."},{"lineNumber":450,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":451,"author":{"gitID":"amrut-prabhu"},"content":"     * @param member Member whose data is to be exported."},{"lineNumber":452,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":453,"author":{"gitID":"amrut-prabhu"},"content":"    private void exportMember(Member member) throws IOException {"},{"lineNumber":454,"author":{"gitID":"amrut-prabhu"},"content":"        String memberData \u003d convertMemberToCsv(member);"},{"lineNumber":455,"author":{"gitID":"amrut-prabhu"},"content":"        indicateNewExport(memberData);"},{"lineNumber":456,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":457,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":458,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":459,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns the CSV representation of {@code member}."},{"lineNumber":460,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":461,"author":{"gitID":"amrut-prabhu"},"content":"     * @param member Member who is to be converted to CSV format."},{"lineNumber":462,"author":{"gitID":"amrut-prabhu"},"content":"     * @return Member data in CSV format."},{"lineNumber":463,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":464,"author":{"gitID":"amrut-prabhu"},"content":"    private String convertMemberToCsv(Member member) {"},{"lineNumber":465,"author":{"gitID":"amrut-prabhu"},"content":"        return CsvUtil.toCsvFormat(member);"},{"lineNumber":466,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":467,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":468,"author":{"gitID":"amrut-prabhu"},"content":"    //@@author Song Weiyang"},{"lineNumber":469,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":470,"author":{"gitID":"-"},"content":"     * Changes the password of {@code member} in the clubBook"},{"lineNumber":471,"author":{"gitID":"-"},"content":"      * @param username"},{"lineNumber":472,"author":{"gitID":"-"},"content":"     * @param oldPassword"},{"lineNumber":473,"author":{"gitID":"-"},"content":"     * @param newPassword"},{"lineNumber":474,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":475,"author":{"gitID":"-"},"content":"    public void changePassword (String username, String oldPassword, String newPassword)"},{"lineNumber":476,"author":{"gitID":"-"},"content":"            throws PasswordIncorrectException, DataToChangeIsNotCurrentlyLoggedInMemberException {"},{"lineNumber":477,"author":{"gitID":"-"},"content":"        clubBook.changePassword(username, oldPassword, newPassword);"},{"lineNumber":478,"author":{"gitID":"amrut-prabhu"},"content":"        indicateClubBookChanged();"},{"lineNumber":479,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":480,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":481,"author":{"gitID":"amrut-prabhu"},"content":"    //@@author amrut-prabhu"},{"lineNumber":482,"author":{"gitID":"amrut-prabhu"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Tag List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":483,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":484,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":485,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns an unmodifiable view of the list of {@code Tag} backed by the internal list of"},{"lineNumber":486,"author":{"gitID":"amrut-prabhu"},"content":"     * {@code clubBook}"},{"lineNumber":487,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":488,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":489,"author":{"gitID":"amrut-prabhu"},"content":"    public ObservableList\u003cTag\u003e getFilteredTagList() {"},{"lineNumber":490,"author":{"gitID":"amrut-prabhu"},"content":"        return FXCollections.unmodifiableObservableList(filteredTags);"},{"lineNumber":491,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":492,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":493,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":494,"author":{"gitID":"amrut-prabhu"},"content":"    public void updateFilteredTagList(Predicate\u003cTag\u003e predicate) {"},{"lineNumber":495,"author":{"gitID":"amrut-prabhu"},"content":"        requireNonNull(predicate);"},{"lineNumber":496,"author":{"gitID":"amrut-prabhu"},"content":"        filteredTags.setPredicate(predicate);"},{"lineNumber":497,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":498,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":499,"author":{"gitID":"amrut-prabhu"},"content":"    //@@author"},{"lineNumber":500,"author":{"gitID":"amrut-prabhu"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered member List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":501,"author":{"gitID":"-"},"content":""},{"lineNumber":502,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":503,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns an unmodifiable view of the list of {@code member} backed by the internal list of"},{"lineNumber":504,"author":{"gitID":"amrut-prabhu"},"content":"     * {@code clubBook}"},{"lineNumber":505,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":506,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":507,"author":{"gitID":"amrut-prabhu"},"content":"    public ObservableList\u003cMember\u003e getFilteredMemberList() {"},{"lineNumber":508,"author":{"gitID":"amrut-prabhu"},"content":"        return FXCollections.unmodifiableObservableList(filteredMembers);"},{"lineNumber":509,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":510,"author":{"gitID":"-"},"content":""},{"lineNumber":511,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":512,"author":{"gitID":"yash-chowdhary"},"content":"    public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":513,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredTasks);"},{"lineNumber":514,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":515,"author":{"gitID":"-"},"content":""},{"lineNumber":516,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":517,"author":{"gitID":"amrut-prabhu"},"content":"    public void updateFilteredMemberList(Predicate\u003cMember\u003e predicate) {"},{"lineNumber":518,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":519,"author":{"gitID":"amrut-prabhu"},"content":"        filteredMembers.setPredicate(predicate);"},{"lineNumber":520,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":521,"author":{"gitID":"-"},"content":""},{"lineNumber":522,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":523,"author":{"gitID":"-"},"content":"    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":524,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":525,"author":{"gitID":"-"},"content":"        filteredTasks.setPredicate(predicate);"},{"lineNumber":526,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":527,"author":{"gitID":"-"},"content":""},{"lineNumber":528,"content":"    //@@author Song Weiyang"},{"lineNumber":529,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":530,"author":{"gitID":"-"},"content":"    public void signUpMember(Member member) throws MemberListNotEmptyException {"},{"lineNumber":531,"author":{"gitID":"-"},"content":"        clubBook.signUpMember(member);"},{"lineNumber":532,"author":{"gitID":"-"},"content":"        filteredMembers.setPredicate(PREDICATE_NOT_SHOW_ALL_MEMBERS);"},{"lineNumber":533,"author":{"gitID":"amrut-prabhu"},"content":"        indicateClubBookChanged();"},{"lineNumber":534,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":535,"content":"    //@@author"},{"lineNumber":536,"author":{"gitID":"-"},"content":""},{"lineNumber":537,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":538,"author":{"gitID":"-"},"content":"    public void clearClubBook() {"},{"lineNumber":539,"author":{"gitID":"-"},"content":"        clubBook.clearClubBook();"},{"lineNumber":540,"author":{"gitID":"-"},"content":"        setClearConfirmation(false);"},{"lineNumber":541,"author":{"gitID":"amrut-prabhu"},"content":"        indicateClubBookChanged();"},{"lineNumber":542,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":543,"author":{"gitID":"-"},"content":""},{"lineNumber":544,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":545,"author":{"gitID":"-"},"content":"    public boolean getClearConfirmation() {"},{"lineNumber":546,"author":{"gitID":"-"},"content":"        return isConfirmedClear;"},{"lineNumber":547,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":548,"author":{"gitID":"-"},"content":""},{"lineNumber":549,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":550,"author":{"gitID":"-"},"content":"    public void setClearConfirmation(Boolean b) {"},{"lineNumber":551,"author":{"gitID":"-"},"content":"        isConfirmedClear \u003d b;"},{"lineNumber":552,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":553,"author":{"gitID":"-"},"content":""},{"lineNumber":554,"author":{"gitID":"-"},"content":""},{"lineNumber":555,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":556,"author":{"gitID":"MuhdNurKamal"},"content":"    public ObservableList\u003cPoll\u003e getFilteredPollList() {"},{"lineNumber":557,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPolls);"},{"lineNumber":558,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":559,"author":{"gitID":"-"},"content":""},{"lineNumber":560,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":561,"author":{"gitID":"MuhdNurKamal"},"content":"    public void updateFilteredPollList(Predicate\u003cPoll\u003e predicate) {"},{"lineNumber":562,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":563,"author":{"gitID":"MuhdNurKamal"},"content":"        filteredPolls.setPredicate(predicate);"},{"lineNumber":564,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":565,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":566,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":567,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":568,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":569,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":570,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":571,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":572,"author":{"gitID":"-"},"content":""},{"lineNumber":573,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":574,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":575,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":576,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":577,"author":{"gitID":"-"},"content":""},{"lineNumber":578,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":579,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":580,"author":{"gitID":"amrut-prabhu"},"content":"        return clubBook.equals(other.clubBook)"},{"lineNumber":581,"author":{"gitID":"amrut-prabhu"},"content":"                \u0026\u0026 filteredMembers.equals(other.filteredMembers);"},{"lineNumber":582,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":583,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":4,"MuhdNurKamal":38,"amrut-prabhu":221,"yash-chowdhary":171,"-":149}},{"path":"src/main/java/seedu/club/model/task/Task.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.model.task;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":" * Represents a Task assigned to, or created by a Member"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"public class Task {"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"    private Description description;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"    private Assignor assignor;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"    private Assignee assignee;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"    private Time time;"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"    private Date date;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"    private Status status;"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"    public Task(Description description, Time time, Date date) {"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"        requireAllNonNull(description, time, date);"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"        this.description \u003d description;"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"        this.time \u003d time;"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"        this.date \u003d date;"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"        this.assignor \u003d new Assignor(\"\");"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"        this.assignee \u003d new Assignee(\"\");"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"        this.status \u003d new Status(Status.NOT_STARTED_STATUS);"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"    public Task(Task other) {"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(other);"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"        this.description \u003d other.description;"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"        this.time \u003d other.time;"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"        this.date \u003d other.date;"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"        this.assignor \u003d other.assignor;"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"        this.assignee \u003d other.assignee;"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"        this.status \u003d other.status;"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"    public Task(Description description, Time time, Date date, Assignor assignor, Assignee assignee,"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"                Status status) {"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"        requireAllNonNull(description, time, date, assignor, assignee);"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"        this.description \u003d description;"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"        this.time \u003d time;"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"        this.date \u003d date;"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"        this.assignor \u003d assignor;"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"        this.assignee \u003d assignee;"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"        this.status \u003d status;"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"    public Description getDescription() {"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"        return description;"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"    public Assignor getAssignor() {"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"        return assignor;"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"    public Time getTime() {"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"        return time;"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"    public Date getDate() {"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"        return date;"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"    public void setAssignor(Assignor assignor) {"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"        this.assignor \u003d assignor;"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"    public Assignee getAssignee() {"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"        return assignee;"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"    public void setAssignee(Assignee assignee) {"},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"        this.assignee \u003d assignee;"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"    public Status getStatus() {"},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"        return status;"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"    public void setStatus(Status status) {"},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"        this.status \u003d status;"},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean isTaskCompleted() {"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":"        return status.getStatus().equalsIgnoreCase(Status.COMPLETED_STATUS);"},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean isTaskInProgress() {"},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":"        return status.getStatus().equalsIgnoreCase(Status.IN_PROGRESS_STATUS);"},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean hasTaskNotBegun() {"},{"lineNumber":94,"author":{"gitID":"yash-chowdhary"},"content":"        return status.getStatus().equalsIgnoreCase(Status.NOT_STARTED_STATUS);"},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":97,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":98,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean equals(Object other) {"},{"lineNumber":99,"author":{"gitID":"yash-chowdhary"},"content":"        return other \u003d\u003d this"},{"lineNumber":100,"author":{"gitID":"yash-chowdhary"},"content":"                || (other instanceof Task"},{"lineNumber":101,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 this.getDescription().equals(((Task) other).getDescription())"},{"lineNumber":102,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 this.getDate().equals(((Task) other).getDate())"},{"lineNumber":103,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 this.getTime().equals(((Task) other).getTime())"},{"lineNumber":104,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 this.getAssignor().equals(((Task) other).getAssignor())"},{"lineNumber":105,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 this.getAssignee().equals(((Task) other).getAssignee())"},{"lineNumber":106,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 this.getStatus().equals(((Task) other).getStatus()));"},{"lineNumber":107,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":108}},{"path":"src/main/java/seedu/club/model/task/Assignee.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.model.task;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":" * Refers to the assignee of a Task"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"public class Assignee {"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"    private String assignee;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"    public Assignee(String assignee) {"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(assignee);"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"        this.assignee \u003d assignee;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"    public String getAssignee() {"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"        return assignee;"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"    public int hashCode() {"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"        return assignee.hashCode();"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean equals(Object other) {"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"        return other \u003d\u003d this        //short circuit if same object"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"                || (other instanceof Assignee   //handles nulls"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 this.assignee.equalsIgnoreCase(((Assignee) other).assignee));    //state check"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":33}},{"path":"src/main/java/seedu/club/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":" * Represents a Tag in the club book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Tag {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public final String tagName;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns unformatted tag name."},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"    public String getTagName() {"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"        return tagName;"},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":10,"-":51}},{"path":"src/main/java/seedu/club/model/task/Assignor.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.model.task;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":" * Refers to the assignor of a Task"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"public class Assignor {"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"    private String assignor;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"    public Assignor(String assignor) {"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(assignor);"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"        this.assignor \u003d assignor;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"    public String getAssignor() {"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"        return assignor;"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"    public int hashCode() {"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"        return assignor.hashCode();"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean equals(Object other) {"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"        return other \u003d\u003d this        //short circuit if same object"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"                || (other instanceof Assignor   //handles nulls"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 this.assignor.equalsIgnoreCase(((Assignor) other).assignor));    //state check"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":33}},{"path":"src/main/java/seedu/club/model/tag/exceptions/TagNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"//@@author amrut-prabhu"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model.tag.exceptions;"},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":" * Signals that the operation is unable to find the specified tag."},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":" */"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"public class TagNotFoundException extends Exception {}"}],"authorContributionMap":{"amrut-prabhu":7}},{"path":"src/main/java/seedu/club/model/task/Date.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.model.task;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import java.time.DateTimeException;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":" * Refers to the Due Date of a Task"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"public class Date {"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String DATE_SPLITTER \u003d \"[///./-]\";"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String DATE_SEPARATOR \u003d \"/\";"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_DATE_CONSTRAINTS \u003d \"Date should be a string separated by \u0027.\u0027, \u0027/\u0027, or \""},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"            + \"\u0027-\u0027 in the format DD-MM-YYYY\";"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"     * Adapted from {@linktourl http://www.mkyong.com/regular-expressions/how-to-validate-date-with-regular-expression/}"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String DATE_VALIDATION_REGEX \u003d \"(0[1-9]|[1-9]|1[0-9]|2[0-9]|3[01])[///./-]\""},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"            + \"(0[1-9]|1[0-2]|[1-9])[///./-](19|20)[0-9][0-9]\";"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    public final String date;"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"    public Date(String date) {"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(date);"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"        checkArgument(isValidDate(date), MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"        this.date \u003d date;"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if the given string {@code date} follows the appropriate format and is a valid date."},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"     * Adapted from {@linktourl https://stackoverflow.com/questions/32204953/validating-java-8-dates?utm_medium\u003dorganic"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"     * \u0026utm_source\u003d* google_rich_qa\u0026utm_campaign\u003dgoogle_rich_qa}"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"    public static boolean isValidDate(String date) {"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"        if (!date.matches(DATE_VALIDATION_REGEX)) {"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"            return false;"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"        String[] dateFields \u003d date.split(DATE_SPLITTER);"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"        final int day \u003d Integer.parseInt(dateFields[0]);"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"        final int month \u003d Integer.parseInt(dateFields[1]);"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"        final int year \u003d Integer.parseInt(dateFields[2]);"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"            LocalDate.of(year, month, day);"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"            return true;"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (DateTimeException e) {"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"            return false;"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns the date in a standard \u0027/\u0027-separated, \u0027DD-MM-YYYY\u0027 format."},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"    public String standardizeDate(String date) {"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"        String[] dateFields \u003d date.split(DATE_SPLITTER);"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"        final int day \u003d Integer.parseInt(dateFields[0]);"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"        if (day \u003c 10) {"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"            sb.append(0);"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"        sb.append(day);"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"        sb.append(DATE_SEPARATOR);"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"        final int month \u003d Integer.parseInt(dateFields[1]);"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"        if (month \u003c 10) {"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"            sb.append(0);"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"        sb.append(month);"},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"        sb.append(DATE_SEPARATOR);"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"        final int year \u003d Integer.parseInt(dateFields[2]);"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"        sb.append(year);"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"        return sb.toString();"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"    public String getDate() {"},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"        return standardizeDate(date);"},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":"    public int hashCode() {"},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":"        return date.hashCode();"},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean equals(Object other) {"},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":"        return other \u003d\u003d this        //short circuit if same object"},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":"                || (other instanceof Date   //handles nulls"},{"lineNumber":94,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 this.date.equalsIgnoreCase(((Date) other).date));    //state check"},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":96}},{"path":"src/main/java/seedu/club/model/tag/UniqueTagList.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.DuplicateDataException;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A list of tags that enforces no nulls and uniqueness between its elements."},{"lineNumber":17,"author":{"gitID":"-"},"content":" *"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":19,"author":{"gitID":"-"},"content":" *"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * @see Tag#equals(Object)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UniqueTagList implements Iterable\u003cTag\u003e {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cTag\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Constructs empty TagList."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public UniqueTagList() {}"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Creates a UniqueTagList using given tags."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Enforces no nulls."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public UniqueTagList(Set\u003cTag\u003e tags) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireAllNonNull(tags);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        internalList.addAll(tags);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Returns all tags in this list as a Set."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"    private Set\u003cTag\u003e toSet() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Replaces the Tags in this list with those in the argument tag list."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        requireAllNonNull(tags);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        internalList.setAll(tags);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Ensures every tag in the argument list exists in this object."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void mergeFrom(UniqueTagList from) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        from.internalList.stream()"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                .filter(tag -\u003e !alreadyInside.contains(tag))"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .forEach(internalList::add);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent Tag as the given argument."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public boolean contains(Tag toCheck) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Adds a Tag to the list."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @throws DuplicateTagException if the Tag to add is a duplicate of an existing Tag in the list."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void add(Tag toAdd) throws DuplicateTagException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            throw new DuplicateTagException();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public Iterator\u003cTag\u003e iterator() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e asObservableList() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                || (other instanceof UniqueTagList // instanceof handles nulls"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniqueTagList) other).internalList));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public boolean equalsOrderInsensitive(UniqueTagList other) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public static class DuplicateTagException extends DuplicateDataException {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        protected DuplicateTagException() {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            super(\"Operation would result in duplicate tags\");"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":5,"-":137}},{"path":"src/main/java/seedu/club/model/email/Client.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.model.email;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":" * Refers to the email client chosen by the member to send the email."},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"public class Client {"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String VALID_CLIENT_GMAIL \u003d \"gmail\";"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String VALID_CLIENT_OUTLOOK \u003d \"outlook\";"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_CLIENT_CONSTRAINTS \u003d \"Only GMail and Outlook email clients are supported\";"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"    private String client;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"    public Client(String client) {"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(client);"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"        this.client \u003d client.trim();"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"        return this.client;"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"    public int hashCode() {"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"        return client.hashCode();"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean equals(Object other) {"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"        return other \u003d\u003d this    //short circuit if same object"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"                || (other instanceof Client     //instanceof handles nulls"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 this.client.equalsIgnoreCase(((Client) other).client));  //state check"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"    public static boolean isValidClient(String test) {"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"        return (test.equalsIgnoreCase(VALID_CLIENT_GMAIL) || test.equalsIgnoreCase(VALID_CLIENT_OUTLOOK));"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":42}},{"path":"src/main/java/seedu/club/model/email/Subject.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.model.email;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":" * Refers to the subject of an email"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"public class Subject {"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String EMPTY_SUBJECT_STRING \u003d \"\";"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String TEST_SUBJECT_STRING \u003d \"Lorem Ipsum\";"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"    private String subject;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"    public Subject(String subject) {"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(subject);"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"        this.subject \u003d subject.trim();"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"    public int hashCode() {"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"        return subject.hashCode();"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"        return other \u003d\u003d this    //short circuit if same object"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"                || (other instanceof Subject    //handles nulls"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 this.subject.equalsIgnoreCase(((Subject) other).subject));   //state check"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"    public String toString() {"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"        return this.subject;"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":36}},{"path":"src/main/java/seedu/club/model/email/Body.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.model.email;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":" * Refers to the body of an email"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"public class Body {"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String EMPTY_BODY_STRING \u003d \"\";"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String TEST_BODY_STRING \u003d \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed sit.\";"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"    private String body;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"    public Body(String body) {"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(body);"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"        this.body \u003d body.trim();"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"    public int hashCode() {"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"        return body.hashCode();"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"        return other \u003d\u003d this        //short circuit if same object"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"                || (other instanceof Body   //handles nulls"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 this.body.equalsIgnoreCase(((Body) other).body));    //state check"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"    public String toString() {"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"        return this.body;"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":36}},{"path":"src/main/java/seedu/club/model/ClubBook.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.LinkedHashSet;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.exceptions.GroupCannotBeRemovedException;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.UniqueMemberList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.club.model.member.exceptions.DataToChangeIsNotCurrentlyLoggedInMemberException;"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.DuplicateMatricNumberException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.club.model.member.exceptions.MemberListNotEmptyException;"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.MemberNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.club.model.member.exceptions.PasswordIncorrectException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.club.model.poll.UniquePollList;"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.AnswerNotFoundException;"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.DuplicatePollException;"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.PollNotFoundException;"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.UserAlreadyVotedException;"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.UniqueTagList;"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.UniqueTaskList;"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":" * Wraps all data at the club-book level"},{"lineNumber":44,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":45,"author":{"gitID":"-"},"content":" */"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"public class ClubBook implements ReadOnlyClubBook {"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"    private final UniqueMemberList members;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private final UniquePollList polls;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private final UniqueTaskList tasks;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        *"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        *   among constructors."},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":"        */ {"},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"        members \u003d new UniqueMemberList();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        polls \u003d new UniquePollList();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        tasks \u003d new UniqueTaskList();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":"    public ClubBook() {"},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"amrut-prabhu"},"content":"     * Creates an ClubBook using the Members and Tags in the {@code toBeCopied}"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"amrut-prabhu"},"content":"    public ClubBook(ReadOnlyClubBook toBeCopied) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":79,"author":{"gitID":"amrut-prabhu"},"content":"    public void setMembers(List\u003cMember\u003e members) throws DuplicateMatricNumberException {"},{"lineNumber":80,"author":{"gitID":"amrut-prabhu"},"content":"        this.members.setMembers(members);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        this.members.fillHashMap();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"amrut-prabhu"},"content":"     * Resets the existing data of this {@code ClubBook} with {@code newData}."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"amrut-prabhu"},"content":"    public void resetData(ReadOnlyClubBook newData) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":94,"author":{"gitID":"MuhdNurKamal"},"content":"        setPolls(new LinkedHashSet\u003c\u003e(newData.getPollList()));"},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":"        setTasks(new HashSet\u003c\u003e(newData.getTaskList()));"},{"lineNumber":96,"author":{"gitID":"amrut-prabhu"},"content":"        List\u003cMember\u003e syncedMemberList \u003d newData.getMemberList().stream()"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":101,"author":{"gitID":"amrut-prabhu"},"content":"            setMembers(syncedMemberList);"},{"lineNumber":102,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (DuplicateMatricNumberException e) {"},{"lineNumber":103,"author":{"gitID":"amrut-prabhu"},"content":"            throw new AssertionError(\"ClubConnect should not have duplicate members\");"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"amrut-prabhu"},"content":"    //// member-level operations"},{"lineNumber":109,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"amrut-prabhu"},"content":"     * Adds a member to the club book."},{"lineNumber":112,"author":{"gitID":"amrut-prabhu"},"content":"     * Also checks the new member\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":113,"author":{"gitID":"amrut-prabhu"},"content":"     * and updates the Tag objects in the member to point to those in {@link #tags}."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":115,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws DuplicateMatricNumberException if a member with the same matriculation number already exists."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"amrut-prabhu"},"content":"    public void addMember(Member m) throws DuplicateMatricNumberException {"},{"lineNumber":118,"author":{"gitID":"amrut-prabhu"},"content":"        Member member \u003d syncWithMasterTagList(m);"},{"lineNumber":119,"author":{"gitID":"amrut-prabhu"},"content":"        // @@author amrut-prabhu"},{"lineNumber":120,"author":{"gitID":"amrut-prabhu"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":121,"author":{"gitID":"amrut-prabhu"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any member"},{"lineNumber":122,"author":{"gitID":"amrut-prabhu"},"content":"        // in the member list."},{"lineNumber":123,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":124,"author":{"gitID":"amrut-prabhu"},"content":"            members.add(member);"},{"lineNumber":125,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (DuplicateMatricNumberException dmne) {"},{"lineNumber":126,"author":{"gitID":"amrut-prabhu"},"content":"            deleteTagsUniqueToMember(m);"},{"lineNumber":127,"author":{"gitID":"amrut-prabhu"},"content":"            throw dmne;"},{"lineNumber":128,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":131,"author":{"gitID":"MuhdNurKamal"},"content":"    //@@author MuhdNurKamal"},{"lineNumber":132,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"MuhdNurKamal"},"content":"     * Removes {@code key} from this {@code ClubBook}."},{"lineNumber":134,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":135,"author":{"gitID":"MuhdNurKamal"},"content":"     * @throws PollNotFoundException if the {@code key} is not in this {@code ClubBook}."},{"lineNumber":136,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"MuhdNurKamal"},"content":"    public boolean removePoll(Poll key) throws PollNotFoundException {"},{"lineNumber":138,"author":{"gitID":"MuhdNurKamal"},"content":"        if (polls.remove(key)) {"},{"lineNumber":139,"author":{"gitID":"MuhdNurKamal"},"content":"            return true;"},{"lineNumber":140,"author":{"gitID":"MuhdNurKamal"},"content":"        } else {"},{"lineNumber":141,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new PollNotFoundException();"},{"lineNumber":142,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"MuhdNurKamal"},"content":"    //@@author"},{"lineNumber":145,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"amrut-prabhu"},"content":"     * Replaces the given member {@code target} in the list with {@code editedMember}."},{"lineNumber":148,"author":{"gitID":"amrut-prabhu"},"content":"     * {@code ClubBook}\u0027s tag list will be updated with the tags of {@code editedMember}."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":150,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws DuplicateMatricNumberException if updating the member\u0027s details causes the member\u0027s matriculation number"},{"lineNumber":151,"author":{"gitID":"amrut-prabhu"},"content":"     *                                  to be equivalent to that of another existing member in the list."},{"lineNumber":152,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws MemberNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":153,"author":{"gitID":"amrut-prabhu"},"content":"     * @see #syncWithMasterTagList(Member)"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"amrut-prabhu"},"content":"    public void updateMember(Member target, Member editedMember)"},{"lineNumber":156,"author":{"gitID":"amrut-prabhu"},"content":"            throws DuplicateMatricNumberException, MemberNotFoundException {"},{"lineNumber":157,"author":{"gitID":"amrut-prabhu"},"content":"        requireNonNull(editedMember);"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"amrut-prabhu"},"content":"        //@author amrut-prabhu"},{"lineNumber":160,"author":{"gitID":"amrut-prabhu"},"content":"        deleteTagsUniqueToMember(target);"},{"lineNumber":161,"author":{"gitID":"amrut-prabhu"},"content":"        Member syncedEditedMember \u003d syncWithMasterTagList(editedMember);"},{"lineNumber":162,"author":{"gitID":"amrut-prabhu"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":163,"author":{"gitID":"amrut-prabhu"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":164,"author":{"gitID":"amrut-prabhu"},"content":"        // in the person list."},{"lineNumber":165,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":166,"author":{"gitID":"amrut-prabhu"},"content":"            members.setMember(target, syncedEditedMember);"},{"lineNumber":167,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (DuplicateMatricNumberException dme) {"},{"lineNumber":168,"author":{"gitID":"amrut-prabhu"},"content":"            addMemberTags(target);"},{"lineNumber":169,"author":{"gitID":"amrut-prabhu"},"content":"            throw dme;"},{"lineNumber":170,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":173,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"amrut-prabhu"},"content":"     * Adds back the tags of {@code target} member that were removed from {@code tags}."},{"lineNumber":175,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"amrut-prabhu"},"content":"    private void addMemberTags(Member target) {"},{"lineNumber":177,"author":{"gitID":"amrut-prabhu"},"content":"        Set\u003cTag\u003e allTags \u003d new HashSet\u003c\u003e(tags.asObservableList());"},{"lineNumber":178,"author":{"gitID":"amrut-prabhu"},"content":"        allTags.addAll(target.getTags());"},{"lineNumber":179,"author":{"gitID":"amrut-prabhu"},"content":"        tags.setTags(allTags);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"content":"    //@@author"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"amrut-prabhu"},"content":"     * Updates the master tag list to include tags in {@code member} that are not in the list."},{"lineNumber":185,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":186,"author":{"gitID":"amrut-prabhu"},"content":"     * @return a copy of this {@code member} such that every tag in this member points to a Tag object in the master"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * list."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"amrut-prabhu"},"content":"    private Member syncWithMasterTagList(Member member) {"},{"lineNumber":190,"author":{"gitID":"amrut-prabhu"},"content":"        final UniqueTagList memberTags \u003d new UniqueTagList(member.getTags());"},{"lineNumber":191,"author":{"gitID":"amrut-prabhu"},"content":"        tags.mergeFrom(memberTags);"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":194,"author":{"gitID":"amrut-prabhu"},"content":"        // used for checking member tag references"},{"lineNumber":195,"author":{"gitID":"amrut-prabhu"},"content":"        final Map\u003cString, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":196,"author":{"gitID":"amrut-prabhu"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag.tagName, tag));"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"amrut-prabhu"},"content":"        // Rebuild the list of member tags to point to the relevant tags in the master tag list."},{"lineNumber":199,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":200,"author":{"gitID":"amrut-prabhu"},"content":"        memberTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag.tagName)));"},{"lineNumber":201,"author":{"gitID":"amrut-prabhu"},"content":"        return new Member("},{"lineNumber":202,"author":{"gitID":"amrut-prabhu"},"content":"                member.getName(), member.getPhone(), member.getEmail(), member.getMatricNumber(), member.getGroup(),"},{"lineNumber":203,"author":{"gitID":"amrut-prabhu"},"content":"                correctTagReferences, member.getCredentials(), member.getProfilePhoto());"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"amrut-prabhu"},"content":"     * Removes {@code key} from this {@code ClubBook}."},{"lineNumber":208,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":209,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws MemberNotFoundException if the {@code key} is not in this {@code ClubBook}."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"amrut-prabhu"},"content":"    public boolean removeMember(Member key) throws MemberNotFoundException {"},{"lineNumber":212,"author":{"gitID":"amrut-prabhu"},"content":"        deleteTagsUniqueToMember(key);"},{"lineNumber":213,"author":{"gitID":"amrut-prabhu"},"content":"        if (members.remove(key)) {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":216,"author":{"gitID":"amrut-prabhu"},"content":"            throw new MemberNotFoundException();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"MuhdNurKamal"},"content":"    //@@author MuhdNurKamal"},{"lineNumber":221,"author":{"gitID":"MuhdNurKamal"},"content":"    public void setPolls(Set\u003cPoll\u003e polls) {"},{"lineNumber":222,"author":{"gitID":"MuhdNurKamal"},"content":"        this.polls.setPolls(polls);"},{"lineNumber":223,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":225,"author":{"gitID":"MuhdNurKamal"},"content":"    public void addPoll(Poll poll) throws DuplicatePollException {"},{"lineNumber":226,"author":{"gitID":"MuhdNurKamal"},"content":"        polls.add(poll);"},{"lineNumber":227,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":229,"author":{"gitID":"MuhdNurKamal"},"content":"    public void voteInPoll(Poll poll, Index answerIndex, MatricNumber polleeMatricNumber)"},{"lineNumber":230,"author":{"gitID":"MuhdNurKamal"},"content":"            throws PollNotFoundException, AnswerNotFoundException, UserAlreadyVotedException {"},{"lineNumber":231,"author":{"gitID":"MuhdNurKamal"},"content":"        polls.voteInPoll(poll, answerIndex, polleeMatricNumber);"},{"lineNumber":232,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"MuhdNurKamal"},"content":"    //@@author"},{"lineNumber":234,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":235,"content":"    //@@author Song Weiyang"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * Logs in a member"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    public void logInMember(String inputUsername, String inputPassword) {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        members.fillHashMap();"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        members.logsInMember(inputUsername, inputPassword);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * logs out a member"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    public void logOutMember() {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        members.logout();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * Get the member who is log in, if null, there are no one that is logged in."},{"lineNumber":253,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"yash-chowdhary"},"content":"    public Member getLoggedInMember() {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        return members.getCurrentlyLogInMember();"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":258,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * Sign up a member if it is a new clubbook"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    public void signUpMember(Member p) throws MemberListNotEmptyException {"},{"lineNumber":262,"author":{"gitID":"amrut-prabhu"},"content":"        Member member \u003d syncWithMasterTagList(p);"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        members.signup(member);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"yash-chowdhary"},"content":"    //@@author yash-chowdhary"},{"lineNumber":267,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":268,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":269,"author":{"gitID":"yash-chowdhary"},"content":"     * Removes the Group {@code toRemove} from the Club Book. Every member who was once a part of {@code toRemove}"},{"lineNumber":270,"author":{"gitID":"yash-chowdhary"},"content":"     * will be assigned the default group - \"member\"."},{"lineNumber":271,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":272,"author":{"gitID":"yash-chowdhary"},"content":"    public void removeGroup(Group toRemove) throws GroupCannotBeRemovedException, GroupNotFoundException {"},{"lineNumber":273,"author":{"gitID":"yash-chowdhary"},"content":"        Group notToBeDeleted \u003d new Group(\"member\");"},{"lineNumber":274,"author":{"gitID":"yash-chowdhary"},"content":"        if (toRemove.equals(notToBeDeleted)) {"},{"lineNumber":275,"author":{"gitID":"yash-chowdhary"},"content":"            throw new GroupCannotBeRemovedException();"},{"lineNumber":276,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":277,"author":{"gitID":"yash-chowdhary"},"content":"        Boolean isPresent \u003d false;"},{"lineNumber":278,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":279,"author":{"gitID":"yash-chowdhary"},"content":"        for (Member member : members) {"},{"lineNumber":280,"author":{"gitID":"yash-chowdhary"},"content":"            if (member.getGroup().equals(toRemove)) {"},{"lineNumber":281,"author":{"gitID":"yash-chowdhary"},"content":"                isPresent \u003d true;"},{"lineNumber":282,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":283,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":284,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":285,"author":{"gitID":"yash-chowdhary"},"content":"            for (Member member : members) {"},{"lineNumber":286,"author":{"gitID":"yash-chowdhary"},"content":"                removeGroupFromMember(toRemove, member);"},{"lineNumber":287,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":288,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (MemberNotFoundException mnfe) {"},{"lineNumber":289,"author":{"gitID":"yash-chowdhary"},"content":"            throw new AssertionError(\"Impossible: original member is obtained from the club book.\");"},{"lineNumber":290,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":291,"author":{"gitID":"yash-chowdhary"},"content":"        if (!isPresent) {"},{"lineNumber":292,"author":{"gitID":"yash-chowdhary"},"content":"            throw new GroupNotFoundException();"},{"lineNumber":293,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":294,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":296,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":297,"author":{"gitID":"yash-chowdhary"},"content":"     * Removes the Group {@code toRemove} from the {@code member} if the member\u0027s group matches the one to be removed."},{"lineNumber":298,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":299,"author":{"gitID":"yash-chowdhary"},"content":"    private void removeGroupFromMember(Group toRemove, Member member)"},{"lineNumber":300,"author":{"gitID":"yash-chowdhary"},"content":"            throws MemberNotFoundException {"},{"lineNumber":301,"author":{"gitID":"yash-chowdhary"},"content":"        if (!member.getGroup().toString().equalsIgnoreCase(toRemove.toString())) {"},{"lineNumber":302,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":303,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":304,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":305,"author":{"gitID":"yash-chowdhary"},"content":"        Group defaultGroup \u003d new Group(Group.DEFAULT_GROUP);"},{"lineNumber":306,"author":{"gitID":"yash-chowdhary"},"content":"        Member newMember \u003d new Member(member.getName(), member.getPhone(), member.getEmail(), member.getMatricNumber(),"},{"lineNumber":307,"author":{"gitID":"yash-chowdhary"},"content":"                defaultGroup, member.getTags());"},{"lineNumber":308,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":309,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":310,"author":{"gitID":"yash-chowdhary"},"content":"            updateMember(member, newMember);"},{"lineNumber":311,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (DuplicateMatricNumberException dme) {"},{"lineNumber":312,"author":{"gitID":"yash-chowdhary"},"content":"            throw new AssertionError(\"Deleting a member\u0027s group only should not result in a duplicate. \""},{"lineNumber":313,"author":{"gitID":"yash-chowdhary"},"content":"                    + \"See member#equals(Object).\");"},{"lineNumber":314,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":315,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":316,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":317,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":318,"author":{"gitID":"yash-chowdhary"},"content":"     * Adds {@code Task toAdd} to the list of tasks."},{"lineNumber":319,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":320,"author":{"gitID":"yash-chowdhary"},"content":"    public void addTaskToTaskList(Task taskToAdd) throws DuplicateTaskException {"},{"lineNumber":321,"author":{"gitID":"yash-chowdhary"},"content":"        tasks.add(taskToAdd);"},{"lineNumber":322,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":323,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":324,"author":{"gitID":"yash-chowdhary"},"content":"    public void deleteTask(Task targetTask) throws TaskNotFoundException {"},{"lineNumber":325,"author":{"gitID":"yash-chowdhary"},"content":"        tasks.remove(targetTask);"},{"lineNumber":326,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":327,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":328,"author":{"gitID":"yash-chowdhary"},"content":"    public void setTasks(Set\u003cTask\u003e tasks) {"},{"lineNumber":329,"author":{"gitID":"yash-chowdhary"},"content":"        this.tasks.setTasks(tasks);"},{"lineNumber":330,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":331,"author":{"gitID":"yash-chowdhary"},"content":"    //@@author"},{"lineNumber":332,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"yash-chowdhary"},"content":"    //// tag-level operations"},{"lineNumber":335,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":336,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":337,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":338,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":339,"author":{"gitID":"amrut-prabhu"},"content":"    //@@author amrut-prabhu"},{"lineNumber":340,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":341,"author":{"gitID":"amrut-prabhu"},"content":"     * Removes tags from master {@code tags} list that are unique to {@code member}."},{"lineNumber":342,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":343,"author":{"gitID":"amrut-prabhu"},"content":"     * @param member Member whose tags may be removed from {@code tags}."},{"lineNumber":344,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":345,"author":{"gitID":"amrut-prabhu"},"content":"    private void deleteTagsUniqueToMember(Member member) {"},{"lineNumber":346,"author":{"gitID":"amrut-prabhu"},"content":"        List\u003cTag\u003e tagsToCheck \u003d new ArrayList\u003c\u003e(getTagList());"},{"lineNumber":347,"author":{"gitID":"amrut-prabhu"},"content":"        Set\u003cTag\u003e newTags \u003d tagsToCheck.stream()"},{"lineNumber":348,"author":{"gitID":"amrut-prabhu"},"content":"                .filter(t -\u003e !isTagUniqueToMember(t, member))"},{"lineNumber":349,"author":{"gitID":"amrut-prabhu"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":350,"author":{"gitID":"amrut-prabhu"},"content":"        tags.setTags(newTags);"},{"lineNumber":351,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":352,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":353,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":354,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns true if only {@code member} is tagged with {@code tag}."},{"lineNumber":355,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":356,"author":{"gitID":"amrut-prabhu"},"content":"     * @param tag Tag that is to be checked."},{"lineNumber":357,"author":{"gitID":"amrut-prabhu"},"content":"     * @param member Member whose tags are to be checked."},{"lineNumber":358,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":359,"author":{"gitID":"amrut-prabhu"},"content":"    private boolean isTagUniqueToMember(Tag tag, Member member) {"},{"lineNumber":360,"author":{"gitID":"amrut-prabhu"},"content":"        for (Member m : members) {"},{"lineNumber":361,"author":{"gitID":"amrut-prabhu"},"content":"            if (m.hasTag(tag) \u0026\u0026 !m.equals(member)) {"},{"lineNumber":362,"author":{"gitID":"amrut-prabhu"},"content":"                return false;"},{"lineNumber":363,"author":{"gitID":"amrut-prabhu"},"content":"            }"},{"lineNumber":364,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":365,"author":{"gitID":"amrut-prabhu"},"content":"        return true;"},{"lineNumber":366,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":367,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":368,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":369,"author":{"gitID":"amrut-prabhu"},"content":"     * Removes {@code tagToDelete} for all members in this {@code ClubBook}."},{"lineNumber":370,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":371,"author":{"gitID":"amrut-prabhu"},"content":"     * @param tagToDelete Tag to be removed"},{"lineNumber":372,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws TagNotFoundException if the list of {@code tags} does not contain {@code tagToDelete}."},{"lineNumber":373,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":374,"author":{"gitID":"amrut-prabhu"},"content":"    public void deleteTag(Tag tagToDelete) throws TagNotFoundException {"},{"lineNumber":375,"author":{"gitID":"amrut-prabhu"},"content":"        //Update tags list"},{"lineNumber":376,"author":{"gitID":"amrut-prabhu"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003cTag\u003e(getTagList());"},{"lineNumber":377,"author":{"gitID":"amrut-prabhu"},"content":"        if (!tags.contains(tagToDelete)) {"},{"lineNumber":378,"author":{"gitID":"amrut-prabhu"},"content":"            throw new TagNotFoundException();"},{"lineNumber":379,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":380,"author":{"gitID":"amrut-prabhu"},"content":"        setTags(getListWithoutTag(tagToDelete));"},{"lineNumber":381,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":382,"author":{"gitID":"amrut-prabhu"},"content":"        //Update members list"},{"lineNumber":383,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":384,"author":{"gitID":"amrut-prabhu"},"content":"            for (Member member : members) {"},{"lineNumber":385,"author":{"gitID":"amrut-prabhu"},"content":"                if (member.hasTag(tagToDelete)) {"},{"lineNumber":386,"author":{"gitID":"amrut-prabhu"},"content":"                    deleteTagFromMember(tagToDelete, member);"},{"lineNumber":387,"author":{"gitID":"amrut-prabhu"},"content":"                }"},{"lineNumber":388,"author":{"gitID":"amrut-prabhu"},"content":"            }"},{"lineNumber":389,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (MemberNotFoundException mnfe) {"},{"lineNumber":390,"author":{"gitID":"amrut-prabhu"},"content":"            throw new AssertionError(\"Impossible: original member is obtained from the club book.\");"},{"lineNumber":391,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":392,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":393,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":394,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":395,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns a list of tags which does not contain {@code tagToDelete}."},{"lineNumber":396,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":397,"author":{"gitID":"amrut-prabhu"},"content":"     * @param tagToDelete Tag which should not be included in the tag list"},{"lineNumber":398,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":399,"author":{"gitID":"amrut-prabhu"},"content":"    private Set\u003cTag\u003e getListWithoutTag(Tag tagToDelete) {"},{"lineNumber":400,"author":{"gitID":"amrut-prabhu"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003cTag\u003e(this.getTagList());"},{"lineNumber":401,"author":{"gitID":"amrut-prabhu"},"content":"        return tags.stream()"},{"lineNumber":402,"author":{"gitID":"amrut-prabhu"},"content":"                .filter(t -\u003e !t.equals(tagToDelete))"},{"lineNumber":403,"author":{"gitID":"amrut-prabhu"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":404,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":405,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":406,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":407,"author":{"gitID":"amrut-prabhu"},"content":"     * Removes {@code tag} from {@code member} in this {@code ClubBook}."},{"lineNumber":408,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":409,"author":{"gitID":"amrut-prabhu"},"content":"     * @param tag Tag which is to be removed from {@code member}."},{"lineNumber":410,"author":{"gitID":"amrut-prabhu"},"content":"     * @param member Member from whom {@code tag} is to be removed."},{"lineNumber":411,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws MemberNotFoundException if the {@code member} is not in this {@code ClubBook}."},{"lineNumber":412,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":413,"author":{"gitID":"amrut-prabhu"},"content":"    private void deleteTagFromMember(Tag tag, Member member) throws MemberNotFoundException {"},{"lineNumber":414,"author":{"gitID":"amrut-prabhu"},"content":"        Set\u003cTag\u003e memberTags \u003d new HashSet\u003c\u003e(member.getTags());"},{"lineNumber":415,"author":{"gitID":"amrut-prabhu"},"content":"        if (!memberTags.remove(tag)) {"},{"lineNumber":416,"author":{"gitID":"amrut-prabhu"},"content":"            return;"},{"lineNumber":417,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":418,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":419,"author":{"gitID":"amrut-prabhu"},"content":"        Member newMember \u003d new Member(member.getName(), member.getPhone(), member.getEmail(), member.getMatricNumber(),"},{"lineNumber":420,"author":{"gitID":"amrut-prabhu"},"content":"                member.getGroup(), memberTags);"},{"lineNumber":421,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":422,"author":{"gitID":"amrut-prabhu"},"content":"            updateMember(member, newMember);"},{"lineNumber":423,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (DuplicateMatricNumberException dme) {"},{"lineNumber":424,"author":{"gitID":"amrut-prabhu"},"content":"            throw new AssertionError(\"Modifying a member\u0027s tags only should not result in a duplicate. \""},{"lineNumber":425,"author":{"gitID":"amrut-prabhu"},"content":"                    + \"See member#equals(Object).\");"},{"lineNumber":426,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":427,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":428,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":429,"author":{"gitID":"amrut-prabhu"},"content":"    //@@author Song Weiyang"},{"lineNumber":430,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":431,"author":{"gitID":"-"},"content":"     * Change the password of {@code member} in the ClubBook."},{"lineNumber":432,"author":{"gitID":"-"},"content":"     * @param username"},{"lineNumber":433,"author":{"gitID":"-"},"content":"     * @param oldpassword"},{"lineNumber":434,"author":{"gitID":"-"},"content":"     * @param newPassword"},{"lineNumber":435,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":436,"author":{"gitID":"-"},"content":"    public void changePassword (String username, String oldpassword, String newPassword)"},{"lineNumber":437,"author":{"gitID":"-"},"content":"            throws PasswordIncorrectException, DataToChangeIsNotCurrentlyLoggedInMemberException {"},{"lineNumber":438,"author":{"gitID":"-"},"content":"        members.changePassword(username, oldpassword, newPassword);"},{"lineNumber":439,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":440,"content":"    //@@author"},{"lineNumber":441,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":442,"author":{"gitID":"-"},"content":"    public void clearClubBook() {"},{"lineNumber":443,"author":{"gitID":"-"},"content":"        members.clear();"},{"lineNumber":444,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":445,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":446,"author":{"gitID":"-"},"content":""},{"lineNumber":447,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":448,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":449,"author":{"gitID":"amrut-prabhu"},"content":"        return members.asObservableList().size() + \" members, \" + tags.asObservableList().size() + \" tags, \""},{"lineNumber":450,"author":{"gitID":"amrut-prabhu"},"content":"                + polls.asObservableList().size() + \" polls, \" + tasks.asObservableList().size() + \"tasks\";"},{"lineNumber":451,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":452,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":453,"author":{"gitID":"-"},"content":""},{"lineNumber":454,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":455,"author":{"gitID":"amrut-prabhu"},"content":"    public ObservableList\u003cMember\u003e getMemberList() {"},{"lineNumber":456,"author":{"gitID":"amrut-prabhu"},"content":"        return members.asObservableList();"},{"lineNumber":457,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":458,"author":{"gitID":"-"},"content":""},{"lineNumber":459,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":460,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":461,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":462,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":463,"author":{"gitID":"-"},"content":""},{"lineNumber":464,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":465,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPoll\u003e getPollList() {"},{"lineNumber":466,"author":{"gitID":"-"},"content":"        return polls.asObservableList();"},{"lineNumber":467,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":468,"author":{"gitID":"-"},"content":""},{"lineNumber":469,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":470,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTask\u003e getTaskList() {"},{"lineNumber":471,"author":{"gitID":"-"},"content":"        return tasks.asObservableList();"},{"lineNumber":472,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":473,"author":{"gitID":"-"},"content":""},{"lineNumber":474,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":475,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":476,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":477,"author":{"gitID":"amrut-prabhu"},"content":"                || (other instanceof ClubBook // instanceof handles nulls"},{"lineNumber":478,"author":{"gitID":"amrut-prabhu"},"content":"                \u0026\u0026 this.members.equals(((ClubBook) other).members)"},{"lineNumber":479,"author":{"gitID":"amrut-prabhu"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((ClubBook) other).tags));"},{"lineNumber":480,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":481,"author":{"gitID":"-"},"content":""},{"lineNumber":482,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":483,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":484,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":485,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":486,"author":{"gitID":"amrut-prabhu"},"content":"        return Objects.hash(members, tags);"},{"lineNumber":487,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":488,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":489,"author":{"gitID":"yash-chowdhary"},"content":"    //@@author yash-chowdhary"},{"lineNumber":490,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":491,"author":{"gitID":"yash-chowdhary"},"content":"     * Replaces the given task {@code target} in the list with {@code editedMember}."},{"lineNumber":492,"author":{"gitID":"yash-chowdhary"},"content":"     * @throws DuplicateTaskException if updating the tasks\u0027s details causes the task to be equivalent to"},{"lineNumber":493,"author":{"gitID":"yash-chowdhary"},"content":"     *                                  another existing task in the list."},{"lineNumber":494,"author":{"gitID":"yash-chowdhary"},"content":"     * @throws TaskNotFoundException if {@code target} could not be found in the list."},{"lineNumber":495,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":496,"author":{"gitID":"yash-chowdhary"},"content":"    public void updateTask(Task taskToEdit, Task editedTask) throws DuplicateTaskException, TaskNotFoundException {"},{"lineNumber":497,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(editedTask);"},{"lineNumber":498,"author":{"gitID":"yash-chowdhary"},"content":"        tasks.setTask(taskToEdit, editedTask);"},{"lineNumber":499,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":500,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"null":3,"MuhdNurKamal":47,"amrut-prabhu":194,"yash-chowdhary":90,"-":166}},{"path":"src/main/java/seedu/club/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.club.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.PhotoReadException;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Body;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Client;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.email.Subject;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.Group;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.exceptions.GroupCannotBeRemovedException;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.club.model.member.exceptions.DataToChangeIsNotCurrentlyLoggedInMemberException;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.DuplicateMatricNumberException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.club.model.member.exceptions.MemberListNotEmptyException;"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.member.exceptions.MemberNotFoundException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.club.model.member.exceptions.PasswordIncorrectException;"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.Poll;"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.AnswerNotFoundException;"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.DuplicatePollException;"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.PollNotFoundException;"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.UserAlreadyVotedException;"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.Tag;"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.Task;"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TaskCannotBeDeletedException;"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TasksAlreadyListedException;"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TasksCannotBeDisplayedException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":39,"author":{"gitID":"-"},"content":" */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"     * {@code Predicate} that always evaluate to true"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"    Predicate\u003cMember\u003e PREDICATE_SHOW_ALL_MEMBERS \u003d unused -\u003e true;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"     * {@code Predicate} that always evaluate to true"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"     * {@code Predicate} that always evaluate to false"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"    Predicate\u003cTask\u003e PREDICATE_NOT_SHOW_ALL_TASKS \u003d unused -\u003e false;"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":"     * {@code Predicate} that always evaluate to true"},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    Predicate\u003cMember\u003e PREDICATE_NOT_SHOW_ALL_MEMBERS \u003d unused -\u003e false;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":"     * {@code Predicate} that always evaluate to false"},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":"    Predicate\u003cPoll\u003e PREDICATE_NOT_SHOW_ALL_POLLS \u003d unused -\u003e false;"},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":"     * Clears existing backing model and replaces with the provided new data."},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"    void resetData(ReadOnlyClubBook newData);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"     * Returns the ClubBook"},{"lineNumber":73,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"amrut-prabhu"},"content":"    ReadOnlyClubBook getClubBook();"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"MuhdNurKamal"},"content":"     * Deletes the given member."},{"lineNumber":78,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"amrut-prabhu"},"content":"    void deleteMember(Member target) throws MemberNotFoundException;"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"MuhdNurKamal"},"content":"     * Adds the given member"},{"lineNumber":83,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"amrut-prabhu"},"content":"    void addMember(Member member) throws DuplicateMatricNumberException;"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"MuhdNurKamal"},"content":"     * Adds the given poll"},{"lineNumber":88,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"MuhdNurKamal"},"content":"    void addPoll(Poll poll) throws DuplicatePollException;"},{"lineNumber":90,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":91,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"MuhdNurKamal"},"content":"     * Deletes the given member."},{"lineNumber":93,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"MuhdNurKamal"},"content":"    void deletePoll(Poll poll) throws PollNotFoundException;"},{"lineNumber":95,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":96,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"MuhdNurKamal"},"content":"     * Votes current user in the given {@code poll} for the answer"},{"lineNumber":98,"author":{"gitID":"MuhdNurKamal"},"content":"     * specified by {@code answerIndex} in the answer list of the poll."},{"lineNumber":99,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"MuhdNurKamal"},"content":"    void voteInPoll(Poll poll, Index answerIndex) throws"},{"lineNumber":101,"author":{"gitID":"MuhdNurKamal"},"content":"            PollNotFoundException, AnswerNotFoundException, UserAlreadyVotedException;"},{"lineNumber":102,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"amrut-prabhu"},"content":"     * Replaces the given member {@code target} with {@code editedMember}."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":106,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws DuplicateMatricNumberException if updating the member\u0027s details causes the member\u0027s matriculation number"},{"lineNumber":107,"author":{"gitID":"amrut-prabhu"},"content":"     *                                  to be equivalent to that of another existing member in the list."},{"lineNumber":108,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws MemberNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"amrut-prabhu"},"content":"    void updateMember(Member target, Member editedMember)"},{"lineNumber":111,"author":{"gitID":"amrut-prabhu"},"content":"            throws DuplicateMatricNumberException, MemberNotFoundException;"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"MuhdNurKamal"},"content":"     * Returns an unmodifiable view of the filtered member list"},{"lineNumber":115,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"amrut-prabhu"},"content":"    ObservableList\u003cMember\u003e getFilteredMemberList();"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"amrut-prabhu"},"content":"     * Updates the filter of the filtered member list to filter by the given {@code predicate}."},{"lineNumber":120,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"amrut-prabhu"},"content":"    void updateFilteredMemberList(Predicate\u003cMember\u003e predicate);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"MuhdNurKamal"},"content":"     * Returns an unmodifiable view of the filtered poll list"},{"lineNumber":127,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"MuhdNurKamal"},"content":"    ObservableList\u003cPoll\u003e getFilteredPollList();"},{"lineNumber":129,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":130,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"MuhdNurKamal"},"content":"     * Returns an unmodifiable view of the filtered member list"},{"lineNumber":132,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"yash-chowdhary"},"content":"    ObservableList\u003cTask\u003e getFilteredTaskList();"},{"lineNumber":134,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"MuhdNurKamal"},"content":"     * Updates the filter of the filtered poll list to filter by the given {@code predicate}."},{"lineNumber":137,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"MuhdNurKamal"},"content":"    void updateFilteredPollList(Predicate\u003cPoll\u003e predicate);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"content":"    //@@author Song Weiyang"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"amrut-prabhu"},"content":"     * Logs In a member in the club"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    void logsInMember(String username, String password);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"content":"    //@@author Song Weiyang"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns the member who is currently logged in to Club Connect."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    Member getLoggedInMember();"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"amrut-prabhu"},"content":"    //@@author amrut-prabhu"},{"lineNumber":155,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":156,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"amrut-prabhu"},"content":"     * Removes the given tag {@code tag} for all members in the club book."},{"lineNumber":158,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"amrut-prabhu"},"content":"    void deleteTag(Tag tag) throws TagNotFoundException;"},{"lineNumber":160,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":161,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"amrut-prabhu"},"content":"     * Changes profile photo for the currently logged in member."},{"lineNumber":163,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":164,"author":{"gitID":"amrut-prabhu"},"content":"     * @param originalPhotoPath Absolute file path of the original photo."},{"lineNumber":165,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws PhotoReadException if the {@code originalPhotoPath} is invalid."},{"lineNumber":166,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"amrut-prabhu"},"content":"    void addProfilePhoto(String originalPhotoPath) throws PhotoReadException;"},{"lineNumber":168,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":169,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"amrut-prabhu"},"content":"     * Exports Club Connect\u0027s members\u0027 details to the specified file."},{"lineNumber":171,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":172,"author":{"gitID":"amrut-prabhu"},"content":"     * @param exportFile File to which data is exported."},{"lineNumber":173,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws IOException if there was an error writing to file."},{"lineNumber":174,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"amrut-prabhu"},"content":"    void exportClubConnectMembers(File exportFile) throws IOException;"},{"lineNumber":176,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":177,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"amrut-prabhu"},"content":"     * Imports details of members from the specified file."},{"lineNumber":179,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":180,"author":{"gitID":"amrut-prabhu"},"content":"     * @param importFile File from which data is imported."},{"lineNumber":181,"author":{"gitID":"amrut-prabhu"},"content":"     * @return Number of members added from the import file."},{"lineNumber":182,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws IOException if there was an error reading from file."},{"lineNumber":183,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"amrut-prabhu"},"content":"    int importMembers(File importFile) throws IOException;"},{"lineNumber":185,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":186,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns an unmodifiable view of the filtered tag list"},{"lineNumber":188,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"amrut-prabhu"},"content":"    ObservableList\u003cTag\u003e getFilteredTagList();"},{"lineNumber":190,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":191,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"amrut-prabhu"},"content":"     * Updates the filter of the filtered tag list to filter by the given {@code predicate}."},{"lineNumber":193,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":194,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":195,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"amrut-prabhu"},"content":"    void updateFilteredTagList(Predicate\u003cTag\u003e predicate);"},{"lineNumber":197,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":198,"author":{"gitID":"yash-chowdhary"},"content":"    //@@author yash-chowdhary"},{"lineNumber":199,"author":{"gitID":"yash-chowdhary"},"content":"    void removeGroup(Group toRemove) throws GroupNotFoundException, GroupCannotBeRemovedException;"},{"lineNumber":200,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":201,"author":{"gitID":"yash-chowdhary"},"content":"    String generateEmailRecipients(Group group, Tag tag) throws GroupNotFoundException, TagNotFoundException;"},{"lineNumber":202,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":203,"author":{"gitID":"yash-chowdhary"},"content":"    void sendEmail(String recipients, Client client, Subject subject, Body body);"},{"lineNumber":204,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":205,"author":{"gitID":"yash-chowdhary"},"content":"    //@@author Song Weiyang"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * Logs out a member from clubbook"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    void logOutMember();"},{"lineNumber":210,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":211,"author":{"gitID":"yash-chowdhary"},"content":"    void addTaskToTaskList(Task toAdd) throws DuplicateTaskException;"},{"lineNumber":212,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":213,"author":{"gitID":"yash-chowdhary"},"content":"    void deleteTask(Task taskToDelete) throws TaskNotFoundException, TaskCannotBeDeletedException;"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"},{"lineNumber":216,"content":"    //@@author Song Weiyang"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * Changes the password of the member in that list"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * @param username"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * @param oldPassword"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * @param newPassword"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * @throws PasswordIncorrectException"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    void changePassword(String username, String oldPassword, String newPassword)"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            throws PasswordIncorrectException, DataToChangeIsNotCurrentlyLoggedInMemberException;"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * Signs up a member if the clubbook is empty"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * @param member"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    void signUpMember(Member member) throws MemberListNotEmptyException;"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    void clearClubBook();"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    boolean getClearConfirmation();"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    void setClearConfirmation(Boolean b);"},{"lineNumber":238,"content":"    //@@author"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"yash-chowdhary"},"content":"    void viewAllTasks() throws TasksCannotBeDisplayedException;"},{"lineNumber":241,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":242,"author":{"gitID":"yash-chowdhary"},"content":"    void assignTask(Task toAdd, MatricNumber matricNumber) throws MemberNotFoundException, DuplicateTaskException;"},{"lineNumber":243,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":244,"author":{"gitID":"yash-chowdhary"},"content":"    void viewMyTasks() throws TasksAlreadyListedException;"},{"lineNumber":245,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    void changeStatus(Task taskToEdit, Task editedTask) throws TaskNotFoundException, DuplicateTaskException;"},{"lineNumber":247,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":4,"MuhdNurKamal":68,"amrut-prabhu":72,"yash-chowdhary":31,"-":72}},{"path":"src/main/java/seedu/club/model/poll/Answer.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.model.poll;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":" * Represents an answer to a question of a poll"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":"public class Answer {"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String MESSAGE_ANSWER_CONSTRAINTS \u003d \"Answer cannot be empty\";"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String MESSAGE_ANSWER_NUMBER_ANSWERED_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"            \"Number answered for an answer should be non-negative\";"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String ANSWER_VALIDATION_REGEX \u003d \".*\\\\S.*\";"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String PREFIX_ANSWER \u003d \"Ans: \";"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final int NUMBER_ZERO_VOTE_COUNT \u003d 0;"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"    private String value;"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"    private int voteCount;"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"    public Answer(String value) {"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"        this(value, NUMBER_ZERO_VOTE_COUNT);"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"    public Answer(String value, int voteCount) {"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"        requireNonNull(value);"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"        checkArgument(isValidAnswer(value), MESSAGE_ANSWER_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"        this.value \u003d value;"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"        this.voteCount \u003d voteCount;"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"    public int getVoteCount() {"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"        return voteCount;"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"    public String getValue() {"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"        return value;"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"    public void voteThisAnswer() {"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"        voteCount++;"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"    public static boolean isValidAnswer(String value) {"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"        return value.matches(ANSWER_VALIDATION_REGEX);"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"    public static boolean isValidNoOfMembersAnswered(int noOfMembersAnswered) {"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"        return noOfMembersAnswered \u003e\u003d NUMBER_ZERO_VOTE_COUNT;"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"                || (other instanceof Answer // instanceof handles nulls"},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"                \u0026\u0026 this.value.equals(((Answer) other).value) // state check"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":"                \u0026\u0026 this.voteCount \u003d\u003d ((Answer) other).voteCount); // state check"},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":"    public int hashCode() {"},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":"        return value.hashCode();"},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":"    public String toString() {"},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":"        return PREFIX_ANSWER + value;"},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":69}},{"path":"src/main/java/seedu/club/model/poll/Poll.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.model.poll;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.AnswerNotFoundException;"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.UserAlreadyVotedException;"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":" * Represents a Poll in the club book."},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"public class Poll {"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"    private final Question question;"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"    private ObservableList\u003cAnswer\u003e answers;"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"    private Set\u003cMatricNumber\u003e polleesMatricNumbers;"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"     * Constructs a {@code Poll}."},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"    public Poll(Question question, List\u003cAnswer\u003e answers) {"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"        this(question, answers, null);"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"    public Poll(Question question, List\u003cAnswer\u003e answers,"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"                Set\u003cMatricNumber\u003e polleesMatricNumbers) {"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"        requireNonNull(question);"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"        requireNonNull(answers);"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"        this.question \u003d question;"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"        setAnswers(answers);"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"        setPolleesMatricNumbers(polleesMatricNumbers);"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"                || (other instanceof Poll // instanceof handles nulls"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"                \u0026\u0026 this.question.equals(((Poll) other).question) // state check"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"                \u0026\u0026 this.polleesMatricNumbers.equals(((Poll) other).polleesMatricNumbers)"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"                \u0026\u0026 this.answers.equals(((Poll) other).answers));"},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"    public Question getQuestion() {"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"        return question;"},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"    public int getTotalVoteCount() {"},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":"        return answers.stream().map(Answer::getVoteCount).reduce(0, Integer::sum);"},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":"     * Returns an immutable answer list, which throws {@code UnsupportedOperationException}"},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":"     * if modification is attempted."},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":"    public ObservableList\u003cAnswer\u003e getAnswers() {"},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":"        return FXCollections.unmodifiableObservableList(answers);"},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"    private void setAnswers(List\u003cAnswer\u003e answers) {"},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":"        List\u003cAnswer\u003e clonedAnswers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"        for (Answer answer : answers) {"},{"lineNumber":73,"author":{"gitID":"MuhdNurKamal"},"content":"            clonedAnswers.add(new Answer(answer.getValue(), answer.getVoteCount()));"},{"lineNumber":74,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"MuhdNurKamal"},"content":"        this.answers \u003d FXCollections.observableArrayList(clonedAnswers);"},{"lineNumber":76,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":78,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"MuhdNurKamal"},"content":"     * Returns an immutable poll set, which throws {@code UnsupportedOperationException}"},{"lineNumber":80,"author":{"gitID":"MuhdNurKamal"},"content":"     * if modification is attempted."},{"lineNumber":81,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"MuhdNurKamal"},"content":"    public Set\u003cMatricNumber\u003e getPolleesMatricNumbers() {"},{"lineNumber":83,"author":{"gitID":"MuhdNurKamal"},"content":"        return Collections.unmodifiableSet(polleesMatricNumbers);"},{"lineNumber":84,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":86,"author":{"gitID":"MuhdNurKamal"},"content":"    private void setPolleesMatricNumbers(Set\u003cMatricNumber\u003e polleesMatricNumbers) {"},{"lineNumber":87,"author":{"gitID":"MuhdNurKamal"},"content":"        this.polleesMatricNumbers \u003d new HashSet\u003c\u003e();"},{"lineNumber":88,"author":{"gitID":"MuhdNurKamal"},"content":"        if (polleesMatricNumbers !\u003d null) {"},{"lineNumber":89,"author":{"gitID":"MuhdNurKamal"},"content":"            for (MatricNumber matricNumber : polleesMatricNumbers) {"},{"lineNumber":90,"author":{"gitID":"MuhdNurKamal"},"content":"                this.polleesMatricNumbers.add(new MatricNumber(matricNumber.toString()));"},{"lineNumber":91,"author":{"gitID":"MuhdNurKamal"},"content":"            }"},{"lineNumber":92,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":95,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"MuhdNurKamal"},"content":"     * Increases vote count of the answer specified by answerIndex."},{"lineNumber":97,"author":{"gitID":"MuhdNurKamal"},"content":"     * Pollee of the vote is specified by polleeMatricNumber."},{"lineNumber":98,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"MuhdNurKamal"},"content":"     * @param answerIndex        index of the answer of this poll to be voted for"},{"lineNumber":100,"author":{"gitID":"MuhdNurKamal"},"content":"     * @param polleeMatricNumber matricNumber of the pollee that is voting for the answer"},{"lineNumber":101,"author":{"gitID":"MuhdNurKamal"},"content":"     * @throws AnswerNotFoundException   if answerIndex is not answerIndex of any answers of this poll"},{"lineNumber":102,"author":{"gitID":"MuhdNurKamal"},"content":"     * @throws UserAlreadyVotedException if pollee has already voted in the poll"},{"lineNumber":103,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"MuhdNurKamal"},"content":"    public void vote(Index answerIndex, MatricNumber polleeMatricNumber) throws"},{"lineNumber":105,"author":{"gitID":"MuhdNurKamal"},"content":"            AnswerNotFoundException, UserAlreadyVotedException {"},{"lineNumber":106,"author":{"gitID":"MuhdNurKamal"},"content":"        if (polleesMatricNumbers.contains(polleeMatricNumber)) {"},{"lineNumber":107,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new UserAlreadyVotedException();"},{"lineNumber":108,"author":{"gitID":"MuhdNurKamal"},"content":"        } else {"},{"lineNumber":109,"author":{"gitID":"MuhdNurKamal"},"content":"            try {"},{"lineNumber":110,"author":{"gitID":"MuhdNurKamal"},"content":"                answers.get(answerIndex.getZeroBased()).voteThisAnswer();"},{"lineNumber":111,"author":{"gitID":"MuhdNurKamal"},"content":"            } catch (IndexOutOfBoundsException indexOutOfBoundsException) {"},{"lineNumber":112,"author":{"gitID":"MuhdNurKamal"},"content":"                throw new AnswerNotFoundException();"},{"lineNumber":113,"author":{"gitID":"MuhdNurKamal"},"content":"            }"},{"lineNumber":114,"author":{"gitID":"MuhdNurKamal"},"content":"            polleesMatricNumbers.add(polleeMatricNumber);"},{"lineNumber":115,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":118,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"MuhdNurKamal"},"content":"    public int hashCode() {"},{"lineNumber":120,"author":{"gitID":"MuhdNurKamal"},"content":"        return Objects.hash(question, answers);"},{"lineNumber":121,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":123,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"MuhdNurKamal"},"content":"     * Format state as text for viewing."},{"lineNumber":125,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":127,"author":{"gitID":"MuhdNurKamal"},"content":"    public String toString() {"},{"lineNumber":128,"author":{"gitID":"MuhdNurKamal"},"content":"        return \"[ \" + question + \" ]\""},{"lineNumber":129,"author":{"gitID":"MuhdNurKamal"},"content":"                + answers.stream().map(Answer::toString).collect(Collectors.joining(\",\"));"},{"lineNumber":130,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":131}},{"path":"src/main/java/seedu/club/model/poll/exceptions/AnswerNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.model.poll.exceptions;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":" * Signals that the operation is unable to find the specified answer."},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"public class AnswerNotFoundException extends Exception {}"}],"authorContributionMap":{"MuhdNurKamal":6}},{"path":"src/main/java/seedu/club/model/poll/exceptions/PollNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.model.poll.exceptions;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":" * Signals that the operation is unable to find the specified poll."},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"public class PollNotFoundException extends Exception {}"}],"authorContributionMap":{"MuhdNurKamal":6}},{"path":"src/main/java/seedu/club/model/poll/QuestionContainsAnyKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.model.poll;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":" * Tests that a {@code poll}\u0027s {@code question} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"public class QuestionContainsAnyKeywordsPredicate implements Predicate\u003cPoll\u003e {"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"    public QuestionContainsAnyKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"    public boolean test(Poll poll) {"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(poll.getQuestion().getValue(), keyword));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"                || (other instanceof QuestionContainsAnyKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"                \u0026\u0026 this.keywords.equals(((QuestionContainsAnyKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":19,"amrut-prabhu":1,"-":11}},{"path":"src/main/java/seedu/club/model/poll/exceptions/UserAlreadyVotedException.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.model.poll.exceptions;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":" * Signals that the current logged in member has already voted for the poll."},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"public class UserAlreadyVotedException extends Exception {}"}],"authorContributionMap":{"MuhdNurKamal":6}},{"path":"src/main/java/seedu/club/model/poll/exceptions/DuplicatePollException.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.model.poll.exceptions;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"public class DuplicatePollException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":"    public DuplicatePollException() {"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"        super(\"Operation would result in duplicate polls\");"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":7,"amrut-prabhu":1,"-":4}},{"path":"src/main/java/seedu/club/model/poll/PollIsRelevantToMemberPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.model.poll;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.member.Member;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":" * Tests that a {@code poll} is relevant to to {@code member}"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":" * If member is null, no polls will be shown"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":" * If member is an exco, all polls are relevant else only polls that have not been answered by member will be shown"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"public class PollIsRelevantToMemberPredicate implements Predicate\u003cPoll\u003e {"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final String GROUP_EXCO \u003d \"exco\";"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"    private final Member member;"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"    public PollIsRelevantToMemberPredicate(Member member) {"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"        this.member \u003d member;"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"    public boolean test(Poll poll) {"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"        if (member \u003d\u003d null) {"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"            return false;"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"        } else if (member.getGroup().toString().equalsIgnoreCase(\"exco\")) {"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"            return true;"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"        } else {"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"            return !poll.getPolleesMatricNumbers().contains(member.getMatricNumber());"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"    public Member getMember() {"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"        return member;"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"        return (other \u003d\u003d this)  // short circuit if same object"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"                || (other instanceof PollIsRelevantToMemberPredicate     // handles nulls"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"                \u0026\u0026 this.member.equals(((PollIsRelevantToMemberPredicate) other).getMember()));   // state check"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":42}},{"path":"src/main/java/seedu/club/model/task/UniqueTaskList.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.club.model.task;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"//@@author yash-chowdhary"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.club.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Comparator;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Iterator;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.commons.util.CollectionUtil;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.club.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":" *"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"public class UniqueTaskList implements Iterable\u003cTask\u003e {"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"     * Constructs an empty UniqueTaskList."},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"    public UniqueTaskList() {}"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"     * Constructs a UniqueTaskList using given tasks."},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"     * Enforces no nulls"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"    public UniqueTaskList(Set\u003cTask\u003e tasks) {"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"        requireAllNonNull(tasks);"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"        internalList.addAll(tasks);"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns all tasks in this list as a Set."},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"    public Set\u003cTask\u003e toSet() {"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"     * Replaces the Tasks in this list with those in the argument order list."},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"    public void setTasks(Set\u003cTask\u003e tasks) {"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"        requireAllNonNull(tasks);"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"        internalList.setAll(tasks);"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"     * Replaces the task {@code target} in the list with {@code editedTask}."},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"     *"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"     * @throws DuplicateTaskException if the replacement is equivalent to an existing task in the list."},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"     * @throws TaskNotFoundException if {@code target} could not be found in the list."},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"    public void setTask(Task target, Task editedTask) throws DuplicateTaskException, TaskNotFoundException {"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(editedTask);"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"            throw new TaskNotFoundException();"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"        if (internalList.contains(editedTask)) {"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"        internalList.set(index, editedTask);"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"     * Ensures every task in the argument list exists in this object."},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":"    public void mergeFrom(UniqueTaskList from) {"},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"        final Set\u003cTask\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":"        from.internalList.stream()"},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":"                .filter(task -\u003e !alreadyInside.contains(task))"},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":"                .forEach(internalList::add);"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if the list contains an equivalent Task as the given argument."},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean contains(Task toCheck) {"},{"lineNumber":97,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(toCheck);"},{"lineNumber":98,"author":{"gitID":"yash-chowdhary"},"content":"        for (Task task : internalList) {"},{"lineNumber":99,"author":{"gitID":"yash-chowdhary"},"content":"            if (task.equals(toCheck)) {"},{"lineNumber":100,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":101,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":102,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"yash-chowdhary"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":104,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":106,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"yash-chowdhary"},"content":"     * Adds a Task to the list."},{"lineNumber":108,"author":{"gitID":"yash-chowdhary"},"content":"     *"},{"lineNumber":109,"author":{"gitID":"yash-chowdhary"},"content":"     * @throws DuplicateTaskException if the Task to add is a duplicate of an existing Task in the list."},{"lineNumber":110,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"yash-chowdhary"},"content":"    public void add(Task toAdd) throws DuplicateTaskException {"},{"lineNumber":112,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(toAdd);"},{"lineNumber":113,"author":{"gitID":"yash-chowdhary"},"content":"        if (contains(toAdd)) {"},{"lineNumber":114,"author":{"gitID":"yash-chowdhary"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":115,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"yash-chowdhary"},"content":"        internalList.add(toAdd);"},{"lineNumber":117,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":118,"author":{"gitID":"yash-chowdhary"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":119,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":121,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"yash-chowdhary"},"content":"     * Removes {@code Task toRemove} from the list if it exists."},{"lineNumber":123,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"yash-chowdhary"},"content":"    public void remove(Task toRemove) throws TaskNotFoundException {"},{"lineNumber":125,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(toRemove);"},{"lineNumber":126,"author":{"gitID":"yash-chowdhary"},"content":"        if (!contains(toRemove)) {"},{"lineNumber":127,"author":{"gitID":"yash-chowdhary"},"content":"            throw new TaskNotFoundException();"},{"lineNumber":128,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"yash-chowdhary"},"content":"        internalList.remove(toRemove);"},{"lineNumber":130,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":132,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":133,"author":{"gitID":"yash-chowdhary"},"content":"    public Iterator\u003cTask\u003e iterator() {"},{"lineNumber":134,"author":{"gitID":"yash-chowdhary"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":135,"author":{"gitID":"yash-chowdhary"},"content":"        return internalList.iterator();"},{"lineNumber":136,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":138,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":140,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"yash-chowdhary"},"content":"    public ObservableList\u003cTask\u003e asObservableList() {"},{"lineNumber":142,"author":{"gitID":"yash-chowdhary"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":143,"author":{"gitID":"yash-chowdhary"},"content":"        sortList();"},{"lineNumber":144,"author":{"gitID":"yash-chowdhary"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":145,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":147,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"yash-chowdhary"},"content":"     * Sorts the list of tasks according to alphabetical order of description."},{"lineNumber":149,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"yash-chowdhary"},"content":"    private void sortList() {"},{"lineNumber":151,"author":{"gitID":"yash-chowdhary"},"content":"        internalList.sort(new Comparator\u003cTask\u003e() {"},{"lineNumber":152,"author":{"gitID":"yash-chowdhary"},"content":"            @Override"},{"lineNumber":153,"author":{"gitID":"yash-chowdhary"},"content":"            public int compare(Task task1, Task task2) {"},{"lineNumber":154,"author":{"gitID":"yash-chowdhary"},"content":"                if (task1.getDate().getDate().compareTo(task2.getDate().getDate()) \u003d\u003d 0) {"},{"lineNumber":155,"author":{"gitID":"yash-chowdhary"},"content":"                    if (task1.getTime().getTime().compareTo(task2.getTime().getTime()) \u003d\u003d 0) {"},{"lineNumber":156,"author":{"gitID":"yash-chowdhary"},"content":"                        return task1.getDescription().getDescription()"},{"lineNumber":157,"author":{"gitID":"yash-chowdhary"},"content":"                                .compareTo(task2.getDescription().getDescription());"},{"lineNumber":158,"author":{"gitID":"yash-chowdhary"},"content":"                    }"},{"lineNumber":159,"author":{"gitID":"yash-chowdhary"},"content":"                    return task1.getTime().getTime().compareTo(task2.getTime().getTime());"},{"lineNumber":160,"author":{"gitID":"yash-chowdhary"},"content":"                }"},{"lineNumber":161,"author":{"gitID":"yash-chowdhary"},"content":"                return task1.getDate().getDate().compareTo(task2.getDate().getDate());"},{"lineNumber":162,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":163,"author":{"gitID":"yash-chowdhary"},"content":"        });"},{"lineNumber":164,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":166,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":167,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean equals(Object other) {"},{"lineNumber":168,"author":{"gitID":"yash-chowdhary"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":169,"author":{"gitID":"yash-chowdhary"},"content":"                || (other instanceof UniqueTaskList // instanceof handles nulls"},{"lineNumber":170,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueTaskList) other).internalList));"},{"lineNumber":171,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":173,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":175,"author":{"gitID":"yash-chowdhary"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":176,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"yash-chowdhary"},"content":"    public boolean equalsOrderInsensitive(UniqueTaskList other) {"},{"lineNumber":178,"author":{"gitID":"yash-chowdhary"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":179,"author":{"gitID":"yash-chowdhary"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":180,"author":{"gitID":"yash-chowdhary"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":181,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":183,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":184,"author":{"gitID":"yash-chowdhary"},"content":"    public int hashCode() {"},{"lineNumber":185,"author":{"gitID":"yash-chowdhary"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":186,"author":{"gitID":"yash-chowdhary"},"content":"        return internalList.hashCode();"},{"lineNumber":187,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":188}},{"path":"src/main/java/seedu/club/model/poll/Question.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.model.poll;"},{"lineNumber":2,"author":{"gitID":"MuhdNurKamal"},"content":"//@@author MuhdNurKamal"},{"lineNumber":3,"author":{"gitID":"MuhdNurKamal"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.club.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":" * Represents an question of a poll"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":"public class Question {"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String MESSAGE_QUESTION_CONSTRAINTS \u003d \"Questions may not be empty\";"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String QUESTION_VALIDATION_REGEX \u003d \".*\\\\S.*\";"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String PREFIX_QUESTION \u003d \"Qn: \";"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"    private String value;"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"    public Question(String value) {"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"        requireNonNull(value);"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"        checkArgument(isValidQuestion(value), MESSAGE_QUESTION_CONSTRAINTS);"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"        this.value \u003d value;"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"    public String getValue() {"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"        return value;"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"    public static boolean isValidQuestion(String test) {"},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"        return test.matches(QUESTION_VALIDATION_REGEX);"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"                || (other instanceof Question // instanceof handles nulls"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"                \u0026\u0026 this.value.equals(((Question) other).value)); // state check"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"    public int hashCode() {"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"        return value.hashCode();"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"        return PREFIX_QUESTION + value;"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":47}},{"path":"src/main/java/seedu/club/model/poll/UniquePollList.java","lines":[{"lineNumber":1,"author":{"gitID":"MuhdNurKamal"},"content":"package seedu.club.model.poll;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.club.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.club.commons.util.CollectionUtil;"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.member.MatricNumber;"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.AnswerNotFoundException;"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.DuplicatePollException;"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.PollNotFoundException;"},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.club.model.poll.exceptions.UserAlreadyVotedException;"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":" * A list of polls that enforces no nulls and uniqueness between its elements."},{"lineNumber":21,"author":{"gitID":"-"},"content":" *"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":23,"author":{"gitID":"-"},"content":" *"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":" * @see Poll#equals(Object)"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":" */"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"public class UniquePollList implements Iterable\u003cPoll\u003e {"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"    private final ObservableList\u003cPoll\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"     * Constructs empty PollList."},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"    public UniquePollList() {}"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"     * Creates a UniquePollList using given polls."},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"     * Enforces no nulls."},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"    public UniquePollList(Set\u003cPoll\u003e polls) {"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"        requireAllNonNull(polls);"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"        internalList.addAll(polls);"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"     * Replaces the Polls in this list with those in the argument poll list."},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"    public void setPolls(Set\u003cPoll\u003e polls) {"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"        requireAllNonNull(polls);"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"        internalList.setAll(polls);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"    //@@author MuhdNurKamal"},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":"     * Replaces the specified poll with a deep copy except that the copy has the specified answer"},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"     * increased it\u0027s vote count by 1."},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":"     * @param poll to be copied"},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":"     * @param answerIndex of poll to be voted for"},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":"     * @param polleeMatricNumber of pollee who wants to vote for the answer of the poll"},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":"     * @throws PollNotFoundException if poll is not in this list"},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":"     * @throws AnswerNotFoundException if answerIndex is not answerIndex of any answers of poll"},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":"     * @throws UserAlreadyVotedException if pollee has already voted in the poll"},{"lineNumber":67,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":"    public void voteInPoll(Poll poll, Index answerIndex, MatricNumber polleeMatricNumber)"},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":"            throws PollNotFoundException, AnswerNotFoundException, UserAlreadyVotedException {"},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"        int pollIndex \u003d internalList.indexOf(poll);"},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":"        if (pollIndex \u003d\u003d -1) {"},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new PollNotFoundException();"},{"lineNumber":73,"author":{"gitID":"MuhdNurKamal"},"content":"        } else {"},{"lineNumber":74,"author":{"gitID":"MuhdNurKamal"},"content":"            Poll pollDeepCopy \u003d new Poll(new Question(poll.getQuestion().getValue()),"},{"lineNumber":75,"author":{"gitID":"MuhdNurKamal"},"content":"                    poll.getAnswers(), poll.getPolleesMatricNumbers());"},{"lineNumber":76,"author":{"gitID":"MuhdNurKamal"},"content":"            pollDeepCopy.vote(answerIndex, polleeMatricNumber);"},{"lineNumber":77,"author":{"gitID":"MuhdNurKamal"},"content":"            internalList.set(pollIndex, pollDeepCopy);"},{"lineNumber":78,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"MuhdNurKamal"},"content":"    //@@author"},{"lineNumber":81,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":82,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"MuhdNurKamal"},"content":"     * Returns true if the list contains an equivalent Poll as the given argument."},{"lineNumber":84,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"MuhdNurKamal"},"content":"    public boolean contains(Poll toCheck) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"MuhdNurKamal"},"content":"     * Adds a Poll to the list."},{"lineNumber":92,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":93,"author":{"gitID":"MuhdNurKamal"},"content":"     * @throws DuplicatePollException if the Poll to add is a duplicate of an existing Poll in the list."},{"lineNumber":94,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"MuhdNurKamal"},"content":"    public void add(Poll toAdd) throws DuplicatePollException {"},{"lineNumber":96,"author":{"gitID":"MuhdNurKamal"},"content":"        requireNonNull(toAdd);"},{"lineNumber":97,"author":{"gitID":"MuhdNurKamal"},"content":"        if (contains(toAdd)) {"},{"lineNumber":98,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new DuplicatePollException();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"MuhdNurKamal"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"MuhdNurKamal"},"content":"     * Removes the equivalent poll from the list."},{"lineNumber":107,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":108,"author":{"gitID":"MuhdNurKamal"},"content":"     * @throws PollNotFoundException if no such poll could be found in the list."},{"lineNumber":109,"author":{"gitID":"MuhdNurKamal"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"MuhdNurKamal"},"content":"    public boolean remove(Poll toRemove) throws PollNotFoundException {"},{"lineNumber":111,"author":{"gitID":"MuhdNurKamal"},"content":"        requireNonNull(toRemove);"},{"lineNumber":112,"author":{"gitID":"MuhdNurKamal"},"content":"        final boolean pollFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":113,"author":{"gitID":"MuhdNurKamal"},"content":"        if (!pollFoundAndDeleted) {"},{"lineNumber":114,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new PollNotFoundException();"},{"lineNumber":115,"author":{"gitID":"MuhdNurKamal"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"MuhdNurKamal"},"content":"        return pollFoundAndDeleted;"},{"lineNumber":117,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":119,"author":{"gitID":"MuhdNurKamal"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"MuhdNurKamal"},"content":"    public Iterator\u003cPoll\u003e iterator() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"MuhdNurKamal"},"content":"    public ObservableList\u003cPoll\u003e asObservableList() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":137,"author":{"gitID":"MuhdNurKamal"},"content":"                || (other instanceof UniquePollList // instanceof handles nulls"},{"lineNumber":138,"author":{"gitID":"MuhdNurKamal"},"content":"                        \u0026\u0026 this.internalList.equals(((UniquePollList) other).internalList));"},{"lineNumber":139,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":99,"amrut-prabhu":2,"-":45}}]
