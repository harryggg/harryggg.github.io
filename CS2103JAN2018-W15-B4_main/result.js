var resultJson = [{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_MATRIC_NUMBER_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NUMBER_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NUMBER_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_AMY;"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_AMY;"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.address.model.person.MatricNumber;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":67,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":"                + EMAIL_DESC_AMY + \"   \" + MATRIC_NUMBER_DESC_AMY + \"   \""},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"                + GROUP_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":88,"author":{"gitID":"MuhdNurKamal"},"content":"                .withMatricNumber(VALID_MATRIC_NUMBER_AMY).withGroup(VALID_GROUP_AMY)"},{"lineNumber":89,"author":{"gitID":"MuhdNurKamal"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":90,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + MATRIC_NUMBER_DESC_AMY"},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":"                + GROUP_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":96,"author":{"gitID":"MuhdNurKamal"},"content":"                .withMatricNumber(VALID_MATRIC_NUMBER_AMY).withGroup(VALID_GROUP_AMY)"},{"lineNumber":97,"author":{"gitID":"MuhdNurKamal"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":98,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + MATRIC_NUMBER_DESC_AMY"},{"lineNumber":99,"author":{"gitID":"yash-chowdhary"},"content":"                + GROUP_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":104,"author":{"gitID":"MuhdNurKamal"},"content":"                .withMatricNumber(VALID_MATRIC_NUMBER_AMY).withGroup(VALID_GROUP_AMY)"},{"lineNumber":105,"author":{"gitID":"MuhdNurKamal"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":106,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + MATRIC_NUMBER_DESC_AMY"},{"lineNumber":107,"author":{"gitID":"yash-chowdhary"},"content":"                + GROUP_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"MuhdNurKamal"},"content":"        /* Case: add a person with all fields same as another person in the address book"},{"lineNumber":111,"author":{"gitID":"MuhdNurKamal"},"content":"         * except matric number -\u003e added"},{"lineNumber":112,"author":{"gitID":"MuhdNurKamal"},"content":"         */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":114,"author":{"gitID":"MuhdNurKamal"},"content":"                .withMatricNumber(VALID_MATRIC_NUMBER_BOB).withGroup(VALID_GROUP_AMY)"},{"lineNumber":115,"author":{"gitID":"MuhdNurKamal"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":116,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + MATRIC_NUMBER_DESC_BOB"},{"lineNumber":117,"author":{"gitID":"yash-chowdhary"},"content":"                + GROUP_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":126,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + MATRIC_NUMBER_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":127,"author":{"gitID":"yash-chowdhary"},"content":"                + GROUP_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":159,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + MATRIC_NUMBER_DESC_AMY;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":163,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + MATRIC_NUMBER_DESC_AMY;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":167,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + MATRIC_NUMBER_DESC_AMY;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"MuhdNurKamal"},"content":"        /* Case: missing matric number -\u003e rejected */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":179,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY"},{"lineNumber":180,"author":{"gitID":"MuhdNurKamal"},"content":"                + EMAIL_DESC_AMY + MATRIC_NUMBER_DESC_AMY;"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":184,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC"},{"lineNumber":185,"author":{"gitID":"MuhdNurKamal"},"content":"                + EMAIL_DESC_AMY + MATRIC_NUMBER_DESC_AMY;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":189,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":190,"author":{"gitID":"MuhdNurKamal"},"content":"                + INVALID_EMAIL_DESC + MATRIC_NUMBER_DESC_AMY;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"MuhdNurKamal"},"content":"        /* Case: invalid matric number -\u003e rejected */"},{"lineNumber":194,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":195,"author":{"gitID":"MuhdNurKamal"},"content":"                + EMAIL_DESC_AMY + INVALID_MATRIC_NUMBER_DESC;"},{"lineNumber":196,"author":{"gitID":"MuhdNurKamal"},"content":"        assertCommandFailure(command, MatricNumber.MESSAGE_MATRIC_NUMBER_CONSTRAINTS);"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":199,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + MATRIC_NUMBER_DESC_AMY"},{"lineNumber":200,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":39,"yash-chowdhary":8,"-":228}},{"path":"src/test/java/systemtests/DeleteTagCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED_DESC;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.address.logic.commands.DeleteTagCommand.MESSAGE_DELETE_TAG_SUCCESS;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.address.logic.commands.DeleteTagCommand.MESSAGE_NON_EXISTENT_TAG;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.address.logic.commands.DeleteTagCommand;"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"public class DeleteTagCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"    public void deleteTag() {"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"        Model modelBeforeDeletingGroup \u003d getModel();"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"        Tag deletedTag;"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"        String command;"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"        /* ------------------------ Perform deleteTag operations on the shown unfiltered list -------------------- */"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: delete a valid tag which is present in the address book */"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"        command \u003d DeleteTagCommand.COMMAND_WORD + TAG_DESC_FRIEND;"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"        deletedTag \u003d deleteTagFromModel(expectedModel, VALID_TAG_FRIEND);"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_TAG_SUCCESS, deletedTag);"},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: undo deleting the tag -\u003e tag restored in relevant persons */"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandSuccess(command, modelBeforeDeletingGroup, expectedResultMessage);"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"        /*Case: redo deleting the tag -\u003e deleted */"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: delete an invalid tag */"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"        command \u003d DeleteTagCommand.COMMAND_WORD + INVALID_TAG_DESC;"},{"lineNumber":51,"author":{"gitID":"amrut-prabhu"},"content":"        deletedTag \u003d deleteTagFromModel(expectedModel, INVALID_TAG);"},{"lineNumber":52,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(null, deletedTag);"},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"        /* Case: delete a non-existent tag */"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"        command \u003d DeleteTagCommand.COMMAND_WORD + VALID_TAG_UNUSED_DESC;"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"        deletedTag \u003d deleteTagFromModel(expectedModel, VALID_TAG_UNUSED);"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(null, deletedTag);"},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(command, MESSAGE_NON_EXISTENT_TAG);"},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":"     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":70,"author":{"gitID":"amrut-prabhu"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":71,"author":{"gitID":"amrut-prabhu"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":72,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"amrut-prabhu"},"content":"    private void assertCommandSuccess(String command, Model model, String expectedResultMessage) {"},{"lineNumber":74,"author":{"gitID":"amrut-prabhu"},"content":"        executeCommand(command);"},{"lineNumber":75,"author":{"gitID":"amrut-prabhu"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, model);"},{"lineNumber":76,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":77,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":78,"author":{"gitID":"amrut-prabhu"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":79,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":81,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"amrut-prabhu"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":83,"author":{"gitID":"amrut-prabhu"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":84,"author":{"gitID":"amrut-prabhu"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"amrut-prabhu"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"amrut-prabhu"},"content":"     * 4. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"amrut-prabhu"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":88,"author":{"gitID":"amrut-prabhu"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"amrut-prabhu"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":90,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"amrut-prabhu"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":92,"author":{"gitID":"amrut-prabhu"},"content":"        executeCommand(command);"},{"lineNumber":93,"author":{"gitID":"amrut-prabhu"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":94,"author":{"gitID":"amrut-prabhu"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":95,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":96,"author":{"gitID":"amrut-prabhu"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":97,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":99,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":100,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"amrut-prabhu"},"content":"     * Removes the tag from model"},{"lineNumber":102,"author":{"gitID":"amrut-prabhu"},"content":"     * @param model expected model"},{"lineNumber":103,"author":{"gitID":"amrut-prabhu"},"content":"     * @param tag new Tag object to be created with this string"},{"lineNumber":104,"author":{"gitID":"amrut-prabhu"},"content":"     * @return either a valid Tag object if the group has been deleted; null otherwise"},{"lineNumber":105,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"amrut-prabhu"},"content":"    private Tag deleteTagFromModel(Model model, String tag) {"},{"lineNumber":107,"author":{"gitID":"amrut-prabhu"},"content":"        if (Tag.isValidTagName(tag)) {"},{"lineNumber":108,"author":{"gitID":"amrut-prabhu"},"content":"            try {"},{"lineNumber":109,"author":{"gitID":"amrut-prabhu"},"content":"                model.deleteTag(new Tag(tag));"},{"lineNumber":110,"author":{"gitID":"amrut-prabhu"},"content":"            } catch (TagNotFoundException tnfe) {"},{"lineNumber":111,"author":{"gitID":"amrut-prabhu"},"content":"                return null;"},{"lineNumber":112,"author":{"gitID":"amrut-prabhu"},"content":"            }"},{"lineNumber":113,"author":{"gitID":"amrut-prabhu"},"content":"            return new Tag(tag);"},{"lineNumber":114,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"amrut-prabhu"},"content":"        return null;"},{"lineNumber":116,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":115,"-":2}},{"path":"src/test/java/systemtests/RemoveGroupCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_BOB;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_GROUP;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_GROUP_DESC;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MANDATORY_GROUP;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MANDATORY_GROUP_DESC;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NON_EXISTENT_GROUP;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NON_EXISTENT_GROUP_DESC;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_BOB;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.RemoveGroupCommand.MESSAGE_MANDATORY_GROUP;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.RemoveGroupCommand.MESSAGE_NON_EXISTENT_GROUP;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.RemoveGroupCommand.MESSAGE_SUCCESS;"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.logic.commands.RemoveGroupCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.exceptions.GroupCannotBeRemovedException;"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"public class RemoveGroupCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"    public void removeGroup() {"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"        Model modelBeforeDeletingGroup \u003d getModel();"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"        Group deletedGroup;"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"        String command;"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"        /* ------------------------ Perform removegroup operations on the shown unfiltered list -------------------- */"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: delete a valid group which is present in the address book */"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d \" \" + RemoveGroupCommand.COMMAND_WORD + \" \" + GROUP_DESC_BOB + \" \";"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"        deletedGroup \u003d deleteGroup(expectedModel, VALID_GROUP_BOB);"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_SUCCESS, deletedGroup);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: undo deleting the group -\u003e group restored in relevant persons */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(command, modelBeforeDeletingGroup, expectedResultMessage);"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"        /*Case: redo deleting the group -\u003e deleted */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: delete an invalid group */"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d \" \" + RemoveGroupCommand.COMMAND_WORD + \" \" + INVALID_GROUP_DESC + \" \";"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"        deletedGroup \u003d deleteGroup(expectedModel, INVALID_GROUP);"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(null, deletedGroup);"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, Group.MESSAGE_GROUP_CONSTRAINTS);"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: delete a mandatory group */"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d \" \" + RemoveGroupCommand.COMMAND_WORD + \" \" + MANDATORY_GROUP_DESC + \" \";"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"        deletedGroup \u003d deleteGroup(expectedModel, MANDATORY_GROUP);"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(null, deletedGroup);"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, MESSAGE_MANDATORY_GROUP);"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: delete a non-existent group */"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"        command \u003d \" \" + RemoveGroupCommand.COMMAND_WORD + \" \" + NON_EXISTENT_GROUP_DESC + \" \";"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"        deletedGroup \u003d deleteGroup(expectedModel, NON_EXISTENT_GROUP);"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(null, deletedGroup);"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(command, MESSAGE_NON_EXISTENT_GROUP);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"     * 4. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"        executeCommand(command);"},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":94,"author":{"gitID":"yash-chowdhary"},"content":"     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":"     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"yash-chowdhary"},"content":"    private void assertCommandSuccess(String command, Model model, String expectedResultMessage) {"},{"lineNumber":101,"author":{"gitID":"yash-chowdhary"},"content":"        executeCommand(command);"},{"lineNumber":102,"author":{"gitID":"yash-chowdhary"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, model);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"yash-chowdhary"},"content":"     * Removes the group from model"},{"lineNumber":110,"author":{"gitID":"yash-chowdhary"},"content":"     * @param model expected model"},{"lineNumber":111,"author":{"gitID":"yash-chowdhary"},"content":"     * @param group new Group object to be created with this string"},{"lineNumber":112,"author":{"gitID":"yash-chowdhary"},"content":"     * @return either a valid Group object if the group has been deleted; null otherwise"},{"lineNumber":113,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"yash-chowdhary"},"content":"    private Group deleteGroup(Model model, String group) {"},{"lineNumber":115,"author":{"gitID":"yash-chowdhary"},"content":"        if (Group.isValidGroup(group)) {"},{"lineNumber":116,"author":{"gitID":"yash-chowdhary"},"content":"            try {"},{"lineNumber":117,"author":{"gitID":"yash-chowdhary"},"content":"                model.removeGroup(new Group(group));"},{"lineNumber":118,"author":{"gitID":"yash-chowdhary"},"content":"            } catch (GroupNotFoundException gnfe) {"},{"lineNumber":119,"author":{"gitID":"yash-chowdhary"},"content":"                return null;"},{"lineNumber":120,"author":{"gitID":"yash-chowdhary"},"content":"            } catch (GroupCannotBeRemovedException e) {"},{"lineNumber":121,"author":{"gitID":"yash-chowdhary"},"content":"                return null;"},{"lineNumber":122,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":123,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":124,"author":{"gitID":"yash-chowdhary"},"content":"            return new Group(group);"},{"lineNumber":125,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"yash-chowdhary"},"content":"        return null;"},{"lineNumber":127,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":82,"-":46}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":29,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":30,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":38,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":39,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: find phone number of person in address book -\u003e 0 persons found */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"MuhdNurKamal"},"content":"        /* Case: find matric number of person in address book -\u003e 0 persons found */"},{"lineNumber":120,"author":{"gitID":"MuhdNurKamal"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getMatricNumber().value;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        /* Case: find email of person in address book -\u003e 0 persons found */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        /* Case: find tags of person in address book -\u003e 0 persons found */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":169,"author":{"gitID":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":2,"-":193}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(expectedCard.getMatricNumber(), actualCard.getMatricNumber());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(expectedPerson.getMatricNumber().value, actualCard.getMatricNumber());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":2,"-":71}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"        String defaultConfigAsString \u003d \"App title : Club Connect\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":31}},{"path":"src/test/java/seedu/address/commons/util/AppUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class AppUtilTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void getImage_exitingImage() {"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":"        assertNotNull(AppUtil.getImage(\"/images/club_connect_256.png\"));"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        AppUtil.getImage(null);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void checkArgument_true_nothingHappens() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true, \"\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String errorMessage \u003d \"error message\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        thrown.expectMessage(errorMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false,  errorMessage);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":46}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final String VALID_MATRIC_NUMBER \u003d \"A1234567H\";"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"    private static final String VALID_GROUP \u003d \"logistics\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":82,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":84,"author":{"gitID":"MuhdNurKamal"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_MATRIC_NUMBER, VALID_GROUP, VALID_TAGS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":91,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":93,"author":{"gitID":"MuhdNurKamal"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_MATRIC_NUMBER, VALID_GROUP, VALID_TAGS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":100,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":102,"author":{"gitID":"MuhdNurKamal"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_MATRIC_NUMBER, VALID_GROUP, VALID_TAGS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":134,"author":{"gitID":"-"},"content":"                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":147,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":4,"yash-chowdhary":1,"-":142}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_GROUP_DESC;"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_MATRIC_NUMBER_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NUMBER_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NUMBER_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_BOB;"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.address.model.person.MatricNumber;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":66,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":67,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + MATRIC_NUMBER_DESC_BOB + \" \""},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"                + GROUP_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":73,"author":{"gitID":"MuhdNurKamal"},"content":"                .withEmail(VALID_EMAIL_BOB).withMatricNumber(VALID_MATRIC_NUMBER_BOB).withGroup(VALID_GROUP_BOB)"},{"lineNumber":74,"author":{"gitID":"MuhdNurKamal"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":86,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":91,"author":{"gitID":"MuhdNurKamal"},"content":"                + MATRIC_NUMBER_DESC_BOB + GROUP_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":119,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":120,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":129,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":130,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":135,"author":{"gitID":"MuhdNurKamal"},"content":"                + MATRIC_NUMBER_DESC_AMY + GROUP_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":153,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":157,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"MuhdNurKamal"},"content":"        /* Case: invalid matric number -\u003e rejected */"},{"lineNumber":176,"author":{"gitID":"MuhdNurKamal"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":177,"author":{"gitID":"MuhdNurKamal"},"content":"                        + INVALID_MATRIC_NUMBER_DESC,"},{"lineNumber":178,"author":{"gitID":"MuhdNurKamal"},"content":"                MatricNumber.MESSAGE_MATRIC_NUMBER_CONSTRAINTS);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"yash-chowdhary"},"content":"        /* Case: invalid group -\u003e rejected */"},{"lineNumber":181,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_GROUP_DESC,"},{"lineNumber":182,"author":{"gitID":"yash-chowdhary"},"content":"                Group.MESSAGE_GROUP_CONSTRAINTS);"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":186,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":194,"author":{"gitID":"MuhdNurKamal"},"content":"                + MATRIC_NUMBER_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":199,"author":{"gitID":"MuhdNurKamal"},"content":"                + MATRIC_NUMBER_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":206,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":219,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":224,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":228,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":232,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":236,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":242,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":260,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":265,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":281,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":284,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":285,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":287,"author":{"gitID":"MuhdNurKamal"},"content":"     *"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":289,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":298,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":299,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":21,"yash-chowdhary":9,"-":269}},{"path":"src/test/java/seedu/address/logic/parser/DeleteTagCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.address.logic.commands.DeleteTagCommand;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":" * outside of the DeleteTagCommand code. For example, inputs \"friend\" and \"friend 1\" take the"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":" * same path through the DeleteTagCommand, and therefore we test only one of them."},{"lineNumber":17,"author":{"gitID":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"public class DeleteTagCommandParserTest {"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"    private DeleteTagCommandParser parser \u003d new DeleteTagCommandParser();"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"    public void parse_validArgs_returnsDeleteTagCommand() {"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"        assertParseSuccess(parser, \" t/friends\", new DeleteTagCommand(new Tag(VALID_TAG_FRIEND)));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTagCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":14,"-":19}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_MATRIC_NUMBER_DESC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":11,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NUMBER_DESC_AMY;"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NUMBER_DESC_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_AMY;"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.address.model.person.MatricNumber;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"},{"lineNumber":87,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, \"1\" + INVALID_MATRIC_NUMBER_DESC,"},{"lineNumber":88,"author":{"gitID":"MuhdNurKamal"},"content":"                MatricNumber.MESSAGE_MATRIC_NUMBER_CONSTRAINTS); // invalid address"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":105,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC"},{"lineNumber":106,"author":{"gitID":"MuhdNurKamal"},"content":"                        + VALID_MATRIC_NUMBER_AMY + VALID_PHONE_AMY, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":113,"author":{"gitID":"MuhdNurKamal"},"content":"                + EMAIL_DESC_AMY + MATRIC_NUMBER_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":116,"author":{"gitID":"MuhdNurKamal"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withMatricNumber(VALID_MATRIC_NUMBER_AMY)"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // email"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // address"},{"lineNumber":157,"author":{"gitID":"MuhdNurKamal"},"content":"        userInput \u003d targetIndex.getOneBased() + MATRIC_NUMBER_DESC_AMY;"},{"lineNumber":158,"author":{"gitID":"MuhdNurKamal"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withMatricNumber(VALID_MATRIC_NUMBER_AMY).build();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":172,"author":{"gitID":"MuhdNurKamal"},"content":"        String userInput \u003d targetIndex.getOneBased()  + PHONE_DESC_AMY + MATRIC_NUMBER_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":173,"author":{"gitID":"MuhdNurKamal"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + MATRIC_NUMBER_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":174,"author":{"gitID":"MuhdNurKamal"},"content":"                + PHONE_DESC_BOB + MATRIC_NUMBER_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":177,"author":{"gitID":"MuhdNurKamal"},"content":"                .withEmail(VALID_EMAIL_BOB).withMatricNumber(VALID_MATRIC_NUMBER_BOB)"},{"lineNumber":178,"author":{"gitID":"MuhdNurKamal"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                .build();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":195,"author":{"gitID":"MuhdNurKamal"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + MATRIC_NUMBER_DESC_BOB"},{"lineNumber":196,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":198,"author":{"gitID":"MuhdNurKamal"},"content":"                .withMatricNumber(VALID_MATRIC_NUMBER_BOB).build();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":21,"-":192}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_GROUP_DESC;"},{"lineNumber":9,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_MATRIC_NUMBER_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NUMBER_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NUMBER_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_BOB;"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_AMY;"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.address.model.person.MatricNumber;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"                .withEmail(VALID_EMAIL_BOB).withMatricNumber(VALID_MATRIC_NUMBER_BOB)"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"                .withGroup(VALID_GROUP_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":"                + MATRIC_NUMBER_DESC_BOB + GROUP_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":"                + MATRIC_NUMBER_DESC_BOB + GROUP_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":68,"author":{"gitID":"MuhdNurKamal"},"content":"                + MATRIC_NUMBER_DESC_BOB + GROUP_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"                + MATRIC_NUMBER_DESC_BOB + GROUP_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":75,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + MATRIC_NUMBER_DESC_AMY"},{"lineNumber":76,"author":{"gitID":"MuhdNurKamal"},"content":"                + MATRIC_NUMBER_DESC_BOB + GROUP_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":80,"author":{"gitID":"MuhdNurKamal"},"content":"                .withEmail(VALID_EMAIL_BOB).withMatricNumber(VALID_MATRIC_NUMBER_BOB)"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"                .withGroup(VALID_GROUP_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":82,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + MATRIC_NUMBER_DESC_BOB"},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"                + GROUP_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":"        Person expectedPersonAmy \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":90,"author":{"gitID":"MuhdNurKamal"},"content":"                .withEmail(VALID_EMAIL_AMY).withMatricNumber(VALID_MATRIC_NUMBER_AMY).withTags().build();"},{"lineNumber":91,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + MATRIC_NUMBER_DESC_AMY,"},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":"                new AddCommand(expectedPersonAmy));"},{"lineNumber":93,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":94,"author":{"gitID":"yash-chowdhary"},"content":"        // no group"},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":"        Person expectedPersonBob \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":96,"author":{"gitID":"MuhdNurKamal"},"content":"                .withEmail(VALID_EMAIL_BOB).withMatricNumber(VALID_MATRIC_NUMBER_BOB).withGroup().withTags().build();"},{"lineNumber":97,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + MATRIC_NUMBER_DESC_BOB,"},{"lineNumber":98,"author":{"gitID":"yash-chowdhary"},"content":"                new AddCommand(expectedPersonBob));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":106,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + MATRIC_NUMBER_DESC_BOB"},{"lineNumber":107,"author":{"gitID":"yash-chowdhary"},"content":"                + GROUP_DESC_BOB,"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":111,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + MATRIC_NUMBER_DESC_BOB"},{"lineNumber":112,"author":{"gitID":"yash-chowdhary"},"content":"                + GROUP_DESC_BOB,"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":116,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + MATRIC_NUMBER_DESC_BOB,"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":120,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_MATRIC_NUMBER_BOB,"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":124,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_MATRIC_NUMBER_BOB,"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":131,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + MATRIC_NUMBER_DESC_BOB"},{"lineNumber":132,"author":{"gitID":"yash-chowdhary"},"content":"                + GROUP_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":135,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + MATRIC_NUMBER_DESC_BOB"},{"lineNumber":136,"author":{"gitID":"yash-chowdhary"},"content":"                + GROUP_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":139,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + MATRIC_NUMBER_DESC_BOB"},{"lineNumber":140,"author":{"gitID":"yash-chowdhary"},"content":"                + GROUP_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":143,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_MATRIC_NUMBER_DESC"},{"lineNumber":144,"author":{"gitID":"MuhdNurKamal"},"content":"                + GROUP_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, MatricNumber.MESSAGE_MATRIC_NUMBER_CONSTRAINTS);"},{"lineNumber":145,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":146,"author":{"gitID":"yash-chowdhary"},"content":"        //invalid group"},{"lineNumber":147,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + MATRIC_NUMBER_DESC_BOB"},{"lineNumber":148,"author":{"gitID":"yash-chowdhary"},"content":"                + INVALID_GROUP_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Group.MESSAGE_GROUP_CONSTRAINTS);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":151,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + MATRIC_NUMBER_DESC_BOB"},{"lineNumber":152,"author":{"gitID":"yash-chowdhary"},"content":"                + GROUP_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":155,"author":{"gitID":"MuhdNurKamal"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_MATRIC_NUMBER_DESC"},{"lineNumber":156,"author":{"gitID":"yash-chowdhary"},"content":"                + GROUP_DESC_BOB,"},{"lineNumber":157,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":161,"author":{"gitID":"MuhdNurKamal"},"content":"                + MATRIC_NUMBER_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":33,"yash-chowdhary":23,"-":108}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.address.model.person.MatricNumber;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final String INVALID_MATRIC_NUMBER \u003d \"1234567\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final String VALID_MATRIC_NUMBER \u003d \"A1234567Y\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((Optional\u003cString\u003e) null));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(Optional.of(INVALID_PHONE)));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(VALID_PHONE)));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(phoneWithWhitespace)));"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parseMatricNumber_null_throwsNullPointerException() {"},{"lineNumber":135,"author":{"gitID":"MuhdNurKamal"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMatricNumber((String) null));"},{"lineNumber":136,"author":{"gitID":"MuhdNurKamal"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMatricNumber((Optional\u003cString\u003e) null));"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parseMatricNumber_invalidValue_throwsIllegalValueException() {"},{"lineNumber":141,"author":{"gitID":"MuhdNurKamal"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseMatricNumber(INVALID_MATRIC_NUMBER));"},{"lineNumber":142,"author":{"gitID":"MuhdNurKamal"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil"},{"lineNumber":143,"author":{"gitID":"MuhdNurKamal"},"content":"                .parseMatricNumber(Optional.of(INVALID_MATRIC_NUMBER)));"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parseMatricNumber_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":148,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(ParserUtil.parseMatricNumber(Optional.empty()).isPresent());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parseMatricNumber_validValueWithoutWhitespace_returnsMatricNumber() throws Exception {"},{"lineNumber":153,"author":{"gitID":"MuhdNurKamal"},"content":"        MatricNumber expectedMatricNumber \u003d new MatricNumber(VALID_MATRIC_NUMBER);"},{"lineNumber":154,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(expectedMatricNumber, ParserUtil.parseMatricNumber(VALID_MATRIC_NUMBER));"},{"lineNumber":155,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(Optional.of(expectedMatricNumber), ParserUtil.parseMatricNumber(Optional.of(VALID_MATRIC_NUMBER)));"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":159,"author":{"gitID":"MuhdNurKamal"},"content":"    public void parseMatricNumber_validValueWithWhitespace_returnsTrimmedMatricNumber() throws Exception {"},{"lineNumber":160,"author":{"gitID":"MuhdNurKamal"},"content":"        String matricNumberWithWhitespace \u003d WHITESPACE + VALID_MATRIC_NUMBER + WHITESPACE;"},{"lineNumber":161,"author":{"gitID":"MuhdNurKamal"},"content":"        MatricNumber expectedMatricNumber \u003d new MatricNumber(VALID_MATRIC_NUMBER);"},{"lineNumber":162,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(expectedMatricNumber, ParserUtil.parseMatricNumber(matricNumberWithWhitespace));"},{"lineNumber":163,"author":{"gitID":"MuhdNurKamal"},"content":"        assertEquals(Optional.of(expectedMatricNumber), ParserUtil"},{"lineNumber":164,"author":{"gitID":"MuhdNurKamal"},"content":"                .parseMatricNumber(Optional.of(matricNumberWithWhitespace)));"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((Optional\u003cString\u003e) null));"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    public void parseEmail_invalidValue_throwsIllegalValueException() {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(Optional.of(INVALID_EMAIL)));"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(VALID_EMAIL)));"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(emailWithWhitespace)));"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    public void parseTag_null_throwsNullPointerException() throws Exception {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(null);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(INVALID_TAG);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":22,"-":226}},{"path":"src/test/java/seedu/address/logic/parser/RemoveGroupCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_GROUP_DESC;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NUMBER_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_AMY;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_BOB;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.logic.commands.RemoveGroupCommand;"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"public class RemoveGroupCommandParserTest {"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"    private RemoveGroupCommandParser parser \u003d new RemoveGroupCommandParser();"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    public void parse_fieldPresent_success() {"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseSuccess(parser, GROUP_DESC_BOB, new RemoveGroupCommand(new Group(VALID_GROUP_BOB)));"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseSuccess(parser, GROUP_DESC_AMY, new RemoveGroupCommand(new Group(VALID_GROUP_AMY)));"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"    public void parse_incorrectField_failure() {"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveGroupCommand.MESSAGE_USAGE);"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, NAME_DESC_AMY, expectedMessage);"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, MATRIC_NUMBER_DESC_AMY, expectedMessage);"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"    public void parse_invalidGroupFormat_failure() {"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d Group.MESSAGE_GROUP_CONSTRAINTS;"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, INVALID_GROUP_DESC, Group.MESSAGE_GROUP_CONSTRAINTS);"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, \" \" + PREFIX_GROUP.toString() + \" \", expectedMessage);"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"    public void parse_fieldNotPresent_failure() {"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveGroupCommand.MESSAGE_USAGE);"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"        // blank space"},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, \" \", expectedMessage);"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"        // newline character"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, \"\\n\", expectedMessage);"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"        // group should be preceded by group prefix \u0027g/\u0027"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, VALID_GROUP_AMY, expectedMessage);"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"        assertParseFailure(parser, VALID_GROUP_BOB, expectedMessage);"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":49,"-":9}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withMatricNumber(VALID_MATRIC_NUMBER_BOB).build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":2,"-":56}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String VALID_GROUP_AMY \u003d \"publicity\";"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String VALID_GROUP_BOB \u003d \"logistics\";"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String VALID_MATRIC_NUMBER_AMY \u003d \"A9210701B\";"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String VALID_MATRIC_NUMBER_BOB \u003d \"A8389539B\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friends\";"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String VALID_TAG_UNUSED \u003d \"unused\"; //this tag should not be used when creating a person"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String VALID_TAG_UNUSED_DESC \u003d \" \" + PREFIX_TAG + VALID_TAG_UNUSED;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String MATRIC_NUMBER_DESC_AMY \u003d \" \" + PREFIX_MATRIC_NUMBER + VALID_MATRIC_NUMBER_AMY;"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String MATRIC_NUMBER_DESC_BOB \u003d \" \" + PREFIX_MATRIC_NUMBER + VALID_MATRIC_NUMBER_BOB;"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String GROUP_DESC_AMY \u003d \" \" + PREFIX_GROUP + VALID_GROUP_AMY;"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String GROUP_DESC_BOB \u003d \" \" + PREFIX_GROUP + VALID_GROUP_BOB;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String INVALID_MATRIC_NUMBER_DESC \u003d \" \" + PREFIX_MATRIC_NUMBER; // must follow format"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String INVALID_GROUP \u003d \"public relations\"; // no spaces allowed"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String INVALID_GROUP_DESC \u003d \" \" + PREFIX_GROUP + INVALID_GROUP; // no spaces allowed"},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String INVALID_TAG \u003d \"hubby*\";"},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + INVALID_TAG; // \u0027*\u0027 not allowed in tags"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String NON_EXISTENT_GROUP \u003d \"broadcasting\";"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String NON_EXISTENT_GROUP_DESC \u003d PREFIX_GROUP + NON_EXISTENT_GROUP;"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MANDATORY_GROUP \u003d \"member\";"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MANDATORY_GROUP_DESC \u003d PREFIX_GROUP + MANDATORY_GROUP;"},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":83,"author":{"gitID":"MuhdNurKamal"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withMatricNumber(VALID_MATRIC_NUMBER_AMY)"},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":"                .withGroup(VALID_GROUP_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":86,"author":{"gitID":"MuhdNurKamal"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withMatricNumber(VALID_MATRIC_NUMBER_BOB)"},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":"                .withGroup(VALID_GROUP_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":115,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":8,"amrut-prabhu":5,"yash-chowdhary":14,"-":144}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.exceptions.GroupCannotBeRemovedException;"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":107,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":109,"author":{"gitID":"yash-chowdhary"},"content":"        @Override"},{"lineNumber":110,"author":{"gitID":"yash-chowdhary"},"content":"        public void removeGroup(Group toRemove) throws GroupNotFoundException, GroupCannotBeRemovedException {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":137,"author":{"gitID":"amrut-prabhu"},"content":"        public void deleteTag(Tag tag) throws TagNotFoundException {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":152,"author":{"gitID":"amrut-prabhu"},"content":"        @Override"},{"lineNumber":153,"author":{"gitID":"amrut-prabhu"},"content":"        public void updateFilteredTagList(Predicate\u003cTag\u003e predicate) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":158,"author":{"gitID":"amrut-prabhu"},"content":"        public ObservableList\u003cTag\u003e getFilteredTagList() {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":181,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":8,"yash-chowdhary":7,"-":182}},{"path":"src/test/java/seedu/address/model/group/GroupTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.address.model.group;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"public class GroupTest {"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"    public void isValidGroup() {"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"        // empty group --\u003e returns false"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Group.isValidGroup(\" \"));"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"        // null group --\u003e returns false"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Group.isValidGroup(\"\"));"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"        // string is not alphanumeric --\u003e returns false"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Group.isValidGroup(\"123@#$\"));"},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Group.isValidGroup(\"\u003d-0987\"));"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Group.isValidGroup(\"publicity_main\"));"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"        // string contains space-separated words --\u003e returns false"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Group.isValidGroup(\"public relations\"));"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Group.isValidGroup(\"executive committee\"));"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(Group.isValidGroup(\"logistics member\"));"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"        // valid group names --\u003e returns true"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(Group.isValidGroup(\"logistics\"));"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(Group.isValidGroup(\"publicity\"));"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(Group.isValidGroup(\"marketing\"));"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(Group.isValidGroup(\"operations\"));"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":28,"-":6}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.address.model.person.MatricNumber;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final String INVALID_MATRIC_NUMBER \u003d \"B1234567\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"    private static final String INVALID_GROUP \u003d \" @#\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final String VALID_MATRIC_NUMBER \u003d BENSON.getMatricNumber().toString();"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"    private static final String VALID_GROUP \u003d BENSON.getGroup().toString();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_MATRIC_NUMBER, VALID_GROUP,"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"                        VALID_TAGS);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_MATRIC_NUMBER,"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"                VALID_GROUP, VALID_TAGS);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_MATRIC_NUMBER, VALID_GROUP,"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"                        VALID_TAGS);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_MATRIC_NUMBER, VALID_GROUP,"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"                VALID_TAGS);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":80,"author":{"gitID":"MuhdNurKamal"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_MATRIC_NUMBER, VALID_GROUP,"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"                        VALID_TAGS);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":88,"author":{"gitID":"MuhdNurKamal"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_MATRIC_NUMBER, VALID_GROUP,"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":"                VALID_TAGS);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":97,"author":{"gitID":"MuhdNurKamal"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_MATRIC_NUMBER, VALID_GROUP,"},{"lineNumber":98,"author":{"gitID":"yash-chowdhary"},"content":"                        VALID_TAGS);"},{"lineNumber":99,"author":{"gitID":"MuhdNurKamal"},"content":"        String expectedMessage \u003d MatricNumber.MESSAGE_MATRIC_NUMBER_CONSTRAINTS;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":105,"author":{"gitID":"yash-chowdhary"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"},{"lineNumber":106,"author":{"gitID":"yash-chowdhary"},"content":"                VALID_GROUP, VALID_TAGS);"},{"lineNumber":107,"author":{"gitID":"MuhdNurKamal"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, MatricNumber.class.getSimpleName());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":116,"author":{"gitID":"MuhdNurKamal"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":117,"author":{"gitID":"MuhdNurKamal"},"content":"                        VALID_MATRIC_NUMBER, VALID_GROUP, invalidTags);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":14,"yash-chowdhary":11,"-":96}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"        // Keywords match phone, email and matric number, but does not match name"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":73,"author":{"gitID":"MuhdNurKamal"},"content":"                .withEmail(\"alice@email.com\").withMatricNumber(\"A1152241G\").build()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":2,"-":73}},{"path":"src/test/java/seedu/address/model/person/MatricNumberTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"public class MatricNumberTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new MatricNumber(null));"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":17,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"MuhdNurKamal"},"content":"    public void constructor_invalidMatricNumber_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"        String invalidMatricNumber \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new MatricNumber(invalidMatricNumber));"},{"lineNumber":21,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"    public void isValidMatricNumber() {"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"        // null matric number"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e MatricNumber.isValidMatricNumber(null));"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":28,"author":{"gitID":"MuhdNurKamal"},"content":"        // invalid matric numbers"},{"lineNumber":29,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(MatricNumber.isValidMatricNumber(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(MatricNumber.isValidMatricNumber(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(MatricNumber.isValidMatricNumber(\"A1234567\")); // no ending letter"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(MatricNumber.isValidMatricNumber(\"1234567A\")); // no starting letter"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(MatricNumber.isValidMatricNumber(\"B9873161F\")); // must start with A"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(MatricNumber.isValidMatricNumber(\"C9226443H\"));"},{"lineNumber":35,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(MatricNumber.isValidMatricNumber(\"A98764532L\")); // too many digits"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"        assertFalse(MatricNumber.isValidMatricNumber(\"A987645H\")); // too few digits"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":""},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"        // valid matric numbers"},{"lineNumber":41,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(MatricNumber.isValidMatricNumber(\"A1152241G\"));"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(MatricNumber.isValidMatricNumber(\"A0152640A\"));"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(MatricNumber.isValidMatricNumber(\"A1902205L\"));"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(MatricNumber.isValidMatricNumber(\"a1024509A\"));"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"        assertTrue(MatricNumber.isValidMatricNumber(\"a1122206M\"));"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":35,"-":12}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MANDATORY_GROUP;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NON_EXISTENT_GROUP;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_BOB;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.exceptions.GroupCannotBeRemovedException;"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"    private final AddressBook addressBookWithBobAndAmy \u003d new AddressBookBuilder().withPerson(BOB).withPerson(AMY)"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"            .build();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"    public void removeGroup_nonExistentGroup_unchangedAddressBook() throws Exception {"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"            addressBookWithBobAndAmy.removeGroup(new Group(NON_EXISTENT_GROUP));"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (GroupNotFoundException gnfe) {"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"            AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(BOB).withPerson(AMY).build();"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"            assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":"    public void removeGroup_mandatoryGroup_unchangedAddressBook() throws Exception {"},{"lineNumber":63,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"            addressBookWithBobAndAmy.removeGroup(new Group(MANDATORY_GROUP));"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (GroupCannotBeRemovedException e) {"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"            AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(BOB).withPerson(AMY).build();"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"            assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"    public void removeGroup_atLeastOnePersonInGroup_groupRemoved() throws Exception {"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"        addressBookWithBobAndAmy.removeGroup(new Group(VALID_GROUP_BOB));"},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"        Person bobNotInLogistics \u003d new PersonBuilder(BOB).withGroup().build();"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"        Person amyNotInLogistics \u003d new PersonBuilder(AMY).build();"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(bobNotInLogistics)"},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"                .withPerson(amyNotInLogistics).build();"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":"    public void updatePerson_detailsChanged_personUpdated() throws Exception {"},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"        AddressBook updatedToBob \u003d new AddressBookBuilder().withPerson(AMY).build();"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":"        updatedToBob.updatePerson(AMY, BOB);"},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(BOB).build();"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(expectedAddressBook, updatedToBob);"},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"amrut-prabhu"},"content":"    public void updatePerson_detailsChanged_personsAndTagsListUpdated() throws Exception {"},{"lineNumber":131,"author":{"gitID":"amrut-prabhu"},"content":"        AddressBook addressBookUpdatedToAmy \u003d new AddressBookBuilder().withPerson(BOB).build();"},{"lineNumber":132,"author":{"gitID":"amrut-prabhu"},"content":"        addressBookUpdatedToAmy.updatePerson(BOB, AMY);"},{"lineNumber":133,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":134,"author":{"gitID":"amrut-prabhu"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(AMY).build();"},{"lineNumber":135,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":136,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(expectedAddressBook, addressBookUpdatedToAmy);"},{"lineNumber":137,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":139,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"amrut-prabhu"},"content":"    public void deleteTag_nonExistentTag_addressBookUnchanged() {"},{"lineNumber":141,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":142,"author":{"gitID":"amrut-prabhu"},"content":"            addressBookWithBobAndAmy.deleteTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":143,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (TagNotFoundException tnfe) {"},{"lineNumber":144,"author":{"gitID":"amrut-prabhu"},"content":"            AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(BOB).withPerson(AMY).build();"},{"lineNumber":145,"author":{"gitID":"amrut-prabhu"},"content":"            assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"},{"lineNumber":146,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":149,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":150,"author":{"gitID":"amrut-prabhu"},"content":"    public void deleteTag_tagUsedByMultiplePersons_tagRemoved() throws Exception {"},{"lineNumber":151,"author":{"gitID":"amrut-prabhu"},"content":"        addressBookWithBobAndAmy.deleteTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":152,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":153,"author":{"gitID":"amrut-prabhu"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":154,"author":{"gitID":"amrut-prabhu"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":155,"author":{"gitID":"amrut-prabhu"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(bobWithoutFriendTag)"},{"lineNumber":156,"author":{"gitID":"amrut-prabhu"},"content":"                .withPerson(amyWithoutFriendTag).build();"},{"lineNumber":157,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":158,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"},{"lineNumber":159,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":36,"yash-chowdhary":53,"-":95}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MANDATORY_GROUP;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NON_EXISTENT_GROUP;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_AMY;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.exceptions.GroupCannotBeRemovedException;"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"    public void removeGroup_nonExistentGroup_modelUnchanged() throws Exception {"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"            modelManager.removeGroup(new Group(NON_EXISTENT_GROUP));"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (GroupNotFoundException gnfe) {"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"            assertEquals(new ModelManager(addressBook, userPrefs), modelManager);"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"    public void removeGroup_mandatoryGroup_modelUnchanged() throws Exception {"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":64,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"            modelManager.removeGroup(new Group(MANDATORY_GROUP));"},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (GroupCannotBeRemovedException e) {"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"            assertEquals(new ModelManager(addressBook, userPrefs), modelManager);"},{"lineNumber":68,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"    public void removeGroup_atLeastOnePersonInGroup_groupRemoved() throws Exception {"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"        modelManager.removeGroup(new Group(VALID_GROUP_AMY));"},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"        Person amyNotInPublicity \u003d new PersonBuilder(AMY).withGroup().build();"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"        Person bobNotInPublicity \u003d new PersonBuilder(BOB).build();"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(amyNotInPublicity)"},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"                .withPerson(bobNotInPublicity).build();"},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":84,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(new ModelManager(expectedAddressBook, userPrefs), modelManager);"},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":88,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"amrut-prabhu"},"content":"    public void deleteTag_nonExistentTag_modelUnchanged() throws Exception {"},{"lineNumber":90,"author":{"gitID":"amrut-prabhu"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":94,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":95,"author":{"gitID":"amrut-prabhu"},"content":"            modelManager.deleteTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":96,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (TagNotFoundException tnfe) {"},{"lineNumber":97,"author":{"gitID":"amrut-prabhu"},"content":"            assertEquals(new ModelManager(addressBook, userPrefs), modelManager);"},{"lineNumber":98,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":101,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"amrut-prabhu"},"content":"    public void deleteTag_tagUsedByMultiplePersons_tagRemoved() throws Exception {"},{"lineNumber":103,"author":{"gitID":"amrut-prabhu"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":107,"author":{"gitID":"amrut-prabhu"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":108,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":109,"author":{"gitID":"amrut-prabhu"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":110,"author":{"gitID":"amrut-prabhu"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":111,"author":{"gitID":"amrut-prabhu"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(amyWithoutFriendTag)"},{"lineNumber":112,"author":{"gitID":"amrut-prabhu"},"content":"                .withPerson(bobWithoutFriendTag).build();"},{"lineNumber":113,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":114,"author":{"gitID":"amrut-prabhu"},"content":"        assertEquals(new ModelManager(expectedAddressBook, userPrefs), modelManager);"},{"lineNumber":115,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":28,"yash-chowdhary":45,"-":80}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.address.model.person.MatricNumber;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"        descriptor.setMatricNumber(person.getMatricNumber());"},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"        descriptor.setGroup(person.getGroup());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":"     * Sets the {@code MatricNumber} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":"    public EditPersonDescriptorBuilder withMatricNumber(String matricNumber) {"},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"        descriptor.setMatricNumber(new MatricNumber(matricNumber));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"     * Sets the {@code Group} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"    public EditPersonDescriptorBuilder withGroup(String group) {"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"        descriptor.setGroup(new Group(group));"},{"lineNumber":81,"author":{"gitID":"yash-chowdhary"},"content":"        return this;"},{"lineNumber":82,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":6,"yash-chowdhary":8,"-":82}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":5,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"        sb.append(PREFIX_MATRIC_NUMBER + person.getMatricNumber().value + \" \");"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"        sb.append(PREFIX_GROUP + person.getGroup().groupName + \" \");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":36,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":2,"yash-chowdhary":2,"-":36}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.address.model.person.MatricNumber;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String DEFAULT_MATRIC_NUMBER \u003d \"A1234567H\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String DEFAULT_GROUP \u003d \"exco\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"    private MatricNumber matricNumber;"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"    private Group group;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"        matricNumber \u003d new MatricNumber(DEFAULT_MATRIC_NUMBER);"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"        group \u003d new Group(DEFAULT_GROUP);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"        matricNumber \u003d personToCopy.getMatricNumber();"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"        group \u003d personToCopy.getGroup();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"     * Sets the {@code MatricNumber} of the {@code Person} that we are building."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"MuhdNurKamal"},"content":"    public PersonBuilder withMatricNumber(String matricNumber) {"},{"lineNumber":75,"author":{"gitID":"MuhdNurKamal"},"content":"        this.matricNumber \u003d new MatricNumber(matricNumber);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"yash-chowdhary"},"content":"     * Sets the {@code Group} of the {@code Person} that we are building."},{"lineNumber":97,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"yash-chowdhary"},"content":"    public PersonBuilder withGroup(String group) {"},{"lineNumber":99,"author":{"gitID":"yash-chowdhary"},"content":"        this.group \u003d new Group(group);"},{"lineNumber":100,"author":{"gitID":"yash-chowdhary"},"content":"        return this;"},{"lineNumber":101,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":103,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"yash-chowdhary"},"content":"     * Sets the {@code Group} of the {@code Person} that we are building to the default group - \"member\"."},{"lineNumber":105,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"yash-chowdhary"},"content":"    public PersonBuilder withGroup() {"},{"lineNumber":107,"author":{"gitID":"yash-chowdhary"},"content":"        this.group \u003d new Group(Group.DEFAULT_GROUP);"},{"lineNumber":108,"author":{"gitID":"yash-chowdhary"},"content":"        return this;"},{"lineNumber":109,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":112,"author":{"gitID":"MuhdNurKamal"},"content":"        return new Person(name, phone, email, matricNumber, group, tags);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":10,"yash-chowdhary":20,"-":85}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_AMY;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_BOB;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_AMY;"},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":" * A utility class containing a list of {@code Person} objects"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":" * to be used in tests."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":31,"author":{"gitID":"MuhdNurKamal"},"content":"            .withEmail(\"alice@example.com\")"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"            .withMatricNumber(\"A9210701B\")"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"            .withGroup(\"logistics\")"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"            .withEmail(\"johnd@example.com\")"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"            .withPhone(\"98765432\")"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"            .withMatricNumber(\"A8389539B\")"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"            .withGroup(\"pr\")"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":42,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\")"},{"lineNumber":43,"author":{"gitID":"MuhdNurKamal"},"content":"            .withPhone(\"95352563\")"},{"lineNumber":44,"author":{"gitID":"MuhdNurKamal"},"content":"            .withEmail(\"heinz@example.com\")"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"            .withMatricNumber(\"A6076201A\")"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"            .withGroup(\"marketing\").build();"},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\")"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"            .withPhone(\"87652533\")"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"            .withEmail(\"cornelia@example.com\")"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"            .withMatricNumber(\"A2719059H\")"},{"lineNumber":51,"author":{"gitID":"MuhdNurKamal"},"content":"            .withGroup(\"publicity\").build();"},{"lineNumber":52,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\")"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"            .withPhone(\"9482224\")"},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"            .withEmail(\"werner@example.com\")"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"            .withMatricNumber(\"A1932279G\")"},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"            .withGroup(\"marketing\").build();"},{"lineNumber":57,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\")"},{"lineNumber":58,"author":{"gitID":"MuhdNurKamal"},"content":"            .withPhone(\"9482427\")"},{"lineNumber":59,"author":{"gitID":"MuhdNurKamal"},"content":"            .withEmail(\"lydia@example.com\")"},{"lineNumber":60,"author":{"gitID":"MuhdNurKamal"},"content":"            .withMatricNumber(\"A9662042H\")"},{"lineNumber":61,"author":{"gitID":"MuhdNurKamal"},"content":"            .withGroup(\"operations\").build();"},{"lineNumber":62,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\")"},{"lineNumber":63,"author":{"gitID":"MuhdNurKamal"},"content":"            .withPhone(\"9482442\")"},{"lineNumber":64,"author":{"gitID":"MuhdNurKamal"},"content":"            .withEmail(\"anna@example.com\")"},{"lineNumber":65,"author":{"gitID":"MuhdNurKamal"},"content":"            .withMatricNumber(\"A2836750A\")"},{"lineNumber":66,"author":{"gitID":"MuhdNurKamal"},"content":"            .withGroup(\"legal\").build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":69,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\")"},{"lineNumber":70,"author":{"gitID":"MuhdNurKamal"},"content":"            .withPhone(\"8482424\")"},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":"            .withEmail(\"stefan@example.com\")"},{"lineNumber":72,"author":{"gitID":"MuhdNurKamal"},"content":"            .withMatricNumber(\"a9123096J\")"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":"            .withGroup(\"publicity\")"},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"            .build();"},{"lineNumber":75,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\")"},{"lineNumber":76,"author":{"gitID":"MuhdNurKamal"},"content":"            .withPhone(\"8482131\")"},{"lineNumber":77,"author":{"gitID":"MuhdNurKamal"},"content":"            .withEmail(\"hans@example.com\")"},{"lineNumber":78,"author":{"gitID":"MuhdNurKamal"},"content":"            .withMatricNumber(\"a9239483F\")"},{"lineNumber":79,"author":{"gitID":"yash-chowdhary"},"content":"            .withGroup(\"logistics\")"},{"lineNumber":80,"author":{"gitID":"yash-chowdhary"},"content":"            .build();"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":84,"author":{"gitID":"MuhdNurKamal"},"content":"            .withEmail(VALID_EMAIL_AMY).withMatricNumber(VALID_MATRIC_NUMBER_AMY)"},{"lineNumber":85,"author":{"gitID":"yash-chowdhary"},"content":"            .withGroup(VALID_GROUP_AMY)"},{"lineNumber":86,"author":{"gitID":"yash-chowdhary"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":88,"author":{"gitID":"MuhdNurKamal"},"content":"            .withEmail(VALID_EMAIL_BOB).withMatricNumber(VALID_MATRIC_NUMBER_BOB)"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":"            .withGroup(VALID_GROUP_BOB)"},{"lineNumber":90,"author":{"gitID":"MuhdNurKamal"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":45,"yash-chowdhary":11,"-":59}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"    public static final Index INDEX_FIRST_TAG \u003d Index.fromOneBased(1);"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"    public static final Index INDEX_SECOND_TAG \u003d Index.fromOneBased(2);"},{"lineNumber":15,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":3,"-":12}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"MuhdNurKamal"},"content":"    private static final String MATRIC_NUMBER_FIELD_ID \u003d \"#matricNumber\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":23,"author":{"gitID":"MuhdNurKamal"},"content":"    private final Label matricNumberLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"        this.matricNumberLabel \u003d getChildNode(MATRIC_NUMBER_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"    public String getMatricNumber() {"},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"        return matricNumberLabel.getText();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":5,"-":66}},{"path":"src/main/java/seedu/address/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/club_connect_256.png\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        //Set the application icon."},{"lineNumber":52,"author":{"gitID":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        mainWindow.releaseResources();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                event.exception);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":119}},{"path":"src/test/java/seedu/address/logic/commands/RemoveGroupCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MANDATORY_GROUP;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NON_EXISTENT_GROUP;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_AMY;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"public class RemoveGroupCommandTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"    public void execute_validGroup_success() throws Exception {"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"        Group groupToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()).getGroup();"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"        RemoveGroupCommand removeGroupCommand \u003d prepareCommand(ALICE.getGroup());"},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"        String expectedMessage \u003d String.format(RemoveGroupCommand.MESSAGE_SUCCESS, groupToDelete);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.removeGroup(groupToDelete);"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandSuccess(removeGroupCommand, model, expectedMessage, expectedModel);"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"    public void execute_nonExistentGroup_throwsCommandException() {"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"        Group nonExistentGroup \u003d new Group(NON_EXISTENT_GROUP);"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"        RemoveGroupCommand removeGroupCommand \u003d prepareCommand(nonExistentGroup);"},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":49,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(removeGroupCommand, model, RemoveGroupCommand.MESSAGE_NON_EXISTENT_GROUP);"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"    public void execute_mandatoryGroup_throwsCommandException() {"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"        Group mandatoryGroup \u003d new Group(MANDATORY_GROUP);"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"        RemoveGroupCommand removeGroupCommand \u003d prepareCommand(mandatoryGroup);"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(removeGroupCommand, model, RemoveGroupCommand.MESSAGE_MANDATORY_GROUP);"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"    public void executeUndoRedo_validGroup_success() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":66,"author":{"gitID":"yash-chowdhary"},"content":"        Group groupToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()).getGroup();"},{"lineNumber":67,"author":{"gitID":"yash-chowdhary"},"content":"        RemoveGroupCommand removeGroupCommand \u003d prepareCommand(ALICE.getGroup());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"yash-chowdhary"},"content":"        // remove -\u003e group removed"},{"lineNumber":71,"author":{"gitID":"yash-chowdhary"},"content":"        removeGroupCommand.execute();"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"        undoRedoStack.push(removeGroupCommand);"},{"lineNumber":73,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"        // undo -\u003e reverts Club book back to previous state"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"yash-chowdhary"},"content":"        // redo -\u003e same group deleted again"},{"lineNumber":78,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.removeGroup(groupToDelete);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"yash-chowdhary"},"content":"    public void executeUndoRedo_nonExistentGroup_failure() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":87,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":88,"author":{"gitID":"yash-chowdhary"},"content":"        Group nonExistentGroup \u003d new Group(NON_EXISTENT_GROUP);"},{"lineNumber":89,"author":{"gitID":"yash-chowdhary"},"content":"        RemoveGroupCommand removeGroupCommand \u003d prepareCommand(nonExistentGroup);"},{"lineNumber":90,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":91,"author":{"gitID":"yash-chowdhary"},"content":"        // execution failed -\u003e removeGroupCommand not pushed onto undoRedoStack"},{"lineNumber":92,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(removeGroupCommand, model, RemoveGroupCommand.MESSAGE_NON_EXISTENT_GROUP);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"yash-chowdhary"},"content":"    public void executeUndoRedo_mandatoryGroup_failure() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":104,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":105,"author":{"gitID":"yash-chowdhary"},"content":"        Group mandatoryGroup \u003d new Group(MANDATORY_GROUP);"},{"lineNumber":106,"author":{"gitID":"yash-chowdhary"},"content":"        RemoveGroupCommand removeGroupCommand \u003d prepareCommand(mandatoryGroup);"},{"lineNumber":107,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":108,"author":{"gitID":"yash-chowdhary"},"content":"        // execution failed -\u003e removeGroupCommand not pushed onto undoRedoStack"},{"lineNumber":109,"author":{"gitID":"yash-chowdhary"},"content":"        assertCommandFailure(removeGroupCommand, model, RemoveGroupCommand.MESSAGE_MANDATORY_GROUP);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"yash-chowdhary"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"yash-chowdhary"},"content":"    public void executeUndoRedo_validGroup_sameGroupDeleted() throws Exception {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":121,"author":{"gitID":"yash-chowdhary"},"content":"        RemoveGroupCommand removeGroupCommand \u003d prepareCommand(ALICE.getGroup());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":123,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":124,"author":{"gitID":"yash-chowdhary"},"content":"        Group groupToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()).getGroup();"},{"lineNumber":125,"author":{"gitID":"yash-chowdhary"},"content":"        // remove -\u003e removes group"},{"lineNumber":126,"author":{"gitID":"yash-chowdhary"},"content":"        removeGroupCommand.execute();"},{"lineNumber":127,"author":{"gitID":"yash-chowdhary"},"content":"        undoRedoStack.push(removeGroupCommand);"},{"lineNumber":128,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":129,"author":{"gitID":"yash-chowdhary"},"content":"        // undo -\u003e reverts Club book back to previous state"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"yash-chowdhary"},"content":"        expectedModel.removeGroup(groupToDelete);"},{"lineNumber":133,"author":{"gitID":"yash-chowdhary"},"content":"        assertEquals(groupToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()).getGroup());"},{"lineNumber":134,"author":{"gitID":"yash-chowdhary"},"content":"        // redo -\u003e removes the same group"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"yash-chowdhary"},"content":"    public void equals() {"},{"lineNumber":140,"author":{"gitID":"yash-chowdhary"},"content":"        RemoveGroupCommand firstCommand \u003d prepareCommand(new Group(VALID_GROUP_AMY));"},{"lineNumber":141,"author":{"gitID":"yash-chowdhary"},"content":"        RemoveGroupCommand secondCommand \u003d prepareCommand(new Group(VALID_GROUP_BOB));"},{"lineNumber":142,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":143,"author":{"gitID":"yash-chowdhary"},"content":"        // same object -\u003e returns true"},{"lineNumber":144,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstCommand.equals(firstCommand));"},{"lineNumber":145,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(secondCommand.equals(secondCommand));"},{"lineNumber":146,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":147,"author":{"gitID":"yash-chowdhary"},"content":"        // same values -\u003e return true"},{"lineNumber":148,"author":{"gitID":"yash-chowdhary"},"content":"        RemoveGroupCommand firstCommandCopy \u003d prepareCommand(new Group(VALID_GROUP_AMY));"},{"lineNumber":149,"author":{"gitID":"yash-chowdhary"},"content":"        assertTrue(firstCommand.equals(firstCommandCopy));"},{"lineNumber":150,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":151,"author":{"gitID":"yash-chowdhary"},"content":"        // different types -\u003e returns false"},{"lineNumber":152,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstCommand.equals(true));"},{"lineNumber":153,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":154,"author":{"gitID":"yash-chowdhary"},"content":"        // null -\u003e returns false"},{"lineNumber":155,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(secondCommand.equals(null));"},{"lineNumber":156,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":157,"author":{"gitID":"yash-chowdhary"},"content":"        // different group -\u003e returns false"},{"lineNumber":158,"author":{"gitID":"yash-chowdhary"},"content":"        assertFalse(firstCommand.equals(secondCommand));"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"yash-chowdhary"},"content":"    private RemoveGroupCommand prepareCommand(Group group) {"},{"lineNumber":165,"author":{"gitID":"yash-chowdhary"},"content":"        RemoveGroupCommand removeGroupCommand \u003d new RemoveGroupCommand(group);"},{"lineNumber":166,"author":{"gitID":"yash-chowdhary"},"content":"        removeGroupCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":167,"author":{"gitID":"yash-chowdhary"},"content":"        return removeGroupCommand;"},{"lineNumber":168,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":101,"-":68}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"    private Label matricNumber;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":48,"author":{"gitID":"MuhdNurKamal"},"content":"        matricNumber.setText(person.getMatricNumber().value);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":2,"-":68}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":"    private String appTitle \u003d \"Club Connect\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":71}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":19,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.address.model.person.MatricNumber;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":38,"author":{"gitID":"MuhdNurKamal"},"content":"                        PREFIX_MATRIC_NUMBER, PREFIX_GROUP, PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"MuhdNurKamal"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_MATRIC_NUMBER, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":49,"author":{"gitID":"MuhdNurKamal"},"content":"            MatricNumber matricNumber \u003d ParserUtil.parseMatricNumber(argMultimap.getValue(PREFIX_MATRIC_NUMBER)).get();"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"            Group group \u003d ParserUtil.parseGroup(argMultimap.getValue(PREFIX_GROUP))"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"                    .orElse(new Group(Group.DEFAULT_GROUP));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"            Person person \u003d new Person(name, phone, email, matricNumber, group, tagList);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":7,"yash-chowdhary":4,"-":59}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.address.logic.commands.DeleteTagCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.logic.commands.RemoveGroupCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"yash-chowdhary"},"content":"        case RemoveGroupCommand.COMMAND_WORD:"},{"lineNumber":75,"author":{"gitID":"yash-chowdhary"},"content":"            return new RemoveGroupCommandParser().parse(arguments);"},{"lineNumber":76,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"amrut-prabhu"},"content":"        case DeleteTagCommand.COMMAND_WORD:"},{"lineNumber":93,"author":{"gitID":"amrut-prabhu"},"content":"            return new DeleteTagCommandParser().parse(arguments);"},{"lineNumber":94,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":4,"yash-chowdhary":4,"-":92}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final Prefix PREFIX_MATRIC_NUMBER \u003d new Prefix(\"m/\");"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"    public static final Prefix PREFIX_GROUP \u003d new Prefix(\"g/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":1,"yash-chowdhary":1,"-":14}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.address.model.person.MatricNumber;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":22,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"MuhdNurKamal"},"content":"     * Parses a {@code String matricNumber} into an {@code MatricNumber}."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"MuhdNurKamal"},"content":"     * @throws IllegalValueException if the given {@code matricNumber} is invalid."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"MuhdNurKamal"},"content":"    public static MatricNumber parseMatricNumber(String matricNumber) throws IllegalValueException {"},{"lineNumber":102,"author":{"gitID":"MuhdNurKamal"},"content":"        requireNonNull(matricNumber);"},{"lineNumber":103,"author":{"gitID":"MuhdNurKamal"},"content":"        String trimmedMatricNumber \u003d matricNumber.trim();"},{"lineNumber":104,"author":{"gitID":"MuhdNurKamal"},"content":"        if (!MatricNumber.isValidMatricNumber(trimmedMatricNumber)) {"},{"lineNumber":105,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new IllegalValueException(MatricNumber.MESSAGE_MATRIC_NUMBER_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"MuhdNurKamal"},"content":"        return new MatricNumber(trimmedMatricNumber);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"MuhdNurKamal"},"content":"     * Parses a {@code Optional\u003cString\u003e matricNumber} into an {@code Optional\u003cMatricNumber\u003e}"},{"lineNumber":112,"author":{"gitID":"MuhdNurKamal"},"content":"     * if {@code matricNumber} is present."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"MuhdNurKamal"},"content":"    public static Optional\u003cMatricNumber\u003e parseMatricNumber(Optional\u003cString\u003e matricNumber) throws IllegalValueException {"},{"lineNumber":116,"author":{"gitID":"MuhdNurKamal"},"content":"        requireNonNull(matricNumber);"},{"lineNumber":117,"author":{"gitID":"MuhdNurKamal"},"content":"        return matricNumber.isPresent() ? Optional.of(parseMatricNumber(matricNumber.get())) : Optional.empty();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"yash-chowdhary"},"content":"     * Parses a {@code String group} into a {@code Group}."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":148,"author":{"gitID":"yash-chowdhary"},"content":"     * @throws IllegalValueException if the given {@code group} is invalid."},{"lineNumber":149,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"yash-chowdhary"},"content":"    public static Group parseGroup(String group) throws IllegalValueException {"},{"lineNumber":151,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(group);"},{"lineNumber":152,"author":{"gitID":"yash-chowdhary"},"content":"        String trimmedGroup \u003d group.trim();"},{"lineNumber":153,"author":{"gitID":"yash-chowdhary"},"content":"        if (!Group.isValidGroup(trimmedGroup)) {"},{"lineNumber":154,"author":{"gitID":"yash-chowdhary"},"content":"            throw new IllegalValueException(Group.MESSAGE_GROUP_CONSTRAINTS);"},{"lineNumber":155,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"yash-chowdhary"},"content":"        return new Group(trimmedGroup);"},{"lineNumber":157,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"yash-chowdhary"},"content":"     * Parses a {@code Optional\u003cString\u003e group} into a {@code Optional\u003cGroup\u003e} if {@code group} is present."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"yash-chowdhary"},"content":"    public static Optional\u003cGroup\u003e parseGroup(Optional\u003cString\u003e group) throws  IllegalValueException {"},{"lineNumber":163,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(group);"},{"lineNumber":164,"author":{"gitID":"yash-chowdhary"},"content":"        return group.isPresent() ? Optional.of(parseGroup(group.get())) : Optional.empty();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":14,"yash-chowdhary":18,"-":161}},{"path":"src/test/java/seedu/address/logic/commands/DeleteTagCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.address.logic.commands.DeleteTagCommand.MESSAGE_DELETE_TAG_SUCCESS;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.address.logic.commands.DeleteTagCommand.MESSAGE_NON_EXISTENT_TAG;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TAG;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TAG;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":" * {@code DeleteTagCommand}."},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":" */"},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"public class DeleteTagCommandTest {"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"    public void execute_validTagUnfilteredList_success() throws Exception {"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"        Tag tagToRemove \u003d model.getFilteredTagList().get(INDEX_FIRST_TAG.getZeroBased());"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"        DeleteTagCommand deleteTagCommand \u003d prepareCommand(tagToRemove);"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"        String expectedMessage \u003d String.format(MESSAGE_DELETE_TAG_SUCCESS, tagToRemove);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"        expectedModel.deleteTag(tagToRemove);"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandSuccess(deleteTagCommand, model, expectedMessage, expectedModel);"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":51,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"amrut-prabhu"},"content":"    public void execute_invalidTagUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"        Tag nonExistentTag \u003d new Tag(VALID_TAG_UNUSED);"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"        DeleteTagCommand deleteTagCommand \u003d prepareCommand(nonExistentTag);"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(deleteTagCommand, model, MESSAGE_NON_EXISTENT_TAG);"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"    public void execute_validTagFilteredList_success() throws Exception {"},{"lineNumber":61,"author":{"gitID":"amrut-prabhu"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":62,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"        Tag tagToRemove \u003d model.getFilteredTagList().get(INDEX_FIRST_TAG.getZeroBased());"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":"        DeleteTagCommand deleteTagCommand \u003d prepareCommand(tagToRemove);"},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"        String expectedMessage \u003d String.format(MESSAGE_DELETE_TAG_SUCCESS, tagToRemove);"},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":70,"author":{"gitID":"amrut-prabhu"},"content":"        expectedModel.deleteTag(tagToRemove);"},{"lineNumber":71,"author":{"gitID":"amrut-prabhu"},"content":"        showNoTag(expectedModel);"},{"lineNumber":72,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":73,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandSuccess(deleteTagCommand, model, expectedMessage, expectedModel);"},{"lineNumber":74,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":76,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"amrut-prabhu"},"content":"    public void execute_invalidTagFilteredList_throwsCommandException() {"},{"lineNumber":78,"author":{"gitID":"amrut-prabhu"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":79,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":80,"author":{"gitID":"amrut-prabhu"},"content":"        Tag nonExistentTag \u003d new Tag(VALID_TAG_UNUSED);"},{"lineNumber":81,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":82,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(model.getAddressBook().getTagList().contains(nonExistentTag));"},{"lineNumber":83,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":84,"author":{"gitID":"amrut-prabhu"},"content":"        DeleteTagCommand deleteTagCommand \u003d prepareCommand(nonExistentTag);"},{"lineNumber":85,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":86,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(deleteTagCommand, model, MESSAGE_NON_EXISTENT_TAG);"},{"lineNumber":87,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":89,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"amrut-prabhu"},"content":"    public void executeUndoRedo_validTagUnfilteredList_success() throws Exception {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":94,"author":{"gitID":"amrut-prabhu"},"content":"        Tag tagToRemove \u003d model.getFilteredTagList().get(INDEX_FIRST_TAG.getZeroBased());"},{"lineNumber":95,"author":{"gitID":"amrut-prabhu"},"content":"        DeleteTagCommand deleteTagCommand \u003d prepareCommand(tagToRemove);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"amrut-prabhu"},"content":"        // delete -\u003e first tag removed"},{"lineNumber":99,"author":{"gitID":"amrut-prabhu"},"content":"        deleteTagCommand.execute();"},{"lineNumber":100,"author":{"gitID":"amrut-prabhu"},"content":"        undoRedoStack.push(deleteTagCommand);"},{"lineNumber":101,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":102,"author":{"gitID":"amrut-prabhu"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered tag list to show all tags"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"amrut-prabhu"},"content":"        // redo -\u003e same first tag removed again"},{"lineNumber":106,"author":{"gitID":"amrut-prabhu"},"content":"        expectedModel.deleteTag(tagToRemove);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"amrut-prabhu"},"content":"    public void executeUndoRedo_invalidTagUnfilteredList_failure() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":115,"author":{"gitID":"amrut-prabhu"},"content":"        Tag nonExistentTag \u003d new Tag(VALID_TAG_UNUSED);"},{"lineNumber":116,"author":{"gitID":"amrut-prabhu"},"content":"        DeleteTagCommand deleteTagCommand \u003d prepareCommand(nonExistentTag);"},{"lineNumber":117,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":118,"author":{"gitID":"amrut-prabhu"},"content":"        // execution failed -\u003e deleteTagCommand not pushed into undoRedoStack"},{"lineNumber":119,"author":{"gitID":"amrut-prabhu"},"content":"        assertCommandFailure(deleteTagCommand, model, MESSAGE_NON_EXISTENT_TAG);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"amrut-prabhu"},"content":"     * 1. Removes a {@code Tag} from a filtered list."},{"lineNumber":128,"author":{"gitID":"amrut-prabhu"},"content":"     * 2. Undo the removal."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":131,"author":{"gitID":"amrut-prabhu"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} removes the tag object regardless of indexing."},{"lineNumber":132,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"amrut-prabhu"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"amrut-prabhu"},"content":"    public void executeUndoRedo_validTagFilteredList_samePersonDeleted() throws Exception {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":138,"author":{"gitID":"amrut-prabhu"},"content":"        Tag tagToRemove \u003d model.getFilteredTagList().get(INDEX_FIRST_TAG.getZeroBased());"},{"lineNumber":139,"author":{"gitID":"amrut-prabhu"},"content":"        DeleteTagCommand deleteTagCommand \u003d prepareCommand(tagToRemove);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":143,"author":{"gitID":"amrut-prabhu"},"content":"        // remove tag -\u003e removes first tag in unfiltered tag list / filtered tag list"},{"lineNumber":144,"author":{"gitID":"amrut-prabhu"},"content":"        deleteTagCommand.execute();"},{"lineNumber":145,"author":{"gitID":"amrut-prabhu"},"content":"        undoRedoStack.push(deleteTagCommand);"},{"lineNumber":146,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":147,"author":{"gitID":"amrut-prabhu"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered tag list to show all tags"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"amrut-prabhu"},"content":"        expectedModel.deleteTag(tagToRemove);"},{"lineNumber":151,"author":{"gitID":"amrut-prabhu"},"content":"        // redo -\u003e removes same tag in unfiltered tag list"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":157,"author":{"gitID":"amrut-prabhu"},"content":"        DeleteTagCommand removeFirstTagCommand \u003d prepareCommand(model.getFilteredTagList()"},{"lineNumber":158,"author":{"gitID":"amrut-prabhu"},"content":"                .get(INDEX_FIRST_TAG.getZeroBased()));"},{"lineNumber":159,"author":{"gitID":"amrut-prabhu"},"content":"        DeleteTagCommand removeSecondTagCommand \u003d prepareCommand(model.getFilteredTagList()"},{"lineNumber":160,"author":{"gitID":"amrut-prabhu"},"content":"                .get(INDEX_SECOND_TAG.getZeroBased()));"},{"lineNumber":161,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":162,"author":{"gitID":"amrut-prabhu"},"content":"        // same object -\u003e returns true"},{"lineNumber":163,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(removeFirstTagCommand.equals(removeFirstTagCommand));"},{"lineNumber":164,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":165,"author":{"gitID":"amrut-prabhu"},"content":"        // same values -\u003e returns true"},{"lineNumber":166,"author":{"gitID":"amrut-prabhu"},"content":"        DeleteTagCommand removeFirstTagCommandCopy \u003d prepareCommand(model.getFilteredTagList()"},{"lineNumber":167,"author":{"gitID":"amrut-prabhu"},"content":"                .get(INDEX_FIRST_TAG.getZeroBased()));"},{"lineNumber":168,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(removeFirstTagCommand.equals(removeFirstTagCommandCopy));"},{"lineNumber":169,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":170,"author":{"gitID":"amrut-prabhu"},"content":"        // different types -\u003e returns false"},{"lineNumber":171,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(removeFirstTagCommand.equals(1));"},{"lineNumber":172,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":173,"author":{"gitID":"amrut-prabhu"},"content":"        // null -\u003e returns false"},{"lineNumber":174,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(removeFirstTagCommand.equals(null));"},{"lineNumber":175,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":176,"author":{"gitID":"amrut-prabhu"},"content":"        // different person -\u003e returns fal"},{"lineNumber":177,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":178,"author":{"gitID":"amrut-prabhu"},"content":"        // se"},{"lineNumber":179,"author":{"gitID":"amrut-prabhu"},"content":"        assertFalse(removeFirstTagCommand.equals(removeSecondTagCommand));"},{"lineNumber":180,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":182,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns a {@code DeleteTagCommand} with the parameter {@code tag}."},{"lineNumber":184,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"amrut-prabhu"},"content":"    private DeleteTagCommand prepareCommand(Tag tag) {"},{"lineNumber":186,"author":{"gitID":"amrut-prabhu"},"content":"        DeleteTagCommand deleteTagCommand \u003d new DeleteTagCommand(tag);"},{"lineNumber":187,"author":{"gitID":"amrut-prabhu"},"content":"        deleteTagCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":188,"author":{"gitID":"amrut-prabhu"},"content":"        return deleteTagCommand;"},{"lineNumber":189,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":191,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"amrut-prabhu"},"content":"     * Updates {@code model}\u0027s filtered list to show no tags."},{"lineNumber":193,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"amrut-prabhu"},"content":"    private void showNoTag(Model model) {"},{"lineNumber":195,"author":{"gitID":"amrut-prabhu"},"content":"        model.updateFilteredTagList(p -\u003e false);"},{"lineNumber":196,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":197,"author":{"gitID":"amrut-prabhu"},"content":"        assertTrue(model.getFilteredTagList().isEmpty());"},{"lineNumber":198,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":200,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":136,"-":64}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_MATRIC_NUMBER,"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"                        PREFIX_GROUP, PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":53,"author":{"gitID":"MuhdNurKamal"},"content":"            ParserUtil.parseMatricNumber(argMultimap.getValue(PREFIX_MATRIC_NUMBER))"},{"lineNumber":54,"author":{"gitID":"MuhdNurKamal"},"content":"                    .ifPresent(editPersonDescriptor::setMatricNumber);"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"            ParserUtil.parseGroup(argMultimap.getValue(PREFIX_GROUP)).ifPresent(editPersonDescriptor::setGroup);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":4,"yash-chowdhary":3,"-":76}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"            + PREFIX_MATRIC_NUMBER + \"MATRIC NUMBER \""},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"            + \"[\" + PREFIX_GROUP + \"GROUP] \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"            + PREFIX_MATRIC_NUMBER + \"A0123456H \""},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_GROUP + \"logistics \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":3,"yash-chowdhary":3,"-":64}},{"path":"src/main/java/seedu/address/logic/parser/DeleteTagCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import static seedu.address.model.tag.Tag.MESSAGE_TAG_CONSTRAINTS;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.address.logic.commands.DeleteTagCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":" * Parses input arguments and creates a new DeleteTagCommand object"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":" */"},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"public class DeleteTagCommandParser implements Parser\u003cDeleteTagCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":19,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteTagCommand"},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"     * and returns an DeleteTagCommand object for execution."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"    public DeleteTagCommand parse(String args) throws ParseException {"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"        ArgumentMultimap argumentMultimap \u003d"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_TAG);"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":"        if (!arePrefixesPresent(argumentMultimap, PREFIX_TAG)"},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"                || !argumentMultimap.getPreamble().isEmpty()) {"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTagCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"            Tag tag \u003d ParserUtil.parseTag(argumentMultimap.getValue(PREFIX_TAG).get());"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"            return new DeleteTagCommand(tag);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"                    String.format(MESSAGE_TAG_CONSTRAINTS, DeleteTagCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns true if none of the prefixes contains empty values in the given"},{"lineNumber":44,"author":{"gitID":"amrut-prabhu"},"content":"     * {@code ArgumentMultimap}"},{"lineNumber":45,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":35,"-":14}},{"path":"src/main/java/seedu/address/logic/parser/RemoveGroupCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.logic.commands.RemoveGroupCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":" * Parses input arguments and creates a new RemoveGroupCommand object"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"public class RemoveGroupCommandParser implements Parser\u003cRemoveGroupCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"    public RemoveGroupCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"        ArgumentMultimap argumentMultimap \u003d"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_GROUP);"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"        if (!arePrefixesPresent(argumentMultimap, PREFIX_GROUP)"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"                || !argumentMultimap.getPreamble().isEmpty()) {"},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveGroupCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"            Group group \u003d ParserUtil.parseGroup(argumentMultimap.getValue(PREFIX_GROUP).get());"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":"            return new RemoveGroupCommand(group);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if none of the prefixes contains empty values in the given"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"     * {@code ArgumentMultimap}"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":28,"-":19}},{"path":"src/main/java/seedu/address/logic/commands/RemoveGroupCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.exceptions.GroupCannotBeRemovedException;"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":" * Removes a group from the Club Book"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"public class RemoveGroupCommand extends UndoableCommand {"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String COMMAND_WORD \u003d \"removegroup\";"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes a Group from the Club Book. \""},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"            + \"Parameters: \""},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"            + PREFIX_GROUP + \"GROUP\";"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Group deleted from Club Book: %1$s\";"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_NON_EXISTENT_GROUP \u003d \"This group does not exist in the Club Book\";"},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_MANDATORY_GROUP \u003d \"This group cannot be deleted as it is a mandatory group.\";"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"    private final Group toRemove;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"    public RemoveGroupCommand(Group group) {"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(group);"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"        toRemove \u003d group;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"            model.removeGroup(toRemove);"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toRemove));"},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (GroupNotFoundException gnfe) {"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"            throw new CommandException(MESSAGE_NON_EXISTENT_GROUP);"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (GroupCannotBeRemovedException gcbre) {"},{"lineNumber":45,"author":{"gitID":"yash-chowdhary"},"content":"            throw new CommandException(MESSAGE_MANDATORY_GROUP);"},{"lineNumber":46,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":"                || (other instanceof RemoveGroupCommand // instanceof handles nulls"},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 toRemove.equals(((RemoveGroupCommand) other).toRemove));"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":37,"-":19}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":6,"author":{"gitID":"MuhdNurKamal"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.address.model.person.MatricNumber;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":47,"author":{"gitID":"MuhdNurKamal"},"content":"            + \"[\" + PREFIX_MATRIC_NUMBER + \"MATRIC NUMBER] \""},{"lineNumber":48,"author":{"gitID":"yash-chowdhary"},"content":"            + \"[\" + PREFIX_GROUP + \"GROUP] \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":111,"author":{"gitID":"MuhdNurKamal"},"content":"        MatricNumber updatedMatricNumber \u003d editPersonDescriptor.getMatricNumber()"},{"lineNumber":112,"author":{"gitID":"MuhdNurKamal"},"content":"                .orElse(personToEdit.getMatricNumber());"},{"lineNumber":113,"author":{"gitID":"yash-chowdhary"},"content":"        Group updatedGroup \u003d editPersonDescriptor.getGroup().orElse(personToEdit.getGroup());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"MuhdNurKamal"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedMatricNumber, updatedGroup, updatedTags);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":146,"author":{"gitID":"MuhdNurKamal"},"content":"        private MatricNumber matricNumber;"},{"lineNumber":147,"author":{"gitID":"yash-chowdhary"},"content":"        private Group group;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":154,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":155,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":160,"author":{"gitID":"MuhdNurKamal"},"content":"            setMatricNumber(toCopy.matricNumber);"},{"lineNumber":161,"author":{"gitID":"yash-chowdhary"},"content":"            setGroup(toCopy.group);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":167,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":169,"author":{"gitID":"MuhdNurKamal"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email,"},{"lineNumber":170,"author":{"gitID":"MuhdNurKamal"},"content":"                    this.matricNumber, this.group, this.tags);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"MuhdNurKamal"},"content":"        public void setMatricNumber(MatricNumber matricNumber) {"},{"lineNumber":198,"author":{"gitID":"MuhdNurKamal"},"content":"            this.matricNumber \u003d matricNumber;"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"MuhdNurKamal"},"content":"        public Optional\u003cMatricNumber\u003e getMatricNumber() {"},{"lineNumber":202,"author":{"gitID":"MuhdNurKamal"},"content":"            return Optional.ofNullable(matricNumber);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"yash-chowdhary"},"content":"        public Optional\u003cGroup\u003e getGroup() {"},{"lineNumber":206,"author":{"gitID":"yash-chowdhary"},"content":"            return Optional.ofNullable(group);"},{"lineNumber":207,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":209,"author":{"gitID":"yash-chowdhary"},"content":"        public void setGroup(Group group) {"},{"lineNumber":210,"author":{"gitID":"yash-chowdhary"},"content":"            this.group \u003d group;"},{"lineNumber":211,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":214,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":215,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":216,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":222,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":223,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":224,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":225,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":235,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":238,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":240,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":243,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":246,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":247,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":248,"author":{"gitID":"MuhdNurKamal"},"content":"                    \u0026\u0026 getMatricNumber().equals(e.getMatricNumber())"},{"lineNumber":249,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":15,"yash-chowdhary":14,"-":223}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.address.model.person.MatricNumber;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"    private String matricNumber;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"    @XmlElement"},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"    private String group;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"MuhdNurKamal"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String matricNumber, String group,"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"                            List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"        this.matricNumber \u003d matricNumber;"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"        this.group \u003d group;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":71,"author":{"gitID":"MuhdNurKamal"},"content":"        matricNumber \u003d source.getMatricNumber().value;"},{"lineNumber":72,"author":{"gitID":"yash-chowdhary"},"content":"        group \u003d source.getGroup().groupName;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"MuhdNurKamal"},"content":"        if (this.matricNumber \u003d\u003d null) {"},{"lineNumber":115,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":116,"author":{"gitID":"MuhdNurKamal"},"content":"                    MatricNumber.class.getSimpleName()));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"MuhdNurKamal"},"content":"        if (!MatricNumber.isValidMatricNumber(this.matricNumber)) {"},{"lineNumber":119,"author":{"gitID":"MuhdNurKamal"},"content":"            throw new IllegalValueException(MatricNumber.MESSAGE_MATRIC_NUMBER_CONSTRAINTS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"MuhdNurKamal"},"content":"        final MatricNumber matricNumber \u003d new MatricNumber(this.matricNumber);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"yash-chowdhary"},"content":"        if (!Group.isValidGroup(this.group)) {"},{"lineNumber":124,"author":{"gitID":"yash-chowdhary"},"content":"            throw new IllegalValueException(Group.MESSAGE_GROUP_CONSTRAINTS);"},{"lineNumber":125,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"yash-chowdhary"},"content":"        final Group group \u003d new Group(this.group);"},{"lineNumber":127,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":129,"author":{"gitID":"MuhdNurKamal"},"content":"        return new Person(name, phone, email, matricNumber, group, tags);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":146,"author":{"gitID":"MuhdNurKamal"},"content":"                \u0026\u0026 Objects.equals(matricNumber, otherPerson.matricNumber)"},{"lineNumber":147,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 Objects.equals(group, otherPerson.group)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":13,"yash-chowdhary":12,"-":125}},{"path":"src/main/java/seedu/address/model/group/exceptions/GroupCannotBeRemovedException.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.address.model.group.exceptions;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":" * Signals that the desired Group cannot be removed as it is a mandatory one."},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"public class GroupCannotBeRemovedException extends Exception {"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":7}},{"path":"src/main/java/seedu/address/model/group/exceptions/GroupNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.address.model.group.exceptions;"},{"lineNumber":2,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":3,"author":{"gitID":"yash-chowdhary"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"yash-chowdhary"},"content":" * Signals that the operation is unable to find the required Group"},{"lineNumber":5,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"public class GroupNotFoundException extends Exception {"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":7}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"import seedu.address.model.person.MatricNumber;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"                    new MatricNumber(\"A5215090A\"), new Group(\"logistics\"),"},{"lineNumber":25,"author":{"gitID":"-"},"content":"                    getTagSet(\"friends\")),"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"                    new MatricNumber(\"A0632713Q\"), new Group(\"production\"),"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                    getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":30,"author":{"gitID":"MuhdNurKamal"},"content":"                    new MatricNumber(\"A1010027G\"), new Group(\"exco\"),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                    getTagSet(\"neighbours\")),"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"                    new MatricNumber(\"A7251856A\"), new Group(\"marketing\"),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                    getTagSet(\"family\")),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":36,"author":{"gitID":"MuhdNurKamal"},"content":"                    new MatricNumber(\"A4960627S\"), new Group(\"pr\"),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                    getTagSet(\"classmates\")),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":39,"author":{"gitID":"MuhdNurKamal"},"content":"                    new MatricNumber(\"A2488865L\"), new Group(\"legal\"),"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                    getTagSet(\"colleagues\"))"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":7,"yash-chowdhary":1,"-":60}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"    private final MatricNumber matricNumber;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"    private Group group;"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"    private final HashMap\u003cString, Tag\u003e tags;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"MuhdNurKamal"},"content":"    public Person(Name name, Phone phone, Email email, MatricNumber matricNumber, Group group, Set\u003cTag\u003e tags) {"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"        requireAllNonNull(name, phone, email, matricNumber, group, tags);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":37,"author":{"gitID":"MuhdNurKamal"},"content":"        this.matricNumber \u003d matricNumber;"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"        this.group \u003d group;"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"        this.tags \u003d new HashMap\u003cString, Tag\u003e();"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"        setTags(tags);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"MuhdNurKamal"},"content":"    public MatricNumber getMatricNumber() {"},{"lineNumber":56,"author":{"gitID":"MuhdNurKamal"},"content":"        return matricNumber;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"yash-chowdhary"},"content":"    public Group getGroup() {"},{"lineNumber":60,"author":{"gitID":"yash-chowdhary"},"content":"        return group;"},{"lineNumber":61,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"    private void setTags(Set\u003cTag\u003e personTags) {"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"        Iterator itr \u003d personTags.iterator();"},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":"        while (itr.hasNext()) {"},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"            Tag tag \u003d (Tag) itr.next();"},{"lineNumber":68,"author":{"gitID":"amrut-prabhu"},"content":"            tags.put(tag.tagName, tag);"},{"lineNumber":69,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":77,"author":{"gitID":"amrut-prabhu"},"content":"        Set\u003cTag\u003e personTags \u003d new HashSet\u003cTag\u003e();"},{"lineNumber":78,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":79,"author":{"gitID":"amrut-prabhu"},"content":"        Set\u003cString\u003e tagNames \u003d tags.keySet();"},{"lineNumber":80,"author":{"gitID":"amrut-prabhu"},"content":"        Iterator itr \u003d tagNames.iterator();"},{"lineNumber":81,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":82,"author":{"gitID":"amrut-prabhu"},"content":"        while (itr.hasNext()) {"},{"lineNumber":83,"author":{"gitID":"amrut-prabhu"},"content":"            String key \u003d (String) itr.next();"},{"lineNumber":84,"author":{"gitID":"amrut-prabhu"},"content":"            personTags.add(tags.get(key));"},{"lineNumber":85,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":87,"author":{"gitID":"amrut-prabhu"},"content":"        return Collections.unmodifiableSet(personTags);"},{"lineNumber":88,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":90,"author":{"gitID":"amrut-prabhu"},"content":"    public boolean hasTag(Tag tag) {"},{"lineNumber":91,"author":{"gitID":"amrut-prabhu"},"content":"        return getTags().contains(tag);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":108,"author":{"gitID":"MuhdNurKamal"},"content":"                \u0026\u0026 otherPerson.getMatricNumber().equals(this.getMatricNumber());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":114,"author":{"gitID":"MuhdNurKamal"},"content":"        return Objects.hash(name, phone, email, matricNumber, group, tags);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":125,"author":{"gitID":"MuhdNurKamal"},"content":"                .append(\" MatricNumber: \")"},{"lineNumber":126,"author":{"gitID":"MuhdNurKamal"},"content":"                .append(getMatricNumber())"},{"lineNumber":127,"author":{"gitID":"yash-chowdhary"},"content":"                .append(\" Group: \")"},{"lineNumber":128,"author":{"gitID":"yash-chowdhary"},"content":"                .append(getGroup())"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":10,"amrut-prabhu":30,"yash-chowdhary":9,"-":85}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns true if tag is present in the tags list."},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"    //boolean containsTag(Tag tag);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":4,"-":24}},{"path":"src/main/java/seedu/address/logic/commands/DeleteTagCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":" * Removes a tag from all persons in the address book."},{"lineNumber":14,"author":{"gitID":"amrut-prabhu"},"content":" */"},{"lineNumber":15,"author":{"gitID":"amrut-prabhu"},"content":"public class DeleteTagCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":17,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String COMMAND_WORD \u003d \"deletetag\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"amrut-prabhu"},"content":"            + \": Removes the tag from all persons.\\n\""},{"lineNumber":21,"author":{"gitID":"amrut-prabhu"},"content":"            + \"Parameters: TAG (must be an existing tag)\\n\""},{"lineNumber":22,"author":{"gitID":"amrut-prabhu"},"content":"            + \"Example: \" + COMMAND_WORD + \" t/treasurer\";"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_DELETE_TAG_SUCCESS \u003d \"Tag Removed: %1$s\";"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"    public static final String MESSAGE_NON_EXISTENT_TAG \u003d \"The tag name provided does not exist\";"},{"lineNumber":26,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":27,"author":{"gitID":"amrut-prabhu"},"content":"    private Tag tagToDelete;"},{"lineNumber":28,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":29,"author":{"gitID":"amrut-prabhu"},"content":"    public DeleteTagCommand(Tag tagToDelete) {"},{"lineNumber":30,"author":{"gitID":"amrut-prabhu"},"content":"        this.tagToDelete \u003d tagToDelete;"},{"lineNumber":31,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":33,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"amrut-prabhu"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"        requireNonNull(tagToDelete);"},{"lineNumber":36,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":37,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"amrut-prabhu"},"content":"            model.deleteTag(tagToDelete);"},{"lineNumber":39,"author":{"gitID":"amrut-prabhu"},"content":"            return new CommandResult(String.format(MESSAGE_DELETE_TAG_SUCCESS, tagToDelete));"},{"lineNumber":40,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (TagNotFoundException tnfe) {"},{"lineNumber":41,"author":{"gitID":"amrut-prabhu"},"content":"            throw new CommandException(MESSAGE_NON_EXISTENT_TAG);"},{"lineNumber":42,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":47,"author":{"gitID":"amrut-prabhu"},"content":"        List\u003cTag\u003e lastShownList \u003d model.getFilteredTagList();"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":49,"author":{"gitID":"amrut-prabhu"},"content":"        if (!getMasterTagList().contains(tagToDelete)) {"},{"lineNumber":50,"author":{"gitID":"amrut-prabhu"},"content":"            throw new CommandException(MESSAGE_NON_EXISTENT_TAG);"},{"lineNumber":51,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"        int targetIndex \u003d lastShownList.indexOf(tagToDelete);"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"        tagToDelete \u003d lastShownList.get(targetIndex);"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"    private List\u003cTag\u003e getMasterTagList() {"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":"        return new ArrayList\u003c\u003e(model.getAddressBook().getTagList());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":"                || (other instanceof DeleteTagCommand // instanceof handles nulls"},{"lineNumber":65,"author":{"gitID":"amrut-prabhu"},"content":"                \u0026\u0026 this.tagToDelete.equals(((DeleteTagCommand) other).tagToDelete));"},{"lineNumber":66,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"amrut-prabhu"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":46,"-":21}},{"path":"src/main/java/seedu/address/model/person/MatricNumber.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"MuhdNurKamal"},"content":" * Represents a Person\u0027s matric number in the address book."},{"lineNumber":8,"author":{"gitID":"MuhdNurKamal"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidMatricNumber(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"MuhdNurKamal"},"content":"public class MatricNumber {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String MESSAGE_MATRIC_NUMBER_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"MuhdNurKamal"},"content":"            \"Person matric number must begin with one letter, 7 digits in the middle and a letter at the end\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"MuhdNurKamal"},"content":"    public static final String MATRIC_NUMBER_VALIDATION_REGEX \u003d \"^[aA]\\\\d{7}[a-zA-Z]$\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"MuhdNurKamal"},"content":"     * Constructs a {@code MatricNumber}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"MuhdNurKamal"},"content":"     * @param matricNumber A valid matric number."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"MuhdNurKamal"},"content":"    public MatricNumber(String matricNumber) {"},{"lineNumber":25,"author":{"gitID":"MuhdNurKamal"},"content":"        requireNonNull(matricNumber);"},{"lineNumber":26,"author":{"gitID":"MuhdNurKamal"},"content":"        checkArgument(isValidMatricNumber(matricNumber), MESSAGE_MATRIC_NUMBER_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"MuhdNurKamal"},"content":"        this.value \u003d matricNumber.toUpperCase();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person email."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"MuhdNurKamal"},"content":"    public static boolean isValidMatricNumber(String test) {"},{"lineNumber":34,"author":{"gitID":"MuhdNurKamal"},"content":"        return test.matches(MATRIC_NUMBER_VALIDATION_REGEX);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":45,"author":{"gitID":"MuhdNurKamal"},"content":"                || (other instanceof MatricNumber // instanceof handles nulls"},{"lineNumber":46,"author":{"gitID":"MuhdNurKamal"},"content":"                \u0026\u0026 this.value.equals(((MatricNumber) other).value)); // state check"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":16,"-":38}},{"path":"src/main/java/seedu/address/model/group/Group.java","lines":[{"lineNumber":1,"author":{"gitID":"yash-chowdhary"},"content":"package seedu.address.model.group;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":" * Represents a Person\u0027s Group in the address book"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidGroup(String)}"},{"lineNumber":9,"author":{"gitID":"yash-chowdhary"},"content":" */"},{"lineNumber":10,"author":{"gitID":"yash-chowdhary"},"content":"public class Group {"},{"lineNumber":11,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String MESSAGE_GROUP_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitID":"yash-chowdhary"},"content":"            \"Person groups should only contain alphanumeric characters, and it should not be blank\";"},{"lineNumber":13,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":14,"author":{"gitID":"yash-chowdhary"},"content":"    /*"},{"lineNumber":15,"author":{"gitID":"yash-chowdhary"},"content":"     * The first character of the group must not be a whitespace,"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String GROUP_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}]*\";"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":20,"author":{"gitID":"yash-chowdhary"},"content":"    public static final String DEFAULT_GROUP \u003d \"member\";"},{"lineNumber":21,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":22,"author":{"gitID":"yash-chowdhary"},"content":"    public final String groupName;"},{"lineNumber":23,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":24,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"yash-chowdhary"},"content":"     * Constructs a {@code Group}."},{"lineNumber":26,"author":{"gitID":"yash-chowdhary"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"yash-chowdhary"},"content":"     * @param group A valid group."},{"lineNumber":28,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"yash-chowdhary"},"content":"    public Group(String group) {"},{"lineNumber":30,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(group);"},{"lineNumber":31,"author":{"gitID":"yash-chowdhary"},"content":"        checkArgument(isValidGroup(group), MESSAGE_GROUP_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"yash-chowdhary"},"content":"        this.groupName \u003d group;"},{"lineNumber":33,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":35,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"yash-chowdhary"},"content":"     * Returns true if given string is a valid person group."},{"lineNumber":37,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"yash-chowdhary"},"content":"    public static Boolean isValidGroup(String test) {"},{"lineNumber":39,"author":{"gitID":"yash-chowdhary"},"content":"        return test.matches(GROUP_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":42,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"yash-chowdhary"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"yash-chowdhary"},"content":"        return groupName;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this    // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"yash-chowdhary"},"content":"                || (other instanceof Group  // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"yash-chowdhary"},"content":"                \u0026\u0026 this.groupName.equalsIgnoreCase(((Group) other).groupName));   // state check"},{"lineNumber":52,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":54,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"yash-chowdhary"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"yash-chowdhary"},"content":"        return groupName.hashCode();"},{"lineNumber":57,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"yash-chowdhary"},"content":"}"}],"authorContributionMap":{"yash-chowdhary":48,"-":10}},{"path":"src/main/java/seedu/address/model/tag/exceptions/TagNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"amrut-prabhu"},"content":"package seedu.address.model.tag.exceptions;"},{"lineNumber":2,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":3,"author":{"gitID":"amrut-prabhu"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"amrut-prabhu"},"content":" * Signals that the operation is unable to find the specified tag."},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":" */"},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"public class TagNotFoundException extends Exception {}"}],"authorContributionMap":{"amrut-prabhu":6}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":7,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.exceptions.GroupCannotBeRemovedException;"},{"lineNumber":8,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":12,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"amrut-prabhu"},"content":"    /** Removes the given tag {@code tag} for all persons in the club book. */"},{"lineNumber":54,"author":{"gitID":"amrut-prabhu"},"content":"    void deleteTag(Tag tag) throws TagNotFoundException;"},{"lineNumber":55,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":56,"author":{"gitID":"amrut-prabhu"},"content":"    /** Returns an unmodifiable view of the filtered tag list */"},{"lineNumber":57,"author":{"gitID":"amrut-prabhu"},"content":"    ObservableList\u003cTag\u003e getFilteredTagList();"},{"lineNumber":58,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":59,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"amrut-prabhu"},"content":"     * Updates the filter of the filtered tag list to filter by the given {@code predicate}."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"amrut-prabhu"},"content":"    void updateFilteredTagList(Predicate\u003cTag\u003e predicate);"},{"lineNumber":64,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":65,"author":{"gitID":"yash-chowdhary"},"content":"    void removeGroup(Group toRemove) throws GroupNotFoundException, GroupCannotBeRemovedException;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":12,"yash-chowdhary":4,"-":50}},{"path":"src/main/java/seedu/address/model/tag/UniqueTagList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A list of tags that enforces no nulls and uniqueness between its elements."},{"lineNumber":17,"author":{"gitID":"-"},"content":" *"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":19,"author":{"gitID":"-"},"content":" *"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * @see Tag#equals(Object)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UniqueTagList implements Iterable\u003cTag\u003e {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cTag\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Constructs empty TagList."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public UniqueTagList() {}"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Creates a UniqueTagList using given tags."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Enforces no nulls."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public UniqueTagList(Set\u003cTag\u003e tags) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireAllNonNull(tags);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        internalList.addAll(tags);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Returns all tags in this list as a Set."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"amrut-prabhu"},"content":"    private Set\u003cTag\u003e toSet() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Replaces the Tags in this list with those in the argument tag list."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        requireAllNonNull(tags);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        internalList.setAll(tags);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Ensures every tag in the argument list exists in this object."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void mergeFrom(UniqueTagList from) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        from.internalList.stream()"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                .filter(tag -\u003e !alreadyInside.contains(tag))"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .forEach(internalList::add);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent Tag as the given argument."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public boolean contains(Tag toCheck) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Adds a Tag to the list."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @throws DuplicateTagException if the Tag to add is a duplicate of an existing Tag in the list."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void add(Tag toAdd) throws DuplicateTagException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            throw new DuplicateTagException();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public Iterator\u003cTag\u003e iterator() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e asObservableList() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                || (other instanceof UniqueTagList // instanceof handles nulls"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniqueTagList) other).internalList));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public boolean equalsOrderInsensitive(UniqueTagList other) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public static class DuplicateTagException extends DuplicateDataException {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        protected DuplicateTagException() {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            super(\"Operation would result in duplicate tags\");"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":1,"-":141}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.exceptions.GroupCannotBeRemovedException;"},{"lineNumber":19,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":28,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":35,"author":{"gitID":"amrut-prabhu"},"content":"    private final FilteredList\u003cTag\u003e filteredTags;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":48,"author":{"gitID":"amrut-prabhu"},"content":"        filteredTags \u003d new FilteredList\u003c\u003e(this.addressBook.getTagList());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":79,"author":{"gitID":"amrut-prabhu"},"content":"        //updateTagList(person.getTags());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":91,"author":{"gitID":"amrut-prabhu"},"content":"        deleteUnusedTags();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"yash-chowdhary"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"yash-chowdhary"},"content":"    public void removeGroup(Group toRemove) throws GroupNotFoundException, GroupCannotBeRemovedException {"},{"lineNumber":97,"author":{"gitID":"yash-chowdhary"},"content":"        requireNonNull(toRemove);"},{"lineNumber":98,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":99,"author":{"gitID":"yash-chowdhary"},"content":"        addressBook.removeGroup(toRemove);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"amrut-prabhu"},"content":"    public void deleteTag(Tag tag) throws TagNotFoundException {"},{"lineNumber":105,"author":{"gitID":"amrut-prabhu"},"content":"        addressBook.deleteTag(tag);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":108,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":110,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"amrut-prabhu"},"content":"     * Removes those tags from the master tag list that no persons in the address book are tagged with."},{"lineNumber":112,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"amrut-prabhu"},"content":"    private void deleteUnusedTags() {"},{"lineNumber":114,"author":{"gitID":"amrut-prabhu"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(addressBook.getTagList());"},{"lineNumber":115,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":116,"author":{"gitID":"amrut-prabhu"},"content":"        for (Tag tag: tags) {"},{"lineNumber":117,"author":{"gitID":"amrut-prabhu"},"content":"            deleteTagIfUnused(tag);"},{"lineNumber":118,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":121,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"amrut-prabhu"},"content":"     * Removes {@code tag} from the master tag list if no persons in the address book are tagged with it."},{"lineNumber":123,"author":{"gitID":"amrut-prabhu"},"content":"     *"},{"lineNumber":124,"author":{"gitID":"amrut-prabhu"},"content":"     * @param tag Tag to remove if no persons are tagged with it"},{"lineNumber":125,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"amrut-prabhu"},"content":"    private void deleteTagIfUnused(Tag tag) {"},{"lineNumber":127,"author":{"gitID":"amrut-prabhu"},"content":"        if (isNotTaggedInPersons(tag)) {"},{"lineNumber":128,"author":{"gitID":"amrut-prabhu"},"content":"            try {"},{"lineNumber":129,"author":{"gitID":"amrut-prabhu"},"content":"                deleteTag(tag);"},{"lineNumber":130,"author":{"gitID":"amrut-prabhu"},"content":"            } catch (TagNotFoundException tnfe) {"},{"lineNumber":131,"author":{"gitID":"amrut-prabhu"},"content":"                throw new AssertionError(\"The tag cannot be missing.\");"},{"lineNumber":132,"author":{"gitID":"amrut-prabhu"},"content":"            }"},{"lineNumber":133,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":136,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns true is no person in the address book is tagged with {@code tag}."},{"lineNumber":138,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"amrut-prabhu"},"content":"    private boolean isNotTaggedInPersons(Tag tag) {"},{"lineNumber":140,"author":{"gitID":"amrut-prabhu"},"content":"        List\u003cPerson\u003e persons \u003d new ArrayList\u003c\u003e(addressBook.getPersonList());"},{"lineNumber":141,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":142,"author":{"gitID":"amrut-prabhu"},"content":"        for (Person person: persons) {"},{"lineNumber":143,"author":{"gitID":"amrut-prabhu"},"content":"            if (person.getTags().contains(tag)) {"},{"lineNumber":144,"author":{"gitID":"amrut-prabhu"},"content":"                return false;"},{"lineNumber":145,"author":{"gitID":"amrut-prabhu"},"content":"            }"},{"lineNumber":146,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"amrut-prabhu"},"content":"        return true;"},{"lineNumber":148,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"amrut-prabhu"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Tag List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":186,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":187,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns an unmodifiable view of the list of {@code Tag} backed by the internal list of"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":192,"author":{"gitID":"amrut-prabhu"},"content":"    public ObservableList\u003cTag\u003e getFilteredTagList() {"},{"lineNumber":193,"author":{"gitID":"amrut-prabhu"},"content":"        return FXCollections.unmodifiableObservableList(filteredTags);"},{"lineNumber":194,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":196,"author":{"gitID":"amrut-prabhu"},"content":"    @Override"},{"lineNumber":197,"author":{"gitID":"amrut-prabhu"},"content":"    public void updateFilteredTagList(Predicate\u003cTag\u003e predicate) {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":199,"author":{"gitID":"amrut-prabhu"},"content":"        filteredTags.setPredicate(predicate);"},{"lineNumber":200,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"amrut-prabhu":66,"yash-chowdhary":8,"-":128}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"amrut-prabhu"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":17,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.exceptions.GroupCannotBeRemovedException;"},{"lineNumber":18,"author":{"gitID":"yash-chowdhary"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":25,"author":{"gitID":"amrut-prabhu"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":99,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"amrut-prabhu"},"content":"        deletePersonTags(target);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":122,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":124,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":125,"author":{"gitID":"amrut-prabhu"},"content":"            addTargetPersonTags(target);"},{"lineNumber":126,"author":{"gitID":"amrut-prabhu"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":127,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":130,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Re-adds the tags of {@code target} that were removed from {@code tags}."},{"lineNumber":132,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"amrut-prabhu"},"content":"    private void addTargetPersonTags(Person target) {"},{"lineNumber":134,"author":{"gitID":"amrut-prabhu"},"content":"        Set\u003cTag\u003e allTags \u003d new HashSet\u003c\u003e(tags.asObservableList());"},{"lineNumber":135,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":136,"author":{"gitID":"amrut-prabhu"},"content":"        for (Tag tag: target.getTags()) {"},{"lineNumber":137,"author":{"gitID":"amrut-prabhu"},"content":"            allTags.add(tag);"},{"lineNumber":138,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":140,"author":{"gitID":"amrut-prabhu"},"content":"        tags.setTags(allTags);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":154,"author":{"gitID":"amrut-prabhu"},"content":"        final Map\u003cString, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":155,"author":{"gitID":"amrut-prabhu"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag.tagName, tag));"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":158,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":159,"author":{"gitID":"amrut-prabhu"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag.tagName)));"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":161,"author":{"gitID":"MuhdNurKamal"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getMatricNumber(), person.getGroup(),"},{"lineNumber":162,"author":{"gitID":"yash-chowdhary"},"content":"                    correctTagReferences);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":170,"author":{"gitID":"amrut-prabhu"},"content":"        deletePersonTags(key);"},{"lineNumber":171,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"amrut-prabhu"},"content":"     * Removes tags from master tag list {@code tags} that are unique to person {@code person}."},{"lineNumber":181,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"amrut-prabhu"},"content":"    private void deletePersonTags(Person person) {"},{"lineNumber":183,"author":{"gitID":"amrut-prabhu"},"content":"        List\u003cTag\u003e tagsToCheck \u003d tags.asObservableList().stream().collect(Collectors.toList());"},{"lineNumber":184,"author":{"gitID":"amrut-prabhu"},"content":"        Set\u003cTag\u003e newTags \u003d tagsToCheck.stream()"},{"lineNumber":185,"author":{"gitID":"amrut-prabhu"},"content":"                .filter(t -\u003e !isTagUniqueToPerson(t, person))"},{"lineNumber":186,"author":{"gitID":"amrut-prabhu"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":187,"author":{"gitID":"amrut-prabhu"},"content":"        tags.setTags(newTags);"},{"lineNumber":188,"author":{"gitID":"amrut-prabhu"},"content":"        /*"},{"lineNumber":189,"author":{"gitID":"amrut-prabhu"},"content":"        Iterator\u003cTag\u003e itr \u003d tagsToCheck.iterator();"},{"lineNumber":190,"author":{"gitID":"amrut-prabhu"},"content":"        while (itr.hasNext()) {"},{"lineNumber":191,"author":{"gitID":"amrut-prabhu"},"content":"            Tag tag \u003d itr.next();"},{"lineNumber":192,"author":{"gitID":"amrut-prabhu"},"content":"            if (isTagUniqueToPerson(tag, person)) {"},{"lineNumber":193,"author":{"gitID":"amrut-prabhu"},"content":"                deleteTag(tag);"},{"lineNumber":194,"author":{"gitID":"amrut-prabhu"},"content":"            }"},{"lineNumber":195,"author":{"gitID":"amrut-prabhu"},"content":"        }*/"},{"lineNumber":196,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":198,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns true if only {@code key} is tagged with {@code tag}."},{"lineNumber":200,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"amrut-prabhu"},"content":"    private boolean isTagUniqueToPerson(Tag tag, Person key) {"},{"lineNumber":202,"author":{"gitID":"amrut-prabhu"},"content":"        for (Person person : persons) {"},{"lineNumber":203,"author":{"gitID":"amrut-prabhu"},"content":"            if (person.hasTag(tag) \u0026\u0026 !person.equals(key)) {"},{"lineNumber":204,"author":{"gitID":"amrut-prabhu"},"content":"                return false;"},{"lineNumber":205,"author":{"gitID":"amrut-prabhu"},"content":"            }"},{"lineNumber":206,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"amrut-prabhu"},"content":"        return true;"},{"lineNumber":208,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"yash-chowdhary"},"content":"    //// tag-level operations"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"yash-chowdhary"},"content":"     * Removes the Group {@code toRemove} from the Club Book. Every member who was once a part of {@code toRemove}"},{"lineNumber":218,"author":{"gitID":"yash-chowdhary"},"content":"     * will be assigned the default group - \"member\"."},{"lineNumber":219,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":220,"author":{"gitID":"yash-chowdhary"},"content":"    public void removeGroup(Group toRemove) throws GroupCannotBeRemovedException, GroupNotFoundException {"},{"lineNumber":221,"author":{"gitID":"yash-chowdhary"},"content":"        Group notToBeDeleted \u003d new Group(\"member\");"},{"lineNumber":222,"author":{"gitID":"yash-chowdhary"},"content":"        if (toRemove.equals(notToBeDeleted)) {"},{"lineNumber":223,"author":{"gitID":"yash-chowdhary"},"content":"            throw new GroupCannotBeRemovedException();"},{"lineNumber":224,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":225,"author":{"gitID":"yash-chowdhary"},"content":"        Boolean isPresent \u003d false;"},{"lineNumber":226,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":227,"author":{"gitID":"yash-chowdhary"},"content":"        for (Person person : persons) {"},{"lineNumber":228,"author":{"gitID":"yash-chowdhary"},"content":"            if (person.getGroup().equals(toRemove)) {"},{"lineNumber":229,"author":{"gitID":"yash-chowdhary"},"content":"                isPresent \u003d true;"},{"lineNumber":230,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":231,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":233,"author":{"gitID":"yash-chowdhary"},"content":"            for (Person person : persons) {"},{"lineNumber":234,"author":{"gitID":"yash-chowdhary"},"content":"                removeGroupFromPerson(toRemove, person);"},{"lineNumber":235,"author":{"gitID":"yash-chowdhary"},"content":"            }"},{"lineNumber":236,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":237,"author":{"gitID":"yash-chowdhary"},"content":"            throw new AssertionError(\"Impossible: original person is obtained from the address book.\");"},{"lineNumber":238,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"yash-chowdhary"},"content":"        if (!isPresent) {"},{"lineNumber":240,"author":{"gitID":"yash-chowdhary"},"content":"            throw new GroupNotFoundException();"},{"lineNumber":241,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":244,"author":{"gitID":"yash-chowdhary"},"content":"    /**"},{"lineNumber":245,"author":{"gitID":"yash-chowdhary"},"content":"     * Removes the Group {@code toRemove} from the {@code person} if the person\u0027s group matches the one to be removed."},{"lineNumber":246,"author":{"gitID":"yash-chowdhary"},"content":"     */"},{"lineNumber":247,"author":{"gitID":"yash-chowdhary"},"content":"    private void removeGroupFromPerson(Group toRemove, Person person)"},{"lineNumber":248,"author":{"gitID":"yash-chowdhary"},"content":"            throws PersonNotFoundException {"},{"lineNumber":249,"author":{"gitID":"yash-chowdhary"},"content":"        if (!person.getGroup().toString().equalsIgnoreCase(toRemove.toString())) {"},{"lineNumber":250,"author":{"gitID":"yash-chowdhary"},"content":"            return;"},{"lineNumber":251,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":252,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":253,"author":{"gitID":"yash-chowdhary"},"content":"        Group defaultGroup \u003d new Group(Group.DEFAULT_GROUP);"},{"lineNumber":254,"author":{"gitID":"yash-chowdhary"},"content":"        Person newPerson \u003d new Person(person.getName(), person.getPhone(), person.getEmail(), person.getMatricNumber(),"},{"lineNumber":255,"author":{"gitID":"yash-chowdhary"},"content":"                defaultGroup, person.getTags());"},{"lineNumber":256,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":257,"author":{"gitID":"yash-chowdhary"},"content":"        try {"},{"lineNumber":258,"author":{"gitID":"yash-chowdhary"},"content":"            updatePerson(person, newPerson);"},{"lineNumber":259,"author":{"gitID":"yash-chowdhary"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":260,"author":{"gitID":"yash-chowdhary"},"content":"            throw new AssertionError(\"Deleting a person\u0027s group only should not result in a duplicate. \""},{"lineNumber":261,"author":{"gitID":"yash-chowdhary"},"content":"            + \"See Person#equals(Object).\");"},{"lineNumber":262,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":263,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":265,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":266,"author":{"gitID":"amrut-prabhu"},"content":"     * Removes {@code tagToDelete} for all persons in this {@code AddressBook}."},{"lineNumber":267,"author":{"gitID":"amrut-prabhu"},"content":"     * @param tagToDelete Tag to be removed"},{"lineNumber":268,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":269,"author":{"gitID":"amrut-prabhu"},"content":"    public void deleteTag(Tag tagToDelete) throws TagNotFoundException {"},{"lineNumber":270,"author":{"gitID":"amrut-prabhu"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003cTag\u003e(getTagList());"},{"lineNumber":271,"author":{"gitID":"amrut-prabhu"},"content":"        if (!tags.contains(tagToDelete)) {"},{"lineNumber":272,"author":{"gitID":"amrut-prabhu"},"content":"            throw new TagNotFoundException();"},{"lineNumber":273,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":274,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":275,"author":{"gitID":"amrut-prabhu"},"content":"        setTags(getListWithoutTag(tagToDelete));"},{"lineNumber":276,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":277,"author":{"gitID":"amrut-prabhu"},"content":"            for (Person person : persons) {"},{"lineNumber":278,"author":{"gitID":"amrut-prabhu"},"content":"                if (person.hasTag(tagToDelete)) {"},{"lineNumber":279,"author":{"gitID":"amrut-prabhu"},"content":"                    deleteTagFromPerson(tagToDelete, person);"},{"lineNumber":280,"author":{"gitID":"amrut-prabhu"},"content":"                }"},{"lineNumber":281,"author":{"gitID":"amrut-prabhu"},"content":"            }"},{"lineNumber":282,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":283,"author":{"gitID":"amrut-prabhu"},"content":"            throw new AssertionError(\"Impossible: original person is obtained from the address book.\");"},{"lineNumber":284,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":285,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":286,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":287,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":288,"author":{"gitID":"amrut-prabhu"},"content":"     * Returns a list of tags which does not contain {@code tagToRemove}."},{"lineNumber":289,"author":{"gitID":"amrut-prabhu"},"content":"     * @param tagToRemove Tag which should not be included in the tagToRemove list"},{"lineNumber":290,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":291,"author":{"gitID":"amrut-prabhu"},"content":"    private Set\u003cTag\u003e getListWithoutTag(Tag tagToRemove) {"},{"lineNumber":292,"author":{"gitID":"amrut-prabhu"},"content":"        Set\u003cTag\u003e newTagsList \u003d new HashSet\u003c\u003e();"},{"lineNumber":293,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":294,"author":{"gitID":"amrut-prabhu"},"content":"        Iterator\u003cTag\u003e itr \u003d tags.iterator();"},{"lineNumber":295,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":296,"author":{"gitID":"amrut-prabhu"},"content":"        while (itr.hasNext()) {"},{"lineNumber":297,"author":{"gitID":"amrut-prabhu"},"content":"            Tag tag \u003d itr.next();"},{"lineNumber":298,"author":{"gitID":"amrut-prabhu"},"content":"            if (!tag.equals(tagToRemove)) {"},{"lineNumber":299,"author":{"gitID":"amrut-prabhu"},"content":"                newTagsList.add(tag);"},{"lineNumber":300,"author":{"gitID":"amrut-prabhu"},"content":"            }"},{"lineNumber":301,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":302,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":303,"author":{"gitID":"amrut-prabhu"},"content":"        return newTagsList;"},{"lineNumber":304,"author":{"gitID":"amrut-prabhu"},"content":"    }"},{"lineNumber":305,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":306,"author":{"gitID":"amrut-prabhu"},"content":"    /**"},{"lineNumber":307,"author":{"gitID":"amrut-prabhu"},"content":"     * Removes {@code tag} from {@code person} in this {@code AddressBook}."},{"lineNumber":308,"author":{"gitID":"amrut-prabhu"},"content":"     * @throws PersonNotFoundException if the {@code person} is not in this {@code AddressBook}."},{"lineNumber":309,"author":{"gitID":"amrut-prabhu"},"content":"     */"},{"lineNumber":310,"author":{"gitID":"amrut-prabhu"},"content":"    private void deleteTagFromPerson(Tag tag, Person person) throws PersonNotFoundException {"},{"lineNumber":311,"author":{"gitID":"amrut-prabhu"},"content":"        Set\u003cTag\u003e personTags \u003d new HashSet\u003c\u003e(person.getTags());"},{"lineNumber":312,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":313,"author":{"gitID":"amrut-prabhu"},"content":"        if (!personTags.remove(tag)) {"},{"lineNumber":314,"author":{"gitID":"amrut-prabhu"},"content":"            return;"},{"lineNumber":315,"author":{"gitID":"amrut-prabhu"},"content":"        }"},{"lineNumber":316,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":317,"author":{"gitID":"amrut-prabhu"},"content":"        Person newPerson \u003d new Person(person.getName(), person.getPhone(),"},{"lineNumber":318,"author":{"gitID":"amrut-prabhu"},"content":"                person.getEmail(), person.getMatricNumber(),"},{"lineNumber":319,"author":{"gitID":"amrut-prabhu"},"content":"                person.getGroup(), personTags);"},{"lineNumber":320,"author":{"gitID":"amrut-prabhu"},"content":""},{"lineNumber":321,"author":{"gitID":"amrut-prabhu"},"content":"        try {"},{"lineNumber":322,"author":{"gitID":"amrut-prabhu"},"content":"            updatePerson(person, newPerson);"},{"lineNumber":323,"author":{"gitID":"amrut-prabhu"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":324,"author":{"gitID":"amrut-prabhu"},"content":"            throw new AssertionError(\"Modifying a person\u0027s tags only should not result in a duplicate. \""},{"lineNumber":325,"author":{"gitID":"amrut-prabhu"},"content":"                    + \"See Person#equals(Object).\");"},{"lineNumber":326,"author":{"gitID":"yash-chowdhary"},"content":"        }"},{"lineNumber":327,"author":{"gitID":"yash-chowdhary"},"content":"    }"},{"lineNumber":328,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":332,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":333,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":334,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":335,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":338,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":339,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":340,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":343,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":344,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":345,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":348,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":349,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":350,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":351,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":352,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":353,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"yash-chowdhary"},"content":""},{"lineNumber":356,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":357,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":358,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":359,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":360,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":361,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"MuhdNurKamal":1,"amrut-prabhu":118,"yash-chowdhary":58,"-":184}}]
